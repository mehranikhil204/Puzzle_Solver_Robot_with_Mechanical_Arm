
Grid Solver 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000274  00800200  0000ca0a  0000ca9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ca0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800474  00800474  0000cd12  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  0000cd14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000f108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000f870  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c79  00000000  00000000  0000f910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000335  00000000  00000000  00013589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e7  00000000  00000000  000138be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e0  00000000  00000000  000152a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00015a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ffd  00000000  00000000  00016014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_5>
      18:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e0       	ldi	r30, 0x0A	; 10
      fc:	fa ec       	ldi	r31, 0xCA	; 202
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 37       	cpi	r26, 0x74	; 116
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	a4 e7       	ldi	r26, 0x74	; 116
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 3e       	cpi	r26, 0xEB	; 235
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 a8 19 	call	0x3350	; 0x3350 <main>
     122:	0c 94 03 65 	jmp	0xca06	; 0xca06 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	a0 e8       	ldi	r26, 0x80	; 128
     14a:	bf e3       	ldi	r27, 0x3F	; 63
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	ab 83       	std	Y+3, r26	; 0x03
     152:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	26 e6       	ldi	r18, 0x66	; 102
     15e:	36 e6       	ldi	r19, 0x66	; 102
     160:	46 e6       	ldi	r20, 0x66	; 102
     162:	55 e4       	ldi	r21, 0x45	; 69
     164:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	9e 83       	std	Y+6, r25	; 0x06
     170:	af 83       	std	Y+7, r26	; 0x07
     172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     18a:	88 23       	and	r24, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <lcd_set_4bit+0x66>
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	11 23       	and	r17, r17
     192:	29 f0       	breq	.+10     	; 0x19e <lcd_set_4bit+0x74>
		__ticks = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	46 c0       	rjmp	.+140    	; 0x22a <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	3f ef       	ldi	r19, 0xFF	; 255
     1ac:	4f e7       	ldi	r20, 0x7F	; 127
     1ae:	57 e4       	ldi	r21, 0x47	; 71
     1b0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <lcd_set_4bit+0x90>
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	11 23       	and	r17, r17
     1bc:	61 f1       	breq	.+88     	; 0x216 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1be:	69 81       	ldd	r22, Y+1	; 0x01
     1c0:	7a 81       	ldd	r23, Y+2	; 0x02
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	9a 87       	std	Y+10, r25	; 0x0a
     1e4:	89 87       	std	Y+9, r24	; 0x09
     1e6:	12 c0       	rjmp	.+36     	; 0x20c <lcd_set_4bit+0xe2>
     1e8:	80 e7       	ldi	r24, 0x70	; 112
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9c 87       	std	Y+12, r25	; 0x0c
     1ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f4:	8c 01       	movw	r16, r24
     1f6:	c8 01       	movw	r24, r16
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0xce>
     1fc:	8c 01       	movw	r16, r24
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
     200:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	51 f7       	brne	.-44     	; 0x1e8 <lcd_set_4bit+0xbe>
     214:	17 c0       	rjmp	.+46     	; 0x244 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	9e 87       	std	Y+14, r25	; 0x0e
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	8c 01       	movw	r16, r24
     238:	f8 01       	movw	r30, r16
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x110>
     23e:	8f 01       	movw	r16, r30
     240:	1e 87       	std	Y+14, r17	; 0x0e
     242:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e2       	ldi	r18, 0x28	; 40
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2e 7f       	andi	r18, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     256:	88 e2       	ldi	r24, 0x28	; 40
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e2       	ldi	r18, 0x28	; 40
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	2d 7f       	andi	r18, 0xFD	; 253
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     268:	88 e2       	ldi	r24, 0x28	; 40
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	28 e2       	ldi	r18, 0x28	; 40
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	24 60       	ori	r18, 0x04	; 4
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b0 e4       	ldi	r27, 0x40	; 64
     28c:	8f 87       	std	Y+15, r24	; 0x0f
     28e:	98 8b       	std	Y+16, r25	; 0x10
     290:	a9 8b       	std	Y+17, r26	; 0x11
     292:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     294:	6f 85       	ldd	r22, Y+15	; 0x0f
     296:	78 89       	ldd	r23, Y+16	; 0x10
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	9a 89       	ldd	r25, Y+18	; 0x12
     29c:	26 e6       	ldi	r18, 0x66	; 102
     29e:	36 e6       	ldi	r19, 0x66	; 102
     2a0:	46 e6       	ldi	r20, 0x66	; 102
     2a2:	55 e4       	ldi	r21, 0x45	; 69
     2a4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8b 8b       	std	Y+19, r24	; 0x13
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	ad 8b       	std	Y+21, r26	; 0x15
     2b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	6b 89       	ldd	r22, Y+19	; 0x13
     2b8:	7c 89       	ldd	r23, Y+20	; 0x14
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <lcd_set_4bit+0x1a6>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	29 f0       	breq	.+10     	; 0x2de <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	46 c0       	rjmp	.+140    	; 0x36a <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	7c 89       	ldd	r23, Y+20	; 0x14
     2e4:	8d 89       	ldd	r24, Y+21	; 0x15
     2e6:	9e 89       	ldd	r25, Y+22	; 0x16
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <lcd_set_4bit+0x1d0>
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	11 23       	and	r17, r17
     2fc:	61 f1       	breq	.+88     	; 0x356 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     300:	78 89       	ldd	r23, Y+16	; 0x10
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	9a 89       	ldd	r25, Y+18	; 0x12
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	8f 8b       	std	Y+23, r24	; 0x17
     326:	12 c0       	rjmp	.+36     	; 0x34c <lcd_set_4bit+0x222>
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9a 8f       	std	Y+26, r25	; 0x1a
     32e:	89 8f       	std	Y+25, r24	; 0x19
     330:	89 8d       	ldd	r24, Y+25	; 0x19
     332:	9a 8d       	ldd	r25, Y+26	; 0x1a
     334:	8c 01       	movw	r16, r24
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_set_4bit+0x20e>
     33c:	8c 01       	movw	r16, r24
     33e:	1a 8f       	std	Y+26, r17	; 0x1a
     340:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	8f 89       	ldd	r24, Y+23	; 0x17
     344:	98 8d       	ldd	r25, Y+24	; 0x18
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	98 8f       	std	Y+24, r25	; 0x18
     34a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	51 f7       	brne	.-44     	; 0x328 <lcd_set_4bit+0x1fe>
     354:	17 c0       	rjmp	.+46     	; 0x384 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	9c 8f       	std	Y+28, r25	; 0x1c
     370:	8b 8f       	std	Y+27, r24	; 0x1b
     372:	8b 8d       	ldd	r24, Y+27	; 0x1b
     374:	9c 8d       	ldd	r25, Y+28	; 0x1c
     376:	8c 01       	movw	r16, r24
     378:	f8 01       	movw	r30, r16
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_set_4bit+0x250>
     37e:	8f 01       	movw	r16, r30
     380:	1c 8f       	std	Y+28, r17	; 0x1c
     382:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 e2       	ldi	r18, 0x28	; 40
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2b 7f       	andi	r18, 0xFB	; 251
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e8       	ldi	r26, 0x80	; 128
     39c:	bf e3       	ldi	r27, 0x3F	; 63
     39e:	8d 8f       	std	Y+29, r24	; 0x1d
     3a0:	9e 8f       	std	Y+30, r25	; 0x1e
     3a2:	af 8f       	std	Y+31, r26	; 0x1f
     3a4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ac:	98 a1       	lds	r25, 0x48
     3ae:	26 e6       	ldi	r18, 0x66	; 102
     3b0:	36 e6       	ldi	r19, 0x66	; 102
     3b2:	46 e6       	ldi	r20, 0x66	; 102
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	89 a3       	lds	r24, 0x59
     3c0:	9a a3       	lds	r25, 0x5a
     3c2:	ab a3       	lds	r26, 0x5b
     3c4:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	69 a1       	lds	r22, 0x49
     3ca:	7a a1       	lds	r23, 0x4a
     3cc:	8b a1       	lds	r24, 0x4b
     3ce:	9c a1       	lds	r25, 0x4c
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_set_4bit+0x2b8>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e a3       	lds	r25, 0x5e
     3ec:	8d a3       	lds	r24, 0x5d
     3ee:	46 c0       	rjmp	.+140    	; 0x47c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	69 a1       	lds	r22, 0x49
     3f4:	7a a1       	lds	r23, 0x4a
     3f6:	8b a1       	lds	r24, 0x4b
     3f8:	9c a1       	lds	r25, 0x4c
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	3f ef       	ldi	r19, 0xFF	; 255
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	57 e4       	ldi	r21, 0x47	; 71
     402:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     406:	18 16       	cp	r1, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <lcd_set_4bit+0x2e2>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	11 23       	and	r17, r17
     40e:	61 f1       	breq	.+88     	; 0x468 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     410:	6d 8d       	ldd	r22, Y+29	; 0x1d
     412:	7e 8d       	ldd	r23, Y+30	; 0x1e
     414:	8f 8d       	ldd	r24, Y+31	; 0x1f
     416:	98 a1       	lds	r25, 0x48
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e a3       	lds	r25, 0x5e
     436:	8d a3       	lds	r24, 0x5d
     438:	12 c0       	rjmp	.+36     	; 0x45e <lcd_set_4bit+0x334>
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 a7       	lds	r25, 0x78
     440:	8f a3       	lds	r24, 0x5f
     442:	8f a1       	lds	r24, 0x4f
     444:	98 a5       	lds	r25, 0x68
     446:	8c 01       	movw	r16, r24
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_set_4bit+0x320>
     44e:	8c 01       	movw	r16, r24
     450:	18 a7       	lds	r17, 0x78
     452:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     454:	8d a1       	lds	r24, 0x4d
     456:	9e a1       	lds	r25, 0x4e
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	9e a3       	lds	r25, 0x5e
     45c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	8d a1       	lds	r24, 0x4d
     460:	9e a1       	lds	r25, 0x4e
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f7       	brne	.-44     	; 0x43a <lcd_set_4bit+0x310>
     466:	17 c0       	rjmp	.+46     	; 0x496 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     468:	69 a1       	lds	r22, 0x49
     46a:	7a a1       	lds	r23, 0x4a
     46c:	8b a1       	lds	r24, 0x4b
     46e:	9c a1       	lds	r25, 0x4c
     470:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	8d a1       	lds	r24, 0x4d
     47e:	9e a1       	lds	r25, 0x4e
     480:	9a a7       	lds	r25, 0x7a
     482:	89 a7       	lds	r24, 0x79
     484:	89 a5       	lds	r24, 0x69
     486:	9a a5       	lds	r25, 0x6a
     488:	8c 01       	movw	r16, r24
     48a:	f8 01       	movw	r30, r16
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x362>
     490:	8f 01       	movw	r16, r30
     492:	1a a7       	lds	r17, 0x7a
     494:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e2       	ldi	r18, 0x28	; 40
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e2       	ldi	r18, 0x28	; 40
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2d 7f       	andi	r18, 0xFD	; 253
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     4ba:	88 e2       	ldi	r24, 0x28	; 40
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     4c4:	88 e2       	ldi	r24, 0x28	; 40
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	20 81       	ld	r18, Z
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 ea       	ldi	r26, 0xA0	; 160
     4dc:	b0 e4       	ldi	r27, 0x40	; 64
     4de:	8b a7       	lds	r24, 0x7b
     4e0:	9c a7       	lds	r25, 0x7c
     4e2:	ad a7       	lds	r26, 0x7d
     4e4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	6b a5       	lds	r22, 0x6b
     4e8:	7c a5       	lds	r23, 0x6c
     4ea:	8d a5       	lds	r24, 0x6d
     4ec:	9e a5       	lds	r25, 0x6e
     4ee:	26 e6       	ldi	r18, 0x66	; 102
     4f0:	36 e6       	ldi	r19, 0x66	; 102
     4f2:	46 e6       	ldi	r20, 0x66	; 102
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	8f a7       	lds	r24, 0x7f
     500:	98 ab       	sts	0x58, r25
     502:	a9 ab       	sts	0x59, r26
     504:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     506:	11 e0       	ldi	r17, 0x01	; 1
     508:	6f a5       	lds	r22, 0x6f
     50a:	78 a9       	sts	0x48, r23
     50c:	89 a9       	sts	0x49, r24
     50e:	9a a9       	sts	0x4a, r25
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x3f8>
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	11 23       	and	r17, r17
     524:	29 f0       	breq	.+10     	; 0x530 <lcd_set_4bit+0x406>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c ab       	sts	0x5c, r25
     52c:	8b ab       	sts	0x5b, r24
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f a5       	lds	r22, 0x6f
     534:	78 a9       	sts	0x48, r23
     536:	89 a9       	sts	0x49, r24
     538:	9a a9       	sts	0x4a, r25
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <lcd_set_4bit+0x422>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	11 23       	and	r17, r17
     54e:	61 f1       	breq	.+88     	; 0x5a8 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     550:	6b a5       	lds	r22, 0x6b
     552:	7c a5       	lds	r23, 0x6c
     554:	8d a5       	lds	r24, 0x6d
     556:	9e a5       	lds	r25, 0x6e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	9c ab       	sts	0x5c, r25
     576:	8b ab       	sts	0x5b, r24
     578:	12 c0       	rjmp	.+36     	; 0x59e <lcd_set_4bit+0x474>
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9e ab       	sts	0x5e, r25
     580:	8d ab       	sts	0x5d, r24
     582:	8d a9       	sts	0x4d, r24
     584:	9e a9       	sts	0x4e, r25
     586:	8c 01       	movw	r16, r24
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_set_4bit+0x460>
     58e:	8c 01       	movw	r16, r24
     590:	1e ab       	sts	0x5e, r17
     592:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     594:	8b a9       	sts	0x4b, r24
     596:	9c a9       	sts	0x4c, r25
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	9c ab       	sts	0x5c, r25
     59c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	8b a9       	sts	0x4b, r24
     5a0:	9c a9       	sts	0x4c, r25
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	51 f7       	brne	.-44     	; 0x57a <lcd_set_4bit+0x450>
     5a6:	17 c0       	rjmp	.+46     	; 0x5d6 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	6f a5       	lds	r22, 0x6f
     5aa:	78 a9       	sts	0x48, r23
     5ac:	89 a9       	sts	0x49, r24
     5ae:	9a a9       	sts	0x4a, r25
     5b0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	8b a9       	sts	0x4b, r24
     5be:	9c a9       	sts	0x4c, r25
     5c0:	98 af       	sts	0x78, r25
     5c2:	8f ab       	sts	0x5f, r24
     5c4:	8f a9       	sts	0x4f, r24
     5c6:	98 ad       	sts	0x68, r25
     5c8:	8c 01       	movw	r16, r24
     5ca:	f8 01       	movw	r30, r16
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_set_4bit+0x4a2>
     5d0:	8f 01       	movw	r16, r30
     5d2:	18 af       	sts	0x78, r17
     5d4:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2b 7f       	andi	r18, 0xFB	; 251
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e8       	ldi	r26, 0x80	; 128
     5ee:	bf e3       	ldi	r27, 0x3F	; 63
     5f0:	89 af       	sts	0x79, r24
     5f2:	9a af       	sts	0x7a, r25
     5f4:	ab af       	sts	0x7b, r26
     5f6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	69 ad       	sts	0x69, r22
     5fa:	7a ad       	sts	0x6a, r23
     5fc:	8b ad       	sts	0x6b, r24
     5fe:	9c ad       	sts	0x6c, r25
     600:	26 e6       	ldi	r18, 0x66	; 102
     602:	36 e6       	ldi	r19, 0x66	; 102
     604:	46 e6       	ldi	r20, 0x66	; 102
     606:	55 e4       	ldi	r21, 0x45	; 69
     608:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	23 5c       	subi	r18, 0xC3	; 195
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	cd 96       	adiw	r24, 0x3d	; 61
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <lcd_set_4bit+0x518>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	11 23       	and	r17, r17
     644:	49 f0       	breq	.+18     	; 0x658 <lcd_set_4bit+0x52e>
		__ticks = 1;
     646:	ce 01       	movw	r24, r28
     648:	8f 5b       	subi	r24, 0xBF	; 191
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	6e c0       	rjmp	.+220    	; 0x734 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	cd 96       	adiw	r24, 0x3d	; 61
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	57 e4       	ldi	r21, 0x47	; 71
     670:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <lcd_set_4bit+0x550>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	11 23       	and	r17, r17
     67c:	09 f4       	brne	.+2      	; 0x680 <lcd_set_4bit+0x556>
     67e:	49 c0       	rjmp	.+146    	; 0x712 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	69 ad       	sts	0x69, r22
     682:	7a ad       	sts	0x6a, r23
     684:	8b ad       	sts	0x6b, r24
     686:	9c ad       	sts	0x6c, r25
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8e 01       	movw	r16, r28
     69a:	0f 5b       	subi	r16, 0xBF	; 191
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	f8 01       	movw	r30, r16
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	27 c0       	rjmp	.+78     	; 0x700 <lcd_set_4bit+0x5d6>
     6b2:	ce 01       	movw	r24, r28
     6b4:	8d 5b       	subi	r24, 0xBD	; 189
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	20 e7       	ldi	r18, 0x70	; 112
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
     6c2:	ce 01       	movw	r24, r28
     6c4:	8d 5b       	subi	r24, 0xBD	; 189
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	8c 01       	movw	r16, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_set_4bit+0x5a8>
     6d6:	8c 01       	movw	r16, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	8d 5b       	subi	r24, 0xBD	; 189
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	11 83       	std	Z+1, r17	; 0x01
     6e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	ce 01       	movw	r24, r28
     6e6:	8f 5b       	subi	r24, 0xBF	; 191
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	9e 01       	movw	r18, r28
     6ec:	2f 5b       	subi	r18, 0xBF	; 191
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	ce 01       	movw	r24, r28
     702:	8f 5b       	subi	r24, 0xBF	; 191
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f6       	brne	.-94     	; 0x6b2 <lcd_set_4bit+0x588>
     710:	2e c0       	rjmp	.+92     	; 0x76e <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	8e 01       	movw	r16, r28
     714:	0f 5b       	subi	r16, 0xBF	; 191
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	cd 96       	adiw	r24, 0x3d	; 61
     71c:	fc 01       	movw	r30, r24
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	ce 01       	movw	r24, r28
     736:	8b 5b       	subi	r24, 0xBB	; 187
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5b       	subi	r18, 0xBF	; 191
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
     74c:	ce 01       	movw	r24, r28
     74e:	8b 5b       	subi	r24, 0xBB	; 187
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	8c 01       	movw	r16, r24
     75a:	c8 01       	movw	r24, r16
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x632>
     760:	8c 01       	movw	r16, r24
     762:	ce 01       	movw	r24, r28
     764:	8b 5b       	subi	r24, 0xBB	; 187
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	11 83       	std	Z+1, r17	; 0x01
     76c:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	28 e2       	ldi	r18, 0x28	; 40
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	88 e2       	ldi	r24, 0x28	; 40
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 e2       	ldi	r18, 0x28	; 40
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	2d 7f       	andi	r18, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	24 60       	ori	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	9e 01       	movw	r18, r28
     7b0:	29 5b       	subi	r18, 0xB9	; 185
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 ea       	ldi	r26, 0xA0	; 160
     7ba:	b0 e4       	ldi	r27, 0x40	; 64
     7bc:	f9 01       	movw	r30, r18
     7be:	80 83       	st	Z, r24
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	a2 83       	std	Z+2, r26	; 0x02
     7c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	05 5b       	subi	r16, 0xB5	; 181
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	89 5b       	subi	r24, 0xB9	; 185
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 e6       	ldi	r20, 0x66	; 102
     7e2:	55 e4       	ldi	r21, 0x45	; 69
     7e4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 83       	st	Z, r24
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	a2 83       	std	Z+2, r26	; 0x02
     7f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7f6:	ce 01       	movw	r24, r28
     7f8:	85 5b       	subi	r24, 0xB5	; 181
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	93 81       	ldd	r25, Z+3	; 0x03
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <lcd_set_4bit+0x6f0>
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <lcd_set_4bit+0x706>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	74 c0       	rjmp	.+232    	; 0x918 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <lcd_set_4bit+0x72a>
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	11 23       	and	r17, r17
     856:	09 f4       	brne	.+2      	; 0x85a <lcd_set_4bit+0x730>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	ce 01       	movw	r24, r28
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <lcd_set_4bit+0x7b8>
     894:	ce 01       	movw	r24, r28
     896:	8f 5a       	subi	r24, 0xAF	; 175
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	20 e7       	ldi	r18, 0x70	; 112
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	fc 01       	movw	r30, r24
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ce 01       	movw	r24, r28
     8a6:	8f 5a       	subi	r24, 0xAF	; 175
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	8c 01       	movw	r16, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_set_4bit+0x78a>
     8b8:	8c 01       	movw	r16, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 83       	std	Z+1, r17	; 0x01
     8c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	ce 01       	movw	r24, r28
     8c8:	81 5b       	subi	r24, 0xB1	; 177
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	9e 01       	movw	r18, r28
     8ce:	21 5b       	subi	r18, 0xB1	; 177
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	ce 01       	movw	r24, r28
     8e4:	81 5b       	subi	r24, 0xB1	; 177
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	89 f6       	brne	.-94     	; 0x894 <lcd_set_4bit+0x76a>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	8e 01       	movw	r16, r28
     8f6:	01 5b       	subi	r16, 0xB1	; 177
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	85 5b       	subi	r24, 0xB5	; 181
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	ce 01       	movw	r24, r28
     91a:	8d 5a       	subi	r24, 0xAD	; 173
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	9e 01       	movw	r18, r28
     920:	21 5b       	subi	r18, 0xB1	; 177
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	ce 01       	movw	r24, r28
     932:	8d 5a       	subi	r24, 0xAD	; 173
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	8c 01       	movw	r16, r24
     93e:	c8 01       	movw	r24, r16
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <lcd_set_4bit+0x816>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	8d 5a       	subi	r24, 0xAD	; 173
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	11 83       	std	Z+1, r17	; 0x01
     950:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 e2       	ldi	r18, 0x28	; 40
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	9e 01       	movw	r18, r28
     966:	2b 5a       	subi	r18, 0xAB	; 171
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	8e 01       	movw	r16, r28
     97e:	07 5a       	subi	r16, 0xA7	; 167
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	8b 5a       	subi	r24, 0xAB	; 171
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	fc 01       	movw	r30, r24
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	26 e6       	ldi	r18, 0x66	; 102
     994:	36 e6       	ldi	r19, 0x66	; 102
     996:	46 e6       	ldi	r20, 0x66	; 102
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	a2 83       	std	Z+2, r26	; 0x02
     9aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 5a       	subi	r24, 0xA7	; 167
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	60 81       	ld	r22, Z
     9b8:	71 81       	ldd	r23, Z+1	; 0x01
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_set_4bit+0x8a6>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	11 23       	and	r17, r17
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5a       	subi	r24, 0xA3	; 163
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	74 c0       	rjmp	.+232    	; 0xace <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9e6:	ce 01       	movw	r24, r28
     9e8:	87 5a       	subi	r24, 0xA7	; 167
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f0       	brlt	.+2      	; 0xa0a <lcd_set_4bit+0x8e0>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	11 23       	and	r17, r17
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_set_4bit+0x8e6>
     a0e:	4d c0       	rjmp	.+154    	; 0xaaa <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5a       	subi	r24, 0xAB	; 171
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8e 01       	movw	r16, r28
     a32:	03 5a       	subi	r16, 0xA3	; 163
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	f8 01       	movw	r30, r16
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	27 c0       	rjmp	.+78     	; 0xa98 <lcd_set_4bit+0x96e>
     a4a:	ce 01       	movw	r24, r28
     a4c:	81 5a       	subi	r24, 0xA1	; 161
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ce 01       	movw	r24, r28
     a5c:	81 5a       	subi	r24, 0xA1	; 161
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	8c 01       	movw	r16, r24
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x940>
     a6e:	8c 01       	movw	r16, r24
     a70:	ce 01       	movw	r24, r28
     a72:	81 5a       	subi	r24, 0xA1	; 161
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	11 83       	std	Z+1, r17	; 0x01
     a7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 5a       	subi	r24, 0xA3	; 163
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	23 5a       	subi	r18, 0xA3	; 163
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	ce 01       	movw	r24, r28
     a9a:	83 5a       	subi	r24, 0xA3	; 163
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	89 f6       	brne	.-94     	; 0xa4a <lcd_set_4bit+0x920>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5a       	subi	r16, 0xA3	; 163
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5a       	subi	r24, 0xA7	; 167
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	f8 01       	movw	r30, r16
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	ce 01       	movw	r24, r28
     ad0:	8f 59       	subi	r24, 0x9F	; 159
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	9e 01       	movw	r18, r28
     ad6:	23 5a       	subi	r18, 0xA3	; 163
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	ce 01       	movw	r24, r28
     ae8:	8f 59       	subi	r24, 0x9F	; 159
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8c 01       	movw	r16, r24
     af4:	c8 01       	movw	r24, r16
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_set_4bit+0x9cc>
     afa:	8c 01       	movw	r16, r24
     afc:	ce 01       	movw	r24, r28
     afe:	8f 59       	subi	r24, 0x9F	; 159
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	11 83       	std	Z+1, r17	; 0x01
     b06:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	20 e2       	ldi	r18, 0x20	; 32
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	28 e2       	ldi	r18, 0x28	; 40
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	24 60       	ori	r18, 0x04	; 4
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	9e 01       	movw	r18, r28
     b4a:	2d 59       	subi	r18, 0x9D	; 157
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 ea       	ldi	r26, 0xA0	; 160
     b54:	b0 e4       	ldi	r27, 0x40	; 64
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	09 59       	subi	r16, 0x99	; 153
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ce 01       	movw	r24, r28
     b68:	8d 59       	subi	r24, 0x9D	; 157
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	26 e6       	ldi	r18, 0x66	; 102
     b78:	36 e6       	ldi	r19, 0x66	; 102
     b7a:	46 e6       	ldi	r20, 0x66	; 102
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	f8 01       	movw	r30, r16
     b88:	80 83       	st	Z, r24
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	a2 83       	std	Z+2, r26	; 0x02
     b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b90:	ce 01       	movw	r24, r28
     b92:	89 59       	subi	r24, 0x99	; 153
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <lcd_set_4bit+0xa8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	11 23       	and	r17, r17
     bb6:	49 f0       	breq	.+18     	; 0xbca <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	85 59       	subi	r24, 0x95	; 149
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	74 c0       	rjmp	.+232    	; 0xcb2 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	89 59       	subi	r24, 0x99	; 153
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <lcd_set_4bit+0xac4>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_set_4bit+0xaca>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 59       	subi	r24, 0x9D	; 157
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8e 01       	movw	r16, r28
     c16:	05 59       	subi	r16, 0x95	; 149
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <lcd_set_4bit+0xb52>
     c2e:	ce 01       	movw	r24, r28
     c30:	83 59       	subi	r24, 0x93	; 147
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	20 e7       	ldi	r18, 0x70	; 112
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	20 83       	st	Z, r18
     c3e:	ce 01       	movw	r24, r28
     c40:	83 59       	subi	r24, 0x93	; 147
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	8c 01       	movw	r16, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_set_4bit+0xb24>
     c52:	8c 01       	movw	r16, r24
     c54:	ce 01       	movw	r24, r28
     c56:	83 59       	subi	r24, 0x93	; 147
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 83       	std	Z+1, r17	; 0x01
     c5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	ce 01       	movw	r24, r28
     c62:	85 59       	subi	r24, 0x95	; 149
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	25 59       	subi	r18, 0x95	; 149
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 59       	subi	r24, 0x95	; 149
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	89 f6       	brne	.-94     	; 0xc2e <lcd_set_4bit+0xb04>
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 59       	subi	r16, 0x95	; 149
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	89 59       	subi	r24, 0x99	; 153
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	ce 01       	movw	r24, r28
     cb4:	81 59       	subi	r24, 0x91	; 145
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	25 59       	subi	r18, 0x95	; 149
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	ce 01       	movw	r24, r28
     ccc:	81 59       	subi	r24, 0x91	; 145
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	8c 01       	movw	r16, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <lcd_set_4bit+0xbb0>
     cde:	8c 01       	movw	r16, r24
     ce0:	ce 01       	movw	r24, r28
     ce2:	81 59       	subi	r24, 0x91	; 145
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 83       	std	Z+1, r17	; 0x01
     cea:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	28 e2       	ldi	r18, 0x28	; 40
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	2b 7f       	andi	r18, 0xFB	; 251
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18

	
}
     cfe:	c0 59       	subi	r28, 0x90	; 144
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2e 97       	sbiw	r28, 0x0e	; 14
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     d2e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e8       	ldi	r26, 0x80	; 128
     d38:	bf e3       	ldi	r27, 0x3F	; 63
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	ab 83       	std	Y+3, r26	; 0x03
     d40:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	26 e6       	ldi	r18, 0x66	; 102
     d4c:	36 e6       	ldi	r19, 0x66	; 102
     d4e:	46 e6       	ldi	r20, 0x66	; 102
     d50:	55 e4       	ldi	r21, 0x45	; 69
     d52:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	af 83       	std	Y+7, r26	; 0x07
     d60:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d62:	11 e0       	ldi	r17, 0x01	; 1
     d64:	6d 81       	ldd	r22, Y+5	; 0x05
     d66:	7e 81       	ldd	r23, Y+6	; 0x06
     d68:	8f 81       	ldd	r24, Y+7	; 0x07
     d6a:	98 85       	ldd	r25, Y+8	; 0x08
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <lcd_init+0x68>
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	11 23       	and	r17, r17
     d80:	29 f0       	breq	.+10     	; 0xd8c <lcd_init+0x76>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9a 87       	std	Y+10, r25	; 0x0a
     d88:	89 87       	std	Y+9, r24	; 0x09
     d8a:	46 c0       	rjmp	.+140    	; 0xe18 <lcd_init+0x102>
	else if (__tmp > 65535)
     d8c:	11 e0       	ldi	r17, 0x01	; 1
     d8e:	6d 81       	ldd	r22, Y+5	; 0x05
     d90:	7e 81       	ldd	r23, Y+6	; 0x06
     d92:	8f 81       	ldd	r24, Y+7	; 0x07
     d94:	98 85       	ldd	r25, Y+8	; 0x08
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     da2:	18 16       	cp	r1, r24
     da4:	0c f0       	brlt	.+2      	; 0xda8 <lcd_init+0x92>
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	11 23       	and	r17, r17
     daa:	61 f1       	breq	.+88     	; 0xe04 <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9a 87       	std	Y+10, r25	; 0x0a
     dd2:	89 87       	std	Y+9, r24	; 0x09
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <lcd_init+0xe4>
     dd6:	80 e7       	ldi	r24, 0x70	; 112
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	8b 85       	ldd	r24, Y+11	; 0x0b
     de0:	9c 85       	ldd	r25, Y+12	; 0x0c
     de2:	8c 01       	movw	r16, r24
     de4:	c8 01       	movw	r24, r16
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <lcd_init+0xd0>
     dea:	8c 01       	movw	r16, r24
     dec:	1c 87       	std	Y+12, r17	; 0x0c
     dee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9a 87       	std	Y+10, r25	; 0x0a
     df8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	51 f7       	brne	.-44     	; 0xdd6 <lcd_init+0xc0>
     e02:	17 c0       	rjmp	.+46     	; 0xe32 <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6d 81       	ldd	r22, Y+5	; 0x05
     e06:	7e 81       	ldd	r23, Y+6	; 0x06
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	89 87       	std	Y+9, r24	; 0x09
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	9e 87       	std	Y+14, r25	; 0x0e
     e1e:	8d 87       	std	Y+13, r24	; 0x0d
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	8c 01       	movw	r16, r24
     e26:	c8 01       	movw	r24, r16
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <lcd_init+0x112>
     e2c:	8c 01       	movw	r16, r24
     e2e:	1e 87       	std	Y+14, r17	; 0x0e
     e30:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e32:	88 e2       	ldi	r24, 0x28	; 40
     e34:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x01);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x06);
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x0E);
     e44:	8e e0       	ldi	r24, 0x0E	; 14
     e46:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x80);
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
		
}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	6e 97       	sbiw	r28, 0x1e	; 30
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	80 7f       	andi	r24, 0xF0	; 240
     e88:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     e8a:	88 e2       	ldi	r24, 0x28	; 40
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e2       	ldi	r18, 0x28	; 40
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	2f 70       	andi	r18, 0x0F	; 15
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	lcd_port |= temp;
     e9c:	88 e2       	ldi	r24, 0x28	; 40
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	28 e2       	ldi	r18, 0x28	; 40
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	f9 01       	movw	r30, r18
     ea6:	30 81       	ld	r19, Z
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	23 2b       	or	r18, r19
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     eb0:	88 e2       	ldi	r24, 0x28	; 40
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	28 e2       	ldi	r18, 0x28	; 40
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	20 81       	ld	r18, Z
     ebc:	2e 7f       	andi	r18, 0xFE	; 254
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     ec2:	88 e2       	ldi	r24, 0x28	; 40
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	28 e2       	ldi	r18, 0x28	; 40
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	20 81       	ld	r18, Z
     ece:	2d 7f       	andi	r18, 0xFD	; 253
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     ed4:	88 e2       	ldi	r24, 0x28	; 40
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	28 e2       	ldi	r18, 0x28	; 40
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	24 60       	ori	r18, 0x04	; 4
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 ea       	ldi	r26, 0xA0	; 160
     eec:	b0 e4       	ldi	r27, 0x40	; 64
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	ac 83       	std	Y+4, r26	; 0x04
     ef4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6a 81       	ldd	r22, Y+2	; 0x02
     ef8:	7b 81       	ldd	r23, Y+3	; 0x03
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	26 e6       	ldi	r18, 0x66	; 102
     f00:	36 e6       	ldi	r19, 0x66	; 102
     f02:	46 e6       	ldi	r20, 0x66	; 102
     f04:	55 e4       	ldi	r21, 0x45	; 69
     f06:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8e 83       	std	Y+6, r24	; 0x06
     f10:	9f 83       	std	Y+7, r25	; 0x07
     f12:	a8 87       	std	Y+8, r26	; 0x08
     f14:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f16:	11 e0       	ldi	r17, 0x01	; 1
     f18:	6e 81       	ldd	r22, Y+6	; 0x06
     f1a:	7f 81       	ldd	r23, Y+7	; 0x07
     f1c:	88 85       	ldd	r24, Y+8	; 0x08
     f1e:	99 85       	ldd	r25, Y+9	; 0x09
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <lcd_wr_command+0xcc>
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	11 23       	and	r17, r17
     f34:	29 f0       	breq	.+10     	; 0xf40 <lcd_wr_command+0xda>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9b 87       	std	Y+11, r25	; 0x0b
     f3c:	8a 87       	std	Y+10, r24	; 0x0a
     f3e:	46 c0       	rjmp	.+140    	; 0xfcc <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f40:	11 e0       	ldi	r17, 0x01	; 1
     f42:	6e 81       	ldd	r22, Y+6	; 0x06
     f44:	7f 81       	ldd	r23, Y+7	; 0x07
     f46:	88 85       	ldd	r24, Y+8	; 0x08
     f48:	99 85       	ldd	r25, Y+9	; 0x09
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
     f56:	18 16       	cp	r1, r24
     f58:	0c f0       	brlt	.+2      	; 0xf5c <lcd_wr_command+0xf6>
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	11 23       	and	r17, r17
     f5e:	61 f1       	breq	.+88     	; 0xfb8 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	7b 81       	ldd	r23, Y+3	; 0x03
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9b 87       	std	Y+11, r25	; 0x0b
     f86:	8a 87       	std	Y+10, r24	; 0x0a
     f88:	12 c0       	rjmp	.+36     	; 0xfae <lcd_wr_command+0x148>
     f8a:	80 e7       	ldi	r24, 0x70	; 112
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	9d 87       	std	Y+13, r25	; 0x0d
     f90:	8c 87       	std	Y+12, r24	; 0x0c
     f92:	8c 85       	ldd	r24, Y+12	; 0x0c
     f94:	9d 85       	ldd	r25, Y+13	; 0x0d
     f96:	8c 01       	movw	r16, r24
     f98:	c8 01       	movw	r24, r16
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <lcd_wr_command+0x134>
     f9e:	8c 01       	movw	r16, r24
     fa0:	1d 87       	std	Y+13, r17	; 0x0d
     fa2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9b 87       	std	Y+11, r25	; 0x0b
     fac:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	51 f7       	brne	.-44     	; 0xf8a <lcd_wr_command+0x124>
     fb6:	17 c0       	rjmp	.+46     	; 0xfe6 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6e 81       	ldd	r22, Y+6	; 0x06
     fba:	7f 81       	ldd	r23, Y+7	; 0x07
     fbc:	88 85       	ldd	r24, Y+8	; 0x08
     fbe:	99 85       	ldd	r25, Y+9	; 0x09
     fc0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9b 87       	std	Y+11, r25	; 0x0b
     fca:	8a 87       	std	Y+10, r24	; 0x0a
     fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fce:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd0:	9f 87       	std	Y+15, r25	; 0x0f
     fd2:	8e 87       	std	Y+14, r24	; 0x0e
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd8:	8c 01       	movw	r16, r24
     fda:	f8 01       	movw	r30, r16
     fdc:	31 97       	sbiw	r30, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <lcd_wr_command+0x176>
     fe0:	8f 01       	movw	r16, r30
     fe2:	1f 87       	std	Y+15, r17	; 0x0f
     fe4:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe6:	88 e2       	ldi	r24, 0x28	; 40
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	28 e2       	ldi	r18, 0x28	; 40
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	2b 7f       	andi	r18, 0xFB	; 251
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	8f 70       	andi	r24, 0x0F	; 15
     ffc:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     ffe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1000:	82 95       	swap	r24
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	28 e2       	ldi	r18, 0x28	; 40
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2f 70       	andi	r18, 0x0F	; 15
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	28 e2       	ldi	r18, 0x28	; 40
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	30 81       	ld	r19, Z
    1024:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1026:	23 2b       	or	r18, r19
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 e2       	ldi	r18, 0x28	; 40
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	2e 7f       	andi	r18, 0xFE	; 254
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    103e:	88 e2       	ldi	r24, 0x28	; 40
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	28 e2       	ldi	r18, 0x28	; 40
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	2d 7f       	andi	r18, 0xFD	; 253
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1050:	88 e2       	ldi	r24, 0x28	; 40
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	28 e2       	ldi	r18, 0x28	; 40
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	24 60       	ori	r18, 0x04	; 4
    105e:	fc 01       	movw	r30, r24
    1060:	20 83       	st	Z, r18
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 ea       	ldi	r26, 0xA0	; 160
    1068:	b0 e4       	ldi	r27, 0x40	; 64
    106a:	88 8b       	std	Y+16, r24	; 0x10
    106c:	99 8b       	std	Y+17, r25	; 0x11
    106e:	aa 8b       	std	Y+18, r26	; 0x12
    1070:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1072:	68 89       	ldd	r22, Y+16	; 0x10
    1074:	79 89       	ldd	r23, Y+17	; 0x11
    1076:	8a 89       	ldd	r24, Y+18	; 0x12
    1078:	9b 89       	ldd	r25, Y+19	; 0x13
    107a:	26 e6       	ldi	r18, 0x66	; 102
    107c:	36 e6       	ldi	r19, 0x66	; 102
    107e:	46 e6       	ldi	r20, 0x66	; 102
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8c 8b       	std	Y+20, r24	; 0x14
    108c:	9d 8b       	std	Y+21, r25	; 0x15
    108e:	ae 8b       	std	Y+22, r26	; 0x16
    1090:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1092:	11 e0       	ldi	r17, 0x01	; 1
    1094:	6c 89       	ldd	r22, Y+20	; 0x14
    1096:	7d 89       	ldd	r23, Y+21	; 0x15
    1098:	8e 89       	ldd	r24, Y+22	; 0x16
    109a:	9f 89       	ldd	r25, Y+23	; 0x17
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	0c f0       	brlt	.+2      	; 0x10ae <lcd_wr_command+0x248>
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	11 23       	and	r17, r17
    10b0:	29 f0       	breq	.+10     	; 0x10bc <lcd_wr_command+0x256>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	99 8f       	std	Y+25, r25	; 0x19
    10b8:	88 8f       	std	Y+24, r24	; 0x18
    10ba:	46 c0       	rjmp	.+140    	; 0x1148 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10bc:	11 e0       	ldi	r17, 0x01	; 1
    10be:	6c 89       	ldd	r22, Y+20	; 0x14
    10c0:	7d 89       	ldd	r23, Y+21	; 0x15
    10c2:	8e 89       	ldd	r24, Y+22	; 0x16
    10c4:	9f 89       	ldd	r25, Y+23	; 0x17
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <lcd_wr_command+0x272>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	11 23       	and	r17, r17
    10da:	61 f1       	breq	.+88     	; 0x1134 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	68 89       	ldd	r22, Y+16	; 0x10
    10de:	79 89       	ldd	r23, Y+17	; 0x11
    10e0:	8a 89       	ldd	r24, Y+18	; 0x12
    10e2:	9b 89       	ldd	r25, Y+19	; 0x13
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	99 8f       	std	Y+25, r25	; 0x19
    1102:	88 8f       	std	Y+24, r24	; 0x18
    1104:	12 c0       	rjmp	.+36     	; 0x112a <lcd_wr_command+0x2c4>
    1106:	80 e7       	ldi	r24, 0x70	; 112
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	9b 8f       	std	Y+27, r25	; 0x1b
    110c:	8a 8f       	std	Y+26, r24	; 0x1a
    110e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1110:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1112:	8c 01       	movw	r16, r24
    1114:	c8 01       	movw	r24, r16
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <lcd_wr_command+0x2b0>
    111a:	8c 01       	movw	r16, r24
    111c:	1b 8f       	std	Y+27, r17	; 0x1b
    111e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	99 8f       	std	Y+25, r25	; 0x19
    1128:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	88 8d       	ldd	r24, Y+24	; 0x18
    112c:	99 8d       	ldd	r25, Y+25	; 0x19
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	51 f7       	brne	.-44     	; 0x1106 <lcd_wr_command+0x2a0>
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	6c 89       	ldd	r22, Y+20	; 0x14
    1136:	7d 89       	ldd	r23, Y+21	; 0x15
    1138:	8e 89       	ldd	r24, Y+22	; 0x16
    113a:	9f 89       	ldd	r25, Y+23	; 0x17
    113c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	99 8f       	std	Y+25, r25	; 0x19
    1146:	88 8f       	std	Y+24, r24	; 0x18
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	99 8d       	ldd	r25, Y+25	; 0x19
    114c:	9d 8f       	std	Y+29, r25	; 0x1d
    114e:	8c 8f       	std	Y+28, r24	; 0x1c
    1150:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1152:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1154:	8c 01       	movw	r16, r24
    1156:	f8 01       	movw	r30, r16
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <lcd_wr_command+0x2f2>
    115c:	8f 01       	movw	r16, r30
    115e:	1d 8f       	std	Y+29, r17	; 0x1d
    1160:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1162:	88 e2       	ldi	r24, 0x28	; 40
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	28 e2       	ldi	r18, 0x28	; 40
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	2b 7f       	andi	r18, 0xFB	; 251
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
}
    1174:	6e 96       	adiw	r28, 0x1e	; 30
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6e 97       	sbiw	r28, 0x1e	; 30
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a6:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	80 7f       	andi	r24, 0xF0	; 240
    11ac:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11ae:	88 e2       	ldi	r24, 0x28	; 40
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 e2       	ldi	r18, 0x28	; 40
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	2f 70       	andi	r18, 0x0F	; 15
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
	lcd_port |= temp;
    11c0:	88 e2       	ldi	r24, 0x28	; 40
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	28 e2       	ldi	r18, 0x28	; 40
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	30 81       	ld	r19, Z
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	23 2b       	or	r18, r19
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    11d4:	88 e2       	ldi	r24, 0x28	; 40
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	28 e2       	ldi	r18, 0x28	; 40
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	21 60       	ori	r18, 0x01	; 1
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    11e6:	88 e2       	ldi	r24, 0x28	; 40
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	28 e2       	ldi	r18, 0x28	; 40
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	2d 7f       	andi	r18, 0xFD	; 253
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    11f8:	88 e2       	ldi	r24, 0x28	; 40
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	28 e2       	ldi	r18, 0x28	; 40
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	24 60       	ori	r18, 0x04	; 4
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 ea       	ldi	r26, 0xA0	; 160
    1210:	b0 e4       	ldi	r27, 0x40	; 64
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	9b 83       	std	Y+3, r25	; 0x03
    1216:	ac 83       	std	Y+4, r26	; 0x04
    1218:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	7b 81       	ldd	r23, Y+3	; 0x03
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	26 e6       	ldi	r18, 0x66	; 102
    1224:	36 e6       	ldi	r19, 0x66	; 102
    1226:	46 e6       	ldi	r20, 0x66	; 102
    1228:	55 e4       	ldi	r21, 0x45	; 69
    122a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 83       	std	Y+6, r24	; 0x06
    1234:	9f 83       	std	Y+7, r25	; 0x07
    1236:	a8 87       	std	Y+8, r26	; 0x08
    1238:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    123a:	11 e0       	ldi	r17, 0x01	; 1
    123c:	6e 81       	ldd	r22, Y+6	; 0x06
    123e:	7f 81       	ldd	r23, Y+7	; 0x07
    1240:	88 85       	ldd	r24, Y+8	; 0x08
    1242:	99 85       	ldd	r25, Y+9	; 0x09
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    1250:	88 23       	and	r24, r24
    1252:	0c f0       	brlt	.+2      	; 0x1256 <lcd_wr_char+0xcc>
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	11 23       	and	r17, r17
    1258:	29 f0       	breq	.+10     	; 0x1264 <lcd_wr_char+0xda>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9b 87       	std	Y+11, r25	; 0x0b
    1260:	8a 87       	std	Y+10, r24	; 0x0a
    1262:	46 c0       	rjmp	.+140    	; 0x12f0 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1264:	11 e0       	ldi	r17, 0x01	; 1
    1266:	6e 81       	ldd	r22, Y+6	; 0x06
    1268:	7f 81       	ldd	r23, Y+7	; 0x07
    126a:	88 85       	ldd	r24, Y+8	; 0x08
    126c:	99 85       	ldd	r25, Y+9	; 0x09
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <lcd_wr_char+0xf6>
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	11 23       	and	r17, r17
    1282:	61 f1       	breq	.+88     	; 0x12dc <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6a 81       	ldd	r22, Y+2	; 0x02
    1286:	7b 81       	ldd	r23, Y+3	; 0x03
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9b 87       	std	Y+11, r25	; 0x0b
    12aa:	8a 87       	std	Y+10, r24	; 0x0a
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <lcd_wr_char+0x148>
    12ae:	80 e7       	ldi	r24, 0x70	; 112
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	9d 87       	std	Y+13, r25	; 0x0d
    12b4:	8c 87       	std	Y+12, r24	; 0x0c
    12b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ba:	8c 01       	movw	r16, r24
    12bc:	c8 01       	movw	r24, r16
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <lcd_wr_char+0x134>
    12c2:	8c 01       	movw	r16, r24
    12c4:	1d 87       	std	Y+13, r17	; 0x0d
    12c6:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9b 87       	std	Y+11, r25	; 0x0b
    12d0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	51 f7       	brne	.-44     	; 0x12ae <lcd_wr_char+0x124>
    12da:	17 c0       	rjmp	.+46     	; 0x130a <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6e 81       	ldd	r22, Y+6	; 0x06
    12de:	7f 81       	ldd	r23, Y+7	; 0x07
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9b 87       	std	Y+11, r25	; 0x0b
    12ee:	8a 87       	std	Y+10, r24	; 0x0a
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f4:	9f 87       	std	Y+15, r25	; 0x0f
    12f6:	8e 87       	std	Y+14, r24	; 0x0e
    12f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    12fc:	8c 01       	movw	r16, r24
    12fe:	f8 01       	movw	r30, r16
    1300:	31 97       	sbiw	r30, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <lcd_wr_char+0x176>
    1304:	8f 01       	movw	r16, r30
    1306:	1f 87       	std	Y+15, r17	; 0x0f
    1308:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    130a:	88 e2       	ldi	r24, 0x28	; 40
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	28 e2       	ldi	r18, 0x28	; 40
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	2b 7f       	andi	r18, 0xFB	; 251
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	8f 70       	andi	r24, 0x0F	; 15
    1320:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1324:	82 95       	swap	r24
    1326:	80 7f       	andi	r24, 0xF0	; 240
    1328:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    132a:	88 e2       	ldi	r24, 0x28	; 40
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	28 e2       	ldi	r18, 0x28	; 40
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	f9 01       	movw	r30, r18
    1334:	20 81       	ld	r18, Z
    1336:	2f 70       	andi	r18, 0x0F	; 15
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
	lcd_port |= letter;
    133c:	88 e2       	ldi	r24, 0x28	; 40
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	28 e2       	ldi	r18, 0x28	; 40
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	30 81       	ld	r19, Z
    1348:	2e 8d       	ldd	r18, Y+30	; 0x1e
    134a:	23 2b       	or	r18, r19
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1350:	88 e2       	ldi	r24, 0x28	; 40
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	28 e2       	ldi	r18, 0x28	; 40
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	21 60       	ori	r18, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1362:	88 e2       	ldi	r24, 0x28	; 40
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	28 e2       	ldi	r18, 0x28	; 40
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f9 01       	movw	r30, r18
    136c:	20 81       	ld	r18, Z
    136e:	2d 7f       	andi	r18, 0xFD	; 253
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1374:	88 e2       	ldi	r24, 0x28	; 40
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	28 e2       	ldi	r18, 0x28	; 40
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	20 81       	ld	r18, Z
    1380:	24 60       	ori	r18, 0x04	; 4
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 ea       	ldi	r26, 0xA0	; 160
    138c:	b0 e4       	ldi	r27, 0x40	; 64
    138e:	88 8b       	std	Y+16, r24	; 0x10
    1390:	99 8b       	std	Y+17, r25	; 0x11
    1392:	aa 8b       	std	Y+18, r26	; 0x12
    1394:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1396:	68 89       	ldd	r22, Y+16	; 0x10
    1398:	79 89       	ldd	r23, Y+17	; 0x11
    139a:	8a 89       	ldd	r24, Y+18	; 0x12
    139c:	9b 89       	ldd	r25, Y+19	; 0x13
    139e:	26 e6       	ldi	r18, 0x66	; 102
    13a0:	36 e6       	ldi	r19, 0x66	; 102
    13a2:	46 e6       	ldi	r20, 0x66	; 102
    13a4:	55 e4       	ldi	r21, 0x45	; 69
    13a6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8c 8b       	std	Y+20, r24	; 0x14
    13b0:	9d 8b       	std	Y+21, r25	; 0x15
    13b2:	ae 8b       	std	Y+22, r26	; 0x16
    13b4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13b6:	11 e0       	ldi	r17, 0x01	; 1
    13b8:	6c 89       	ldd	r22, Y+20	; 0x14
    13ba:	7d 89       	ldd	r23, Y+21	; 0x15
    13bc:	8e 89       	ldd	r24, Y+22	; 0x16
    13be:	9f 89       	ldd	r25, Y+23	; 0x17
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <lcd_wr_char+0x248>
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	11 23       	and	r17, r17
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <lcd_wr_char+0x256>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	99 8f       	std	Y+25, r25	; 0x19
    13dc:	88 8f       	std	Y+24, r24	; 0x18
    13de:	46 c0       	rjmp	.+140    	; 0x146c <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e0:	11 e0       	ldi	r17, 0x01	; 1
    13e2:	6c 89       	ldd	r22, Y+20	; 0x14
    13e4:	7d 89       	ldd	r23, Y+21	; 0x15
    13e6:	8e 89       	ldd	r24, Y+22	; 0x16
    13e8:	9f 89       	ldd	r25, Y+23	; 0x17
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <lcd_wr_char+0x272>
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	11 23       	and	r17, r17
    13fe:	61 f1       	breq	.+88     	; 0x1458 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	68 89       	ldd	r22, Y+16	; 0x10
    1402:	79 89       	ldd	r23, Y+17	; 0x11
    1404:	8a 89       	ldd	r24, Y+18	; 0x12
    1406:	9b 89       	ldd	r25, Y+19	; 0x13
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	99 8f       	std	Y+25, r25	; 0x19
    1426:	88 8f       	std	Y+24, r24	; 0x18
    1428:	12 c0       	rjmp	.+36     	; 0x144e <lcd_wr_char+0x2c4>
    142a:	80 e7       	ldi	r24, 0x70	; 112
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	9b 8f       	std	Y+27, r25	; 0x1b
    1430:	8a 8f       	std	Y+26, r24	; 0x1a
    1432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1434:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1436:	8c 01       	movw	r16, r24
    1438:	c8 01       	movw	r24, r16
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <lcd_wr_char+0x2b0>
    143e:	8c 01       	movw	r16, r24
    1440:	1b 8f       	std	Y+27, r17	; 0x1b
    1442:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	88 8d       	ldd	r24, Y+24	; 0x18
    1446:	99 8d       	ldd	r25, Y+25	; 0x19
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	99 8f       	std	Y+25, r25	; 0x19
    144c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	88 8d       	ldd	r24, Y+24	; 0x18
    1450:	99 8d       	ldd	r25, Y+25	; 0x19
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	51 f7       	brne	.-44     	; 0x142a <lcd_wr_char+0x2a0>
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6c 89       	ldd	r22, Y+20	; 0x14
    145a:	7d 89       	ldd	r23, Y+21	; 0x15
    145c:	8e 89       	ldd	r24, Y+22	; 0x16
    145e:	9f 89       	ldd	r25, Y+23	; 0x17
    1460:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	99 8f       	std	Y+25, r25	; 0x19
    146a:	88 8f       	std	Y+24, r24	; 0x18
    146c:	88 8d       	ldd	r24, Y+24	; 0x18
    146e:	99 8d       	ldd	r25, Y+25	; 0x19
    1470:	9d 8f       	std	Y+29, r25	; 0x1d
    1472:	8c 8f       	std	Y+28, r24	; 0x1c
    1474:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1476:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1478:	8c 01       	movw	r16, r24
    147a:	f8 01       	movw	r30, r16
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <lcd_wr_char+0x2f2>
    1480:	8f 01       	movw	r16, r30
    1482:	1d 8f       	std	Y+29, r17	; 0x1d
    1484:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1486:	88 e2       	ldi	r24, 0x28	; 40
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	28 e2       	ldi	r18, 0x28	; 40
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	2b 7f       	andi	r18, 0xFB	; 251
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
}
    1498:	6e 96       	adiw	r28, 0x1e	; 30
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	0f 92       	push	r0
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		str++;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	79 f7       	brne	.-34     	; 0x14d4 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	0f 92       	push	r0
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	99 f0       	breq	.+38     	; 0x1542 <lcd_cursor+0x42>
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	24 f4       	brge	.+8      	; 0x152a <lcd_cursor+0x2a>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	41 f0       	breq	.+16     	; 0x1538 <lcd_cursor+0x38>
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <lcd_cursor+0x60>
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	71 f0       	breq	.+28     	; 0x154c <lcd_cursor+0x4c>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <lcd_cursor+0x56>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	81 58       	subi	r24, 0x81	; 129
    153c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	81 54       	subi	r24, 0x41	; 65
    1546:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	8d 56       	subi	r24, 0x6D	; 109
    1550:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	8d 52       	subi	r24, 0x2D	; 45
    155a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <lcd_cursor+0x62>
		default: break;
    1560:	00 00       	nop
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	27 97       	sbiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
    1584:	5d 83       	std	Y+5, r21	; 0x05
    1586:	4c 83       	std	Y+4, r20	; 0x04
    1588:	3f 83       	std	Y+7, r19	; 0x07
    158a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    158c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <lcd_print+0x2e>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 23       	and	r24, r24
    1598:	19 f4       	brne	.+6      	; 0x15a0 <lcd_print+0x34>
	{
		lcd_home();
    159a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <lcd_home>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	6b 81       	ldd	r22, Y+3	; 0x03
    15a4:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	91 05       	cpc	r25, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <lcd_print+0x4c>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	b1 f4       	brne	.+44     	; 0x15e4 <lcd_print+0x78>
	{
		million=value/10000+48;
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	20 e1       	ldi	r18, 0x10	; 16
    15be:	37 e2       	ldi	r19, 0x27	; 39
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    15c6:	9b 01       	movw	r18, r22
    15c8:	c9 01       	movw	r24, r18
    15ca:	c0 96       	adiw	r24, 0x30	; 48
    15cc:	90 93 8a 04 	sts	0x048A, r25
    15d0:	80 93 89 04 	sts	0x0489, r24
		lcd_wr_char(million);
    15d4:	80 91 89 04 	lds	r24, 0x0489
    15d8:	90 91 8a 04 	lds	r25, 0x048A
    15dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	91 05       	cpc	r25, r1
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <lcd_print+0x88>
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	19 f5       	brne	.+70     	; 0x163a <lcd_print+0xce>
	{
		temp = value/1000;
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	28 ee       	ldi	r18, 0xE8	; 232
    15fa:	33 e0       	ldi	r19, 0x03	; 3
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    1602:	9b 01       	movw	r18, r22
    1604:	c9 01       	movw	r24, r18
    1606:	90 93 8c 04 	sts	0x048C, r25
    160a:	80 93 8b 04 	sts	0x048B, r24
		thousand = temp%10 + 48;
    160e:	80 91 8b 04 	lds	r24, 0x048B
    1612:	90 91 8c 04 	lds	r25, 0x048C
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	b9 01       	movw	r22, r18
    161c:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    1620:	c0 96       	adiw	r24, 0x30	; 48
    1622:	90 93 d2 04 	sts	0x04D2, r25
    1626:	80 93 d1 04 	sts	0x04D1, r24
		lcd_wr_char(thousand);
    162a:	80 91 d1 04 	lds	r24, 0x04D1
    162e:	90 91 d2 04 	lds	r25, 0x04D2
    1632:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	19 f0       	breq	.+6      	; 0x164a <lcd_print+0xde>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	19 f5       	brne	.+70     	; 0x1690 <lcd_print+0x124>
	{
		temp = value/100;
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	24 e6       	ldi	r18, 0x64	; 100
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	b9 01       	movw	r22, r18
    1654:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    1658:	9b 01       	movw	r18, r22
    165a:	c9 01       	movw	r24, r18
    165c:	90 93 8c 04 	sts	0x048C, r25
    1660:	80 93 8b 04 	sts	0x048B, r24
		hundred = temp%10 + 48;
    1664:	80 91 8b 04 	lds	r24, 0x048B
    1668:	90 91 8c 04 	lds	r25, 0x048C
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	b9 01       	movw	r22, r18
    1672:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    1676:	c0 96       	adiw	r24, 0x30	; 48
    1678:	90 93 ce 04 	sts	0x04CE, r25
    167c:	80 93 cd 04 	sts	0x04CD, r24
		lcd_wr_char(hundred);
    1680:	80 91 cd 04 	lds	r24, 0x04CD
    1684:	90 91 ce 04 	lds	r25, 0x04CE
    1688:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	19 f0       	breq	.+6      	; 0x16a0 <lcd_print+0x134>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	19 f5       	brne	.+70     	; 0x16e6 <lcd_print+0x17a>
	{
		temp = value/10;
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	2a e0       	ldi	r18, 0x0A	; 10
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    16ae:	9b 01       	movw	r18, r22
    16b0:	c9 01       	movw	r24, r18
    16b2:	90 93 8c 04 	sts	0x048C, r25
    16b6:	80 93 8b 04 	sts	0x048B, r24
		tens = temp%10 + 48;
    16ba:	80 91 8b 04 	lds	r24, 0x048B
    16be:	90 91 8c 04 	lds	r25, 0x048C
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    16cc:	c0 96       	adiw	r24, 0x30	; 48
    16ce:	90 93 ab 04 	sts	0x04AB, r25
    16d2:	80 93 aa 04 	sts	0x04AA, r24
		lcd_wr_char(tens);
    16d6:	80 91 aa 04 	lds	r24, 0x04AA
    16da:	90 91 ab 04 	lds	r25, 0x04AB
    16de:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <lcd_print+0x18a>
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 f4       	brne	.+36     	; 0x171a <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	b9 01       	movw	r22, r18
    1700:	0e 94 ef 64 	call	0xc9de	; 0xc9de <__udivmodhi4>
    1704:	c0 96       	adiw	r24, 0x30	; 48
    1706:	90 93 d0 04 	sts	0x04D0, r25
    170a:	80 93 cf 04 	sts	0x04CF, r24
		lcd_wr_char(unit);
    170e:	80 91 cf 04 	lds	r24, 0x04CF
    1712:	90 91 d0 04 	lds	r25, 0x04D0
    1716:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	if(digits>5)
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	86 30       	cpi	r24, 0x06	; 6
    1720:	91 05       	cpc	r25, r1
    1722:	1c f0       	brlt	.+6      	; 0x172a <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1724:	85 e4       	ldi	r24, 0x45	; 69
    1726:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	
}
    172a:	27 96       	adiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <lcd_port_config>:
unsigned char Center_white_line = 0;
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1744:	87 e2       	ldi	r24, 0x27	; 39
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	27 e2       	ldi	r18, 0x27	; 39
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	27 6f       	ori	r18, 0xF7	; 247
    1752:	fc 01       	movw	r30, r24
    1754:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1756:	88 e2       	ldi	r24, 0x28	; 40
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	28 e2       	ldi	r18, 0x28	; 40
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	20 78       	andi	r18, 0x80	; 128
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	fc 01       	movw	r30, r24
    177c:	10 82       	st	Z, r1
 PORTF = 0x00;
    177e:	81 e3       	ldi	r24, 0x31	; 49
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	fc 01       	movw	r30, r24
    1784:	10 82       	st	Z, r1
 DDRK = 0x00;
    1786:	87 e0       	ldi	r24, 0x07	; 7
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	fc 01       	movw	r30, r24
    178c:	10 82       	st	Z, r1
 PORTK = 0x00;
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	fc 01       	movw	r30, r24
    1794:	10 82       	st	Z, r1
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    17a4:	87 e2       	ldi	r24, 0x27	; 39
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	27 e2       	ldi	r18, 0x27	; 39
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	28 60       	ori	r18, 0x08	; 8
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    17b6:	88 e2       	ldi	r24, 0x28	; 40
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	28 e2       	ldi	r18, 0x28	; 40
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	20 81       	ld	r18, Z
    17c2:	27 7f       	andi	r18, 0xF7	; 247
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <left_encoder_pin_config>:



//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17d6:	8d e2       	ldi	r24, 0x2D	; 45
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2d e2       	ldi	r18, 0x2D	; 45
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	2f 7e       	andi	r18, 0xEF	; 239
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17e8:	8e e2       	ldi	r24, 0x2E	; 46
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	2e e2       	ldi	r18, 0x2E	; 46
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	f9 01       	movw	r30, r18
    17f2:	20 81       	ld	r18, Z
    17f4:	20 61       	ori	r18, 0x10	; 16
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 83       	st	Z, r18
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1808:	8d e2       	ldi	r24, 0x2D	; 45
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	2d e2       	ldi	r18, 0x2D	; 45
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	2f 7d       	andi	r18, 0xDF	; 223
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    181a:	8e e2       	ldi	r24, 0x2E	; 46
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	2e e2       	ldi	r18, 0x2E	; 46
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	20 62       	ori	r18, 0x20	; 32
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    183a:	81 e2       	ldi	r24, 0x21	; 33
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	21 e2       	ldi	r18, 0x21	; 33
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	2f 60       	ori	r18, 0x0F	; 15
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    184c:	82 e2       	ldi	r24, 0x22	; 34
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	22 e2       	ldi	r18, 0x22	; 34
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	20 7f       	andi	r18, 0xF0	; 240
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    185e:	8a e0       	ldi	r24, 0x0A	; 10
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	28 61       	ori	r18, 0x18	; 24
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1870:	8b e0       	ldi	r24, 0x0B	; 11
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	2b e0       	ldi	r18, 0x0B	; 11
    1876:	31 e0       	ldi	r19, 0x01	; 1
    1878:	f9 01       	movw	r30, r18
    187a:	20 81       	ld	r18, Z
    187c:	28 61       	ori	r18, 0x18	; 24
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	00 d0       	rcall	.+0      	; 0x1892 <servo_1+0xa>
    1892:	0f 92       	push	r0
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	dc 01       	movw	r26, r24
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	ab 83       	std	Y+3, r26	; 0x03
    18a8:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e0       	ldi	r26, 0x00	; 0
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <__floatunsisf>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	2b e7       	ldi	r18, 0x7B	; 123
    18c6:	34 e1       	ldi	r19, 0x14	; 20
    18c8:	4e ee       	ldi	r20, 0xEE	; 238
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 42 63 	call	0xc684	; 0xc684 <__divsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4c e0       	ldi	r20, 0x0C	; 12
    18de:	52 e4       	ldi	r21, 0x42	; 66
    18e0:	0e 94 da 62 	call	0xc5b4	; 0xc5b4 <__addsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	ab 83       	std	Y+3, r26	; 0x03
    18ee:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    18f0:	89 e8       	ldi	r24, 0x89	; 137
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	fc 01       	movw	r30, r24
    18f6:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    18f8:	08 e8       	ldi	r16, 0x88	; 136
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	69 81       	ldd	r22, Y+1	; 0x01
    18fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	f8 01       	movw	r30, r16
    190e:	80 83       	st	Z, r24
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 d0       	rcall	.+0      	; 0x192e <servo_2+0xa>
    192e:	0f 92       	push	r0
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	8d 83       	std	Y+5, r24	; 0x05
	float PositionTiltServo = 0;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	dc 01       	movw	r26, r24
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	ab 83       	std	Y+3, r26	; 0x03
    1944:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <__floatunsisf>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	2b e7       	ldi	r18, 0x7B	; 123
    1962:	34 e1       	ldi	r19, 0x14	; 20
    1964:	4e ee       	ldi	r20, 0xEE	; 238
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 42 63 	call	0xc684	; 0xc684 <__divsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4c e0       	ldi	r20, 0x0C	; 12
    197a:	52 e4       	ldi	r21, 0x42	; 66
    197c:	0e 94 da 62 	call	0xc5b4	; 0xc5b4 <__addsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	ab 83       	std	Y+3, r26	; 0x03
    198a:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    198c:	8b e8       	ldi	r24, 0x8B	; 139
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	fc 01       	movw	r30, r24
    1992:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1994:	0a e8       	ldi	r16, 0x8A	; 138
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	69 81       	ldd	r22, Y+1	; 0x01
    199a:	7a 81       	ldd	r23, Y+2	; 0x02
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <port_init>:
//Function to Initialize PORTS
void port_init()
{
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    19c8:	0e 94 9e 0b 	call	0x173c	; 0x173c <lcd_port_config>
	adc_pin_config();
    19cc:	0e 94 b7 0b 	call	0x176e	; 0x176e <adc_pin_config>
	motion_pin_config();
    19d0:	0e 94 19 0c 	call	0x1832	; 0x1832 <motion_pin_config>
	buzzer_pin_config();
    19d4:	0e 94 ce 0b 	call	0x179c	; 0x179c <buzzer_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    19d8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <left_encoder_pin_config>
    right_encoder_pin_config(); //right encoder pin config		
    19dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <right_encoder_pin_config>
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    19e0:	89 ef       	ldi	r24, 0xF9	; 249
    19e2:	93 e1       	ldi	r25, 0x13	; 19
    19e4:	fc 01       	movw	r30, r24
    19e6:	19 95       	eicall
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    19e8:	82 e1       	ldi	r24, 0x12	; 18
    19ea:	94 e1       	ldi	r25, 0x14	; 20
    19ec:	fc 01       	movw	r30, r24
    19ee:	19 95       	eicall
	
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    19fe:	81 e2       	ldi	r24, 0x21	; 33
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	fc 01       	movw	r30, r24
    1a04:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1a06:	85 e2       	ldi	r24, 0x25	; 37
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	2f ef       	ldi	r18, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1a10:	84 e2       	ldi	r24, 0x24	; 36
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1a1a:	89 e2       	ldi	r24, 0x29	; 41
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	fc 01       	movw	r30, r24
    1a20:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1a22:	88 e2       	ldi	r24, 0x28	; 40
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1a2c:	8b e2       	ldi	r24, 0x2B	; 43
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	fc 01       	movw	r30, r24
    1a32:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1a34:	8a e2       	ldi	r24, 0x2A	; 42
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	2f ef       	ldi	r18, 0xFF	; 255
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1a3e:	8d e2       	ldi	r24, 0x2D	; 45
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	fc 01       	movw	r30, r24
    1a44:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1a46:	8c e2       	ldi	r24, 0x2C	; 44
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	2f ef       	ldi	r18, 0xFF	; 255
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1a50:	80 e2       	ldi	r24, 0x20	; 32
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	29 ea       	ldi	r18, 0xA9	; 169
    1a56:	fc 01       	movw	r30, r24
    1a58:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1a5a:	81 e2       	ldi	r24, 0x21	; 33
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	2b e0       	ldi	r18, 0x0B	; 11
    1a60:	fc 01       	movw	r30, r24
    1a62:	20 83       	st	Z, r18
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <adc_init>:

void adc_init()
{
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1a72:	8a e7       	ldi	r24, 0x7A	; 122
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1a7a:	8b e7       	ldi	r24, 0x7B	; 123
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	fc 01       	movw	r30, r24
    1a80:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1a82:	8c e7       	ldi	r24, 0x7C	; 124
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	20 e2       	ldi	r18, 0x20	; 32
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
	ACSR = 0x80;
    1a8c:	80 e5       	ldi	r24, 0x50	; 80
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	20 e8       	ldi	r18, 0x80	; 128
    1a92:	fc 01       	movw	r30, r24
    1a94:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1a96:	8a e7       	ldi	r24, 0x7A	; 122
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	26 e8       	ldi	r18, 0x86	; 134
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 83       	st	Z, r18
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	0f 92       	push	r0
    1aac:	0f 92       	push	r0
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	88 30       	cpi	r24, 0x08	; 8
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    1aba:	8b e7       	ldi	r24, 0x7B	; 123
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	28 e0       	ldi	r18, 0x08	; 8
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	87 70       	andi	r24, 0x07	; 7
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1aca:	8c e7       	ldi	r24, 0x7C	; 124
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad0:	20 62       	ori	r18, 0x20	; 32
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1ad6:	8a e7       	ldi	r24, 0x7A	; 122
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	2a e7       	ldi	r18, 0x7A	; 122
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	f9 01       	movw	r30, r18
    1ae0:	20 81       	ld	r18, Z
    1ae2:	20 64       	ori	r18, 0x40	; 64
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1ae8:	00 00       	nop
    1aea:	8a e7       	ldi	r24, 0x7A	; 122
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	80 81       	ld	r24, Z
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	80 71       	andi	r24, 0x10	; 16
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	b1 f3       	breq	.-20     	; 0x1aea <ADC_Conversion+0x44>
	a=ADCH;
    1afe:	89 e7       	ldi	r24, 0x79	; 121
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1b08:	8a e7       	ldi	r24, 0x7A	; 122
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	2a e7       	ldi	r18, 0x7A	; 122
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	f9 01       	movw	r30, r18
    1b12:	20 81       	ld	r18, Z
    1b14:	20 61       	ori	r18, 0x10	; 16
    1b16:	fc 01       	movw	r30, r24
    1b18:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    1b1a:	8b e7       	ldi	r24, 0x7B	; 123
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	fc 01       	movw	r30, r24
    1b20:	10 82       	st	Z, r1
	return a;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <buzzer_on>:


void buzzer_on (void)
{
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	0f 92       	push	r0
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1b38:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1b3a:	86 e2       	ldi	r24, 0x26	; 38
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	80 81       	ld	r24, Z
    1b42:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 60       	ori	r24, 0x08	; 8
    1b48:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1b4a:	88 e2       	ldi	r24, 0x28	; 40
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	29 81       	ldd	r18, Y+1	; 0x01
    1b50:	fc 01       	movw	r30, r24
    1b52:	20 83       	st	Z, r18
}
    1b54:	0f 90       	pop	r0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <buzzer_off>:

void buzzer_off (void)
{
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1b68:	86 e2       	ldi	r24, 0x26	; 38
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	80 81       	ld	r24, Z
    1b70:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	87 7f       	andi	r24, 0xF7	; 247
    1b76:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1b78:	88 e2       	ldi	r24, 0x28	; 40
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	29 81       	ldd	r18, Y+1	; 0x01
    1b7e:	fc 01       	movw	r30, r24
    1b80:	20 83       	st	Z, r18
}
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <print_sensor>:


//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <print_sensor+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	6a 83       	std	Y+2, r22	; 0x02
    1b98:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ADC_Conversion>
    1ba0:	80 93 a5 04 	sts	0x04A5, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1ba4:	80 91 a5 04 	lds	r24, 0x04A5
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	23 e0       	ldi	r18, 0x03	; 3
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	0f 92       	push	r0
    1bcc:	0f 92       	push	r0
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1bd6:	88 e2       	ldi	r24, 0x28	; 40
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	29 81       	ldd	r18, Y+1	; 0x01
    1bdc:	fc 01       	movw	r30, r24
    1bde:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1be0:	8a e2       	ldi	r24, 0x2A	; 42
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	2a 81       	ldd	r18, Y+2	; 0x02
    1be6:	fc 01       	movw	r30, r24
    1be8:	20 83       	st	Z, r18
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	0f 92       	push	r0
    1bfa:	0f 92       	push	r0
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1c02:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1c0a:	82 e2       	ldi	r24, 0x22	; 34
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	80 7f       	andi	r24, 0xF0	; 240
    1c18:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1c1a:	99 81       	ldd	r25, Y+1	; 0x01
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	89 2b       	or	r24, r25
    1c20:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1c22:	82 e2       	ldi	r24, 0x22	; 34
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	29 81       	ldd	r18, Y+1	; 0x01
    1c28:	fc 01       	movw	r30, r24
    1c2a:	20 83       	st	Z, r18
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <forward>:

void forward (void) 
{
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1c3e:	86 e0       	ldi	r24, 0x06	; 6
    1c40:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <back>:

void back (void)
{
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	motion_set (0x09);
    1c52:	89 e0       	ldi	r24, 0x09	; 9
    1c54:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1c7a:	8a e0       	ldi	r24, 0x0A	; 10
    1c7c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1c8e:	85 e0       	ldi	r24, 0x05	; 5
    1c90:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <stop>:


void stop (void)
{
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <motion_set>
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1cb6:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1cb8:	8a e6       	ldi	r24, 0x6A	; 106
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	2a e6       	ldi	r18, 0x6A	; 106
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	20 81       	ld	r18, Z
    1cc4:	22 60       	ori	r18, 0x02	; 2
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	20 83       	st	Z, r18
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1cca:	8d e3       	ldi	r24, 0x3D	; 61
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	2d e3       	ldi	r18, 0x3D	; 61
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	20 81       	ld	r18, Z
    1cd6:	20 61       	ori	r18, 0x10	; 16
    1cd8:	fc 01       	movw	r30, r24
    1cda:	20 83       	st	Z, r18
 sei();   // Enables the global interrupt 
    1cdc:	78 94       	sei
}
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1cec:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1cee:	8a e6       	ldi	r24, 0x6A	; 106
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	2a e6       	ldi	r18, 0x6A	; 106
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	20 81       	ld	r18, Z
    1cfa:	28 60       	ori	r18, 0x08	; 8
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1d00:	8d e3       	ldi	r24, 0x3D	; 61
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2d e3       	ldi	r18, 0x3D	; 61
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	f9 01       	movw	r30, r18
    1d0a:	20 81       	ld	r18, Z
    1d0c:	20 62       	ori	r18, 0x20	; 32
    1d0e:	fc 01       	movw	r30, r24
    1d10:	20 83       	st	Z, r18
 sei();   // Enables the global interrupt 
    1d12:	78 94       	sei
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    1d34:	80 91 78 04 	lds	r24, 0x0478
    1d38:	90 91 79 04 	lds	r25, 0x0479
    1d3c:	a0 91 7a 04 	lds	r26, 0x047A
    1d40:	b0 91 7b 04 	lds	r27, 0x047B
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	a1 1d       	adc	r26, r1
    1d48:	b1 1d       	adc	r27, r1
    1d4a:	80 93 78 04 	sts	0x0478, r24
    1d4e:	90 93 79 04 	sts	0x0479, r25
    1d52:	a0 93 7a 04 	sts	0x047A, r26
    1d56:	b0 93 7b 04 	sts	0x047B, r27
}
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	bf 91       	pop	r27
    1d60:	af 91       	pop	r26
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	0f 90       	pop	r0
    1d6c:	1f 90       	pop	r1
    1d6e:	18 95       	reti

00001d70 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1d8a:	80 91 74 04 	lds	r24, 0x0474
    1d8e:	90 91 75 04 	lds	r25, 0x0475
    1d92:	a0 91 76 04 	lds	r26, 0x0476
    1d96:	b0 91 77 04 	lds	r27, 0x0477
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	a1 1d       	adc	r26, r1
    1d9e:	b1 1d       	adc	r27, r1
    1da0:	80 93 74 04 	sts	0x0474, r24
    1da4:	90 93 75 04 	sts	0x0475, r25
    1da8:	a0 93 76 04 	sts	0x0476, r26
    1dac:	b0 93 77 04 	sts	0x0477, r27
}
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <angle_rotate>:
//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2a 97       	sbiw	r28, 0x0a	; 10
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	9a 87       	std	Y+10, r25	; 0x0a
    1ddc:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	dc 01       	movw	r26, r24
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	ab 83       	std	Y+3, r26	; 0x03
    1dea:	bc 83       	std	Y+4, r27	; 0x04
 unsigned long int ReqdShaftCountInt = 0;
    1dec:	1d 82       	std	Y+5, r1	; 0x05
    1dee:	1e 82       	std	Y+6, r1	; 0x06
    1df0:	1f 82       	std	Y+7, r1	; 0x07
    1df2:	18 86       	std	Y+8, r1	; 0x08

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	cc 01       	movw	r24, r24
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <__floatunsisf>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	28 e4       	ldi	r18, 0x48	; 72
    1e10:	31 ee       	ldi	r19, 0xE1	; 225
    1e12:	42 e8       	ldi	r20, 0x82	; 130
    1e14:	50 e4       	ldi	r21, 0x40	; 64
    1e16:	0e 94 42 63 	call	0xc684	; 0xc684 <__divsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	ab 83       	std	Y+3, r26	; 0x03
    1e24:	bc 83       	std	Y+4, r27	; 0x04
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1e26:	69 81       	ldd	r22, Y+1	; 0x01
    1e28:	7a 81       	ldd	r23, Y+2	; 0x02
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	cc 01       	movw	r24, r24
    1e38:	a0 e0       	ldi	r26, 0x00	; 0
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	af 83       	std	Y+7, r26	; 0x07
    1e42:	b8 87       	std	Y+8, r27	; 0x08
 ShaftCountRight = 0; 
    1e44:	10 92 78 04 	sts	0x0478, r1
    1e48:	10 92 79 04 	sts	0x0479, r1
    1e4c:	10 92 7a 04 	sts	0x047A, r1
    1e50:	10 92 7b 04 	sts	0x047B, r1
 ShaftCountLeft = 0; 
    1e54:	10 92 74 04 	sts	0x0474, r1
    1e58:	10 92 75 04 	sts	0x0475, r1
    1e5c:	10 92 76 04 	sts	0x0476, r1
    1e60:	10 92 77 04 	sts	0x0477, r1
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <angle_rotate+0xa2>

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
    1e66:	00 00       	nop
 ShaftCountRight = 0; 
 ShaftCountLeft = 0; 

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1e68:	20 91 78 04 	lds	r18, 0x0478
    1e6c:	30 91 79 04 	lds	r19, 0x0479
    1e70:	40 91 7a 04 	lds	r20, 0x047A
    1e74:	50 91 7b 04 	lds	r21, 0x047B
    1e78:	71 e0       	ldi	r23, 0x01	; 1
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	af 81       	ldd	r26, Y+7	; 0x07
    1e80:	b8 85       	ldd	r27, Y+8	; 0x08
    1e82:	28 17       	cp	r18, r24
    1e84:	39 07       	cpc	r19, r25
    1e86:	4a 07       	cpc	r20, r26
    1e88:	5b 07       	cpc	r21, r27
    1e8a:	08 f4       	brcc	.+2      	; 0x1e8e <angle_rotate+0xc8>
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	20 91 74 04 	lds	r18, 0x0474
    1e92:	30 91 75 04 	lds	r19, 0x0475
    1e96:	40 91 76 04 	lds	r20, 0x0476
    1e9a:	50 91 77 04 	lds	r21, 0x0477
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	af 81       	ldd	r26, Y+7	; 0x07
    1ea6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ea8:	28 17       	cp	r18, r24
    1eaa:	39 07       	cpc	r19, r25
    1eac:	4a 07       	cpc	r20, r26
    1eae:	5b 07       	cpc	r21, r27
    1eb0:	08 f4       	brcc	.+2      	; 0x1eb4 <angle_rotate+0xee>
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	87 2f       	mov	r24, r23
    1eb6:	86 2b       	or	r24, r22
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f2       	breq	.-86     	; 0x1e66 <angle_rotate+0xa0>
  break;
    1ebc:	00 00       	nop
 }
 stop(); //Stop robot
    1ebe:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <stop>
}
    1ec2:	2a 96       	adiw	r28, 0x0a	; 10
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	0f 92       	push	r0
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1ee4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <left>
 angle_rotate(Degrees);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <angle_rotate>
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	0f 92       	push	r0
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1f0a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <right>
 angle_rotate(Degrees);
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <angle_rotate>
}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <linear_distance_mm>:

void linear_distance_mm(unsigned int DistanceInMM)
{
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	2a 97       	sbiw	r28, 0x0a	; 10
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	9a 87       	std	Y+10, r25	; 0x0a
    1f36:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	ab 83       	std	Y+3, r26	; 0x03
    1f44:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1f46:	1d 82       	std	Y+5, r1	; 0x05
    1f48:	1e 82       	std	Y+6, r1	; 0x06
    1f4a:	1f 82       	std	Y+7, r1	; 0x07
    1f4c:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	cc 01       	movw	r24, r24
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <__floatunsisf>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	25 ee       	ldi	r18, 0xE5	; 229
    1f6a:	30 ed       	ldi	r19, 0xD0	; 208
    1f6c:	4a ea       	ldi	r20, 0xAA	; 170
    1f6e:	50 e4       	ldi	r21, 0x40	; 64
    1f70:	0e 94 42 63 	call	0xc684	; 0xc684 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	ab 83       	std	Y+3, r26	; 0x03
    1f7e:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1f80:	69 81       	ldd	r22, Y+1	; 0x01
    1f82:	7a 81       	ldd	r23, Y+2	; 0x02
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	af 83       	std	Y+7, r26	; 0x07
    1f96:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    1f98:	10 92 78 04 	sts	0x0478, r1
    1f9c:	10 92 79 04 	sts	0x0479, r1
    1fa0:	10 92 7a 04 	sts	0x047A, r1
    1fa4:	10 92 7b 04 	sts	0x047B, r1
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1faa:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1fac:	20 91 78 04 	lds	r18, 0x0478
    1fb0:	30 91 79 04 	lds	r19, 0x0479
    1fb4:	40 91 7a 04 	lds	r20, 0x047A
    1fb8:	50 91 7b 04 	lds	r21, 0x047B
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	af 81       	ldd	r26, Y+7	; 0x07
    1fc2:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc4:	82 17       	cp	r24, r18
    1fc6:	93 07       	cpc	r25, r19
    1fc8:	a4 07       	cpc	r26, r20
    1fca:	b5 07       	cpc	r27, r21
    1fcc:	70 f7       	brcc	.-36     	; 0x1faa <linear_distance_mm+0x8a>
		{
			break;
    1fce:	00 00       	nop
		}
	}
	stop(); //Stop robot
    1fd0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <stop>
}
    1fd4:	2a 96       	adiw	r28, 0x0a	; 10
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	08 95       	ret

00001fe6 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	0f 92       	push	r0
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	forward();
    1ff6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
	linear_distance_mm(DistanceInMM);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <linear_distance_mm>
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret

0000200c <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	0f 92       	push	r0
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
	back();
    201c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <back>
	linear_distance_mm(DistanceInMM);
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <linear_distance_mm>
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <timer1_init>:

void timer1_init(void)
{
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    203a:	81 e8       	ldi	r24, 0x81	; 129
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	fc 01       	movw	r30, r24
    2040:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    2042:	85 e8       	ldi	r24, 0x85	; 133
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	2c ef       	ldi	r18, 0xFC	; 252
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    204c:	84 e8       	ldi	r24, 0x84	; 132
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	21 e0       	ldi	r18, 0x01	; 1
    2052:	fc 01       	movw	r30, r24
    2054:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    2056:	89 e8       	ldi	r24, 0x89	; 137
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	23 e0       	ldi	r18, 0x03	; 3
    205c:	fc 01       	movw	r30, r24
    205e:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    2060:	88 e8       	ldi	r24, 0x88	; 136
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	2f ef       	ldi	r18, 0xFF	; 255
    2066:	fc 01       	movw	r30, r24
    2068:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    206a:	8b e8       	ldi	r24, 0x8B	; 139
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	23 e0       	ldi	r18, 0x03	; 3
    2070:	fc 01       	movw	r30, r24
    2072:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    2074:	8a e8       	ldi	r24, 0x8A	; 138
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	2f ef       	ldi	r18, 0xFF	; 255
    207a:	fc 01       	movw	r30, r24
    207c:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    207e:	8d e8       	ldi	r24, 0x8D	; 141
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	23 e0       	ldi	r18, 0x03	; 3
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    2088:	8c e8       	ldi	r24, 0x8C	; 140
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	2f ef       	ldi	r18, 0xFF	; 255
    208e:	fc 01       	movw	r30, r24
    2090:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    2092:	87 e8       	ldi	r24, 0x87	; 135
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	23 e0       	ldi	r18, 0x03	; 3
    2098:	fc 01       	movw	r30, r24
    209a:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    209c:	86 e8       	ldi	r24, 0x86	; 134
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    20a6:	80 e8       	ldi	r24, 0x80	; 128
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	2b ea       	ldi	r18, 0xAB	; 171
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    20b0:	82 e8       	ldi	r24, 0x82	; 130
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	fc 01       	movw	r30, r24
    20b6:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    20b8:	81 e8       	ldi	r24, 0x81	; 129
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	2c e0       	ldi	r18, 0x0C	; 12
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	08 95       	ret

000020c8 <init_devices>:



void init_devices (void)
{
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    20d0:	f8 94       	cli
	port_init();
    20d2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <port_init>
	adc_init();
    20d6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <adc_init>
	timer5_init();
    20da:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <timer5_init>
	timer1_init();
    20de:	0e 94 19 10 	call	0x2032	; 0x2032 <timer1_init>
	left_position_encoder_interrupt_init();
    20e2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <left_position_encoder_interrupt_init>
 	right_position_encoder_interrupt_init();
    20e6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
    20ea:	78 94       	sei
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <whitesensor>:

void whitesensor()
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ADC_Conversion>
    2100:	80 93 7d 04 	sts	0x047D, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ADC_Conversion>
    210a:	80 93 7e 04 	sts	0x047E, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ADC_Conversion>
    2114:	80 93 7f 04 	sts	0x047F, r24
}
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <printlcd>:

void printlcd(int x,int y)
{
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	00 d0       	rcall	.+0      	; 0x2124 <printlcd+0x6>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	7c 83       	std	Y+4, r23	; 0x04
    2130:	6b 83       	std	Y+3, r22	; 0x03
	
	lcd_init();
    2132:	0e 94 8b 06 	call	0xd16	; 0xd16 <lcd_init>
	if (x>=0)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	99 23       	and	r25, r25
    213c:	4c f0       	brlt	.+18     	; 0x2150 <printlcd+0x32>
	lcd_print(1,1,x,1);
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	3a 81       	ldd	r19, Y+2	; 0x02
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	a9 01       	movw	r20, r18
    2148:	21 e0       	ldi	r18, 0x01	; 1
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	
	if(x<0)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	99 23       	and	r25, r25
    2156:	c4 f4       	brge	.+48     	; 0x2188 <printlcd+0x6a>
	{
		lcd_cursor(1,1);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
		lcd_string("-");
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <lcd_string>
		x=x*-1;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	90 95       	com	r25
    216e:	81 95       	neg	r24
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
		lcd_print(1,2,x,1);
    2176:	29 81       	ldd	r18, Y+1	; 0x01
    2178:	3a 81       	ldd	r19, Y+2	; 0x02
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	a9 01       	movw	r20, r18
    2180:	21 e0       	ldi	r18, 0x01	; 1
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	}
	
	if (y>=0)
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	99 23       	and	r25, r25
    218e:	4c f0       	brlt	.+18     	; 0x21a2 <printlcd+0x84>
	lcd_print(1,4,y,1);
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	a9 01       	movw	r20, r18
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	
	if(y<0)
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	99 23       	and	r25, r25
    21a8:	c4 f4       	brge	.+48     	; 0x21da <printlcd+0xbc>
	{
		lcd_cursor(1,4);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	64 e0       	ldi	r22, 0x04	; 4
    21ae:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
		lcd_string("-");
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	92 e0       	ldi	r25, 0x02	; 2
    21b6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <lcd_string>
		y=y*-1;
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	90 95       	com	r25
    21c0:	81 95       	neg	r24
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
		lcd_print(1,5,y,1);
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	65 e0       	ldi	r22, 0x05	; 5
    21d0:	a9 01       	movw	r20, r18
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	}
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret

000021e8 <linefollwer>:
int count=1;
int helper1=0;
int helper2=0;

void linefollwer()
{
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	e8 97       	sbiw	r28, 0x38	; 56
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <__stack+0x5>
				stop();
				printlcd(coor[0],coor[1]);
				break;
		}
		
	}
    2202:	00 00       	nop

void linefollwer()
{
	while(1)
	{
		whitesensor();
    2204:	0e 94 79 10 	call	0x20f2	; 0x20f2 <whitesensor>
		flag=0;
    2208:	10 92 7c 04 	sts	0x047C, r1
	
	
		if(Center_white_line>16)
    220c:	80 91 7e 04 	lds	r24, 0x047E
    2210:	81 31       	cpi	r24, 0x11	; 17
    2212:	88 f0       	brcs	.+34     	; 0x2236 <__stack+0x37>
		{	
			helper1=0;
    2214:	10 92 81 04 	sts	0x0481, r1
    2218:	10 92 80 04 	sts	0x0480, r1
			helper2=0;
    221c:	10 92 83 04 	sts	0x0483, r1
    2220:	10 92 82 04 	sts	0x0482, r1
			flag=1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 7c 04 	sts	0x047C, r24
			forward();
    222a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
			velocity(250,250);
    222e:	8a ef       	ldi	r24, 0xFA	; 250
    2230:	6a ef       	ldi	r22, 0xFA	; 250
    2232:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
		}
		
		if((Left_white_line>16) && (flag==0))
    2236:	80 91 7d 04 	lds	r24, 0x047D
    223a:	81 31       	cpi	r24, 0x11	; 17
    223c:	18 f1       	brcs	.+70     	; 0x2284 <__stack+0x85>
    223e:	80 91 7c 04 	lds	r24, 0x047C
    2242:	88 23       	and	r24, r24
    2244:	f9 f4       	brne	.+62     	; 0x2284 <__stack+0x85>
		{
			if(helper1>2)
    2246:	80 91 80 04 	lds	r24, 0x0480
    224a:	90 91 81 04 	lds	r25, 0x0481
    224e:	83 30       	cpi	r24, 0x03	; 3
    2250:	91 05       	cpc	r25, r1
    2252:	34 f0       	brlt	.+12     	; 0x2260 <__stack+0x61>
			{
				forward();
    2254:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
				velocity(130,250);
    2258:	82 e8       	ldi	r24, 0x82	; 130
    225a:	6a ef       	ldi	r22, 0xFA	; 250
    225c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
			}
			helper1=helper1+1;
    2260:	80 91 80 04 	lds	r24, 0x0480
    2264:	90 91 81 04 	lds	r25, 0x0481
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	90 93 81 04 	sts	0x0481, r25
    226e:	80 93 80 04 	sts	0x0480, r24
			flag=1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 7c 04 	sts	0x047C, r24
			forward();
    2278:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
			velocity(130,250);
    227c:	82 e8       	ldi	r24, 0x82	; 130
    227e:	6a ef       	ldi	r22, 0xFA	; 250
    2280:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
		}

		if((Right_white_line>16) && (flag==0))
    2284:	80 91 7f 04 	lds	r24, 0x047F
    2288:	81 31       	cpi	r24, 0x11	; 17
    228a:	18 f1       	brcs	.+70     	; 0x22d2 <__stack+0xd3>
    228c:	80 91 7c 04 	lds	r24, 0x047C
    2290:	88 23       	and	r24, r24
    2292:	f9 f4       	brne	.+62     	; 0x22d2 <__stack+0xd3>
		{
			if(helper2>2)
    2294:	80 91 82 04 	lds	r24, 0x0482
    2298:	90 91 83 04 	lds	r25, 0x0483
    229c:	83 30       	cpi	r24, 0x03	; 3
    229e:	91 05       	cpc	r25, r1
    22a0:	34 f0       	brlt	.+12     	; 0x22ae <__stack+0xaf>
			{
				forward();
    22a2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
				velocity(250,130);
    22a6:	8a ef       	ldi	r24, 0xFA	; 250
    22a8:	62 e8       	ldi	r22, 0x82	; 130
    22aa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
			}
			helper2=helper2+1;
    22ae:	80 91 82 04 	lds	r24, 0x0482
    22b2:	90 91 83 04 	lds	r25, 0x0483
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	90 93 83 04 	sts	0x0483, r25
    22bc:	80 93 82 04 	sts	0x0482, r24
			flag=1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 93 7c 04 	sts	0x047C, r24
			forward();
    22c6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
			velocity(250,130);
    22ca:	8a ef       	ldi	r24, 0xFA	; 250
    22cc:	62 e8       	ldi	r22, 0x82	; 130
    22ce:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
		}
		if(Center_white_line<16 && Left_white_line<16 && Right_white_line<16)
    22d2:	80 91 7e 04 	lds	r24, 0x047E
    22d6:	80 31       	cpi	r24, 0x10	; 16
    22d8:	08 f0       	brcs	.+2      	; 0x22dc <__stack+0xdd>
    22da:	54 c2       	rjmp	.+1192   	; 0x2784 <__stack+0x585>
    22dc:	80 91 7d 04 	lds	r24, 0x047D
    22e0:	80 31       	cpi	r24, 0x10	; 16
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	4f c2       	rjmp	.+1182   	; 0x2784 <__stack+0x585>
    22e6:	80 91 7f 04 	lds	r24, 0x047F
    22ea:	80 31       	cpi	r24, 0x10	; 16
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <__stack+0xf1>
    22ee:	4a c2       	rjmp	.+1172   	; 0x2784 <__stack+0x585>
		{
			if(helper1!=0)
    22f0:	80 91 80 04 	lds	r24, 0x0480
    22f4:	90 91 81 04 	lds	r25, 0x0481
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	09 f4       	brne	.+2      	; 0x22fe <__stack+0xff>
    22fc:	1b c1       	rjmp	.+566    	; 0x2534 <__stack+0x335>
			{
				forward();
    22fe:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
				velocity(130,250);
    2302:	82 e8       	ldi	r24, 0x82	; 130
    2304:	6a ef       	ldi	r22, 0xFA	; 250
    2306:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e2       	ldi	r26, 0x20	; 32
    2310:	b1 e4       	ldi	r27, 0x41	; 65
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	ab 83       	std	Y+3, r26	; 0x03
    2318:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    231a:	69 81       	ldd	r22, Y+1	; 0x01
    231c:	7a 81       	ldd	r23, Y+2	; 0x02
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	26 e6       	ldi	r18, 0x66	; 102
    2324:	36 e6       	ldi	r19, 0x66	; 102
    2326:	46 e6       	ldi	r20, 0x66	; 102
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	af 83       	std	Y+7, r26	; 0x07
    2338:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    233a:	11 e0       	ldi	r17, 0x01	; 1
    233c:	6d 81       	ldd	r22, Y+5	; 0x05
    233e:	7e 81       	ldd	r23, Y+6	; 0x06
    2340:	8f 81       	ldd	r24, Y+7	; 0x07
    2342:	98 85       	ldd	r25, Y+8	; 0x08
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2350:	88 23       	and	r24, r24
    2352:	0c f0       	brlt	.+2      	; 0x2356 <__stack+0x157>
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	11 23       	and	r17, r17
    2358:	29 f0       	breq	.+10     	; 0x2364 <__stack+0x165>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9a 87       	std	Y+10, r25	; 0x0a
    2360:	89 87       	std	Y+9, r24	; 0x09
    2362:	46 c0       	rjmp	.+140    	; 0x23f0 <__stack+0x1f1>
	else if (__tmp > 65535)
    2364:	11 e0       	ldi	r17, 0x01	; 1
    2366:	6d 81       	ldd	r22, Y+5	; 0x05
    2368:	7e 81       	ldd	r23, Y+6	; 0x06
    236a:	8f 81       	ldd	r24, Y+7	; 0x07
    236c:	98 85       	ldd	r25, Y+8	; 0x08
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    237a:	18 16       	cp	r1, r24
    237c:	0c f0       	brlt	.+2      	; 0x2380 <__stack+0x181>
    237e:	10 e0       	ldi	r17, 0x00	; 0
    2380:	11 23       	and	r17, r17
    2382:	61 f1       	breq	.+88     	; 0x23dc <__stack+0x1dd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2384:	69 81       	ldd	r22, Y+1	; 0x01
    2386:	7a 81       	ldd	r23, Y+2	; 0x02
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9a 87       	std	Y+10, r25	; 0x0a
    23aa:	89 87       	std	Y+9, r24	; 0x09
    23ac:	12 c0       	rjmp	.+36     	; 0x23d2 <__stack+0x1d3>
    23ae:	80 e7       	ldi	r24, 0x70	; 112
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	9c 87       	std	Y+12, r25	; 0x0c
    23b4:	8b 87       	std	Y+11, r24	; 0x0b
    23b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    23b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ba:	8c 01       	movw	r16, r24
    23bc:	c8 01       	movw	r24, r16
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <__stack+0x1bf>
    23c2:	8c 01       	movw	r16, r24
    23c4:	1c 87       	std	Y+12, r17	; 0x0c
    23c6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9a 87       	std	Y+10, r25	; 0x0a
    23d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	51 f7       	brne	.-44     	; 0x23ae <__stack+0x1af>
    23da:	17 c0       	rjmp	.+46     	; 0x240a <__stack+0x20b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	6d 81       	ldd	r22, Y+5	; 0x05
    23de:	7e 81       	ldd	r23, Y+6	; 0x06
    23e0:	8f 81       	ldd	r24, Y+7	; 0x07
    23e2:	98 85       	ldd	r25, Y+8	; 0x08
    23e4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9a 87       	std	Y+10, r25	; 0x0a
    23ee:	89 87       	std	Y+9, r24	; 0x09
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	9e 87       	std	Y+14, r25	; 0x0e
    23f6:	8d 87       	std	Y+13, r24	; 0x0d
    23f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fc:	8c 01       	movw	r16, r24
    23fe:	c8 01       	movw	r24, r16
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <__stack+0x201>
    2404:	8c 01       	movw	r16, r24
    2406:	1e 87       	std	Y+14, r17	; 0x0e
    2408:	0d 87       	std	Y+13, r16	; 0x0d
				_delay_ms(10);
				if(Center_white_line<16 && Left_white_line<16 && Right_white_line<16)
    240a:	80 91 7e 04 	lds	r24, 0x047E
    240e:	80 31       	cpi	r24, 0x10	; 16
    2410:	08 f0       	brcs	.+2      	; 0x2414 <__stack+0x215>
    2412:	90 c0       	rjmp	.+288    	; 0x2534 <__stack+0x335>
    2414:	80 91 7d 04 	lds	r24, 0x047D
    2418:	80 31       	cpi	r24, 0x10	; 16
    241a:	08 f0       	brcs	.+2      	; 0x241e <__stack+0x21f>
    241c:	8b c0       	rjmp	.+278    	; 0x2534 <__stack+0x335>
    241e:	80 91 7f 04 	lds	r24, 0x047F
    2422:	80 31       	cpi	r24, 0x10	; 16
    2424:	08 f0       	brcs	.+2      	; 0x2428 <__stack+0x229>
    2426:	86 c0       	rjmp	.+268    	; 0x2534 <__stack+0x335>
				{
					forward();
    2428:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
					velocity(130,250);
    242c:	82 e8       	ldi	r24, 0x82	; 130
    242e:	6a ef       	ldi	r22, 0xFA	; 250
    2430:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 ea       	ldi	r26, 0xA0	; 160
    243a:	b0 e4       	ldi	r27, 0x40	; 64
    243c:	8f 87       	std	Y+15, r24	; 0x0f
    243e:	98 8b       	std	Y+16, r25	; 0x10
    2440:	a9 8b       	std	Y+17, r26	; 0x11
    2442:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2444:	6f 85       	ldd	r22, Y+15	; 0x0f
    2446:	78 89       	ldd	r23, Y+16	; 0x10
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	26 e6       	ldi	r18, 0x66	; 102
    244e:	36 e6       	ldi	r19, 0x66	; 102
    2450:	46 e6       	ldi	r20, 0x66	; 102
    2452:	55 e4       	ldi	r21, 0x45	; 69
    2454:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	ad 8b       	std	Y+21, r26	; 0x15
    2462:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2464:	11 e0       	ldi	r17, 0x01	; 1
    2466:	6b 89       	ldd	r22, Y+19	; 0x13
    2468:	7c 89       	ldd	r23, Y+20	; 0x14
    246a:	8d 89       	ldd	r24, Y+21	; 0x15
    246c:	9e 89       	ldd	r25, Y+22	; 0x16
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    247a:	88 23       	and	r24, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <__stack+0x281>
    247e:	10 e0       	ldi	r17, 0x00	; 0
    2480:	11 23       	and	r17, r17
    2482:	29 f0       	breq	.+10     	; 0x248e <__stack+0x28f>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	98 8f       	std	Y+24, r25	; 0x18
    248a:	8f 8b       	std	Y+23, r24	; 0x17
    248c:	46 c0       	rjmp	.+140    	; 0x251a <__stack+0x31b>
	else if (__tmp > 65535)
    248e:	11 e0       	ldi	r17, 0x01	; 1
    2490:	6b 89       	ldd	r22, Y+19	; 0x13
    2492:	7c 89       	ldd	r23, Y+20	; 0x14
    2494:	8d 89       	ldd	r24, Y+21	; 0x15
    2496:	9e 89       	ldd	r25, Y+22	; 0x16
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	0c f0       	brlt	.+2      	; 0x24aa <__stack+0x2ab>
    24a8:	10 e0       	ldi	r17, 0x00	; 0
    24aa:	11 23       	and	r17, r17
    24ac:	61 f1       	breq	.+88     	; 0x2506 <__stack+0x307>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    24b0:	78 89       	ldd	r23, Y+16	; 0x10
    24b2:	89 89       	ldd	r24, Y+17	; 0x11
    24b4:	9a 89       	ldd	r25, Y+18	; 0x12
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	98 8f       	std	Y+24, r25	; 0x18
    24d4:	8f 8b       	std	Y+23, r24	; 0x17
    24d6:	12 c0       	rjmp	.+36     	; 0x24fc <__stack+0x2fd>
    24d8:	80 e7       	ldi	r24, 0x70	; 112
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	9a 8f       	std	Y+26, r25	; 0x1a
    24de:	89 8f       	std	Y+25, r24	; 0x19
    24e0:	89 8d       	ldd	r24, Y+25	; 0x19
    24e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24e4:	8c 01       	movw	r16, r24
    24e6:	c8 01       	movw	r24, r16
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <__stack+0x2e9>
    24ec:	8c 01       	movw	r16, r24
    24ee:	1a 8f       	std	Y+26, r17	; 0x1a
    24f0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	98 8f       	std	Y+24, r25	; 0x18
    24fa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	51 f7       	brne	.-44     	; 0x24d8 <__stack+0x2d9>
    2504:	17 c0       	rjmp	.+46     	; 0x2534 <__stack+0x335>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	6b 89       	ldd	r22, Y+19	; 0x13
    2508:	7c 89       	ldd	r23, Y+20	; 0x14
    250a:	8d 89       	ldd	r24, Y+21	; 0x15
    250c:	9e 89       	ldd	r25, Y+22	; 0x16
    250e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	98 8f       	std	Y+24, r25	; 0x18
    2518:	8f 8b       	std	Y+23, r24	; 0x17
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	9c 8f       	std	Y+28, r25	; 0x1c
    2520:	8b 8f       	std	Y+27, r24	; 0x1b
    2522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2526:	8c 01       	movw	r16, r24
    2528:	c8 01       	movw	r24, r16
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <__stack+0x32b>
    252e:	8c 01       	movw	r16, r24
    2530:	1c 8f       	std	Y+28, r17	; 0x1c
    2532:	0b 8f       	std	Y+27, r16	; 0x1b
					_delay_ms(5);
					
				}
			}
			if(helper2!=0)
    2534:	80 91 82 04 	lds	r24, 0x0482
    2538:	90 91 83 04 	lds	r25, 0x0483
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	09 f4       	brne	.+2      	; 0x2542 <__stack+0x343>
    2540:	1b c1       	rjmp	.+566    	; 0x2778 <__stack+0x579>
			{
				forward();
    2542:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
				velocity(250,130);
    2546:	8a ef       	ldi	r24, 0xFA	; 250
    2548:	62 e8       	ldi	r22, 0x82	; 130
    254a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e2       	ldi	r26, 0x20	; 32
    2554:	b1 e4       	ldi	r27, 0x41	; 65
    2556:	8d 8f       	std	Y+29, r24	; 0x1d
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	af 8f       	std	Y+31, r26	; 0x1f
    255c:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    255e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2560:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2564:	98 a1       	lds	r25, 0x48
    2566:	26 e6       	ldi	r18, 0x66	; 102
    2568:	36 e6       	ldi	r19, 0x66	; 102
    256a:	46 e6       	ldi	r20, 0x66	; 102
    256c:	55 e4       	ldi	r21, 0x45	; 69
    256e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	89 a3       	lds	r24, 0x59
    2578:	9a a3       	lds	r25, 0x5a
    257a:	ab a3       	lds	r26, 0x5b
    257c:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    257e:	11 e0       	ldi	r17, 0x01	; 1
    2580:	69 a1       	lds	r22, 0x49
    2582:	7a a1       	lds	r23, 0x4a
    2584:	8b a1       	lds	r24, 0x4b
    2586:	9c a1       	lds	r25, 0x4c
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2594:	88 23       	and	r24, r24
    2596:	0c f0       	brlt	.+2      	; 0x259a <__stack+0x39b>
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	11 23       	and	r17, r17
    259c:	29 f0       	breq	.+10     	; 0x25a8 <__stack+0x3a9>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9e a3       	lds	r25, 0x5e
    25a4:	8d a3       	lds	r24, 0x5d
    25a6:	46 c0       	rjmp	.+140    	; 0x2634 <__stack+0x435>
	else if (__tmp > 65535)
    25a8:	11 e0       	ldi	r17, 0x01	; 1
    25aa:	69 a1       	lds	r22, 0x49
    25ac:	7a a1       	lds	r23, 0x4a
    25ae:	8b a1       	lds	r24, 0x4b
    25b0:	9c a1       	lds	r25, 0x4c
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    25be:	18 16       	cp	r1, r24
    25c0:	0c f0       	brlt	.+2      	; 0x25c4 <__stack+0x3c5>
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	11 23       	and	r17, r17
    25c6:	61 f1       	breq	.+88     	; 0x2620 <__stack+0x421>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25ca:	7e 8d       	ldd	r23, Y+30	; 0x1e
    25cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ce:	98 a1       	lds	r25, 0x48
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e a3       	lds	r25, 0x5e
    25ee:	8d a3       	lds	r24, 0x5d
    25f0:	12 c0       	rjmp	.+36     	; 0x2616 <__stack+0x417>
    25f2:	80 e7       	ldi	r24, 0x70	; 112
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	98 a7       	lds	r25, 0x78
    25f8:	8f a3       	lds	r24, 0x5f
    25fa:	8f a1       	lds	r24, 0x4f
    25fc:	98 a5       	lds	r25, 0x68
    25fe:	8c 01       	movw	r16, r24
    2600:	c8 01       	movw	r24, r16
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <__stack+0x403>
    2606:	8c 01       	movw	r16, r24
    2608:	18 a7       	lds	r17, 0x78
    260a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8d a1       	lds	r24, 0x4d
    260e:	9e a1       	lds	r25, 0x4e
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9e a3       	lds	r25, 0x5e
    2614:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8d a1       	lds	r24, 0x4d
    2618:	9e a1       	lds	r25, 0x4e
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	51 f7       	brne	.-44     	; 0x25f2 <__stack+0x3f3>
    261e:	17 c0       	rjmp	.+46     	; 0x264e <__stack+0x44f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	69 a1       	lds	r22, 0x49
    2622:	7a a1       	lds	r23, 0x4a
    2624:	8b a1       	lds	r24, 0x4b
    2626:	9c a1       	lds	r25, 0x4c
    2628:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e a3       	lds	r25, 0x5e
    2632:	8d a3       	lds	r24, 0x5d
    2634:	8d a1       	lds	r24, 0x4d
    2636:	9e a1       	lds	r25, 0x4e
    2638:	9a a7       	lds	r25, 0x7a
    263a:	89 a7       	lds	r24, 0x79
    263c:	89 a5       	lds	r24, 0x69
    263e:	9a a5       	lds	r25, 0x6a
    2640:	8c 01       	movw	r16, r24
    2642:	c8 01       	movw	r24, r16
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <__stack+0x445>
    2648:	8c 01       	movw	r16, r24
    264a:	1a a7       	lds	r17, 0x7a
    264c:	09 a7       	lds	r16, 0x79
				_delay_ms(10);
				if(Center_white_line<16 && Left_white_line<16 && Right_white_line<16)
    264e:	80 91 7e 04 	lds	r24, 0x047E
    2652:	80 31       	cpi	r24, 0x10	; 16
    2654:	08 f0       	brcs	.+2      	; 0x2658 <__stack+0x459>
    2656:	90 c0       	rjmp	.+288    	; 0x2778 <__stack+0x579>
    2658:	80 91 7d 04 	lds	r24, 0x047D
    265c:	80 31       	cpi	r24, 0x10	; 16
    265e:	08 f0       	brcs	.+2      	; 0x2662 <__stack+0x463>
    2660:	8b c0       	rjmp	.+278    	; 0x2778 <__stack+0x579>
    2662:	80 91 7f 04 	lds	r24, 0x047F
    2666:	80 31       	cpi	r24, 0x10	; 16
    2668:	08 f0       	brcs	.+2      	; 0x266c <__stack+0x46d>
    266a:	86 c0       	rjmp	.+268    	; 0x2778 <__stack+0x579>
				{
					forward();
    266c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
					velocity(250,130);
    2670:	8a ef       	ldi	r24, 0xFA	; 250
    2672:	62 e8       	ldi	r22, 0x82	; 130
    2674:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 ea       	ldi	r26, 0xA0	; 160
    267e:	b0 e4       	ldi	r27, 0x40	; 64
    2680:	8b a7       	lds	r24, 0x7b
    2682:	9c a7       	lds	r25, 0x7c
    2684:	ad a7       	lds	r26, 0x7d
    2686:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6b a5       	lds	r22, 0x6b
    268a:	7c a5       	lds	r23, 0x6c
    268c:	8d a5       	lds	r24, 0x6d
    268e:	9e a5       	lds	r25, 0x6e
    2690:	26 e6       	ldi	r18, 0x66	; 102
    2692:	36 e6       	ldi	r19, 0x66	; 102
    2694:	46 e6       	ldi	r20, 0x66	; 102
    2696:	55 e4       	ldi	r21, 0x45	; 69
    2698:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	8f a7       	lds	r24, 0x7f
    26a2:	98 ab       	sts	0x58, r25
    26a4:	a9 ab       	sts	0x59, r26
    26a6:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    26a8:	11 e0       	ldi	r17, 0x01	; 1
    26aa:	6f a5       	lds	r22, 0x6f
    26ac:	78 a9       	sts	0x48, r23
    26ae:	89 a9       	sts	0x49, r24
    26b0:	9a a9       	sts	0x4a, r25
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    26be:	88 23       	and	r24, r24
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <__stack+0x4c5>
    26c2:	10 e0       	ldi	r17, 0x00	; 0
    26c4:	11 23       	and	r17, r17
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <__stack+0x4d3>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9c ab       	sts	0x5c, r25
    26ce:	8b ab       	sts	0x5b, r24
    26d0:	46 c0       	rjmp	.+140    	; 0x275e <__stack+0x55f>
	else if (__tmp > 65535)
    26d2:	11 e0       	ldi	r17, 0x01	; 1
    26d4:	6f a5       	lds	r22, 0x6f
    26d6:	78 a9       	sts	0x48, r23
    26d8:	89 a9       	sts	0x49, r24
    26da:	9a a9       	sts	0x4a, r25
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	0c f0       	brlt	.+2      	; 0x26ee <__stack+0x4ef>
    26ec:	10 e0       	ldi	r17, 0x00	; 0
    26ee:	11 23       	and	r17, r17
    26f0:	61 f1       	breq	.+88     	; 0x274a <__stack+0x54b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	6b a5       	lds	r22, 0x6b
    26f4:	7c a5       	lds	r23, 0x6c
    26f6:	8d a5       	lds	r24, 0x6d
    26f8:	9e a5       	lds	r25, 0x6e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9c ab       	sts	0x5c, r25
    2718:	8b ab       	sts	0x5b, r24
    271a:	12 c0       	rjmp	.+36     	; 0x2740 <__stack+0x541>
    271c:	80 e7       	ldi	r24, 0x70	; 112
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	9e ab       	sts	0x5e, r25
    2722:	8d ab       	sts	0x5d, r24
    2724:	8d a9       	sts	0x4d, r24
    2726:	9e a9       	sts	0x4e, r25
    2728:	8c 01       	movw	r16, r24
    272a:	c8 01       	movw	r24, r16
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <__stack+0x52d>
    2730:	8c 01       	movw	r16, r24
    2732:	1e ab       	sts	0x5e, r17
    2734:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8b a9       	sts	0x4b, r24
    2738:	9c a9       	sts	0x4c, r25
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9c ab       	sts	0x5c, r25
    273e:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8b a9       	sts	0x4b, r24
    2742:	9c a9       	sts	0x4c, r25
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	51 f7       	brne	.-44     	; 0x271c <__stack+0x51d>
    2748:	17 c0       	rjmp	.+46     	; 0x2778 <__stack+0x579>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	6f a5       	lds	r22, 0x6f
    274c:	78 a9       	sts	0x48, r23
    274e:	89 a9       	sts	0x49, r24
    2750:	9a a9       	sts	0x4a, r25
    2752:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9c ab       	sts	0x5c, r25
    275c:	8b ab       	sts	0x5b, r24
    275e:	8b a9       	sts	0x4b, r24
    2760:	9c a9       	sts	0x4c, r25
    2762:	98 af       	sts	0x78, r25
    2764:	8f ab       	sts	0x5f, r24
    2766:	8f a9       	sts	0x4f, r24
    2768:	98 ad       	sts	0x68, r25
    276a:	8c 01       	movw	r16, r24
    276c:	c8 01       	movw	r24, r16
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <__stack+0x56f>
    2772:	8c 01       	movw	r16, r24
    2774:	18 af       	sts	0x78, r17
    2776:	0f ab       	sts	0x5f, r16
					_delay_ms(5);
							
				}
			}
			forward();
    2778:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
			velocity(200,200);                      ///change
    277c:	88 ec       	ldi	r24, 0xC8	; 200
    277e:	68 ec       	ldi	r22, 0xC8	; 200
    2780:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
		}
		
		if((Center_white_line>16 && Left_white_line>16) || (Center_white_line>16 && Right_white_line>16))
    2784:	80 91 7e 04 	lds	r24, 0x047E
    2788:	81 31       	cpi	r24, 0x11	; 17
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__stack+0x595>
    278c:	80 91 7d 04 	lds	r24, 0x047D
    2790:	81 31       	cpi	r24, 0x11	; 17
    2792:	50 f4       	brcc	.+20     	; 0x27a8 <__stack+0x5a9>
    2794:	80 91 7e 04 	lds	r24, 0x047E
    2798:	81 31       	cpi	r24, 0x11	; 17
    279a:	08 f4       	brcc	.+2      	; 0x279e <__stack+0x59f>
    279c:	32 cd       	rjmp	.-1436   	; 0x2202 <__stack+0x3>
    279e:	80 91 7f 04 	lds	r24, 0x047F
    27a2:	81 31       	cpi	r24, 0x11	; 17
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <__stack+0x5a9>
    27a6:	2d cd       	rjmp	.-1446   	; 0x2202 <__stack+0x3>
		{
			    helper1=0;
    27a8:	10 92 81 04 	sts	0x0481, r1
    27ac:	10 92 80 04 	sts	0x0480, r1
				helper2=0;
    27b0:	10 92 83 04 	sts	0x0483, r1
    27b4:	10 92 82 04 	sts	0x0482, r1
				forward_mm(80);
    27b8:	80 e5       	ldi	r24, 0x50	; 80
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
				stop();
    27c0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <stop>
				printlcd(coor[0],coor[1]);
    27c4:	80 91 a6 04 	lds	r24, 0x04A6
    27c8:	90 91 a7 04 	lds	r25, 0x04A7
    27cc:	20 91 a8 04 	lds	r18, 0x04A8
    27d0:	30 91 a9 04 	lds	r19, 0x04A9
    27d4:	b9 01       	movw	r22, r18
    27d6:	0e 94 8f 10 	call	0x211e	; 0x211e <printlcd>
				break;
    27da:	00 00       	nop
		}
		
	}
}
    27dc:	e8 96       	adiw	r28, 0x38	; 56
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	08 95       	ret

000027f2 <servo1_pin_config>:


void servo1_pin_config (void)
{
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    27fa:	84 e2       	ldi	r24, 0x24	; 36
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	24 e2       	ldi	r18, 0x24	; 36
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	f9 01       	movw	r30, r18
    2804:	20 81       	ld	r18, Z
    2806:	20 62       	ori	r18, 0x20	; 32
    2808:	fc 01       	movw	r30, r24
    280a:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    280c:	85 e2       	ldi	r24, 0x25	; 37
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	25 e2       	ldi	r18, 0x25	; 37
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	f9 01       	movw	r30, r18
    2816:	20 81       	ld	r18, Z
    2818:	20 62       	ori	r18, 0x20	; 32
    281a:	fc 01       	movw	r30, r24
    281c:	20 83       	st	Z, r18
}
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	08 95       	ret

00002824 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    282c:	84 e2       	ldi	r24, 0x24	; 36
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	24 e2       	ldi	r18, 0x24	; 36
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	f9 01       	movw	r30, r18
    2836:	20 81       	ld	r18, Z
    2838:	20 64       	ori	r18, 0x40	; 64
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    283e:	85 e2       	ldi	r24, 0x25	; 37
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	25 e2       	ldi	r18, 0x25	; 37
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	f9 01       	movw	r30, r18
    2848:	20 81       	ld	r18, Z
    284a:	20 64       	ori	r18, 0x40	; 64
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
}
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    285e:	89 e8       	ldi	r24, 0x89	; 137
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	23 e0       	ldi	r18, 0x03	; 3
    2864:	fc 01       	movw	r30, r24
    2866:	20 83       	st	Z, r18
	OCR1AL = 0xFF; //Servo 1 off
    2868:	88 e8       	ldi	r24, 0x88	; 136
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	2f ef       	ldi	r18, 0xFF	; 255
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret

00002878 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    2880:	8b e8       	ldi	r24, 0x8B	; 139
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	23 e0       	ldi	r18, 0x03	; 3
    2886:	fc 01       	movw	r30, r24
    2888:	20 83       	st	Z, r18
	OCR1BL = 0xFF; //Servo 2 off
    288a:	8a e8       	ldi	r24, 0x8A	; 138
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	2f ef       	ldi	r18, 0xFF	; 255
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
}
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <uart2_init>:

unsigned char data;

void uart2_init(void)
{
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
    28a2:	81 ed       	ldi	r24, 0xD1	; 209
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	fc 01       	movw	r30, r24
    28a8:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    28aa:	80 ed       	ldi	r24, 0xD0	; 208
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	fc 01       	movw	r30, r24
    28b0:	10 82       	st	Z, r1
	UCSR2C = 0x06;
    28b2:	82 ed       	ldi	r24, 0xD2	; 210
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	26 e0       	ldi	r18, 0x06	; 6
    28b8:	fc 01       	movw	r30, r24
    28ba:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
    28bc:	84 ed       	ldi	r24, 0xD4	; 212
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	2f e5       	ldi	r18, 0x5F	; 95
    28c2:	fc 01       	movw	r30, r24
    28c4:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
    28c6:	85 ed       	ldi	r24, 0xD5	; 213
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	fc 01       	movw	r30, r24
    28cc:	10 82       	st	Z, r1
	UCSR2B = 0x98;
    28ce:	81 ed       	ldi	r24, 0xD1	; 209
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	28 e9       	ldi	r18, 0x98	; 152
    28d4:	fc 01       	movw	r30, r24
    28d6:	20 83       	st	Z, r18
}
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <__vector_51>:
int D1[12];              ///// change
int D2[4][4];	      ///// change
int summ1[12];          ////  change

SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	00 90 5b 00 	lds	r0, 0x005B
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	2f 93       	push	r18
    28f8:	3f 93       	push	r19
    28fa:	4f 93       	push	r20
    28fc:	5f 93       	push	r21
    28fe:	6f 93       	push	r22
    2900:	7f 93       	push	r23
    2902:	8f 93       	push	r24
    2904:	9f 93       	push	r25
    2906:	af 93       	push	r26
    2908:	bf 93       	push	r27
    290a:	ef 93       	push	r30
    290c:	ff 93       	push	r31
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	c4 54       	subi	r28, 0x44	; 68
    2918:	d0 40       	sbci	r29, 0x00	; 0
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	cd bf       	out	0x3d, r28	; 61
	{
		summ1[i-12-(2*y)]=data-64;
	}
	i=i+1;
	
}
    291e:	2d b7       	in	r18, 0x3d	; 61
    2920:	3e b7       	in	r19, 0x3e	; 62
int D1[12];              ///// change
int D2[4][4];	      ///// change
int summ1[12];          ////  change

SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    2922:	8d b7       	in	r24, 0x3d	; 61
    2924:	9e b7       	in	r25, 0x3e	; 62
    2926:	ac 01       	movw	r20, r24
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable
    2928:	86 ed       	ldi	r24, 0xD6	; 214
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	fc 01       	movw	r30, r24
    292e:	80 81       	ld	r24, Z
    2930:	80 93 cc 04 	sts	0x04CC, r24

	UDR2 = data; 			//echo data back to PC
    2934:	86 ed       	ldi	r24, 0xD6	; 214
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	60 91 cc 04 	lds	r22, 0x04CC
    293c:	fc 01       	movw	r30, r24
    293e:	60 83       	st	Z, r22
	
	int i=0,y,z,a[12];
    2940:	1e 82       	std	Y+6, r1	; 0x06
    2942:	1d 82       	std	Y+5, r1	; 0x05
	if(i<12)
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	8c 30       	cpi	r24, 0x0C	; 12
    294a:	91 05       	cpc	r25, r1
    294c:	84 f4       	brge	.+32     	; 0x296e <__vector_51+0x90>
	{
		D1[i]=data-64;
    294e:	80 91 cc 04 	lds	r24, 0x04CC
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	bc 01       	movw	r22, r24
    2958:	60 54       	subi	r22, 0x40	; 64
    295a:	70 40       	sbci	r23, 0x00	; 0
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	8d 52       	subi	r24, 0x2D	; 45
    2966:	9b 4f       	sbci	r25, 0xFB	; 251
    2968:	fc 01       	movw	r30, r24
    296a:	71 83       	std	Z+1, r23	; 0x01
    296c:	60 83       	st	Z, r22
	}
	
	if(i==12)
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	8c 30       	cpi	r24, 0x0C	; 12
    2974:	91 05       	cpc	r25, r1
    2976:	69 f4       	brne	.+26     	; 0x2992 <__vector_51+0xb4>
	y=((data-64)/2);
    2978:	80 91 cc 04 	lds	r24, 0x04CC
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	80 54       	subi	r24, 0x40	; 64
    2982:	90 40       	sbci	r25, 0x00	; 0
    2984:	99 23       	and	r25, r25
    2986:	0c f4       	brge	.+2      	; 0x298a <__vector_51+0xac>
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	95 95       	asr	r25
    298c:	87 95       	ror	r24
    298e:	9a 83       	std	Y+2, r25	; 0x02
    2990:	89 83       	std	Y+1, r24	; 0x01
	z=y;
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	8f 83       	std	Y+7, r24	; 0x07
	
	int D2[2][z], count=1;
    299a:	8f 81       	ldd	r24, Y+7	; 0x07
    299c:	98 85       	ldd	r25, Y+8	; 0x08
    299e:	bc 01       	movw	r22, r24
    29a0:	61 50       	subi	r22, 0x01	; 1
    29a2:	70 40       	sbci	r23, 0x00	; 0
    29a4:	7a 87       	std	Y+10, r23	; 0x0a
    29a6:	69 87       	std	Y+9, r22	; 0x09
    29a8:	bc 01       	movw	r22, r24
    29aa:	7b 01       	movw	r14, r22
    29ac:	ee 0c       	add	r14, r14
    29ae:	ff 1c       	adc	r15, r15
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	6d b7       	in	r22, 0x3d	; 61
    29ba:	7e b7       	in	r23, 0x3e	; 62
    29bc:	68 1b       	sub	r22, r24
    29be:	79 0b       	sbc	r23, r25
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	7e bf       	out	0x3e, r23	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	6d bf       	out	0x3d, r22	; 61
    29ca:	8d b7       	in	r24, 0x3d	; 61
    29cc:	9e b7       	in	r25, 0x3e	; 62
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	00 96       	adiw	r24, 0x00	; 0
    29d2:	9c 87       	std	Y+12, r25	; 0x0c
    29d4:	8b 87       	std	Y+11, r24	; 0x0b
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
	if(i>12)
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	8d 30       	cpi	r24, 0x0D	; 13
    29e4:	91 05       	cpc	r25, r1
    29e6:	9c f1       	brlt	.+102    	; 0x2a4e <__vector_51+0x170>
	{
		if(count>=0)
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	99 23       	and	r25, r25
    29ee:	14 f1       	brlt	.+68     	; 0x2a34 <__vector_51+0x156>
		{
			//b[i-12]=data-64;
			D2[count][y]=data-64;
    29f0:	80 91 cc 04 	lds	r24, 0x04CC
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	bc 01       	movw	r22, r24
    29fa:	60 54       	subi	r22, 0x40	; 64
    29fc:	70 40       	sbci	r23, 0x00	; 0
    29fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a00:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a02:	a9 81       	ldd	r26, Y+1	; 0x01
    2a04:	ba 81       	ldd	r27, Y+2	; 0x02
    2a06:	0b 81       	ldd	r16, Y+3	; 0x03
    2a08:	1c 81       	ldd	r17, Y+4	; 0x04
    2a0a:	e0 9e       	mul	r14, r16
    2a0c:	c0 01       	movw	r24, r0
    2a0e:	e1 9e       	mul	r14, r17
    2a10:	90 0d       	add	r25, r0
    2a12:	f0 9e       	mul	r15, r16
    2a14:	90 0d       	add	r25, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	aa 0f       	add	r26, r26
    2a1a:	bb 1f       	adc	r27, r27
    2a1c:	8a 0f       	add	r24, r26
    2a1e:	9b 1f       	adc	r25, r27
    2a20:	8e 0f       	add	r24, r30
    2a22:	9f 1f       	adc	r25, r31
    2a24:	fc 01       	movw	r30, r24
    2a26:	71 83       	std	Z+1, r23	; 0x01
    2a28:	60 83       	st	Z, r22
			count-=1;
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(count<0)
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	99 23       	and	r25, r25
    2a3a:	4c f4       	brge	.+18     	; 0x2a4e <__vector_51+0x170>
		{
			y=y-1;
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
			count=1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	int summ1[16];
	if(i>12+y)
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	bc 01       	movw	r22, r24
    2a54:	64 5f       	subi	r22, 0xF4	; 244
    2a56:	7f 4f       	sbci	r23, 0xFF	; 255
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	68 17       	cp	r22, r24
    2a5e:	79 07       	cpc	r23, r25
    2a60:	fc f4       	brge	.+62     	; 0x2aa0 <__vector_51+0x1c2>
	{
		summ1[i-12-(2*y)]=data-64;
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	bc 01       	movw	r22, r24
    2a68:	6c 50       	subi	r22, 0x0C	; 12
    2a6a:	70 40       	sbci	r23, 0x00	; 0
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	8e 1b       	sub	r24, r30
    2a76:	9f 0b       	sbc	r25, r31
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	86 0f       	add	r24, r22
    2a7e:	97 1f       	adc	r25, r23
    2a80:	60 91 cc 04 	lds	r22, 0x04CC
    2a84:	66 2f       	mov	r22, r22
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	60 54       	subi	r22, 0x40	; 64
    2a8a:	70 40       	sbci	r23, 0x00	; 0
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	fe 01       	movw	r30, r28
    2a92:	31 96       	adiw	r30, 0x01	; 1
    2a94:	8e 0f       	add	r24, r30
    2a96:	9f 1f       	adc	r25, r31
    2a98:	84 96       	adiw	r24, 0x24	; 36
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	71 83       	std	Z+1, r23	; 0x01
    2a9e:	60 83       	st	Z, r22
	}
	i=i+1;
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	5e bf       	out	0x3e, r21	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	4d bf       	out	0x3d, r20	; 61
	
}
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	3e bf       	out	0x3e, r19	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	2d bf       	out	0x3d, r18	; 61
    2abe:	cc 5b       	subi	r28, 0xBC	; 188
    2ac0:	df 4f       	sbci	r29, 0xFF	; 255
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	ff 90       	pop	r15
    2ae8:	ef 90       	pop	r14
    2aea:	0f 90       	pop	r0
    2aec:	00 92 5b 00 	sts	0x005B, r0
    2af0:	0f 90       	pop	r0
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	0f 90       	pop	r0
    2af6:	1f 90       	pop	r1
    2af8:	18 95       	reti

00002afa <matrix1>:
unsigned char iii = 0;
unsigned char jjj = 0;
unsigned char kkk= 0;

void matrix1()
{    
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	aa 97       	sbiw	r28, 0x2a	; 42
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
	 for(jjj=0;jjj<65;jjj++)     ///////////////////////////////// arm down
    2b12:	10 92 85 04 	sts	0x0485, r1
    2b16:	89 c0       	rjmp	.+274    	; 0x2c2a <matrix1+0x130>
	 {
		 servo_1(jjj);
    2b18:	80 91 85 04 	lds	r24, 0x0485
    2b1c:	0e 94 44 0c 	call	0x1888	; 0x1888 <servo_1>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 ef       	ldi	r26, 0xF0	; 240
    2b26:	b1 e4       	ldi	r27, 0x41	; 65
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	ab 83       	std	Y+3, r26	; 0x03
    2b2e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	69 81       	ldd	r22, Y+1	; 0x01
    2b32:	7a 81       	ldd	r23, Y+2	; 0x02
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	26 e6       	ldi	r18, 0x66	; 102
    2b3a:	36 e6       	ldi	r19, 0x66	; 102
    2b3c:	46 e6       	ldi	r20, 0x66	; 102
    2b3e:	55 e4       	ldi	r21, 0x45	; 69
    2b40:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	af 83       	std	Y+7, r26	; 0x07
    2b4e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b50:	11 e0       	ldi	r17, 0x01	; 1
    2b52:	6d 81       	ldd	r22, Y+5	; 0x05
    2b54:	7e 81       	ldd	r23, Y+6	; 0x06
    2b56:	8f 81       	ldd	r24, Y+7	; 0x07
    2b58:	98 85       	ldd	r25, Y+8	; 0x08
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <matrix1+0x72>
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	11 23       	and	r17, r17
    2b6e:	29 f0       	breq	.+10     	; 0x2b7a <matrix1+0x80>
		__ticks = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9a 87       	std	Y+10, r25	; 0x0a
    2b76:	89 87       	std	Y+9, r24	; 0x09
    2b78:	46 c0       	rjmp	.+140    	; 0x2c06 <matrix1+0x10c>
	else if (__tmp > 65535)
    2b7a:	11 e0       	ldi	r17, 0x01	; 1
    2b7c:	6d 81       	ldd	r22, Y+5	; 0x05
    2b7e:	7e 81       	ldd	r23, Y+6	; 0x06
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	98 85       	ldd	r25, Y+8	; 0x08
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	0c f0       	brlt	.+2      	; 0x2b96 <matrix1+0x9c>
    2b94:	10 e0       	ldi	r17, 0x00	; 0
    2b96:	11 23       	and	r17, r17
    2b98:	61 f1       	breq	.+88     	; 0x2bf2 <matrix1+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	69 81       	ldd	r22, Y+1	; 0x01
    2b9c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9a 87       	std	Y+10, r25	; 0x0a
    2bc0:	89 87       	std	Y+9, r24	; 0x09
    2bc2:	12 c0       	rjmp	.+36     	; 0x2be8 <matrix1+0xee>
    2bc4:	80 e7       	ldi	r24, 0x70	; 112
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	9c 87       	std	Y+12, r25	; 0x0c
    2bca:	8b 87       	std	Y+11, r24	; 0x0b
    2bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bce:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd0:	8c 01       	movw	r16, r24
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <matrix1+0xda>
    2bd8:	8c 01       	movw	r16, r24
    2bda:	1c 87       	std	Y+12, r17	; 0x0c
    2bdc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9a 87       	std	Y+10, r25	; 0x0a
    2be6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	51 f7       	brne	.-44     	; 0x2bc4 <matrix1+0xca>
    2bf0:	17 c0       	rjmp	.+46     	; 0x2c20 <matrix1+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	6d 81       	ldd	r22, Y+5	; 0x05
    2bf4:	7e 81       	ldd	r23, Y+6	; 0x06
    2bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf8:	98 85       	ldd	r25, Y+8	; 0x08
    2bfa:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a 87       	std	Y+10, r25	; 0x0a
    2c04:	89 87       	std	Y+9, r24	; 0x09
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	9e 87       	std	Y+14, r25	; 0x0e
    2c0c:	8d 87       	std	Y+13, r24	; 0x0d
    2c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c12:	8c 01       	movw	r16, r24
    2c14:	c8 01       	movw	r24, r16
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <matrix1+0x11c>
    2c1a:	8c 01       	movw	r16, r24
    2c1c:	1e 87       	std	Y+14, r17	; 0x0e
    2c1e:	0d 87       	std	Y+13, r16	; 0x0d
unsigned char jjj = 0;
unsigned char kkk= 0;

void matrix1()
{    
	 for(jjj=0;jjj<65;jjj++)     ///////////////////////////////// arm down
    2c20:	80 91 85 04 	lds	r24, 0x0485
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	80 93 85 04 	sts	0x0485, r24
    2c2a:	80 91 85 04 	lds	r24, 0x0485
    2c2e:	81 34       	cpi	r24, 0x41	; 65
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <matrix1+0x13a>
    2c32:	72 cf       	rjmp	.-284    	; 0x2b18 <matrix1+0x1e>
	 {
		 servo_1(jjj);
		 _delay_ms(30);
	 }
	 
	 for (iii=65; iii>15; iii--)  ////////////////////////////// gripper grip
    2c34:	81 e4       	ldi	r24, 0x41	; 65
    2c36:	80 93 84 04 	sts	0x0484, r24
    2c3a:	89 c0       	rjmp	.+274    	; 0x2d4e <matrix1+0x254>
	 {
		 servo_2(iii);
    2c3c:	80 91 84 04 	lds	r24, 0x0484
    2c40:	0e 94 92 0c 	call	0x1924	; 0x1924 <servo_2>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 ef       	ldi	r26, 0xF0	; 240
    2c4a:	b1 e4       	ldi	r27, 0x41	; 65
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f
    2c4e:	98 8b       	std	Y+16, r25	; 0x10
    2c50:	a9 8b       	std	Y+17, r26	; 0x11
    2c52:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c56:	78 89       	ldd	r23, Y+16	; 0x10
    2c58:	89 89       	ldd	r24, Y+17	; 0x11
    2c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5c:	26 e6       	ldi	r18, 0x66	; 102
    2c5e:	36 e6       	ldi	r19, 0x66	; 102
    2c60:	46 e6       	ldi	r20, 0x66	; 102
    2c62:	55 e4       	ldi	r21, 0x45	; 69
    2c64:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	9c 8b       	std	Y+20, r25	; 0x14
    2c70:	ad 8b       	std	Y+21, r26	; 0x15
    2c72:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2c74:	11 e0       	ldi	r17, 0x01	; 1
    2c76:	6b 89       	ldd	r22, Y+19	; 0x13
    2c78:	7c 89       	ldd	r23, Y+20	; 0x14
    2c7a:	8d 89       	ldd	r24, Y+21	; 0x15
    2c7c:	9e 89       	ldd	r25, Y+22	; 0x16
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	0c f0       	brlt	.+2      	; 0x2c90 <matrix1+0x196>
    2c8e:	10 e0       	ldi	r17, 0x00	; 0
    2c90:	11 23       	and	r17, r17
    2c92:	29 f0       	breq	.+10     	; 0x2c9e <matrix1+0x1a4>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	98 8f       	std	Y+24, r25	; 0x18
    2c9a:	8f 8b       	std	Y+23, r24	; 0x17
    2c9c:	46 c0       	rjmp	.+140    	; 0x2d2a <matrix1+0x230>
	else if (__tmp > 65535)
    2c9e:	11 e0       	ldi	r17, 0x01	; 1
    2ca0:	6b 89       	ldd	r22, Y+19	; 0x13
    2ca2:	7c 89       	ldd	r23, Y+20	; 0x14
    2ca4:	8d 89       	ldd	r24, Y+21	; 0x15
    2ca6:	9e 89       	ldd	r25, Y+22	; 0x16
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	0c f0       	brlt	.+2      	; 0x2cba <matrix1+0x1c0>
    2cb8:	10 e0       	ldi	r17, 0x00	; 0
    2cba:	11 23       	and	r17, r17
    2cbc:	61 f1       	breq	.+88     	; 0x2d16 <matrix1+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cc0:	78 89       	ldd	r23, Y+16	; 0x10
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	98 8f       	std	Y+24, r25	; 0x18
    2ce4:	8f 8b       	std	Y+23, r24	; 0x17
    2ce6:	12 c0       	rjmp	.+36     	; 0x2d0c <matrix1+0x212>
    2ce8:	80 e7       	ldi	r24, 0x70	; 112
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	9a 8f       	std	Y+26, r25	; 0x1a
    2cee:	89 8f       	std	Y+25, r24	; 0x19
    2cf0:	89 8d       	ldd	r24, Y+25	; 0x19
    2cf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <matrix1+0x1fe>
    2cfc:	8c 01       	movw	r16, r24
    2cfe:	1a 8f       	std	Y+26, r17	; 0x1a
    2d00:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	98 8f       	std	Y+24, r25	; 0x18
    2d0a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	51 f7       	brne	.-44     	; 0x2ce8 <matrix1+0x1ee>
    2d14:	17 c0       	rjmp	.+46     	; 0x2d44 <matrix1+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6b 89       	ldd	r22, Y+19	; 0x13
    2d18:	7c 89       	ldd	r23, Y+20	; 0x14
    2d1a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d1e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	98 8f       	std	Y+24, r25	; 0x18
    2d28:	8f 8b       	std	Y+23, r24	; 0x17
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	9c 8f       	std	Y+28, r25	; 0x1c
    2d30:	8b 8f       	std	Y+27, r24	; 0x1b
    2d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d36:	8c 01       	movw	r16, r24
    2d38:	c8 01       	movw	r24, r16
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <matrix1+0x240>
    2d3e:	8c 01       	movw	r16, r24
    2d40:	1c 8f       	std	Y+28, r17	; 0x1c
    2d42:	0b 8f       	std	Y+27, r16	; 0x1b
	 {
		 servo_1(jjj);
		 _delay_ms(30);
	 }
	 
	 for (iii=65; iii>15; iii--)  ////////////////////////////// gripper grip
    2d44:	80 91 84 04 	lds	r24, 0x0484
    2d48:	81 50       	subi	r24, 0x01	; 1
    2d4a:	80 93 84 04 	sts	0x0484, r24
    2d4e:	80 91 84 04 	lds	r24, 0x0484
    2d52:	80 31       	cpi	r24, 0x10	; 16
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <matrix1+0x25e>
    2d56:	72 cf       	rjmp	.-284    	; 0x2c3c <matrix1+0x142>
	 {
		 servo_2(iii);
		 _delay_ms(30);
	 }
	 
	 for(jjj=55;jjj>0;jjj--)    ////////////////////////////////  arm up
    2d58:	87 e3       	ldi	r24, 0x37	; 55
    2d5a:	80 93 85 04 	sts	0x0485, r24
    2d5e:	89 c0       	rjmp	.+274    	; 0x2e72 <matrix1+0x378>
	 {
		 servo_1(jjj);
    2d60:	80 91 85 04 	lds	r24, 0x0485
    2d64:	0e 94 44 0c 	call	0x1888	; 0x1888 <servo_1>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 ef       	ldi	r26, 0xF0	; 240
    2d6e:	b1 e4       	ldi	r27, 0x41	; 65
    2d70:	8d 8f       	std	Y+29, r24	; 0x1d
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	af 8f       	std	Y+31, r26	; 0x1f
    2d76:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d7a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2d7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7e:	98 a1       	lds	r25, 0x48
    2d80:	26 e6       	ldi	r18, 0x66	; 102
    2d82:	36 e6       	ldi	r19, 0x66	; 102
    2d84:	46 e6       	ldi	r20, 0x66	; 102
    2d86:	55 e4       	ldi	r21, 0x45	; 69
    2d88:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	89 a3       	lds	r24, 0x59
    2d92:	9a a3       	lds	r25, 0x5a
    2d94:	ab a3       	lds	r26, 0x5b
    2d96:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2d98:	11 e0       	ldi	r17, 0x01	; 1
    2d9a:	69 a1       	lds	r22, 0x49
    2d9c:	7a a1       	lds	r23, 0x4a
    2d9e:	8b a1       	lds	r24, 0x4b
    2da0:	9c a1       	lds	r25, 0x4c
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	0c f0       	brlt	.+2      	; 0x2db4 <matrix1+0x2ba>
    2db2:	10 e0       	ldi	r17, 0x00	; 0
    2db4:	11 23       	and	r17, r17
    2db6:	29 f0       	breq	.+10     	; 0x2dc2 <matrix1+0x2c8>
		__ticks = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9e a3       	lds	r25, 0x5e
    2dbe:	8d a3       	lds	r24, 0x5d
    2dc0:	46 c0       	rjmp	.+140    	; 0x2e4e <matrix1+0x354>
	else if (__tmp > 65535)
    2dc2:	11 e0       	ldi	r17, 0x01	; 1
    2dc4:	69 a1       	lds	r22, 0x49
    2dc6:	7a a1       	lds	r23, 0x4a
    2dc8:	8b a1       	lds	r24, 0x4b
    2dca:	9c a1       	lds	r25, 0x4c
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	3f ef       	ldi	r19, 0xFF	; 255
    2dd0:	4f e7       	ldi	r20, 0x7F	; 127
    2dd2:	57 e4       	ldi	r21, 0x47	; 71
    2dd4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    2dd8:	18 16       	cp	r1, r24
    2dda:	0c f0       	brlt	.+2      	; 0x2dde <matrix1+0x2e4>
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	11 23       	and	r17, r17
    2de0:	61 f1       	breq	.+88     	; 0x2e3a <matrix1+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2de4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2de6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2de8:	98 a1       	lds	r25, 0x48
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9e a3       	lds	r25, 0x5e
    2e08:	8d a3       	lds	r24, 0x5d
    2e0a:	12 c0       	rjmp	.+36     	; 0x2e30 <matrix1+0x336>
    2e0c:	80 e7       	ldi	r24, 0x70	; 112
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	98 a7       	lds	r25, 0x78
    2e12:	8f a3       	lds	r24, 0x5f
    2e14:	8f a1       	lds	r24, 0x4f
    2e16:	98 a5       	lds	r25, 0x68
    2e18:	8c 01       	movw	r16, r24
    2e1a:	c8 01       	movw	r24, r16
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <matrix1+0x322>
    2e20:	8c 01       	movw	r16, r24
    2e22:	18 a7       	lds	r17, 0x78
    2e24:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e26:	8d a1       	lds	r24, 0x4d
    2e28:	9e a1       	lds	r25, 0x4e
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	9e a3       	lds	r25, 0x5e
    2e2e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e30:	8d a1       	lds	r24, 0x4d
    2e32:	9e a1       	lds	r25, 0x4e
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	51 f7       	brne	.-44     	; 0x2e0c <matrix1+0x312>
    2e38:	17 c0       	rjmp	.+46     	; 0x2e68 <matrix1+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3a:	69 a1       	lds	r22, 0x49
    2e3c:	7a a1       	lds	r23, 0x4a
    2e3e:	8b a1       	lds	r24, 0x4b
    2e40:	9c a1       	lds	r25, 0x4c
    2e42:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	9e a3       	lds	r25, 0x5e
    2e4c:	8d a3       	lds	r24, 0x5d
    2e4e:	8d a1       	lds	r24, 0x4d
    2e50:	9e a1       	lds	r25, 0x4e
    2e52:	9a a7       	lds	r25, 0x7a
    2e54:	89 a7       	lds	r24, 0x79
    2e56:	89 a5       	lds	r24, 0x69
    2e58:	9a a5       	lds	r25, 0x6a
    2e5a:	8c 01       	movw	r16, r24
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <matrix1+0x364>
    2e62:	8c 01       	movw	r16, r24
    2e64:	1a a7       	lds	r17, 0x7a
    2e66:	09 a7       	lds	r16, 0x79
	 {
		 servo_2(iii);
		 _delay_ms(30);
	 }
	 
	 for(jjj=55;jjj>0;jjj--)    ////////////////////////////////  arm up
    2e68:	80 91 85 04 	lds	r24, 0x0485
    2e6c:	81 50       	subi	r24, 0x01	; 1
    2e6e:	80 93 85 04 	sts	0x0485, r24
    2e72:	80 91 85 04 	lds	r24, 0x0485
    2e76:	88 23       	and	r24, r24
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <matrix1+0x382>
    2e7a:	72 cf       	rjmp	.-284    	; 0x2d60 <matrix1+0x266>
	 {
		 servo_1(jjj);
		 _delay_ms(30);
	 }
	 
}
    2e7c:	aa 96       	adiw	r28, 0x2a	; 42
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	08 95       	ret

00002e92 <matrix2>:

void matrix2 (void)
{
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	e8 97       	sbiw	r28, 0x38	; 56
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
	 for(jjj=15;jjj<65;jjj++)     ///////////////////////////////// arm down
    2eaa:	8f e0       	ldi	r24, 0x0F	; 15
    2eac:	80 93 85 04 	sts	0x0485, r24
    2eb0:	89 c0       	rjmp	.+274    	; 0x2fc4 <matrix2+0x132>
	 {
		 servo_1(jjj);
    2eb2:	80 91 85 04 	lds	r24, 0x0485
    2eb6:	0e 94 44 0c 	call	0x1888	; 0x1888 <servo_1>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 ef       	ldi	r26, 0xF0	; 240
    2ec0:	b1 e4       	ldi	r27, 0x41	; 65
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	ab 83       	std	Y+3, r26	; 0x03
    2ec8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	69 81       	ldd	r22, Y+1	; 0x01
    2ecc:	7a 81       	ldd	r23, Y+2	; 0x02
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	26 e6       	ldi	r18, 0x66	; 102
    2ed4:	36 e6       	ldi	r19, 0x66	; 102
    2ed6:	46 e6       	ldi	r20, 0x66	; 102
    2ed8:	55 e4       	ldi	r21, 0x45	; 69
    2eda:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	af 83       	std	Y+7, r26	; 0x07
    2ee8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2eea:	11 e0       	ldi	r17, 0x01	; 1
    2eec:	6d 81       	ldd	r22, Y+5	; 0x05
    2eee:	7e 81       	ldd	r23, Y+6	; 0x06
    2ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef2:	98 85       	ldd	r25, Y+8	; 0x08
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	0c f0       	brlt	.+2      	; 0x2f06 <matrix2+0x74>
    2f04:	10 e0       	ldi	r17, 0x00	; 0
    2f06:	11 23       	and	r17, r17
    2f08:	29 f0       	breq	.+10     	; 0x2f14 <matrix2+0x82>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9a 87       	std	Y+10, r25	; 0x0a
    2f10:	89 87       	std	Y+9, r24	; 0x09
    2f12:	46 c0       	rjmp	.+140    	; 0x2fa0 <matrix2+0x10e>
	else if (__tmp > 65535)
    2f14:	11 e0       	ldi	r17, 0x01	; 1
    2f16:	6d 81       	ldd	r22, Y+5	; 0x05
    2f18:	7e 81       	ldd	r23, Y+6	; 0x06
    2f1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f1c:	98 85       	ldd	r25, Y+8	; 0x08
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <matrix2+0x9e>
    2f2e:	10 e0       	ldi	r17, 0x00	; 0
    2f30:	11 23       	and	r17, r17
    2f32:	61 f1       	breq	.+88     	; 0x2f8c <matrix2+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f34:	69 81       	ldd	r22, Y+1	; 0x01
    2f36:	7a 81       	ldd	r23, Y+2	; 0x02
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9a 87       	std	Y+10, r25	; 0x0a
    2f5a:	89 87       	std	Y+9, r24	; 0x09
    2f5c:	12 c0       	rjmp	.+36     	; 0x2f82 <matrix2+0xf0>
    2f5e:	80 e7       	ldi	r24, 0x70	; 112
    2f60:	91 e0       	ldi	r25, 0x01	; 1
    2f62:	9c 87       	std	Y+12, r25	; 0x0c
    2f64:	8b 87       	std	Y+11, r24	; 0x0b
    2f66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f6a:	8c 01       	movw	r16, r24
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <matrix2+0xdc>
    2f72:	8c 01       	movw	r16, r24
    2f74:	1c 87       	std	Y+12, r17	; 0x0c
    2f76:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9a 87       	std	Y+10, r25	; 0x0a
    2f80:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	51 f7       	brne	.-44     	; 0x2f5e <matrix2+0xcc>
    2f8a:	17 c0       	rjmp	.+46     	; 0x2fba <matrix2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6d 81       	ldd	r22, Y+5	; 0x05
    2f8e:	7e 81       	ldd	r23, Y+6	; 0x06
    2f90:	8f 81       	ldd	r24, Y+7	; 0x07
    2f92:	98 85       	ldd	r25, Y+8	; 0x08
    2f94:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9a 87       	std	Y+10, r25	; 0x0a
    2f9e:	89 87       	std	Y+9, r24	; 0x09
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	9e 87       	std	Y+14, r25	; 0x0e
    2fa6:	8d 87       	std	Y+13, r24	; 0x0d
    2fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fac:	8c 01       	movw	r16, r24
    2fae:	c8 01       	movw	r24, r16
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <matrix2+0x11e>
    2fb4:	8c 01       	movw	r16, r24
    2fb6:	1e 87       	std	Y+14, r17	; 0x0e
    2fb8:	0d 87       	std	Y+13, r16	; 0x0d
	 
}

void matrix2 (void)
{
	 for(jjj=15;jjj<65;jjj++)     ///////////////////////////////// arm down
    2fba:	80 91 85 04 	lds	r24, 0x0485
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	80 93 85 04 	sts	0x0485, r24
    2fc4:	80 91 85 04 	lds	r24, 0x0485
    2fc8:	81 34       	cpi	r24, 0x41	; 65
    2fca:	08 f4       	brcc	.+2      	; 0x2fce <matrix2+0x13c>
    2fcc:	72 cf       	rjmp	.-284    	; 0x2eb2 <matrix2+0x20>
	 {
		 servo_1(jjj);
		 _delay_ms(30);
	 }
	 for(iii=25;iii<40;iii++)   //////////////////////////////////////  gripper ungrip
    2fce:	89 e1       	ldi	r24, 0x19	; 25
    2fd0:	80 93 84 04 	sts	0x0484, r24
    2fd4:	89 c0       	rjmp	.+274    	; 0x30e8 <matrix2+0x256>
	 {
		 servo_2(iii);
    2fd6:	80 91 84 04 	lds	r24, 0x0484
    2fda:	0e 94 92 0c 	call	0x1924	; 0x1924 <servo_2>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 ef       	ldi	r26, 0xF0	; 240
    2fe4:	b1 e4       	ldi	r27, 0x41	; 65
    2fe6:	8f 87       	std	Y+15, r24	; 0x0f
    2fe8:	98 8b       	std	Y+16, r25	; 0x10
    2fea:	a9 8b       	std	Y+17, r26	; 0x11
    2fec:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ff0:	78 89       	ldd	r23, Y+16	; 0x10
    2ff2:	89 89       	ldd	r24, Y+17	; 0x11
    2ff4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff6:	26 e6       	ldi	r18, 0x66	; 102
    2ff8:	36 e6       	ldi	r19, 0x66	; 102
    2ffa:	46 e6       	ldi	r20, 0x66	; 102
    2ffc:	55 e4       	ldi	r21, 0x45	; 69
    2ffe:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	8b 8b       	std	Y+19, r24	; 0x13
    3008:	9c 8b       	std	Y+20, r25	; 0x14
    300a:	ad 8b       	std	Y+21, r26	; 0x15
    300c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    300e:	11 e0       	ldi	r17, 0x01	; 1
    3010:	6b 89       	ldd	r22, Y+19	; 0x13
    3012:	7c 89       	ldd	r23, Y+20	; 0x14
    3014:	8d 89       	ldd	r24, Y+21	; 0x15
    3016:	9e 89       	ldd	r25, Y+22	; 0x16
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3024:	88 23       	and	r24, r24
    3026:	0c f0       	brlt	.+2      	; 0x302a <matrix2+0x198>
    3028:	10 e0       	ldi	r17, 0x00	; 0
    302a:	11 23       	and	r17, r17
    302c:	29 f0       	breq	.+10     	; 0x3038 <matrix2+0x1a6>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	98 8f       	std	Y+24, r25	; 0x18
    3034:	8f 8b       	std	Y+23, r24	; 0x17
    3036:	46 c0       	rjmp	.+140    	; 0x30c4 <matrix2+0x232>
	else if (__tmp > 65535)
    3038:	11 e0       	ldi	r17, 0x01	; 1
    303a:	6b 89       	ldd	r22, Y+19	; 0x13
    303c:	7c 89       	ldd	r23, Y+20	; 0x14
    303e:	8d 89       	ldd	r24, Y+21	; 0x15
    3040:	9e 89       	ldd	r25, Y+22	; 0x16
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    304e:	18 16       	cp	r1, r24
    3050:	0c f0       	brlt	.+2      	; 0x3054 <matrix2+0x1c2>
    3052:	10 e0       	ldi	r17, 0x00	; 0
    3054:	11 23       	and	r17, r17
    3056:	61 f1       	breq	.+88     	; 0x30b0 <matrix2+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	6f 85       	ldd	r22, Y+15	; 0x0f
    305a:	78 89       	ldd	r23, Y+16	; 0x10
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	9a 89       	ldd	r25, Y+18	; 0x12
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e2       	ldi	r20, 0x20	; 32
    3066:	51 e4       	ldi	r21, 0x41	; 65
    3068:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	98 8f       	std	Y+24, r25	; 0x18
    307e:	8f 8b       	std	Y+23, r24	; 0x17
    3080:	12 c0       	rjmp	.+36     	; 0x30a6 <matrix2+0x214>
    3082:	80 e7       	ldi	r24, 0x70	; 112
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	9a 8f       	std	Y+26, r25	; 0x1a
    3088:	89 8f       	std	Y+25, r24	; 0x19
    308a:	89 8d       	ldd	r24, Y+25	; 0x19
    308c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    308e:	8c 01       	movw	r16, r24
    3090:	c8 01       	movw	r24, r16
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	f1 f7       	brne	.-4      	; 0x3092 <matrix2+0x200>
    3096:	8c 01       	movw	r16, r24
    3098:	1a 8f       	std	Y+26, r17	; 0x1a
    309a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	98 8f       	std	Y+24, r25	; 0x18
    30a4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	51 f7       	brne	.-44     	; 0x3082 <matrix2+0x1f0>
    30ae:	17 c0       	rjmp	.+46     	; 0x30de <matrix2+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b0:	6b 89       	ldd	r22, Y+19	; 0x13
    30b2:	7c 89       	ldd	r23, Y+20	; 0x14
    30b4:	8d 89       	ldd	r24, Y+21	; 0x15
    30b6:	9e 89       	ldd	r25, Y+22	; 0x16
    30b8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	98 8f       	std	Y+24, r25	; 0x18
    30c2:	8f 8b       	std	Y+23, r24	; 0x17
    30c4:	8f 89       	ldd	r24, Y+23	; 0x17
    30c6:	98 8d       	ldd	r25, Y+24	; 0x18
    30c8:	9c 8f       	std	Y+28, r25	; 0x1c
    30ca:	8b 8f       	std	Y+27, r24	; 0x1b
    30cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d0:	8c 01       	movw	r16, r24
    30d2:	c8 01       	movw	r24, r16
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <matrix2+0x242>
    30d8:	8c 01       	movw	r16, r24
    30da:	1c 8f       	std	Y+28, r17	; 0x1c
    30dc:	0b 8f       	std	Y+27, r16	; 0x1b
	 for(jjj=15;jjj<65;jjj++)     ///////////////////////////////// arm down
	 {
		 servo_1(jjj);
		 _delay_ms(30);
	 }
	 for(iii=25;iii<40;iii++)   //////////////////////////////////////  gripper ungrip
    30de:	80 91 84 04 	lds	r24, 0x0484
    30e2:	8f 5f       	subi	r24, 0xFF	; 255
    30e4:	80 93 84 04 	sts	0x0484, r24
    30e8:	80 91 84 04 	lds	r24, 0x0484
    30ec:	88 32       	cpi	r24, 0x28	; 40
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <matrix2+0x260>
    30f0:	72 cf       	rjmp	.-284    	; 0x2fd6 <matrix2+0x144>
	 {
		 servo_2(iii);
		 _delay_ms(30);
	 }
	  for(jjj=65;jjj>15;jjj--)    ////////////////////////////////  arm up
    30f2:	81 e4       	ldi	r24, 0x41	; 65
    30f4:	80 93 85 04 	sts	0x0485, r24
    30f8:	89 c0       	rjmp	.+274    	; 0x320c <matrix2+0x37a>
	  {
		  servo_1(jjj);
    30fa:	80 91 85 04 	lds	r24, 0x0485
    30fe:	0e 94 44 0c 	call	0x1888	; 0x1888 <servo_1>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 ef       	ldi	r26, 0xF0	; 240
    3108:	b1 e4       	ldi	r27, 0x41	; 65
    310a:	8d 8f       	std	Y+29, r24	; 0x1d
    310c:	9e 8f       	std	Y+30, r25	; 0x1e
    310e:	af 8f       	std	Y+31, r26	; 0x1f
    3110:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3112:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3114:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3116:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3118:	98 a1       	lds	r25, 0x48
    311a:	26 e6       	ldi	r18, 0x66	; 102
    311c:	36 e6       	ldi	r19, 0x66	; 102
    311e:	46 e6       	ldi	r20, 0x66	; 102
    3120:	55 e4       	ldi	r21, 0x45	; 69
    3122:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	89 a3       	lds	r24, 0x59
    312c:	9a a3       	lds	r25, 0x5a
    312e:	ab a3       	lds	r26, 0x5b
    3130:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    3132:	11 e0       	ldi	r17, 0x01	; 1
    3134:	69 a1       	lds	r22, 0x49
    3136:	7a a1       	lds	r23, 0x4a
    3138:	8b a1       	lds	r24, 0x4b
    313a:	9c a1       	lds	r25, 0x4c
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e8       	ldi	r20, 0x80	; 128
    3142:	5f e3       	ldi	r21, 0x3F	; 63
    3144:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3148:	88 23       	and	r24, r24
    314a:	0c f0       	brlt	.+2      	; 0x314e <matrix2+0x2bc>
    314c:	10 e0       	ldi	r17, 0x00	; 0
    314e:	11 23       	and	r17, r17
    3150:	29 f0       	breq	.+10     	; 0x315c <matrix2+0x2ca>
		__ticks = 1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9e a3       	lds	r25, 0x5e
    3158:	8d a3       	lds	r24, 0x5d
    315a:	46 c0       	rjmp	.+140    	; 0x31e8 <matrix2+0x356>
	else if (__tmp > 65535)
    315c:	11 e0       	ldi	r17, 0x01	; 1
    315e:	69 a1       	lds	r22, 0x49
    3160:	7a a1       	lds	r23, 0x4a
    3162:	8b a1       	lds	r24, 0x4b
    3164:	9c a1       	lds	r25, 0x4c
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    3172:	18 16       	cp	r1, r24
    3174:	0c f0       	brlt	.+2      	; 0x3178 <matrix2+0x2e6>
    3176:	10 e0       	ldi	r17, 0x00	; 0
    3178:	11 23       	and	r17, r17
    317a:	61 f1       	breq	.+88     	; 0x31d4 <matrix2+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    317e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3180:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3182:	98 a1       	lds	r25, 0x48
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e a3       	lds	r25, 0x5e
    31a2:	8d a3       	lds	r24, 0x5d
    31a4:	12 c0       	rjmp	.+36     	; 0x31ca <matrix2+0x338>
    31a6:	80 e7       	ldi	r24, 0x70	; 112
    31a8:	91 e0       	ldi	r25, 0x01	; 1
    31aa:	98 a7       	lds	r25, 0x78
    31ac:	8f a3       	lds	r24, 0x5f
    31ae:	8f a1       	lds	r24, 0x4f
    31b0:	98 a5       	lds	r25, 0x68
    31b2:	8c 01       	movw	r16, r24
    31b4:	c8 01       	movw	r24, r16
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <matrix2+0x324>
    31ba:	8c 01       	movw	r16, r24
    31bc:	18 a7       	lds	r17, 0x78
    31be:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c0:	8d a1       	lds	r24, 0x4d
    31c2:	9e a1       	lds	r25, 0x4e
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	9e a3       	lds	r25, 0x5e
    31c8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	8d a1       	lds	r24, 0x4d
    31cc:	9e a1       	lds	r25, 0x4e
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	51 f7       	brne	.-44     	; 0x31a6 <matrix2+0x314>
    31d2:	17 c0       	rjmp	.+46     	; 0x3202 <matrix2+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d4:	69 a1       	lds	r22, 0x49
    31d6:	7a a1       	lds	r23, 0x4a
    31d8:	8b a1       	lds	r24, 0x4b
    31da:	9c a1       	lds	r25, 0x4c
    31dc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9e a3       	lds	r25, 0x5e
    31e6:	8d a3       	lds	r24, 0x5d
    31e8:	8d a1       	lds	r24, 0x4d
    31ea:	9e a1       	lds	r25, 0x4e
    31ec:	9a a7       	lds	r25, 0x7a
    31ee:	89 a7       	lds	r24, 0x79
    31f0:	89 a5       	lds	r24, 0x69
    31f2:	9a a5       	lds	r25, 0x6a
    31f4:	8c 01       	movw	r16, r24
    31f6:	c8 01       	movw	r24, r16
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <matrix2+0x366>
    31fc:	8c 01       	movw	r16, r24
    31fe:	1a a7       	lds	r17, 0x7a
    3200:	09 a7       	lds	r16, 0x79
	 for(iii=25;iii<40;iii++)   //////////////////////////////////////  gripper ungrip
	 {
		 servo_2(iii);
		 _delay_ms(30);
	 }
	  for(jjj=65;jjj>15;jjj--)    ////////////////////////////////  arm up
    3202:	80 91 85 04 	lds	r24, 0x0485
    3206:	81 50       	subi	r24, 0x01	; 1
    3208:	80 93 85 04 	sts	0x0485, r24
    320c:	80 91 85 04 	lds	r24, 0x0485
    3210:	80 31       	cpi	r24, 0x10	; 16
    3212:	08 f0       	brcs	.+2      	; 0x3216 <matrix2+0x384>
    3214:	72 cf       	rjmp	.-284    	; 0x30fa <matrix2+0x268>
	  {
		  servo_1(jjj);
		  _delay_ms(30);
	  }
	   for(iii=40;iii<65;iii++)   //////////////////////////////////////  gripper ungrip
    3216:	88 e2       	ldi	r24, 0x28	; 40
    3218:	80 93 84 04 	sts	0x0484, r24
    321c:	89 c0       	rjmp	.+274    	; 0x3330 <matrix2+0x49e>
	   {
		   servo_2(iii);
    321e:	80 91 84 04 	lds	r24, 0x0484
    3222:	0e 94 92 0c 	call	0x1924	; 0x1924 <servo_2>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a0 ef       	ldi	r26, 0xF0	; 240
    322c:	b1 e4       	ldi	r27, 0x41	; 65
    322e:	8b a7       	lds	r24, 0x7b
    3230:	9c a7       	lds	r25, 0x7c
    3232:	ad a7       	lds	r26, 0x7d
    3234:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3236:	6b a5       	lds	r22, 0x6b
    3238:	7c a5       	lds	r23, 0x6c
    323a:	8d a5       	lds	r24, 0x6d
    323c:	9e a5       	lds	r25, 0x6e
    323e:	26 e6       	ldi	r18, 0x66	; 102
    3240:	36 e6       	ldi	r19, 0x66	; 102
    3242:	46 e6       	ldi	r20, 0x66	; 102
    3244:	55 e4       	ldi	r21, 0x45	; 69
    3246:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	8f a7       	lds	r24, 0x7f
    3250:	98 ab       	sts	0x58, r25
    3252:	a9 ab       	sts	0x59, r26
    3254:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    3256:	11 e0       	ldi	r17, 0x01	; 1
    3258:	6f a5       	lds	r22, 0x6f
    325a:	78 a9       	sts	0x48, r23
    325c:	89 a9       	sts	0x49, r24
    325e:	9a a9       	sts	0x4a, r25
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    326c:	88 23       	and	r24, r24
    326e:	0c f0       	brlt	.+2      	; 0x3272 <matrix2+0x3e0>
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	11 23       	and	r17, r17
    3274:	29 f0       	breq	.+10     	; 0x3280 <matrix2+0x3ee>
		__ticks = 1;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	9c ab       	sts	0x5c, r25
    327c:	8b ab       	sts	0x5b, r24
    327e:	46 c0       	rjmp	.+140    	; 0x330c <matrix2+0x47a>
	else if (__tmp > 65535)
    3280:	11 e0       	ldi	r17, 0x01	; 1
    3282:	6f a5       	lds	r22, 0x6f
    3284:	78 a9       	sts	0x48, r23
    3286:	89 a9       	sts	0x49, r24
    3288:	9a a9       	sts	0x4a, r25
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	3f ef       	ldi	r19, 0xFF	; 255
    328e:	4f e7       	ldi	r20, 0x7F	; 127
    3290:	57 e4       	ldi	r21, 0x47	; 71
    3292:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    3296:	18 16       	cp	r1, r24
    3298:	0c f0       	brlt	.+2      	; 0x329c <matrix2+0x40a>
    329a:	10 e0       	ldi	r17, 0x00	; 0
    329c:	11 23       	and	r17, r17
    329e:	61 f1       	breq	.+88     	; 0x32f8 <matrix2+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	6b a5       	lds	r22, 0x6b
    32a2:	7c a5       	lds	r23, 0x6c
    32a4:	8d a5       	lds	r24, 0x6d
    32a6:	9e a5       	lds	r25, 0x6e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9c ab       	sts	0x5c, r25
    32c6:	8b ab       	sts	0x5b, r24
    32c8:	12 c0       	rjmp	.+36     	; 0x32ee <matrix2+0x45c>
    32ca:	80 e7       	ldi	r24, 0x70	; 112
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	9e ab       	sts	0x5e, r25
    32d0:	8d ab       	sts	0x5d, r24
    32d2:	8d a9       	sts	0x4d, r24
    32d4:	9e a9       	sts	0x4e, r25
    32d6:	8c 01       	movw	r16, r24
    32d8:	c8 01       	movw	r24, r16
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <matrix2+0x448>
    32de:	8c 01       	movw	r16, r24
    32e0:	1e ab       	sts	0x5e, r17
    32e2:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e4:	8b a9       	sts	0x4b, r24
    32e6:	9c a9       	sts	0x4c, r25
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	9c ab       	sts	0x5c, r25
    32ec:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ee:	8b a9       	sts	0x4b, r24
    32f0:	9c a9       	sts	0x4c, r25
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	51 f7       	brne	.-44     	; 0x32ca <matrix2+0x438>
    32f6:	17 c0       	rjmp	.+46     	; 0x3326 <matrix2+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f8:	6f a5       	lds	r22, 0x6f
    32fa:	78 a9       	sts	0x48, r23
    32fc:	89 a9       	sts	0x49, r24
    32fe:	9a a9       	sts	0x4a, r25
    3300:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9c ab       	sts	0x5c, r25
    330a:	8b ab       	sts	0x5b, r24
    330c:	8b a9       	sts	0x4b, r24
    330e:	9c a9       	sts	0x4c, r25
    3310:	98 af       	sts	0x78, r25
    3312:	8f ab       	sts	0x5f, r24
    3314:	8f a9       	sts	0x4f, r24
    3316:	98 ad       	sts	0x68, r25
    3318:	8c 01       	movw	r16, r24
    331a:	c8 01       	movw	r24, r16
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <matrix2+0x48a>
    3320:	8c 01       	movw	r16, r24
    3322:	18 af       	sts	0x78, r17
    3324:	0f ab       	sts	0x5f, r16
	  for(jjj=65;jjj>15;jjj--)    ////////////////////////////////  arm up
	  {
		  servo_1(jjj);
		  _delay_ms(30);
	  }
	   for(iii=40;iii<65;iii++)   //////////////////////////////////////  gripper ungrip
    3326:	80 91 84 04 	lds	r24, 0x0484
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	80 93 84 04 	sts	0x0484, r24
    3330:	80 91 84 04 	lds	r24, 0x0484
    3334:	81 34       	cpi	r24, 0x41	; 65
    3336:	08 f4       	brcc	.+2      	; 0x333a <matrix2+0x4a8>
    3338:	72 cf       	rjmp	.-284    	; 0x321e <matrix2+0x38c>
	   {
		   servo_2(iii);
		   _delay_ms(30);
	   }
	   
}
    333a:	e8 96       	adiw	r28, 0x38	; 56
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	08 95       	ret

00003350 <main>:

//Main Function
int main()
{   
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	ce 5d       	subi	r28, 0xDE	; 222
    335e:	d6 40       	sbci	r29, 0x06	; 6
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    336a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <init_devices>
	lcd_set_4bit();
    336e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	
    int origin1[12][4][2]=
    3372:	ce 01       	movw	r24, r28
    3374:	8d 5b       	subi	r24, 0xBD	; 189
    3376:	9b 4f       	sbci	r25, 0xFB	; 251
    3378:	24 e0       	ldi	r18, 0x04	; 4
    337a:	32 e0       	ldi	r19, 0x02	; 2
    337c:	40 ec       	ldi	r20, 0xC0	; 192
    337e:	f9 01       	movw	r30, r18
    3380:	00 80       	ld	r0, Z
    3382:	2f 5f       	subi	r18, 0xFF	; 255
    3384:	3f 4f       	sbci	r19, 0xFF	; 255
    3386:	fc 01       	movw	r30, r24
    3388:	00 82       	st	Z, r0
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	41 50       	subi	r20, 0x01	; 1
    338e:	44 23       	and	r20, r20
    3390:	b1 f7       	brne	.-20     	; 0x337e <main+0x2e>
	   {{-2,3},{-1,3},{-2,2},{-1,2}},
	   {{-2,2},{-1,2},{-2,1},{-1,1}},
	   {{-2,1},{-1,1},{-2,0},{-1,0}},	   	   	   	   	   	   	         
	};
	
	int origin2[24][4][2]=
    3392:	ce 01       	movw	r24, r28
    3394:	8d 5f       	subi	r24, 0xFD	; 253
    3396:	9a 4f       	sbci	r25, 0xFA	; 250
    3398:	9c 01       	movw	r18, r24
    339a:	44 ec       	ldi	r20, 0xC4	; 196
    339c:	52 e0       	ldi	r21, 0x02	; 2
    339e:	80 e8       	ldi	r24, 0x80	; 128
    33a0:	91 e0       	ldi	r25, 0x01	; 1
    33a2:	fa 01       	movw	r30, r20
    33a4:	00 80       	ld	r0, Z
    33a6:	4f 5f       	subi	r20, 0xFF	; 255
    33a8:	5f 4f       	sbci	r21, 0xFF	; 255
    33aa:	f9 01       	movw	r30, r18
    33ac:	00 82       	st	Z, r0
    33ae:	2f 5f       	subi	r18, 0xFF	; 255
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	a9 f7       	brne	.-22     	; 0x33a2 <main+0x52>
		{{2,0},{3,0},{2,1},{3,1}},
		{{2,1},{3,1},{2,2},{3,2}},
		{{2,2},{3,2},{2,3},{3,3}},
		{{2,4},{3,3},{3,4},{2,3}},																							
	};
	coor[0]=-2;
    33b8:	8e ef       	ldi	r24, 0xFE	; 254
    33ba:	9f ef       	ldi	r25, 0xFF	; 255
    33bc:	90 93 a7 04 	sts	0x04A7, r25
    33c0:	80 93 a6 04 	sts	0x04A6, r24
	coor[1]=2;
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	90 93 a9 04 	sts	0x04A9, r25
    33cc:	80 93 a8 04 	sts	0x04A8, r24
	int flag1=1;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		whitesensor();
    33d8:	0e 94 79 10 	call	0x20f2	; 0x20f2 <whitesensor>
		if((Center_white_line>16 && Left_white_line>16) || (Center_white_line>16 && Right_white_line>16))
    33dc:	80 91 7e 04 	lds	r24, 0x047E
    33e0:	81 31       	cpi	r24, 0x11	; 17
    33e2:	20 f0       	brcs	.+8      	; 0x33ec <main+0x9c>
    33e4:	80 91 7d 04 	lds	r24, 0x047D
    33e8:	81 31       	cpi	r24, 0x11	; 17
    33ea:	40 f4       	brcc	.+16     	; 0x33fc <main+0xac>
    33ec:	80 91 7e 04 	lds	r24, 0x047E
    33f0:	81 31       	cpi	r24, 0x11	; 17
    33f2:	58 f0       	brcs	.+22     	; 0x340a <main+0xba>
    33f4:	80 91 7f 04 	lds	r24, 0x047F
    33f8:	81 31       	cpi	r24, 0x11	; 17
    33fa:	38 f0       	brcs	.+14     	; 0x340a <main+0xba>
		{
			forward();
    33fc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <forward>
			velocity(255,255);
    3400:	8f ef       	ldi	r24, 0xFF	; 255
    3402:	6f ef       	ldi	r22, 0xFF	; 255
    3404:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <velocity>
		}
		else
		{
			break;
		}
	}		
    3408:	e7 cf       	rjmp	.-50     	; 0x33d8 <main+0x88>
	linefollwer();
    340a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
	  for(jjj=55;jjj>15;jjj--)    ////////////////////////////////  arm up
    340e:	87 e3       	ldi	r24, 0x37	; 55
    3410:	80 93 85 04 	sts	0x0485, r24
    3414:	89 c0       	rjmp	.+274    	; 0x3528 <main+0x1d8>
	  {
		  servo_1(jjj);
    3416:	80 91 85 04 	lds	r24, 0x0485
    341a:	0e 94 44 0c 	call	0x1888	; 0x1888 <servo_1>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 ef       	ldi	r26, 0xF0	; 240
    3424:	b1 e4       	ldi	r27, 0x41	; 65
    3426:	89 a7       	lds	r24, 0x79
    3428:	9a a7       	lds	r25, 0x7a
    342a:	ab a7       	lds	r26, 0x7b
    342c:	bc a7       	lds	r27, 0x7c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    342e:	69 a5       	lds	r22, 0x69
    3430:	7a a5       	lds	r23, 0x6a
    3432:	8b a5       	lds	r24, 0x6b
    3434:	9c a5       	lds	r25, 0x6c
    3436:	26 e6       	ldi	r18, 0x66	; 102
    3438:	36 e6       	ldi	r19, 0x66	; 102
    343a:	46 e6       	ldi	r20, 0x66	; 102
    343c:	55 e4       	ldi	r21, 0x45	; 69
    343e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8d a7       	lds	r24, 0x7d
    3448:	9e a7       	lds	r25, 0x7e
    344a:	af a7       	lds	r26, 0x7f
    344c:	b8 ab       	sts	0x58, r27
	if (__tmp < 1.0)
    344e:	11 e0       	ldi	r17, 0x01	; 1
    3450:	6d a5       	lds	r22, 0x6d
    3452:	7e a5       	lds	r23, 0x6e
    3454:	8f a5       	lds	r24, 0x6f
    3456:	98 a9       	sts	0x48, r25
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e8       	ldi	r20, 0x80	; 128
    345e:	5f e3       	ldi	r21, 0x3F	; 63
    3460:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3464:	88 23       	and	r24, r24
    3466:	0c f0       	brlt	.+2      	; 0x346a <main+0x11a>
    3468:	10 e0       	ldi	r17, 0x00	; 0
    346a:	11 23       	and	r17, r17
    346c:	29 f0       	breq	.+10     	; 0x3478 <main+0x128>
		__ticks = 1;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9a ab       	sts	0x5a, r25
    3474:	89 ab       	sts	0x59, r24
    3476:	46 c0       	rjmp	.+140    	; 0x3504 <main+0x1b4>
	else if (__tmp > 65535)
    3478:	11 e0       	ldi	r17, 0x01	; 1
    347a:	6d a5       	lds	r22, 0x6d
    347c:	7e a5       	lds	r23, 0x6e
    347e:	8f a5       	lds	r24, 0x6f
    3480:	98 a9       	sts	0x48, r25
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	3f ef       	ldi	r19, 0xFF	; 255
    3486:	4f e7       	ldi	r20, 0x7F	; 127
    3488:	57 e4       	ldi	r21, 0x47	; 71
    348a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    348e:	18 16       	cp	r1, r24
    3490:	0c f0       	brlt	.+2      	; 0x3494 <main+0x144>
    3492:	10 e0       	ldi	r17, 0x00	; 0
    3494:	11 23       	and	r17, r17
    3496:	61 f1       	breq	.+88     	; 0x34f0 <main+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	69 a5       	lds	r22, 0x69
    349a:	7a a5       	lds	r23, 0x6a
    349c:	8b a5       	lds	r24, 0x6b
    349e:	9c a5       	lds	r25, 0x6c
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9a ab       	sts	0x5a, r25
    34be:	89 ab       	sts	0x59, r24
    34c0:	12 c0       	rjmp	.+36     	; 0x34e6 <main+0x196>
    34c2:	80 e7       	ldi	r24, 0x70	; 112
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	9c ab       	sts	0x5c, r25
    34c8:	8b ab       	sts	0x5b, r24
    34ca:	8b a9       	sts	0x4b, r24
    34cc:	9c a9       	sts	0x4c, r25
    34ce:	8c 01       	movw	r16, r24
    34d0:	c8 01       	movw	r24, r16
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <main+0x182>
    34d6:	8c 01       	movw	r16, r24
    34d8:	1c ab       	sts	0x5c, r17
    34da:	0b ab       	sts	0x5b, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34dc:	89 a9       	sts	0x49, r24
    34de:	9a a9       	sts	0x4a, r25
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	9a ab       	sts	0x5a, r25
    34e4:	89 ab       	sts	0x59, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e6:	89 a9       	sts	0x49, r24
    34e8:	9a a9       	sts	0x4a, r25
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	51 f7       	brne	.-44     	; 0x34c2 <main+0x172>
    34ee:	17 c0       	rjmp	.+46     	; 0x351e <main+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f0:	6d a5       	lds	r22, 0x6d
    34f2:	7e a5       	lds	r23, 0x6e
    34f4:	8f a5       	lds	r24, 0x6f
    34f6:	98 a9       	sts	0x48, r25
    34f8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9a ab       	sts	0x5a, r25
    3502:	89 ab       	sts	0x59, r24
    3504:	89 a9       	sts	0x49, r24
    3506:	9a a9       	sts	0x4a, r25
    3508:	9e ab       	sts	0x5e, r25
    350a:	8d ab       	sts	0x5d, r24
    350c:	8d a9       	sts	0x4d, r24
    350e:	9e a9       	sts	0x4e, r25
    3510:	8c 01       	movw	r16, r24
    3512:	f8 01       	movw	r30, r16
    3514:	31 97       	sbiw	r30, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <main+0x1c4>
    3518:	8f 01       	movw	r16, r30
    351a:	1e ab       	sts	0x5e, r17
    351c:	0d ab       	sts	0x5d, r16
		{
			break;
		}
	}		
	linefollwer();
	  for(jjj=55;jjj>15;jjj--)    ////////////////////////////////  arm up
    351e:	80 91 85 04 	lds	r24, 0x0485
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	80 93 85 04 	sts	0x0485, r24
    3528:	80 91 85 04 	lds	r24, 0x0485
    352c:	80 31       	cpi	r24, 0x10	; 16
    352e:	08 f0       	brcs	.+2      	; 0x3532 <main+0x1e2>
    3530:	72 cf       	rjmp	.-284    	; 0x3416 <main+0xc6>
	  {
		  servo_1(jjj);
		  _delay_ms(30);
	  }
	for(iii=20;iii<65;iii++)   //////////////////////////////////////  gripper ungrip
    3532:	84 e1       	ldi	r24, 0x14	; 20
    3534:	80 93 84 04 	sts	0x0484, r24
    3538:	bc c0       	rjmp	.+376    	; 0x36b2 <main+0x362>
	 {
		 servo_2(iii);
    353a:	80 91 84 04 	lds	r24, 0x0484
    353e:	0e 94 92 0c 	call	0x1924	; 0x1924 <servo_2>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a0 ef       	ldi	r26, 0xF0	; 240
    3548:	b1 e4       	ldi	r27, 0x41	; 65
    354a:	8f ab       	sts	0x5f, r24
    354c:	98 af       	sts	0x78, r25
    354e:	a9 af       	sts	0x79, r26
    3550:	ba af       	sts	0x7a, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3552:	6f a9       	sts	0x4f, r22
    3554:	78 ad       	sts	0x68, r23
    3556:	89 ad       	sts	0x69, r24
    3558:	9a ad       	sts	0x6a, r25
    355a:	26 e6       	ldi	r18, 0x66	; 102
    355c:	36 e6       	ldi	r19, 0x66	; 102
    355e:	46 e6       	ldi	r20, 0x66	; 102
    3560:	55 e4       	ldi	r21, 0x45	; 69
    3562:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8b af       	sts	0x7b, r24
    356c:	9c af       	sts	0x7c, r25
    356e:	ad af       	sts	0x7d, r26
    3570:	be af       	sts	0x7e, r27
	if (__tmp < 1.0)
    3572:	11 e0       	ldi	r17, 0x01	; 1
    3574:	6b ad       	sts	0x6b, r22
    3576:	7c ad       	sts	0x6c, r23
    3578:	8d ad       	sts	0x6d, r24
    357a:	9e ad       	sts	0x6e, r25
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3588:	88 23       	and	r24, r24
    358a:	0c f0       	brlt	.+2      	; 0x358e <main+0x23e>
    358c:	10 e0       	ldi	r17, 0x00	; 0
    358e:	11 23       	and	r17, r17
    3590:	41 f0       	breq	.+16     	; 0x35a2 <main+0x252>
		__ticks = 1;
    3592:	21 e0       	ldi	r18, 0x01	; 1
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	ce 01       	movw	r24, r28
    3598:	cf 96       	adiw	r24, 0x3f	; 63
    359a:	fc 01       	movw	r30, r24
    359c:	31 83       	std	Z+1, r19	; 0x01
    359e:	20 83       	st	Z, r18
    35a0:	66 c0       	rjmp	.+204    	; 0x366e <main+0x31e>
	else if (__tmp > 65535)
    35a2:	11 e0       	ldi	r17, 0x01	; 1
    35a4:	6b ad       	sts	0x6b, r22
    35a6:	7c ad       	sts	0x6c, r23
    35a8:	8d ad       	sts	0x6d, r24
    35aa:	9e ad       	sts	0x6e, r25
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	3f ef       	ldi	r19, 0xFF	; 255
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	57 e4       	ldi	r21, 0x47	; 71
    35b4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	0c f0       	brlt	.+2      	; 0x35be <main+0x26e>
    35bc:	10 e0       	ldi	r17, 0x00	; 0
    35be:	11 23       	and	r17, r17
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <main+0x274>
    35c2:	47 c0       	rjmp	.+142    	; 0x3652 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c4:	6f a9       	sts	0x4f, r22
    35c6:	78 ad       	sts	0x68, r23
    35c8:	89 ad       	sts	0x69, r24
    35ca:	9a ad       	sts	0x6a, r25
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e2       	ldi	r20, 0x20	; 32
    35d2:	51 e4       	ldi	r21, 0x41	; 65
    35d4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	9e 01       	movw	r18, r28
    35ea:	21 5c       	subi	r18, 0xC1	; 193
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	f9 01       	movw	r30, r18
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
    35f4:	26 c0       	rjmp	.+76     	; 0x3642 <main+0x2f2>
    35f6:	ce 01       	movw	r24, r28
    35f8:	8f 5b       	subi	r24, 0xBF	; 191
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	20 e7       	ldi	r18, 0x70	; 112
    35fe:	31 e0       	ldi	r19, 0x01	; 1
    3600:	fc 01       	movw	r30, r24
    3602:	31 83       	std	Z+1, r19	; 0x01
    3604:	20 83       	st	Z, r18
    3606:	ce 01       	movw	r24, r28
    3608:	8f 5b       	subi	r24, 0xBF	; 191
    360a:	9f 4f       	sbci	r25, 0xFF	; 255
    360c:	fc 01       	movw	r30, r24
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	8c 01       	movw	r16, r24
    3614:	c8 01       	movw	r24, r16
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <main+0x2c6>
    361a:	8c 01       	movw	r16, r24
    361c:	ce 01       	movw	r24, r28
    361e:	8f 5b       	subi	r24, 0xBF	; 191
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	fc 01       	movw	r30, r24
    3624:	11 83       	std	Z+1, r17	; 0x01
    3626:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3628:	ce 01       	movw	r24, r28
    362a:	cf 96       	adiw	r24, 0x3f	; 63
    362c:	fc 01       	movw	r30, r24
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	9c 01       	movw	r18, r24
    3634:	21 50       	subi	r18, 0x01	; 1
    3636:	30 40       	sbci	r19, 0x00	; 0
    3638:	ce 01       	movw	r24, r28
    363a:	cf 96       	adiw	r24, 0x3f	; 63
    363c:	fc 01       	movw	r30, r24
    363e:	31 83       	std	Z+1, r19	; 0x01
    3640:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3642:	ce 01       	movw	r24, r28
    3644:	cf 96       	adiw	r24, 0x3f	; 63
    3646:	fc 01       	movw	r30, r24
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	99 f6       	brne	.-90     	; 0x35f6 <main+0x2a6>
    3650:	2b c0       	rjmp	.+86     	; 0x36a8 <main+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	6b ad       	sts	0x6b, r22
    3654:	7c ad       	sts	0x6c, r23
    3656:	8d ad       	sts	0x6d, r24
    3658:	9e ad       	sts	0x6e, r25
    365a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e 01       	movw	r18, r28
    3664:	21 5c       	subi	r18, 0xC1	; 193
    3666:	3f 4f       	sbci	r19, 0xFF	; 255
    3668:	f9 01       	movw	r30, r18
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	ce 01       	movw	r24, r28
    3670:	8d 5b       	subi	r24, 0xBD	; 189
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	9e 01       	movw	r18, r28
    3676:	21 5c       	subi	r18, 0xC1	; 193
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	f9 01       	movw	r30, r18
    367c:	20 81       	ld	r18, Z
    367e:	31 81       	ldd	r19, Z+1	; 0x01
    3680:	fc 01       	movw	r30, r24
    3682:	31 83       	std	Z+1, r19	; 0x01
    3684:	20 83       	st	Z, r18
    3686:	ce 01       	movw	r24, r28
    3688:	8d 5b       	subi	r24, 0xBD	; 189
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	fc 01       	movw	r30, r24
    368e:	80 81       	ld	r24, Z
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	8c 01       	movw	r16, r24
    3694:	c8 01       	movw	r24, r16
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <main+0x346>
    369a:	8c 01       	movw	r16, r24
    369c:	ce 01       	movw	r24, r28
    369e:	8d 5b       	subi	r24, 0xBD	; 189
    36a0:	9f 4f       	sbci	r25, 0xFF	; 255
    36a2:	fc 01       	movw	r30, r24
    36a4:	11 83       	std	Z+1, r17	; 0x01
    36a6:	00 83       	st	Z, r16
	  for(jjj=55;jjj>15;jjj--)    ////////////////////////////////  arm up
	  {
		  servo_1(jjj);
		  _delay_ms(30);
	  }
	for(iii=20;iii<65;iii++)   //////////////////////////////////////  gripper ungrip
    36a8:	80 91 84 04 	lds	r24, 0x0484
    36ac:	8f 5f       	subi	r24, 0xFF	; 255
    36ae:	80 93 84 04 	sts	0x0484, r24
    36b2:	80 91 84 04 	lds	r24, 0x0484
    36b6:	81 34       	cpi	r24, 0x41	; 65
    36b8:	08 f4       	brcc	.+2      	; 0x36bc <main+0x36c>
    36ba:	3f cf       	rjmp	.-386    	; 0x353a <main+0x1ea>
	 {
		 servo_2(iii);
		 _delay_ms(30);
	 }
	int compass=6;
    36bc:	86 e0       	ldi	r24, 0x06	; 6
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int D1[12]={7,9,5,8,2,4,7,1,6,1,2,4};                 ///// change
    36c4:	ce 01       	movw	r24, r28
    36c6:	8d 57       	subi	r24, 0x7D	; 125
    36c8:	99 4f       	sbci	r25, 0xF9	; 249
    36ca:	24 e4       	ldi	r18, 0x44	; 68
    36cc:	34 e0       	ldi	r19, 0x04	; 4
    36ce:	48 e1       	ldi	r20, 0x18	; 24
    36d0:	f9 01       	movw	r30, r18
    36d2:	00 80       	ld	r0, Z
    36d4:	2f 5f       	subi	r18, 0xFF	; 255
    36d6:	3f 4f       	sbci	r19, 0xFF	; 255
    36d8:	fc 01       	movw	r30, r24
    36da:	00 82       	st	Z, r0
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	41 50       	subi	r20, 0x01	; 1
    36e0:	44 23       	and	r20, r20
    36e2:	b1 f7       	brne	.-20     	; 0x36d0 <main+0x380>
	int D2[4][4]={{1,13},{10,16},{12,13},{23,3}};	      ///// change
    36e4:	ce 01       	movw	r24, r28
    36e6:	85 56       	subi	r24, 0x65	; 101
    36e8:	99 4f       	sbci	r25, 0xF9	; 249
    36ea:	20 e2       	ldi	r18, 0x20	; 32
    36ec:	fc 01       	movw	r30, r24
    36ee:	32 2f       	mov	r19, r18
    36f0:	11 92       	st	Z+, r1
    36f2:	3a 95       	dec	r19
    36f4:	e9 f7       	brne	.-6      	; 0x36f0 <main+0x3a0>
    36f6:	ce 01       	movw	r24, r28
    36f8:	85 56       	subi	r24, 0x65	; 101
    36fa:	99 4f       	sbci	r25, 0xF9	; 249
    36fc:	21 e0       	ldi	r18, 0x01	; 1
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	fc 01       	movw	r30, r24
    3702:	31 83       	std	Z+1, r19	; 0x01
    3704:	20 83       	st	Z, r18
    3706:	ce 01       	movw	r24, r28
    3708:	85 56       	subi	r24, 0x65	; 101
    370a:	99 4f       	sbci	r25, 0xF9	; 249
    370c:	2d e0       	ldi	r18, 0x0D	; 13
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	fc 01       	movw	r30, r24
    3712:	33 83       	std	Z+3, r19	; 0x03
    3714:	22 83       	std	Z+2, r18	; 0x02
    3716:	ce 01       	movw	r24, r28
    3718:	85 56       	subi	r24, 0x65	; 101
    371a:	99 4f       	sbci	r25, 0xF9	; 249
    371c:	2a e0       	ldi	r18, 0x0A	; 10
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	fc 01       	movw	r30, r24
    3722:	31 87       	std	Z+9, r19	; 0x09
    3724:	20 87       	std	Z+8, r18	; 0x08
    3726:	ce 01       	movw	r24, r28
    3728:	85 56       	subi	r24, 0x65	; 101
    372a:	99 4f       	sbci	r25, 0xF9	; 249
    372c:	20 e1       	ldi	r18, 0x10	; 16
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	fc 01       	movw	r30, r24
    3732:	33 87       	std	Z+11, r19	; 0x0b
    3734:	22 87       	std	Z+10, r18	; 0x0a
    3736:	ce 01       	movw	r24, r28
    3738:	85 56       	subi	r24, 0x65	; 101
    373a:	99 4f       	sbci	r25, 0xF9	; 249
    373c:	2c e0       	ldi	r18, 0x0C	; 12
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	fc 01       	movw	r30, r24
    3742:	31 8b       	std	Z+17, r19	; 0x11
    3744:	20 8b       	std	Z+16, r18	; 0x10
    3746:	ce 01       	movw	r24, r28
    3748:	85 56       	subi	r24, 0x65	; 101
    374a:	99 4f       	sbci	r25, 0xF9	; 249
    374c:	2d e0       	ldi	r18, 0x0D	; 13
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	fc 01       	movw	r30, r24
    3752:	33 8b       	std	Z+19, r19	; 0x13
    3754:	22 8b       	std	Z+18, r18	; 0x12
    3756:	ce 01       	movw	r24, r28
    3758:	85 56       	subi	r24, 0x65	; 101
    375a:	99 4f       	sbci	r25, 0xF9	; 249
    375c:	27 e1       	ldi	r18, 0x17	; 23
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	fc 01       	movw	r30, r24
    3762:	31 8f       	std	Z+25, r19	; 0x19
    3764:	20 8f       	std	Z+24, r18	; 0x18
    3766:	ce 01       	movw	r24, r28
    3768:	85 56       	subi	r24, 0x65	; 101
    376a:	99 4f       	sbci	r25, 0xF9	; 249
    376c:	23 e0       	ldi	r18, 0x03	; 3
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	fc 01       	movw	r30, r24
    3772:	33 8f       	std	Z+27, r19	; 0x1b
    3774:	22 8f       	std	Z+26, r18	; 0x1a
	int summ1[12]={7,6,13,9,7,16,5,8,13,1,2,3};           ////  change
    3776:	ce 01       	movw	r24, r28
    3778:	85 54       	subi	r24, 0x45	; 69
    377a:	99 4f       	sbci	r25, 0xF9	; 249
    377c:	2c e5       	ldi	r18, 0x5C	; 92
    377e:	34 e0       	ldi	r19, 0x04	; 4
    3780:	48 e1       	ldi	r20, 0x18	; 24
    3782:	f9 01       	movw	r30, r18
    3784:	00 80       	ld	r0, Z
    3786:	2f 5f       	subi	r18, 0xFF	; 255
    3788:	3f 4f       	sbci	r19, 0xFF	; 255
    378a:	fc 01       	movw	r30, r24
    378c:	00 82       	st	Z, r0
    378e:	01 96       	adiw	r24, 0x01	; 1
    3790:	41 50       	subi	r20, 0x01	; 1
    3792:	44 23       	and	r20, r20
    3794:	b1 f7       	brne	.-20     	; 0x3782 <main+0x432>
	int boxnumber;	
	int final[2];
	int recur=0;
    3796:	18 86       	std	Y+8, r1	; 0x08
    3798:	1f 82       	std	Y+7, r1	; 0x07
	int recur1=0;
    379a:	1a 86       	std	Y+10, r1	; 0x0a
    379c:	19 86       	std	Y+9, r1	; 0x09
	int help=summ1[recur];
    379e:	9e 01       	movw	r18, r28
    37a0:	25 54       	subi	r18, 0x45	; 69
    37a2:	39 4f       	sbci	r19, 0xF9	; 249
    37a4:	8f 81       	ldd	r24, Y+7	; 0x07
    37a6:	98 85       	ldd	r25, Y+8	; 0x08
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	82 0f       	add	r24, r18
    37ae:	93 1f       	adc	r25, r19
    37b0:	fc 01       	movw	r30, r24
    37b2:	80 81       	ld	r24, Z
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	9c 87       	std	Y+12, r25	; 0x0c
    37b8:	8b 87       	std	Y+11, r24	; 0x0b
	int flag2=0;
    37ba:	1e 86       	std	Y+14, r1	; 0x0e
    37bc:	1d 86       	std	Y+13, r1	; 0x0d
	int flag3=0;
    37be:	18 8a       	std	Y+16, r1	; 0x10
    37c0:	1f 86       	std	Y+15, r1	; 0x0f
	int flag4=0;
    37c2:	1a 8a       	std	Y+18, r1	; 0x12
    37c4:	19 8a       	std	Y+17, r1	; 0x11
	
	point1 : if(flag1%2!=0)
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	81 70       	andi	r24, 0x01	; 1
    37cc:	90 70       	andi	r25, 0x00	; 0
    37ce:	88 23       	and	r24, r24
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <main+0x484>
    37d2:	5b c1       	rjmp	.+694    	; 0x3a8a <main+0x73a>
	{
		flag4=0;
    37d4:	1a 8a       	std	Y+18, r1	; 0x12
    37d6:	19 8a       	std	Y+17, r1	; 0x11
		flag3=flag3+1;
    37d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37da:	98 89       	ldd	r25, Y+16	; 0x10
    37dc:	01 96       	adiw	r24, 0x01	; 1
    37de:	98 8b       	std	Y+16, r25	; 0x10
    37e0:	8f 87       	std	Y+15, r24	; 0x0f
		if(help>=10 || help==3)                           ////// change
    37e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    37e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    37e6:	8a 30       	cpi	r24, 0x0A	; 10
    37e8:	91 05       	cpc	r25, r1
    37ea:	2c f4       	brge	.+10     	; 0x37f6 <main+0x4a6>
    37ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f0:	83 30       	cpi	r24, 0x03	; 3
    37f2:	91 05       	cpc	r25, r1
    37f4:	41 f5       	brne	.+80     	; 0x3846 <main+0x4f6>
		{
			flag3=0;
    37f6:	18 8a       	std	Y+16, r1	; 0x10
    37f8:	1f 86       	std	Y+15, r1	; 0x0f
			flag2=flag2+1;
    37fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fe:	01 96       	adiw	r24, 0x01	; 1
    3800:	9e 87       	std	Y+14, r25	; 0x0e
    3802:	8d 87       	std	Y+13, r24	; 0x0d
			if(flag2==4)                                  ////// change
    3804:	8d 85       	ldd	r24, Y+13	; 0x0d
    3806:	9e 85       	ldd	r25, Y+14	; 0x0e
    3808:	84 30       	cpi	r24, 0x04	; 4
    380a:	91 05       	cpc	r25, r1
    380c:	21 f4       	brne	.+8      	; 0x3816 <main+0x4c6>
			{
				stop();
    380e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <stop>
				goto point2;
    3812:	0c 94 c9 62 	jmp	0xc592	; 0xc592 <main+0x9242>
			}
			else
			{
				recur1=recur1+1;
    3816:	89 85       	ldd	r24, Y+9	; 0x09
    3818:	9a 85       	ldd	r25, Y+10	; 0x0a
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	9a 87       	std	Y+10, r25	; 0x0a
    381e:	89 87       	std	Y+9, r24	; 0x09
				recur=recur+1;
    3820:	8f 81       	ldd	r24, Y+7	; 0x07
    3822:	98 85       	ldd	r25, Y+8	; 0x08
    3824:	01 96       	adiw	r24, 0x01	; 1
    3826:	98 87       	std	Y+8, r25	; 0x08
    3828:	8f 83       	std	Y+7, r24	; 0x07
				help=summ1[recur];
    382a:	9e 01       	movw	r18, r28
    382c:	25 54       	subi	r18, 0x45	; 69
    382e:	39 4f       	sbci	r19, 0xF9	; 249
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	82 0f       	add	r24, r18
    383a:	93 1f       	adc	r25, r19
    383c:	fc 01       	movw	r30, r24
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	9c 87       	std	Y+12, r25	; 0x0c
    3844:	8b 87       	std	Y+11, r24	; 0x0b
			}				
		}
		int x1,y1;
		int result,index;
		int arr[4];
		for(int x=0;x<12;x++)
    3846:	1c 8e       	std	Y+28, r1	; 0x1c
    3848:	1b 8e       	std	Y+27, r1	; 0x1b
    384a:	29 c0       	rjmp	.+82     	; 0x389e <main+0x54e>
		{
			if(D1[x]==help)
    384c:	9e 01       	movw	r18, r28
    384e:	2d 57       	subi	r18, 0x7D	; 125
    3850:	39 4f       	sbci	r19, 0xF9	; 249
    3852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	82 0f       	add	r24, r18
    385c:	93 1f       	adc	r25, r19
    385e:	fc 01       	movw	r30, r24
    3860:	20 81       	ld	r18, Z
    3862:	31 81       	ldd	r19, Z+1	; 0x01
    3864:	8b 85       	ldd	r24, Y+11	; 0x0b
    3866:	9c 85       	ldd	r25, Y+12	; 0x0c
    3868:	28 17       	cp	r18, r24
    386a:	39 07       	cpc	r19, r25
    386c:	99 f4       	brne	.+38     	; 0x3894 <main+0x544>
			{
				boxnumber=x;
    386e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	8d 83       	std	Y+5, r24	; 0x05
				D1[x]=-1;
    3876:	9e 01       	movw	r18, r28
    3878:	2d 57       	subi	r18, 0x7D	; 125
    387a:	39 4f       	sbci	r19, 0xF9	; 249
    387c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    387e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	82 0f       	add	r24, r18
    3886:	93 1f       	adc	r25, r19
    3888:	2f ef       	ldi	r18, 0xFF	; 255
    388a:	3f ef       	ldi	r19, 0xFF	; 255
    388c:	fc 01       	movw	r30, r24
    388e:	31 83       	std	Z+1, r19	; 0x01
    3890:	20 83       	st	Z, r18
				break;
    3892:	0a c0       	rjmp	.+20     	; 0x38a8 <main+0x558>
			}				
		}
		int x1,y1;
		int result,index;
		int arr[4];
		for(int x=0;x<12;x++)
    3894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3898:	01 96       	adiw	r24, 0x01	; 1
    389a:	9c 8f       	std	Y+28, r25	; 0x1c
    389c:	8b 8f       	std	Y+27, r24	; 0x1b
    389e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38a2:	8c 30       	cpi	r24, 0x0C	; 12
    38a4:	91 05       	cpc	r25, r1
    38a6:	94 f2       	brlt	.-92     	; 0x384c <main+0x4fc>
				boxnumber=x;
				D1[x]=-1;
				break;
			}				
		}
		for(int k=0;k<4;k++)
    38a8:	1e 8e       	std	Y+30, r1	; 0x1e
    38aa:	1d 8e       	std	Y+29, r1	; 0x1d
    38ac:	70 c0       	rjmp	.+224    	; 0x398e <main+0x63e>
		{
			x1=coor[0]-origin1[boxnumber][k][0];
    38ae:	20 91 a6 04 	lds	r18, 0x04A6
    38b2:	30 91 a7 04 	lds	r19, 0x04A7
    38b6:	ae 01       	movw	r20, r28
    38b8:	4d 5b       	subi	r20, 0xBD	; 189
    38ba:	5b 4f       	sbci	r21, 0xFB	; 251
    38bc:	8d 81       	ldd	r24, Y+5	; 0x05
    38be:	9e 81       	ldd	r25, Y+6	; 0x06
    38c0:	bc 01       	movw	r22, r24
    38c2:	66 0f       	add	r22, r22
    38c4:	77 1f       	adc	r23, r23
    38c6:	66 0f       	add	r22, r22
    38c8:	77 1f       	adc	r23, r23
    38ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ce:	86 0f       	add	r24, r22
    38d0:	97 1f       	adc	r25, r23
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	84 0f       	add	r24, r20
    38dc:	95 1f       	adc	r25, r21
    38de:	fc 01       	movw	r30, r24
    38e0:	80 81       	ld	r24, Z
    38e2:	91 81       	ldd	r25, Z+1	; 0x01
    38e4:	a9 01       	movw	r20, r18
    38e6:	48 1b       	sub	r20, r24
    38e8:	59 0b       	sbc	r21, r25
    38ea:	ca 01       	movw	r24, r20
    38ec:	9c 8b       	std	Y+20, r25	; 0x14
    38ee:	8b 8b       	std	Y+19, r24	; 0x13
			y1=coor[1]-origin1[boxnumber][k][1];
    38f0:	20 91 a8 04 	lds	r18, 0x04A8
    38f4:	30 91 a9 04 	lds	r19, 0x04A9
    38f8:	ae 01       	movw	r20, r28
    38fa:	4d 5b       	subi	r20, 0xBD	; 189
    38fc:	5b 4f       	sbci	r21, 0xFB	; 251
    38fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3900:	9e 81       	ldd	r25, Y+6	; 0x06
    3902:	bc 01       	movw	r22, r24
    3904:	66 0f       	add	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	66 0f       	add	r22, r22
    390a:	77 1f       	adc	r23, r23
    390c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    390e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3910:	86 0f       	add	r24, r22
    3912:	97 1f       	adc	r25, r23
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	84 0f       	add	r24, r20
    391e:	95 1f       	adc	r25, r21
    3920:	02 96       	adiw	r24, 0x02	; 2
    3922:	fc 01       	movw	r30, r24
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	a9 01       	movw	r20, r18
    392a:	48 1b       	sub	r20, r24
    392c:	59 0b       	sbc	r21, r25
    392e:	ca 01       	movw	r24, r20
    3930:	9e 8b       	std	Y+22, r25	; 0x16
    3932:	8d 8b       	std	Y+21, r24	; 0x15
			if(x1<0)
    3934:	8b 89       	ldd	r24, Y+19	; 0x13
    3936:	9c 89       	ldd	r25, Y+20	; 0x14
    3938:	99 23       	and	r25, r25
    393a:	3c f4       	brge	.+14     	; 0x394a <main+0x5fa>
				x1=x1*-1;
    393c:	8b 89       	ldd	r24, Y+19	; 0x13
    393e:	9c 89       	ldd	r25, Y+20	; 0x14
    3940:	90 95       	com	r25
    3942:	81 95       	neg	r24
    3944:	9f 4f       	sbci	r25, 0xFF	; 255
    3946:	9c 8b       	std	Y+20, r25	; 0x14
    3948:	8b 8b       	std	Y+19, r24	; 0x13
			if(y1<0)
    394a:	8d 89       	ldd	r24, Y+21	; 0x15
    394c:	9e 89       	ldd	r25, Y+22	; 0x16
    394e:	99 23       	and	r25, r25
    3950:	3c f4       	brge	.+14     	; 0x3960 <main+0x610>
				y1=y1*-1;
    3952:	8d 89       	ldd	r24, Y+21	; 0x15
    3954:	9e 89       	ldd	r25, Y+22	; 0x16
    3956:	90 95       	com	r25
    3958:	81 95       	neg	r24
    395a:	9f 4f       	sbci	r25, 0xFF	; 255
    395c:	9e 8b       	std	Y+22, r25	; 0x16
    395e:	8d 8b       	std	Y+21, r24	; 0x15
			arr[k]=x1+y1;
    3960:	2b 89       	ldd	r18, Y+19	; 0x13
    3962:	3c 89       	ldd	r19, Y+20	; 0x14
    3964:	8d 89       	ldd	r24, Y+21	; 0x15
    3966:	9e 89       	ldd	r25, Y+22	; 0x16
    3968:	28 0f       	add	r18, r24
    396a:	39 1f       	adc	r19, r25
    396c:	ae 01       	movw	r20, r28
    396e:	49 52       	subi	r20, 0x29	; 41
    3970:	59 4f       	sbci	r21, 0xF9	; 249
    3972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3974:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	84 0f       	add	r24, r20
    397c:	95 1f       	adc	r25, r21
    397e:	fc 01       	movw	r30, r24
    3980:	31 83       	std	Z+1, r19	; 0x01
    3982:	20 83       	st	Z, r18
				boxnumber=x;
				D1[x]=-1;
				break;
			}				
		}
		for(int k=0;k<4;k++)
    3984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3986:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3988:	01 96       	adiw	r24, 0x01	; 1
    398a:	9e 8f       	std	Y+30, r25	; 0x1e
    398c:	8d 8f       	std	Y+29, r24	; 0x1d
    398e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3990:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3992:	84 30       	cpi	r24, 0x04	; 4
    3994:	91 05       	cpc	r25, r1
    3996:	0c f4       	brge	.+2      	; 0x399a <main+0x64a>
    3998:	8a cf       	rjmp	.-236    	; 0x38ae <main+0x55e>
				x1=x1*-1;
			if(y1<0)
				y1=y1*-1;
			arr[k]=x1+y1;
		}
		result=arr[0];
    399a:	ce 01       	movw	r24, r28
    399c:	89 52       	subi	r24, 0x29	; 41
    399e:	99 4f       	sbci	r25, 0xF9	; 249
    39a0:	fc 01       	movw	r30, r24
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	98 8f       	std	Y+24, r25	; 0x18
    39a8:	8f 8b       	std	Y+23, r24	; 0x17
		index=0;
    39aa:	1a 8e       	std	Y+26, r1	; 0x1a
    39ac:	19 8e       	std	Y+25, r1	; 0x19
		for(int j=1;j<4;j++)
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	98 a3       	lds	r25, 0x58
    39b4:	8f 8f       	std	Y+31, r24	; 0x1f
    39b6:	28 c0       	rjmp	.+80     	; 0x3a08 <main+0x6b8>
		{
			if(arr[j]<result)
    39b8:	9e 01       	movw	r18, r28
    39ba:	29 52       	subi	r18, 0x29	; 41
    39bc:	39 4f       	sbci	r19, 0xF9	; 249
    39be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39c0:	98 a1       	lds	r25, 0x48
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	82 0f       	add	r24, r18
    39c8:	93 1f       	adc	r25, r19
    39ca:	fc 01       	movw	r30, r24
    39cc:	20 81       	ld	r18, Z
    39ce:	31 81       	ldd	r19, Z+1	; 0x01
    39d0:	8f 89       	ldd	r24, Y+23	; 0x17
    39d2:	98 8d       	ldd	r25, Y+24	; 0x18
    39d4:	28 17       	cp	r18, r24
    39d6:	39 07       	cpc	r19, r25
    39d8:	94 f4       	brge	.+36     	; 0x39fe <main+0x6ae>
			{
				result=arr[j];
    39da:	9e 01       	movw	r18, r28
    39dc:	29 52       	subi	r18, 0x29	; 41
    39de:	39 4f       	sbci	r19, 0xF9	; 249
    39e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39e2:	98 a1       	lds	r25, 0x48
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	82 0f       	add	r24, r18
    39ea:	93 1f       	adc	r25, r19
    39ec:	fc 01       	movw	r30, r24
    39ee:	80 81       	ld	r24, Z
    39f0:	91 81       	ldd	r25, Z+1	; 0x01
    39f2:	98 8f       	std	Y+24, r25	; 0x18
    39f4:	8f 8b       	std	Y+23, r24	; 0x17
				index=j;
    39f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39f8:	98 a1       	lds	r25, 0x48
    39fa:	9a 8f       	std	Y+26, r25	; 0x1a
    39fc:	89 8f       	std	Y+25, r24	; 0x19
				y1=y1*-1;
			arr[k]=x1+y1;
		}
		result=arr[0];
		index=0;
		for(int j=1;j<4;j++)
    39fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a00:	98 a1       	lds	r25, 0x48
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	98 a3       	lds	r25, 0x58
    3a06:	8f 8f       	std	Y+31, r24	; 0x1f
    3a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a0a:	98 a1       	lds	r25, 0x48
    3a0c:	84 30       	cpi	r24, 0x04	; 4
    3a0e:	91 05       	cpc	r25, r1
    3a10:	9c f2       	brlt	.-90     	; 0x39b8 <main+0x668>
			{
				result=arr[j];
				index=j;
			}
		}
		final[0]=origin1[boxnumber][index][0];
    3a12:	9e 01       	movw	r18, r28
    3a14:	2d 5b       	subi	r18, 0xBD	; 189
    3a16:	3b 4f       	sbci	r19, 0xFB	; 251
    3a18:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1c:	ac 01       	movw	r20, r24
    3a1e:	44 0f       	add	r20, r20
    3a20:	55 1f       	adc	r21, r21
    3a22:	44 0f       	add	r20, r20
    3a24:	55 1f       	adc	r21, r21
    3a26:	89 8d       	ldd	r24, Y+25	; 0x19
    3a28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a2a:	84 0f       	add	r24, r20
    3a2c:	95 1f       	adc	r25, r21
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	82 0f       	add	r24, r18
    3a38:	93 1f       	adc	r25, r19
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	20 81       	ld	r18, Z
    3a3e:	31 81       	ldd	r19, Z+1	; 0x01
    3a40:	ce 01       	movw	r24, r28
    3a42:	8d 52       	subi	r24, 0x2D	; 45
    3a44:	99 4f       	sbci	r25, 0xF9	; 249
    3a46:	fc 01       	movw	r30, r24
    3a48:	31 83       	std	Z+1, r19	; 0x01
    3a4a:	20 83       	st	Z, r18
		final[1]=origin1[boxnumber][index][1];
    3a4c:	9e 01       	movw	r18, r28
    3a4e:	2d 5b       	subi	r18, 0xBD	; 189
    3a50:	3b 4f       	sbci	r19, 0xFB	; 251
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	9e 81       	ldd	r25, Y+6	; 0x06
    3a56:	ac 01       	movw	r20, r24
    3a58:	44 0f       	add	r20, r20
    3a5a:	55 1f       	adc	r21, r21
    3a5c:	44 0f       	add	r20, r20
    3a5e:	55 1f       	adc	r21, r21
    3a60:	89 8d       	ldd	r24, Y+25	; 0x19
    3a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a64:	84 0f       	add	r24, r20
    3a66:	95 1f       	adc	r25, r21
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	82 0f       	add	r24, r18
    3a72:	93 1f       	adc	r25, r19
    3a74:	02 96       	adiw	r24, 0x02	; 2
    3a76:	fc 01       	movw	r30, r24
    3a78:	20 81       	ld	r18, Z
    3a7a:	31 81       	ldd	r19, Z+1	; 0x01
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	8d 52       	subi	r24, 0x2D	; 45
    3a80:	99 4f       	sbci	r25, 0xF9	; 249
    3a82:	fc 01       	movw	r30, r24
    3a84:	33 83       	std	Z+3, r19	; 0x03
    3a86:	22 83       	std	Z+2, r18	; 0x02
    3a88:	46 c0       	rjmp	.+140    	; 0x3b16 <main+0x7c6>
	}  			
	else
	{
		if(flag1%2==0)
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8e:	81 70       	andi	r24, 0x01	; 1
    3a90:	90 70       	andi	r25, 0x00	; 0
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	09 f0       	breq	.+2      	; 0x3a98 <main+0x748>
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <main+0x7c6>
		{
			flag4=0;
    3a98:	1a 8a       	std	Y+18, r1	; 0x12
    3a9a:	19 8a       	std	Y+17, r1	; 0x11
			final[0]=origin2[boxnumber][flag3][0];
    3a9c:	9e 01       	movw	r18, r28
    3a9e:	2d 5f       	subi	r18, 0xFD	; 253
    3aa0:	3a 4f       	sbci	r19, 0xFA	; 250
    3aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa6:	ac 01       	movw	r20, r24
    3aa8:	44 0f       	add	r20, r20
    3aaa:	55 1f       	adc	r21, r21
    3aac:	44 0f       	add	r20, r20
    3aae:	55 1f       	adc	r21, r21
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 89       	ldd	r25, Y+16	; 0x10
    3ab4:	84 0f       	add	r24, r20
    3ab6:	95 1f       	adc	r25, r21
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	82 0f       	add	r24, r18
    3ac2:	93 1f       	adc	r25, r19
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	20 81       	ld	r18, Z
    3ac8:	31 81       	ldd	r19, Z+1	; 0x01
    3aca:	ce 01       	movw	r24, r28
    3acc:	8d 52       	subi	r24, 0x2D	; 45
    3ace:	99 4f       	sbci	r25, 0xF9	; 249
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	31 83       	std	Z+1, r19	; 0x01
    3ad4:	20 83       	st	Z, r18
			final[1]=origin2[boxnumber][flag3][1];
    3ad6:	9e 01       	movw	r18, r28
    3ad8:	2d 5f       	subi	r18, 0xFD	; 253
    3ada:	3a 4f       	sbci	r19, 0xFA	; 250
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	44 0f       	add	r20, r20
    3ae4:	55 1f       	adc	r21, r21
    3ae6:	44 0f       	add	r20, r20
    3ae8:	55 1f       	adc	r21, r21
    3aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aec:	98 89       	ldd	r25, Y+16	; 0x10
    3aee:	84 0f       	add	r24, r20
    3af0:	95 1f       	adc	r25, r21
    3af2:	88 0f       	add	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	82 0f       	add	r24, r18
    3afc:	93 1f       	adc	r25, r19
    3afe:	02 96       	adiw	r24, 0x02	; 2
    3b00:	fc 01       	movw	r30, r24
    3b02:	20 81       	ld	r18, Z
    3b04:	31 81       	ldd	r19, Z+1	; 0x01
    3b06:	ce 01       	movw	r24, r28
    3b08:	8d 52       	subi	r24, 0x2D	; 45
    3b0a:	99 4f       	sbci	r25, 0xF9	; 249
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	33 83       	std	Z+3, r19	; 0x03
    3b10:	22 83       	std	Z+2, r18	; 0x02
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <main+0x7c6>
					else
						break;
				}						
			}					
		}
	}
    3b14:	00 00       	nop
	
	
	point : while(1)         ///////////////////////////////////////////////////////////////////////////////////////////////////////
	{
		
		if(final[1]>coor[1])
    3b16:	ce 01       	movw	r24, r28
    3b18:	8d 52       	subi	r24, 0x2D	; 45
    3b1a:	99 4f       	sbci	r25, 0xF9	; 249
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	22 81       	ldd	r18, Z+2	; 0x02
    3b20:	33 81       	ldd	r19, Z+3	; 0x03
    3b22:	80 91 a8 04 	lds	r24, 0x04A8
    3b26:	90 91 a9 04 	lds	r25, 0x04A9
    3b2a:	82 17       	cp	r24, r18
    3b2c:	93 07       	cpc	r25, r19
    3b2e:	0c f0       	brlt	.+2      	; 0x3b32 <main+0x7e2>
    3b30:	27 c6       	rjmp	.+3150   	; 0x4780 <main+0x1430>
		{
			if(compass==4)
    3b32:	8b 81       	ldd	r24, Y+3	; 0x03
    3b34:	9c 81       	ldd	r25, Y+4	; 0x04
    3b36:	84 30       	cpi	r24, 0x04	; 4
    3b38:	91 05       	cpc	r25, r1
    3b3a:	09 f0       	breq	.+2      	; 0x3b3e <main+0x7ee>
    3b3c:	e3 c0       	rjmp	.+454    	; 0x3d04 <main+0x9b4>
			{
				coor[1]=coor[1]+1;
    3b3e:	80 91 a8 04 	lds	r24, 0x04A8
    3b42:	90 91 a9 04 	lds	r25, 0x04A9
    3b46:	01 96       	adiw	r24, 0x01	; 1
    3b48:	90 93 a9 04 	sts	0x04A9, r25
    3b4c:	80 93 a8 04 	sts	0x04A8, r24
				compass=4;
    3b50:	84 e0       	ldi	r24, 0x04	; 4
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9c 83       	std	Y+4, r25	; 0x04
    3b56:	8b 83       	std	Y+3, r24	; 0x03
    3b58:	9e 01       	movw	r18, r28
    3b5a:	2b 5b       	subi	r18, 0xBB	; 187
    3b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	a8 ec       	ldi	r26, 0xC8	; 200
    3b64:	b2 e4       	ldi	r27, 0x42	; 66
    3b66:	f9 01       	movw	r30, r18
    3b68:	80 83       	st	Z, r24
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	a2 83       	std	Z+2, r26	; 0x02
    3b6e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b70:	8e 01       	movw	r16, r28
    3b72:	07 5b       	subi	r16, 0xB7	; 183
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	ce 01       	movw	r24, r28
    3b78:	8b 5b       	subi	r24, 0xBB	; 187
    3b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	82 81       	ldd	r24, Z+2	; 0x02
    3b84:	93 81       	ldd	r25, Z+3	; 0x03
    3b86:	26 e6       	ldi	r18, 0x66	; 102
    3b88:	36 e6       	ldi	r19, 0x66	; 102
    3b8a:	46 e6       	ldi	r20, 0x66	; 102
    3b8c:	55 e4       	ldi	r21, 0x45	; 69
    3b8e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	f8 01       	movw	r30, r16
    3b98:	80 83       	st	Z, r24
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	a2 83       	std	Z+2, r26	; 0x02
    3b9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	87 5b       	subi	r24, 0xB7	; 183
    3ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba6:	11 e0       	ldi	r17, 0x01	; 1
    3ba8:	fc 01       	movw	r30, r24
    3baa:	60 81       	ld	r22, Z
    3bac:	71 81       	ldd	r23, Z+1	; 0x01
    3bae:	82 81       	ldd	r24, Z+2	; 0x02
    3bb0:	93 81       	ldd	r25, Z+3	; 0x03
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e8       	ldi	r20, 0x80	; 128
    3bb8:	5f e3       	ldi	r21, 0x3F	; 63
    3bba:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3bbe:	88 23       	and	r24, r24
    3bc0:	0c f0       	brlt	.+2      	; 0x3bc4 <main+0x874>
    3bc2:	10 e0       	ldi	r17, 0x00	; 0
    3bc4:	11 23       	and	r17, r17
    3bc6:	49 f0       	breq	.+18     	; 0x3bda <main+0x88a>
		__ticks = 1;
    3bc8:	ce 01       	movw	r24, r28
    3bca:	83 5b       	subi	r24, 0xB3	; 179
    3bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	31 83       	std	Z+1, r19	; 0x01
    3bd6:	20 83       	st	Z, r18
    3bd8:	74 c0       	rjmp	.+232    	; 0x3cc2 <main+0x972>
	else if (__tmp > 65535)
    3bda:	ce 01       	movw	r24, r28
    3bdc:	87 5b       	subi	r24, 0xB7	; 183
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	11 e0       	ldi	r17, 0x01	; 1
    3be2:	fc 01       	movw	r30, r24
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	4f e7       	ldi	r20, 0x7F	; 127
    3bf2:	57 e4       	ldi	r21, 0x47	; 71
    3bf4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    3bf8:	18 16       	cp	r1, r24
    3bfa:	0c f0       	brlt	.+2      	; 0x3bfe <main+0x8ae>
    3bfc:	10 e0       	ldi	r17, 0x00	; 0
    3bfe:	11 23       	and	r17, r17
    3c00:	09 f4       	brne	.+2      	; 0x3c04 <main+0x8b4>
    3c02:	4d c0       	rjmp	.+154    	; 0x3c9e <main+0x94e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c04:	ce 01       	movw	r24, r28
    3c06:	8b 5b       	subi	r24, 0xBB	; 187
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e2       	ldi	r20, 0x20	; 32
    3c1a:	51 e4       	ldi	r21, 0x41	; 65
    3c1c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	8e 01       	movw	r16, r28
    3c26:	03 5b       	subi	r16, 0xB3	; 179
    3c28:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	f8 01       	movw	r30, r16
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
    3c3c:	27 c0       	rjmp	.+78     	; 0x3c8c <main+0x93c>
    3c3e:	ce 01       	movw	r24, r28
    3c40:	81 5b       	subi	r24, 0xB1	; 177
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	20 e7       	ldi	r18, 0x70	; 112
    3c46:	31 e0       	ldi	r19, 0x01	; 1
    3c48:	fc 01       	movw	r30, r24
    3c4a:	31 83       	std	Z+1, r19	; 0x01
    3c4c:	20 83       	st	Z, r18
    3c4e:	ce 01       	movw	r24, r28
    3c50:	81 5b       	subi	r24, 0xB1	; 177
    3c52:	9f 4f       	sbci	r25, 0xFF	; 255
    3c54:	fc 01       	movw	r30, r24
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	8c 01       	movw	r16, r24
    3c5c:	c8 01       	movw	r24, r16
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <main+0x90e>
    3c62:	8c 01       	movw	r16, r24
    3c64:	ce 01       	movw	r24, r28
    3c66:	81 5b       	subi	r24, 0xB1	; 177
    3c68:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	11 83       	std	Z+1, r17	; 0x01
    3c6e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c70:	ce 01       	movw	r24, r28
    3c72:	83 5b       	subi	r24, 0xB3	; 179
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	9e 01       	movw	r18, r28
    3c78:	23 5b       	subi	r18, 0xB3	; 179
    3c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7c:	f9 01       	movw	r30, r18
    3c7e:	20 81       	ld	r18, Z
    3c80:	31 81       	ldd	r19, Z+1	; 0x01
    3c82:	21 50       	subi	r18, 0x01	; 1
    3c84:	30 40       	sbci	r19, 0x00	; 0
    3c86:	fc 01       	movw	r30, r24
    3c88:	31 83       	std	Z+1, r19	; 0x01
    3c8a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	83 5b       	subi	r24, 0xB3	; 179
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	fc 01       	movw	r30, r24
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	89 f6       	brne	.-94     	; 0x3c3e <main+0x8ee>
    3c9c:	2f c0       	rjmp	.+94     	; 0x3cfc <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9e:	8e 01       	movw	r16, r28
    3ca0:	03 5b       	subi	r16, 0xB3	; 179
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	87 5b       	subi	r24, 0xB7	; 183
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	fc 01       	movw	r30, r24
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	8f 5a       	subi	r24, 0xAF	; 175
    3cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc8:	9e 01       	movw	r18, r28
    3cca:	23 5b       	subi	r18, 0xB3	; 179
    3ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cce:	f9 01       	movw	r30, r18
    3cd0:	20 81       	ld	r18, Z
    3cd2:	31 81       	ldd	r19, Z+1	; 0x01
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	31 83       	std	Z+1, r19	; 0x01
    3cd8:	20 83       	st	Z, r18
    3cda:	ce 01       	movw	r24, r28
    3cdc:	8f 5a       	subi	r24, 0xAF	; 175
    3cde:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	80 81       	ld	r24, Z
    3ce4:	91 81       	ldd	r25, Z+1	; 0x01
    3ce6:	8c 01       	movw	r16, r24
    3ce8:	c8 01       	movw	r24, r16
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <main+0x99a>
    3cee:	8c 01       	movw	r16, r24
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	8f 5a       	subi	r24, 0xAF	; 175
    3cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	11 83       	std	Z+1, r17	; 0x01
    3cfa:	00 83       	st	Z, r16
				_delay_ms(100);
				linefollwer();
    3cfc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    3d00:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
			}
			else
			{
				
				if(compass==6)
    3d04:	8b 81       	ldd	r24, Y+3	; 0x03
    3d06:	9c 81       	ldd	r25, Y+4	; 0x04
    3d08:	86 30       	cpi	r24, 0x06	; 6
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <main+0x9c0>
    3d0e:	b9 c1       	rjmp	.+882    	; 0x4082 <main+0xd32>
				{
					coor[1]=coor[1]+1;
    3d10:	80 91 a8 04 	lds	r24, 0x04A8
    3d14:	90 91 a9 04 	lds	r25, 0x04A9
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	90 93 a9 04 	sts	0x04A9, r25
    3d1e:	80 93 a8 04 	sts	0x04A8, r24
					compass=4;
    3d22:	84 e0       	ldi	r24, 0x04	; 4
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	9c 83       	std	Y+4, r25	; 0x04
    3d28:	8b 83       	std	Y+3, r24	; 0x03
    3d2a:	9e 01       	movw	r18, r28
    3d2c:	2d 5a       	subi	r18, 0xAD	; 173
    3d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	aa ef       	ldi	r26, 0xFA	; 250
    3d36:	b3 e4       	ldi	r27, 0x43	; 67
    3d38:	f9 01       	movw	r30, r18
    3d3a:	80 83       	st	Z, r24
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	a2 83       	std	Z+2, r26	; 0x02
    3d40:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d42:	8e 01       	movw	r16, r28
    3d44:	09 5a       	subi	r16, 0xA9	; 169
    3d46:	1f 4f       	sbci	r17, 0xFF	; 255
    3d48:	ce 01       	movw	r24, r28
    3d4a:	8d 5a       	subi	r24, 0xAD	; 173
    3d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4e:	fc 01       	movw	r30, r24
    3d50:	60 81       	ld	r22, Z
    3d52:	71 81       	ldd	r23, Z+1	; 0x01
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	26 e6       	ldi	r18, 0x66	; 102
    3d5a:	36 e6       	ldi	r19, 0x66	; 102
    3d5c:	46 e6       	ldi	r20, 0x66	; 102
    3d5e:	55 e4       	ldi	r21, 0x45	; 69
    3d60:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	f8 01       	movw	r30, r16
    3d6a:	80 83       	st	Z, r24
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	a2 83       	std	Z+2, r26	; 0x02
    3d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d72:	ce 01       	movw	r24, r28
    3d74:	89 5a       	subi	r24, 0xA9	; 169
    3d76:	9f 4f       	sbci	r25, 0xFF	; 255
    3d78:	11 e0       	ldi	r17, 0x01	; 1
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e8       	ldi	r20, 0x80	; 128
    3d8a:	5f e3       	ldi	r21, 0x3F	; 63
    3d8c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3d90:	88 23       	and	r24, r24
    3d92:	0c f0       	brlt	.+2      	; 0x3d96 <main+0xa46>
    3d94:	10 e0       	ldi	r17, 0x00	; 0
    3d96:	11 23       	and	r17, r17
    3d98:	49 f0       	breq	.+18     	; 0x3dac <main+0xa5c>
		__ticks = 1;
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	85 5a       	subi	r24, 0xA5	; 165
    3d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3da0:	21 e0       	ldi	r18, 0x01	; 1
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	fc 01       	movw	r30, r24
    3da6:	31 83       	std	Z+1, r19	; 0x01
    3da8:	20 83       	st	Z, r18
    3daa:	74 c0       	rjmp	.+232    	; 0x3e94 <main+0xb44>
	else if (__tmp > 65535)
    3dac:	ce 01       	movw	r24, r28
    3dae:	89 5a       	subi	r24, 0xA9	; 169
    3db0:	9f 4f       	sbci	r25, 0xFF	; 255
    3db2:	11 e0       	ldi	r17, 0x01	; 1
    3db4:	fc 01       	movw	r30, r24
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	3f ef       	ldi	r19, 0xFF	; 255
    3dc2:	4f e7       	ldi	r20, 0x7F	; 127
    3dc4:	57 e4       	ldi	r21, 0x47	; 71
    3dc6:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    3dca:	18 16       	cp	r1, r24
    3dcc:	0c f0       	brlt	.+2      	; 0x3dd0 <main+0xa80>
    3dce:	10 e0       	ldi	r17, 0x00	; 0
    3dd0:	11 23       	and	r17, r17
    3dd2:	09 f4       	brne	.+2      	; 0x3dd6 <main+0xa86>
    3dd4:	4d c0       	rjmp	.+154    	; 0x3e70 <main+0xb20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	8d 5a       	subi	r24, 0xAD	; 173
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	fc 01       	movw	r30, r24
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e2       	ldi	r20, 0x20	; 32
    3dec:	51 e4       	ldi	r21, 0x41	; 65
    3dee:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	8e 01       	movw	r16, r28
    3df8:	05 5a       	subi	r16, 0xA5	; 165
    3dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	f8 01       	movw	r30, r16
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	80 83       	st	Z, r24
    3e0e:	27 c0       	rjmp	.+78     	; 0x3e5e <main+0xb0e>
    3e10:	ce 01       	movw	r24, r28
    3e12:	83 5a       	subi	r24, 0xA3	; 163
    3e14:	9f 4f       	sbci	r25, 0xFF	; 255
    3e16:	20 e7       	ldi	r18, 0x70	; 112
    3e18:	31 e0       	ldi	r19, 0x01	; 1
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	31 83       	std	Z+1, r19	; 0x01
    3e1e:	20 83       	st	Z, r18
    3e20:	ce 01       	movw	r24, r28
    3e22:	83 5a       	subi	r24, 0xA3	; 163
    3e24:	9f 4f       	sbci	r25, 0xFF	; 255
    3e26:	fc 01       	movw	r30, r24
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	8c 01       	movw	r16, r24
    3e2e:	c8 01       	movw	r24, r16
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	f1 f7       	brne	.-4      	; 0x3e30 <main+0xae0>
    3e34:	8c 01       	movw	r16, r24
    3e36:	ce 01       	movw	r24, r28
    3e38:	83 5a       	subi	r24, 0xA3	; 163
    3e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	11 83       	std	Z+1, r17	; 0x01
    3e40:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e42:	ce 01       	movw	r24, r28
    3e44:	85 5a       	subi	r24, 0xA5	; 165
    3e46:	9f 4f       	sbci	r25, 0xFF	; 255
    3e48:	9e 01       	movw	r18, r28
    3e4a:	25 5a       	subi	r18, 0xA5	; 165
    3e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4e:	f9 01       	movw	r30, r18
    3e50:	20 81       	ld	r18, Z
    3e52:	31 81       	ldd	r19, Z+1	; 0x01
    3e54:	21 50       	subi	r18, 0x01	; 1
    3e56:	30 40       	sbci	r19, 0x00	; 0
    3e58:	fc 01       	movw	r30, r24
    3e5a:	31 83       	std	Z+1, r19	; 0x01
    3e5c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5e:	ce 01       	movw	r24, r28
    3e60:	85 5a       	subi	r24, 0xA5	; 165
    3e62:	9f 4f       	sbci	r25, 0xFF	; 255
    3e64:	fc 01       	movw	r30, r24
    3e66:	80 81       	ld	r24, Z
    3e68:	91 81       	ldd	r25, Z+1	; 0x01
    3e6a:	00 97       	sbiw	r24, 0x00	; 0
    3e6c:	89 f6       	brne	.-94     	; 0x3e10 <main+0xac0>
    3e6e:	2f c0       	rjmp	.+94     	; 0x3ece <main+0xb7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e70:	8e 01       	movw	r16, r28
    3e72:	05 5a       	subi	r16, 0xA5	; 165
    3e74:	1f 4f       	sbci	r17, 0xFF	; 255
    3e76:	ce 01       	movw	r24, r28
    3e78:	89 5a       	subi	r24, 0xA9	; 169
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	60 81       	ld	r22, Z
    3e80:	71 81       	ldd	r23, Z+1	; 0x01
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	93 81       	ldd	r25, Z+3	; 0x03
    3e86:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	f8 01       	movw	r30, r16
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
    3e94:	ce 01       	movw	r24, r28
    3e96:	81 5a       	subi	r24, 0xA1	; 161
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	9e 01       	movw	r18, r28
    3e9c:	25 5a       	subi	r18, 0xA5	; 165
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	f9 01       	movw	r30, r18
    3ea2:	20 81       	ld	r18, Z
    3ea4:	31 81       	ldd	r19, Z+1	; 0x01
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	31 83       	std	Z+1, r19	; 0x01
    3eaa:	20 83       	st	Z, r18
    3eac:	ce 01       	movw	r24, r28
    3eae:	81 5a       	subi	r24, 0xA1	; 161
    3eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	8c 01       	movw	r16, r24
    3eba:	c8 01       	movw	r24, r16
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <main+0xb6c>
    3ec0:	8c 01       	movw	r16, r24
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	81 5a       	subi	r24, 0xA1	; 161
    3ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec8:	fc 01       	movw	r30, r24
    3eca:	11 83       	std	Z+1, r17	; 0x01
    3ecc:	00 83       	st	Z, r16
					_delay_ms(500);
					left_degrees(85);
    3ece:	85 e5       	ldi	r24, 0x55	; 85
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    3ed6:	9e 01       	movw	r18, r28
    3ed8:	2f 59       	subi	r18, 0x9F	; 159
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ee2:	b2 e4       	ldi	r27, 0x42	; 66
    3ee4:	f9 01       	movw	r30, r18
    3ee6:	80 83       	st	Z, r24
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	a2 83       	std	Z+2, r26	; 0x02
    3eec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3eee:	8e 01       	movw	r16, r28
    3ef0:	0b 59       	subi	r16, 0x9B	; 155
    3ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	8f 59       	subi	r24, 0x9F	; 159
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	fc 01       	movw	r30, r24
    3efc:	60 81       	ld	r22, Z
    3efe:	71 81       	ldd	r23, Z+1	; 0x01
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	26 e6       	ldi	r18, 0x66	; 102
    3f06:	36 e6       	ldi	r19, 0x66	; 102
    3f08:	46 e6       	ldi	r20, 0x66	; 102
    3f0a:	55 e4       	ldi	r21, 0x45	; 69
    3f0c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	f8 01       	movw	r30, r16
    3f16:	80 83       	st	Z, r24
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	a2 83       	std	Z+2, r26	; 0x02
    3f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1e:	ce 01       	movw	r24, r28
    3f20:	8b 59       	subi	r24, 0x9B	; 155
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	11 e0       	ldi	r17, 0x01	; 1
    3f26:	fc 01       	movw	r30, r24
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e8       	ldi	r20, 0x80	; 128
    3f36:	5f e3       	ldi	r21, 0x3F	; 63
    3f38:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    3f3c:	88 23       	and	r24, r24
    3f3e:	0c f0       	brlt	.+2      	; 0x3f42 <main+0xbf2>
    3f40:	10 e0       	ldi	r17, 0x00	; 0
    3f42:	11 23       	and	r17, r17
    3f44:	49 f0       	breq	.+18     	; 0x3f58 <main+0xc08>
		__ticks = 1;
    3f46:	ce 01       	movw	r24, r28
    3f48:	87 59       	subi	r24, 0x97	; 151
    3f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4c:	21 e0       	ldi	r18, 0x01	; 1
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	fc 01       	movw	r30, r24
    3f52:	31 83       	std	Z+1, r19	; 0x01
    3f54:	20 83       	st	Z, r18
    3f56:	74 c0       	rjmp	.+232    	; 0x4040 <main+0xcf0>
	else if (__tmp > 65535)
    3f58:	ce 01       	movw	r24, r28
    3f5a:	8b 59       	subi	r24, 0x9B	; 155
    3f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5e:	11 e0       	ldi	r17, 0x01	; 1
    3f60:	fc 01       	movw	r30, r24
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	3f ef       	ldi	r19, 0xFF	; 255
    3f6e:	4f e7       	ldi	r20, 0x7F	; 127
    3f70:	57 e4       	ldi	r21, 0x47	; 71
    3f72:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    3f76:	18 16       	cp	r1, r24
    3f78:	0c f0       	brlt	.+2      	; 0x3f7c <main+0xc2c>
    3f7a:	10 e0       	ldi	r17, 0x00	; 0
    3f7c:	11 23       	and	r17, r17
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <main+0xc32>
    3f80:	4d c0       	rjmp	.+154    	; 0x401c <main+0xccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f82:	ce 01       	movw	r24, r28
    3f84:	8f 59       	subi	r24, 0x9F	; 159
    3f86:	9f 4f       	sbci	r25, 0xFF	; 255
    3f88:	fc 01       	movw	r30, r24
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	82 81       	ldd	r24, Z+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e2       	ldi	r20, 0x20	; 32
    3f98:	51 e4       	ldi	r21, 0x41	; 65
    3f9a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	07 59       	subi	r16, 0x97	; 151
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	bc 01       	movw	r22, r24
    3faa:	cd 01       	movw	r24, r26
    3fac:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	f8 01       	movw	r30, r16
    3fb6:	91 83       	std	Z+1, r25	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	27 c0       	rjmp	.+78     	; 0x400a <main+0xcba>
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	85 59       	subi	r24, 0x95	; 149
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	20 e7       	ldi	r18, 0x70	; 112
    3fc4:	31 e0       	ldi	r19, 0x01	; 1
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	31 83       	std	Z+1, r19	; 0x01
    3fca:	20 83       	st	Z, r18
    3fcc:	ce 01       	movw	r24, r28
    3fce:	85 59       	subi	r24, 0x95	; 149
    3fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	8c 01       	movw	r16, r24
    3fda:	c8 01       	movw	r24, r16
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <main+0xc8c>
    3fe0:	8c 01       	movw	r16, r24
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	85 59       	subi	r24, 0x95	; 149
    3fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe8:	fc 01       	movw	r30, r24
    3fea:	11 83       	std	Z+1, r17	; 0x01
    3fec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fee:	ce 01       	movw	r24, r28
    3ff0:	87 59       	subi	r24, 0x97	; 151
    3ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff4:	9e 01       	movw	r18, r28
    3ff6:	27 59       	subi	r18, 0x97	; 151
    3ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffa:	f9 01       	movw	r30, r18
    3ffc:	20 81       	ld	r18, Z
    3ffe:	31 81       	ldd	r19, Z+1	; 0x01
    4000:	21 50       	subi	r18, 0x01	; 1
    4002:	30 40       	sbci	r19, 0x00	; 0
    4004:	fc 01       	movw	r30, r24
    4006:	31 83       	std	Z+1, r19	; 0x01
    4008:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400a:	ce 01       	movw	r24, r28
    400c:	87 59       	subi	r24, 0x97	; 151
    400e:	9f 4f       	sbci	r25, 0xFF	; 255
    4010:	fc 01       	movw	r30, r24
    4012:	80 81       	ld	r24, Z
    4014:	91 81       	ldd	r25, Z+1	; 0x01
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	89 f6       	brne	.-94     	; 0x3fbc <main+0xc6c>
    401a:	2f c0       	rjmp	.+94     	; 0x407a <main+0xd2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401c:	8e 01       	movw	r16, r28
    401e:	07 59       	subi	r16, 0x97	; 151
    4020:	1f 4f       	sbci	r17, 0xFF	; 255
    4022:	ce 01       	movw	r24, r28
    4024:	8b 59       	subi	r24, 0x9B	; 155
    4026:	9f 4f       	sbci	r25, 0xFF	; 255
    4028:	fc 01       	movw	r30, r24
    402a:	60 81       	ld	r22, Z
    402c:	71 81       	ldd	r23, Z+1	; 0x01
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	93 81       	ldd	r25, Z+3	; 0x03
    4032:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	f8 01       	movw	r30, r16
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
    4040:	ce 01       	movw	r24, r28
    4042:	83 59       	subi	r24, 0x93	; 147
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	9e 01       	movw	r18, r28
    4048:	27 59       	subi	r18, 0x97	; 151
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
    404c:	f9 01       	movw	r30, r18
    404e:	20 81       	ld	r18, Z
    4050:	31 81       	ldd	r19, Z+1	; 0x01
    4052:	fc 01       	movw	r30, r24
    4054:	31 83       	std	Z+1, r19	; 0x01
    4056:	20 83       	st	Z, r18
    4058:	ce 01       	movw	r24, r28
    405a:	83 59       	subi	r24, 0x93	; 147
    405c:	9f 4f       	sbci	r25, 0xFF	; 255
    405e:	fc 01       	movw	r30, r24
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	8c 01       	movw	r16, r24
    4066:	c8 01       	movw	r24, r16
    4068:	01 97       	sbiw	r24, 0x01	; 1
    406a:	f1 f7       	brne	.-4      	; 0x4068 <main+0xd18>
    406c:	8c 01       	movw	r16, r24
    406e:	ce 01       	movw	r24, r28
    4070:	83 59       	subi	r24, 0x93	; 147
    4072:	9f 4f       	sbci	r25, 0xFF	; 255
    4074:	fc 01       	movw	r30, r24
    4076:	11 83       	std	Z+1, r17	; 0x01
    4078:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    407a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    407e:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
				}
				else
				{
					if(compass==7)
    4082:	8b 81       	ldd	r24, Y+3	; 0x03
    4084:	9c 81       	ldd	r25, Y+4	; 0x04
    4086:	87 30       	cpi	r24, 0x07	; 7
    4088:	91 05       	cpc	r25, r1
    408a:	09 f0       	breq	.+2      	; 0x408e <main+0xd3e>
    408c:	b9 c1       	rjmp	.+882    	; 0x4400 <main+0x10b0>
					{
						coor[1]=coor[1]+1;
    408e:	80 91 a8 04 	lds	r24, 0x04A8
    4092:	90 91 a9 04 	lds	r25, 0x04A9
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	90 93 a9 04 	sts	0x04A9, r25
    409c:	80 93 a8 04 	sts	0x04A8, r24
						compass=4;
    40a0:	84 e0       	ldi	r24, 0x04	; 4
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	9c 83       	std	Y+4, r25	; 0x04
    40a6:	8b 83       	std	Y+3, r24	; 0x03
    40a8:	9e 01       	movw	r18, r28
    40aa:	21 59       	subi	r18, 0x91	; 145
    40ac:	3f 4f       	sbci	r19, 0xFF	; 255
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	aa ef       	ldi	r26, 0xFA	; 250
    40b4:	b3 e4       	ldi	r27, 0x43	; 67
    40b6:	f9 01       	movw	r30, r18
    40b8:	80 83       	st	Z, r24
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	a2 83       	std	Z+2, r26	; 0x02
    40be:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    40c0:	8e 01       	movw	r16, r28
    40c2:	0d 58       	subi	r16, 0x8D	; 141
    40c4:	1f 4f       	sbci	r17, 0xFF	; 255
    40c6:	ce 01       	movw	r24, r28
    40c8:	81 59       	subi	r24, 0x91	; 145
    40ca:	9f 4f       	sbci	r25, 0xFF	; 255
    40cc:	fc 01       	movw	r30, r24
    40ce:	60 81       	ld	r22, Z
    40d0:	71 81       	ldd	r23, Z+1	; 0x01
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	26 e6       	ldi	r18, 0x66	; 102
    40d8:	36 e6       	ldi	r19, 0x66	; 102
    40da:	46 e6       	ldi	r20, 0x66	; 102
    40dc:	55 e4       	ldi	r21, 0x45	; 69
    40de:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	f8 01       	movw	r30, r16
    40e8:	80 83       	st	Z, r24
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	a2 83       	std	Z+2, r26	; 0x02
    40ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40f0:	ce 01       	movw	r24, r28
    40f2:	8d 58       	subi	r24, 0x8D	; 141
    40f4:	9f 4f       	sbci	r25, 0xFF	; 255
    40f6:	11 e0       	ldi	r17, 0x01	; 1
    40f8:	fc 01       	movw	r30, r24
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    410e:	88 23       	and	r24, r24
    4110:	0c f0       	brlt	.+2      	; 0x4114 <main+0xdc4>
    4112:	10 e0       	ldi	r17, 0x00	; 0
    4114:	11 23       	and	r17, r17
    4116:	49 f0       	breq	.+18     	; 0x412a <main+0xdda>
		__ticks = 1;
    4118:	ce 01       	movw	r24, r28
    411a:	89 58       	subi	r24, 0x89	; 137
    411c:	9f 4f       	sbci	r25, 0xFF	; 255
    411e:	21 e0       	ldi	r18, 0x01	; 1
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	fc 01       	movw	r30, r24
    4124:	31 83       	std	Z+1, r19	; 0x01
    4126:	20 83       	st	Z, r18
    4128:	74 c0       	rjmp	.+232    	; 0x4212 <main+0xec2>
	else if (__tmp > 65535)
    412a:	ce 01       	movw	r24, r28
    412c:	8d 58       	subi	r24, 0x8D	; 141
    412e:	9f 4f       	sbci	r25, 0xFF	; 255
    4130:	11 e0       	ldi	r17, 0x01	; 1
    4132:	fc 01       	movw	r30, r24
    4134:	60 81       	ld	r22, Z
    4136:	71 81       	ldd	r23, Z+1	; 0x01
    4138:	82 81       	ldd	r24, Z+2	; 0x02
    413a:	93 81       	ldd	r25, Z+3	; 0x03
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	4f e7       	ldi	r20, 0x7F	; 127
    4142:	57 e4       	ldi	r21, 0x47	; 71
    4144:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4148:	18 16       	cp	r1, r24
    414a:	0c f0       	brlt	.+2      	; 0x414e <main+0xdfe>
    414c:	10 e0       	ldi	r17, 0x00	; 0
    414e:	11 23       	and	r17, r17
    4150:	09 f4       	brne	.+2      	; 0x4154 <main+0xe04>
    4152:	4d c0       	rjmp	.+154    	; 0x41ee <main+0xe9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4154:	ce 01       	movw	r24, r28
    4156:	81 59       	subi	r24, 0x91	; 145
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	fc 01       	movw	r30, r24
    415c:	60 81       	ld	r22, Z
    415e:	71 81       	ldd	r23, Z+1	; 0x01
    4160:	82 81       	ldd	r24, Z+2	; 0x02
    4162:	93 81       	ldd	r25, Z+3	; 0x03
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	40 e2       	ldi	r20, 0x20	; 32
    416a:	51 e4       	ldi	r21, 0x41	; 65
    416c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	8e 01       	movw	r16, r28
    4176:	09 58       	subi	r16, 0x89	; 137
    4178:	1f 4f       	sbci	r17, 0xFF	; 255
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	f8 01       	movw	r30, r16
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
    418c:	27 c0       	rjmp	.+78     	; 0x41dc <main+0xe8c>
    418e:	ce 01       	movw	r24, r28
    4190:	87 58       	subi	r24, 0x87	; 135
    4192:	9f 4f       	sbci	r25, 0xFF	; 255
    4194:	20 e7       	ldi	r18, 0x70	; 112
    4196:	31 e0       	ldi	r19, 0x01	; 1
    4198:	fc 01       	movw	r30, r24
    419a:	31 83       	std	Z+1, r19	; 0x01
    419c:	20 83       	st	Z, r18
    419e:	ce 01       	movw	r24, r28
    41a0:	87 58       	subi	r24, 0x87	; 135
    41a2:	9f 4f       	sbci	r25, 0xFF	; 255
    41a4:	fc 01       	movw	r30, r24
    41a6:	80 81       	ld	r24, Z
    41a8:	91 81       	ldd	r25, Z+1	; 0x01
    41aa:	8c 01       	movw	r16, r24
    41ac:	c8 01       	movw	r24, r16
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <main+0xe5e>
    41b2:	8c 01       	movw	r16, r24
    41b4:	ce 01       	movw	r24, r28
    41b6:	87 58       	subi	r24, 0x87	; 135
    41b8:	9f 4f       	sbci	r25, 0xFF	; 255
    41ba:	fc 01       	movw	r30, r24
    41bc:	11 83       	std	Z+1, r17	; 0x01
    41be:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	ce 01       	movw	r24, r28
    41c2:	89 58       	subi	r24, 0x89	; 137
    41c4:	9f 4f       	sbci	r25, 0xFF	; 255
    41c6:	9e 01       	movw	r18, r28
    41c8:	29 58       	subi	r18, 0x89	; 137
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	f9 01       	movw	r30, r18
    41ce:	20 81       	ld	r18, Z
    41d0:	31 81       	ldd	r19, Z+1	; 0x01
    41d2:	21 50       	subi	r18, 0x01	; 1
    41d4:	30 40       	sbci	r19, 0x00	; 0
    41d6:	fc 01       	movw	r30, r24
    41d8:	31 83       	std	Z+1, r19	; 0x01
    41da:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41dc:	ce 01       	movw	r24, r28
    41de:	89 58       	subi	r24, 0x89	; 137
    41e0:	9f 4f       	sbci	r25, 0xFF	; 255
    41e2:	fc 01       	movw	r30, r24
    41e4:	80 81       	ld	r24, Z
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	00 97       	sbiw	r24, 0x00	; 0
    41ea:	89 f6       	brne	.-94     	; 0x418e <main+0xe3e>
    41ec:	2f c0       	rjmp	.+94     	; 0x424c <main+0xefc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ee:	8e 01       	movw	r16, r28
    41f0:	09 58       	subi	r16, 0x89	; 137
    41f2:	1f 4f       	sbci	r17, 0xFF	; 255
    41f4:	ce 01       	movw	r24, r28
    41f6:	8d 58       	subi	r24, 0x8D	; 141
    41f8:	9f 4f       	sbci	r25, 0xFF	; 255
    41fa:	fc 01       	movw	r30, r24
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	f8 01       	movw	r30, r16
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
    4212:	ce 01       	movw	r24, r28
    4214:	85 58       	subi	r24, 0x85	; 133
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	9e 01       	movw	r18, r28
    421a:	29 58       	subi	r18, 0x89	; 137
    421c:	3f 4f       	sbci	r19, 0xFF	; 255
    421e:	f9 01       	movw	r30, r18
    4220:	20 81       	ld	r18, Z
    4222:	31 81       	ldd	r19, Z+1	; 0x01
    4224:	fc 01       	movw	r30, r24
    4226:	31 83       	std	Z+1, r19	; 0x01
    4228:	20 83       	st	Z, r18
    422a:	ce 01       	movw	r24, r28
    422c:	85 58       	subi	r24, 0x85	; 133
    422e:	9f 4f       	sbci	r25, 0xFF	; 255
    4230:	fc 01       	movw	r30, r24
    4232:	80 81       	ld	r24, Z
    4234:	91 81       	ldd	r25, Z+1	; 0x01
    4236:	8c 01       	movw	r16, r24
    4238:	c8 01       	movw	r24, r16
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	f1 f7       	brne	.-4      	; 0x423a <main+0xeea>
    423e:	8c 01       	movw	r16, r24
    4240:	ce 01       	movw	r24, r28
    4242:	85 58       	subi	r24, 0x85	; 133
    4244:	9f 4f       	sbci	r25, 0xFF	; 255
    4246:	fc 01       	movw	r30, r24
    4248:	11 83       	std	Z+1, r17	; 0x01
    424a:	00 83       	st	Z, r16
						_delay_ms(500);
						right_degrees(85);
    424c:	85 e5       	ldi	r24, 0x55	; 85
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    4254:	9e 01       	movw	r18, r28
    4256:	23 58       	subi	r18, 0x83	; 131
    4258:	3f 4f       	sbci	r19, 0xFF	; 255
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	a8 ec       	ldi	r26, 0xC8	; 200
    4260:	b2 e4       	ldi	r27, 0x42	; 66
    4262:	f9 01       	movw	r30, r18
    4264:	80 83       	st	Z, r24
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	a2 83       	std	Z+2, r26	; 0x02
    426a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    426c:	8e 01       	movw	r16, r28
    426e:	0f 57       	subi	r16, 0x7F	; 127
    4270:	1f 4f       	sbci	r17, 0xFF	; 255
    4272:	ce 01       	movw	r24, r28
    4274:	83 58       	subi	r24, 0x83	; 131
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	fc 01       	movw	r30, r24
    427a:	60 81       	ld	r22, Z
    427c:	71 81       	ldd	r23, Z+1	; 0x01
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	93 81       	ldd	r25, Z+3	; 0x03
    4282:	26 e6       	ldi	r18, 0x66	; 102
    4284:	36 e6       	ldi	r19, 0x66	; 102
    4286:	46 e6       	ldi	r20, 0x66	; 102
    4288:	55 e4       	ldi	r21, 0x45	; 69
    428a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	f8 01       	movw	r30, r16
    4294:	80 83       	st	Z, r24
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	a2 83       	std	Z+2, r26	; 0x02
    429a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    429c:	ce 01       	movw	r24, r28
    429e:	8f 57       	subi	r24, 0x7F	; 127
    42a0:	9f 4f       	sbci	r25, 0xFF	; 255
    42a2:	11 e0       	ldi	r17, 0x01	; 1
    42a4:	fc 01       	movw	r30, r24
    42a6:	60 81       	ld	r22, Z
    42a8:	71 81       	ldd	r23, Z+1	; 0x01
    42aa:	82 81       	ldd	r24, Z+2	; 0x02
    42ac:	93 81       	ldd	r25, Z+3	; 0x03
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e8       	ldi	r20, 0x80	; 128
    42b4:	5f e3       	ldi	r21, 0x3F	; 63
    42b6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    42ba:	88 23       	and	r24, r24
    42bc:	0c f0       	brlt	.+2      	; 0x42c0 <main+0xf70>
    42be:	10 e0       	ldi	r17, 0x00	; 0
    42c0:	11 23       	and	r17, r17
    42c2:	49 f0       	breq	.+18     	; 0x42d6 <main+0xf86>
		__ticks = 1;
    42c4:	ce 01       	movw	r24, r28
    42c6:	8b 57       	subi	r24, 0x7B	; 123
    42c8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ca:	21 e0       	ldi	r18, 0x01	; 1
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	fc 01       	movw	r30, r24
    42d0:	31 83       	std	Z+1, r19	; 0x01
    42d2:	20 83       	st	Z, r18
    42d4:	74 c0       	rjmp	.+232    	; 0x43be <main+0x106e>
	else if (__tmp > 65535)
    42d6:	ce 01       	movw	r24, r28
    42d8:	8f 57       	subi	r24, 0x7F	; 127
    42da:	9f 4f       	sbci	r25, 0xFF	; 255
    42dc:	11 e0       	ldi	r17, 0x01	; 1
    42de:	fc 01       	movw	r30, r24
    42e0:	60 81       	ld	r22, Z
    42e2:	71 81       	ldd	r23, Z+1	; 0x01
    42e4:	82 81       	ldd	r24, Z+2	; 0x02
    42e6:	93 81       	ldd	r25, Z+3	; 0x03
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	3f ef       	ldi	r19, 0xFF	; 255
    42ec:	4f e7       	ldi	r20, 0x7F	; 127
    42ee:	57 e4       	ldi	r21, 0x47	; 71
    42f0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    42f4:	18 16       	cp	r1, r24
    42f6:	0c f0       	brlt	.+2      	; 0x42fa <main+0xfaa>
    42f8:	10 e0       	ldi	r17, 0x00	; 0
    42fa:	11 23       	and	r17, r17
    42fc:	09 f4       	brne	.+2      	; 0x4300 <main+0xfb0>
    42fe:	4d c0       	rjmp	.+154    	; 0x439a <main+0x104a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4300:	ce 01       	movw	r24, r28
    4302:	83 58       	subi	r24, 0x83	; 131
    4304:	9f 4f       	sbci	r25, 0xFF	; 255
    4306:	fc 01       	movw	r30, r24
    4308:	60 81       	ld	r22, Z
    430a:	71 81       	ldd	r23, Z+1	; 0x01
    430c:	82 81       	ldd	r24, Z+2	; 0x02
    430e:	93 81       	ldd	r25, Z+3	; 0x03
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	40 e2       	ldi	r20, 0x20	; 32
    4316:	51 e4       	ldi	r21, 0x41	; 65
    4318:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	8e 01       	movw	r16, r28
    4322:	0b 57       	subi	r16, 0x7B	; 123
    4324:	1f 4f       	sbci	r17, 0xFF	; 255
    4326:	bc 01       	movw	r22, r24
    4328:	cd 01       	movw	r24, r26
    432a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	f8 01       	movw	r30, r16
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	80 83       	st	Z, r24
    4338:	27 c0       	rjmp	.+78     	; 0x4388 <main+0x1038>
    433a:	ce 01       	movw	r24, r28
    433c:	89 57       	subi	r24, 0x79	; 121
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	20 e7       	ldi	r18, 0x70	; 112
    4342:	31 e0       	ldi	r19, 0x01	; 1
    4344:	fc 01       	movw	r30, r24
    4346:	31 83       	std	Z+1, r19	; 0x01
    4348:	20 83       	st	Z, r18
    434a:	ce 01       	movw	r24, r28
    434c:	89 57       	subi	r24, 0x79	; 121
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	fc 01       	movw	r30, r24
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	8c 01       	movw	r16, r24
    4358:	c8 01       	movw	r24, r16
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	f1 f7       	brne	.-4      	; 0x435a <main+0x100a>
    435e:	8c 01       	movw	r16, r24
    4360:	ce 01       	movw	r24, r28
    4362:	89 57       	subi	r24, 0x79	; 121
    4364:	9f 4f       	sbci	r25, 0xFF	; 255
    4366:	fc 01       	movw	r30, r24
    4368:	11 83       	std	Z+1, r17	; 0x01
    436a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	ce 01       	movw	r24, r28
    436e:	8b 57       	subi	r24, 0x7B	; 123
    4370:	9f 4f       	sbci	r25, 0xFF	; 255
    4372:	9e 01       	movw	r18, r28
    4374:	2b 57       	subi	r18, 0x7B	; 123
    4376:	3f 4f       	sbci	r19, 0xFF	; 255
    4378:	f9 01       	movw	r30, r18
    437a:	20 81       	ld	r18, Z
    437c:	31 81       	ldd	r19, Z+1	; 0x01
    437e:	21 50       	subi	r18, 0x01	; 1
    4380:	30 40       	sbci	r19, 0x00	; 0
    4382:	fc 01       	movw	r30, r24
    4384:	31 83       	std	Z+1, r19	; 0x01
    4386:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4388:	ce 01       	movw	r24, r28
    438a:	8b 57       	subi	r24, 0x7B	; 123
    438c:	9f 4f       	sbci	r25, 0xFF	; 255
    438e:	fc 01       	movw	r30, r24
    4390:	80 81       	ld	r24, Z
    4392:	91 81       	ldd	r25, Z+1	; 0x01
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	89 f6       	brne	.-94     	; 0x433a <main+0xfea>
    4398:	2f c0       	rjmp	.+94     	; 0x43f8 <main+0x10a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439a:	8e 01       	movw	r16, r28
    439c:	0b 57       	subi	r16, 0x7B	; 123
    439e:	1f 4f       	sbci	r17, 0xFF	; 255
    43a0:	ce 01       	movw	r24, r28
    43a2:	8f 57       	subi	r24, 0x7F	; 127
    43a4:	9f 4f       	sbci	r25, 0xFF	; 255
    43a6:	fc 01       	movw	r30, r24
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	f8 01       	movw	r30, r16
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	80 83       	st	Z, r24
    43be:	ce 01       	movw	r24, r28
    43c0:	87 57       	subi	r24, 0x77	; 119
    43c2:	9f 4f       	sbci	r25, 0xFF	; 255
    43c4:	9e 01       	movw	r18, r28
    43c6:	2b 57       	subi	r18, 0x7B	; 123
    43c8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ca:	f9 01       	movw	r30, r18
    43cc:	20 81       	ld	r18, Z
    43ce:	31 81       	ldd	r19, Z+1	; 0x01
    43d0:	fc 01       	movw	r30, r24
    43d2:	31 83       	std	Z+1, r19	; 0x01
    43d4:	20 83       	st	Z, r18
    43d6:	ce 01       	movw	r24, r28
    43d8:	87 57       	subi	r24, 0x77	; 119
    43da:	9f 4f       	sbci	r25, 0xFF	; 255
    43dc:	fc 01       	movw	r30, r24
    43de:	80 81       	ld	r24, Z
    43e0:	91 81       	ldd	r25, Z+1	; 0x01
    43e2:	8c 01       	movw	r16, r24
    43e4:	c8 01       	movw	r24, r16
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <main+0x1096>
    43ea:	8c 01       	movw	r16, r24
    43ec:	ce 01       	movw	r24, r28
    43ee:	87 57       	subi	r24, 0x77	; 119
    43f0:	9f 4f       	sbci	r25, 0xFF	; 255
    43f2:	fc 01       	movw	r30, r24
    43f4:	11 83       	std	Z+1, r17	; 0x01
    43f6:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    43f8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    43fc:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
					}
					else
					{
						if(compass==5)
    4400:	8b 81       	ldd	r24, Y+3	; 0x03
    4402:	9c 81       	ldd	r25, Y+4	; 0x04
    4404:	85 30       	cpi	r24, 0x05	; 5
    4406:	91 05       	cpc	r25, r1
    4408:	11 f0       	breq	.+4      	; 0x440e <main+0x10be>
    440a:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
						{
							coor[1]=coor[1]+1;
    440e:	80 91 a8 04 	lds	r24, 0x04A8
    4412:	90 91 a9 04 	lds	r25, 0x04A9
    4416:	01 96       	adiw	r24, 0x01	; 1
    4418:	90 93 a9 04 	sts	0x04A9, r25
    441c:	80 93 a8 04 	sts	0x04A8, r24
							compass=4;
    4420:	84 e0       	ldi	r24, 0x04	; 4
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	9c 83       	std	Y+4, r25	; 0x04
    4426:	8b 83       	std	Y+3, r24	; 0x03
    4428:	9e 01       	movw	r18, r28
    442a:	25 57       	subi	r18, 0x75	; 117
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	aa ef       	ldi	r26, 0xFA	; 250
    4434:	b3 e4       	ldi	r27, 0x43	; 67
    4436:	f9 01       	movw	r30, r18
    4438:	80 83       	st	Z, r24
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	a2 83       	std	Z+2, r26	; 0x02
    443e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4440:	8e 01       	movw	r16, r28
    4442:	01 57       	subi	r16, 0x71	; 113
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
    4446:	ce 01       	movw	r24, r28
    4448:	85 57       	subi	r24, 0x75	; 117
    444a:	9f 4f       	sbci	r25, 0xFF	; 255
    444c:	fc 01       	movw	r30, r24
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	26 e6       	ldi	r18, 0x66	; 102
    4458:	36 e6       	ldi	r19, 0x66	; 102
    445a:	46 e6       	ldi	r20, 0x66	; 102
    445c:	55 e4       	ldi	r21, 0x45	; 69
    445e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	f8 01       	movw	r30, r16
    4468:	80 83       	st	Z, r24
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	a2 83       	std	Z+2, r26	; 0x02
    446e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4470:	ce 01       	movw	r24, r28
    4472:	81 57       	subi	r24, 0x71	; 113
    4474:	9f 4f       	sbci	r25, 0xFF	; 255
    4476:	11 e0       	ldi	r17, 0x01	; 1
    4478:	fc 01       	movw	r30, r24
    447a:	60 81       	ld	r22, Z
    447c:	71 81       	ldd	r23, Z+1	; 0x01
    447e:	82 81       	ldd	r24, Z+2	; 0x02
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e8       	ldi	r20, 0x80	; 128
    4488:	5f e3       	ldi	r21, 0x3F	; 63
    448a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    448e:	88 23       	and	r24, r24
    4490:	0c f0       	brlt	.+2      	; 0x4494 <main+0x1144>
    4492:	10 e0       	ldi	r17, 0x00	; 0
    4494:	11 23       	and	r17, r17
    4496:	49 f0       	breq	.+18     	; 0x44aa <main+0x115a>
		__ticks = 1;
    4498:	ce 01       	movw	r24, r28
    449a:	8d 56       	subi	r24, 0x6D	; 109
    449c:	9f 4f       	sbci	r25, 0xFF	; 255
    449e:	21 e0       	ldi	r18, 0x01	; 1
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	fc 01       	movw	r30, r24
    44a4:	31 83       	std	Z+1, r19	; 0x01
    44a6:	20 83       	st	Z, r18
    44a8:	74 c0       	rjmp	.+232    	; 0x4592 <main+0x1242>
	else if (__tmp > 65535)
    44aa:	ce 01       	movw	r24, r28
    44ac:	81 57       	subi	r24, 0x71	; 113
    44ae:	9f 4f       	sbci	r25, 0xFF	; 255
    44b0:	11 e0       	ldi	r17, 0x01	; 1
    44b2:	fc 01       	movw	r30, r24
    44b4:	60 81       	ld	r22, Z
    44b6:	71 81       	ldd	r23, Z+1	; 0x01
    44b8:	82 81       	ldd	r24, Z+2	; 0x02
    44ba:	93 81       	ldd	r25, Z+3	; 0x03
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	3f ef       	ldi	r19, 0xFF	; 255
    44c0:	4f e7       	ldi	r20, 0x7F	; 127
    44c2:	57 e4       	ldi	r21, 0x47	; 71
    44c4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    44c8:	18 16       	cp	r1, r24
    44ca:	0c f0       	brlt	.+2      	; 0x44ce <main+0x117e>
    44cc:	10 e0       	ldi	r17, 0x00	; 0
    44ce:	11 23       	and	r17, r17
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <main+0x1184>
    44d2:	4d c0       	rjmp	.+154    	; 0x456e <main+0x121e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d4:	ce 01       	movw	r24, r28
    44d6:	85 57       	subi	r24, 0x75	; 117
    44d8:	9f 4f       	sbci	r25, 0xFF	; 255
    44da:	fc 01       	movw	r30, r24
    44dc:	60 81       	ld	r22, Z
    44de:	71 81       	ldd	r23, Z+1	; 0x01
    44e0:	82 81       	ldd	r24, Z+2	; 0x02
    44e2:	93 81       	ldd	r25, Z+3	; 0x03
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	40 e2       	ldi	r20, 0x20	; 32
    44ea:	51 e4       	ldi	r21, 0x41	; 65
    44ec:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	8e 01       	movw	r16, r28
    44f6:	0d 56       	subi	r16, 0x6D	; 109
    44f8:	1f 4f       	sbci	r17, 0xFF	; 255
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	f8 01       	movw	r30, r16
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24
    450c:	27 c0       	rjmp	.+78     	; 0x455c <main+0x120c>
    450e:	ce 01       	movw	r24, r28
    4510:	8b 56       	subi	r24, 0x6B	; 107
    4512:	9f 4f       	sbci	r25, 0xFF	; 255
    4514:	20 e7       	ldi	r18, 0x70	; 112
    4516:	31 e0       	ldi	r19, 0x01	; 1
    4518:	fc 01       	movw	r30, r24
    451a:	31 83       	std	Z+1, r19	; 0x01
    451c:	20 83       	st	Z, r18
    451e:	ce 01       	movw	r24, r28
    4520:	8b 56       	subi	r24, 0x6B	; 107
    4522:	9f 4f       	sbci	r25, 0xFF	; 255
    4524:	fc 01       	movw	r30, r24
    4526:	80 81       	ld	r24, Z
    4528:	91 81       	ldd	r25, Z+1	; 0x01
    452a:	8c 01       	movw	r16, r24
    452c:	c8 01       	movw	r24, r16
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <main+0x11de>
    4532:	8c 01       	movw	r16, r24
    4534:	ce 01       	movw	r24, r28
    4536:	8b 56       	subi	r24, 0x6B	; 107
    4538:	9f 4f       	sbci	r25, 0xFF	; 255
    453a:	fc 01       	movw	r30, r24
    453c:	11 83       	std	Z+1, r17	; 0x01
    453e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4540:	ce 01       	movw	r24, r28
    4542:	8d 56       	subi	r24, 0x6D	; 109
    4544:	9f 4f       	sbci	r25, 0xFF	; 255
    4546:	9e 01       	movw	r18, r28
    4548:	2d 56       	subi	r18, 0x6D	; 109
    454a:	3f 4f       	sbci	r19, 0xFF	; 255
    454c:	f9 01       	movw	r30, r18
    454e:	20 81       	ld	r18, Z
    4550:	31 81       	ldd	r19, Z+1	; 0x01
    4552:	21 50       	subi	r18, 0x01	; 1
    4554:	30 40       	sbci	r19, 0x00	; 0
    4556:	fc 01       	movw	r30, r24
    4558:	31 83       	std	Z+1, r19	; 0x01
    455a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    455c:	ce 01       	movw	r24, r28
    455e:	8d 56       	subi	r24, 0x6D	; 109
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	fc 01       	movw	r30, r24
    4564:	80 81       	ld	r24, Z
    4566:	91 81       	ldd	r25, Z+1	; 0x01
    4568:	00 97       	sbiw	r24, 0x00	; 0
    456a:	89 f6       	brne	.-94     	; 0x450e <main+0x11be>
    456c:	2f c0       	rjmp	.+94     	; 0x45cc <main+0x127c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456e:	8e 01       	movw	r16, r28
    4570:	0d 56       	subi	r16, 0x6D	; 109
    4572:	1f 4f       	sbci	r17, 0xFF	; 255
    4574:	ce 01       	movw	r24, r28
    4576:	81 57       	subi	r24, 0x71	; 113
    4578:	9f 4f       	sbci	r25, 0xFF	; 255
    457a:	fc 01       	movw	r30, r24
    457c:	60 81       	ld	r22, Z
    457e:	71 81       	ldd	r23, Z+1	; 0x01
    4580:	82 81       	ldd	r24, Z+2	; 0x02
    4582:	93 81       	ldd	r25, Z+3	; 0x03
    4584:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	f8 01       	movw	r30, r16
    458e:	91 83       	std	Z+1, r25	; 0x01
    4590:	80 83       	st	Z, r24
    4592:	ce 01       	movw	r24, r28
    4594:	89 56       	subi	r24, 0x69	; 105
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	9e 01       	movw	r18, r28
    459a:	2d 56       	subi	r18, 0x6D	; 109
    459c:	3f 4f       	sbci	r19, 0xFF	; 255
    459e:	f9 01       	movw	r30, r18
    45a0:	20 81       	ld	r18, Z
    45a2:	31 81       	ldd	r19, Z+1	; 0x01
    45a4:	fc 01       	movw	r30, r24
    45a6:	31 83       	std	Z+1, r19	; 0x01
    45a8:	20 83       	st	Z, r18
    45aa:	ce 01       	movw	r24, r28
    45ac:	89 56       	subi	r24, 0x69	; 105
    45ae:	9f 4f       	sbci	r25, 0xFF	; 255
    45b0:	fc 01       	movw	r30, r24
    45b2:	80 81       	ld	r24, Z
    45b4:	91 81       	ldd	r25, Z+1	; 0x01
    45b6:	8c 01       	movw	r16, r24
    45b8:	c8 01       	movw	r24, r16
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	f1 f7       	brne	.-4      	; 0x45ba <main+0x126a>
    45be:	8c 01       	movw	r16, r24
    45c0:	ce 01       	movw	r24, r28
    45c2:	89 56       	subi	r24, 0x69	; 105
    45c4:	9f 4f       	sbci	r25, 0xFF	; 255
    45c6:	fc 01       	movw	r30, r24
    45c8:	11 83       	std	Z+1, r17	; 0x01
    45ca:	00 83       	st	Z, r16
							_delay_ms(500);
							right_degrees(185);
    45cc:	89 eb       	ldi	r24, 0xB9	; 185
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    45d4:	9e 01       	movw	r18, r28
    45d6:	27 56       	subi	r18, 0x67	; 103
    45d8:	3f 4f       	sbci	r19, 0xFF	; 255
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	a8 ec       	ldi	r26, 0xC8	; 200
    45e0:	b2 e4       	ldi	r27, 0x42	; 66
    45e2:	f9 01       	movw	r30, r18
    45e4:	80 83       	st	Z, r24
    45e6:	91 83       	std	Z+1, r25	; 0x01
    45e8:	a2 83       	std	Z+2, r26	; 0x02
    45ea:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    45ec:	8e 01       	movw	r16, r28
    45ee:	03 56       	subi	r16, 0x63	; 99
    45f0:	1f 4f       	sbci	r17, 0xFF	; 255
    45f2:	ce 01       	movw	r24, r28
    45f4:	87 56       	subi	r24, 0x67	; 103
    45f6:	9f 4f       	sbci	r25, 0xFF	; 255
    45f8:	fc 01       	movw	r30, r24
    45fa:	60 81       	ld	r22, Z
    45fc:	71 81       	ldd	r23, Z+1	; 0x01
    45fe:	82 81       	ldd	r24, Z+2	; 0x02
    4600:	93 81       	ldd	r25, Z+3	; 0x03
    4602:	26 e6       	ldi	r18, 0x66	; 102
    4604:	36 e6       	ldi	r19, 0x66	; 102
    4606:	46 e6       	ldi	r20, 0x66	; 102
    4608:	55 e4       	ldi	r21, 0x45	; 69
    460a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	f8 01       	movw	r30, r16
    4614:	80 83       	st	Z, r24
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	a2 83       	std	Z+2, r26	; 0x02
    461a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    461c:	ce 01       	movw	r24, r28
    461e:	83 56       	subi	r24, 0x63	; 99
    4620:	9f 4f       	sbci	r25, 0xFF	; 255
    4622:	11 e0       	ldi	r17, 0x01	; 1
    4624:	fc 01       	movw	r30, r24
    4626:	60 81       	ld	r22, Z
    4628:	71 81       	ldd	r23, Z+1	; 0x01
    462a:	82 81       	ldd	r24, Z+2	; 0x02
    462c:	93 81       	ldd	r25, Z+3	; 0x03
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e8       	ldi	r20, 0x80	; 128
    4634:	5f e3       	ldi	r21, 0x3F	; 63
    4636:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    463a:	88 23       	and	r24, r24
    463c:	0c f0       	brlt	.+2      	; 0x4640 <main+0x12f0>
    463e:	10 e0       	ldi	r17, 0x00	; 0
    4640:	11 23       	and	r17, r17
    4642:	49 f0       	breq	.+18     	; 0x4656 <main+0x1306>
		__ticks = 1;
    4644:	ce 01       	movw	r24, r28
    4646:	8f 55       	subi	r24, 0x5F	; 95
    4648:	9f 4f       	sbci	r25, 0xFF	; 255
    464a:	21 e0       	ldi	r18, 0x01	; 1
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	fc 01       	movw	r30, r24
    4650:	31 83       	std	Z+1, r19	; 0x01
    4652:	20 83       	st	Z, r18
    4654:	74 c0       	rjmp	.+232    	; 0x473e <main+0x13ee>
	else if (__tmp > 65535)
    4656:	ce 01       	movw	r24, r28
    4658:	83 56       	subi	r24, 0x63	; 99
    465a:	9f 4f       	sbci	r25, 0xFF	; 255
    465c:	11 e0       	ldi	r17, 0x01	; 1
    465e:	fc 01       	movw	r30, r24
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	82 81       	ldd	r24, Z+2	; 0x02
    4666:	93 81       	ldd	r25, Z+3	; 0x03
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	3f ef       	ldi	r19, 0xFF	; 255
    466c:	4f e7       	ldi	r20, 0x7F	; 127
    466e:	57 e4       	ldi	r21, 0x47	; 71
    4670:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4674:	18 16       	cp	r1, r24
    4676:	0c f0       	brlt	.+2      	; 0x467a <main+0x132a>
    4678:	10 e0       	ldi	r17, 0x00	; 0
    467a:	11 23       	and	r17, r17
    467c:	09 f4       	brne	.+2      	; 0x4680 <main+0x1330>
    467e:	4d c0       	rjmp	.+154    	; 0x471a <main+0x13ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4680:	ce 01       	movw	r24, r28
    4682:	87 56       	subi	r24, 0x67	; 103
    4684:	9f 4f       	sbci	r25, 0xFF	; 255
    4686:	fc 01       	movw	r30, r24
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e2       	ldi	r20, 0x20	; 32
    4696:	51 e4       	ldi	r21, 0x41	; 65
    4698:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	8e 01       	movw	r16, r28
    46a2:	0f 55       	subi	r16, 0x5F	; 95
    46a4:	1f 4f       	sbci	r17, 0xFF	; 255
    46a6:	bc 01       	movw	r22, r24
    46a8:	cd 01       	movw	r24, r26
    46aa:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	f8 01       	movw	r30, r16
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
    46b8:	27 c0       	rjmp	.+78     	; 0x4708 <main+0x13b8>
    46ba:	ce 01       	movw	r24, r28
    46bc:	8d 55       	subi	r24, 0x5D	; 93
    46be:	9f 4f       	sbci	r25, 0xFF	; 255
    46c0:	20 e7       	ldi	r18, 0x70	; 112
    46c2:	31 e0       	ldi	r19, 0x01	; 1
    46c4:	fc 01       	movw	r30, r24
    46c6:	31 83       	std	Z+1, r19	; 0x01
    46c8:	20 83       	st	Z, r18
    46ca:	ce 01       	movw	r24, r28
    46cc:	8d 55       	subi	r24, 0x5D	; 93
    46ce:	9f 4f       	sbci	r25, 0xFF	; 255
    46d0:	fc 01       	movw	r30, r24
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	8c 01       	movw	r16, r24
    46d8:	c8 01       	movw	r24, r16
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <main+0x138a>
    46de:	8c 01       	movw	r16, r24
    46e0:	ce 01       	movw	r24, r28
    46e2:	8d 55       	subi	r24, 0x5D	; 93
    46e4:	9f 4f       	sbci	r25, 0xFF	; 255
    46e6:	fc 01       	movw	r30, r24
    46e8:	11 83       	std	Z+1, r17	; 0x01
    46ea:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ec:	ce 01       	movw	r24, r28
    46ee:	8f 55       	subi	r24, 0x5F	; 95
    46f0:	9f 4f       	sbci	r25, 0xFF	; 255
    46f2:	9e 01       	movw	r18, r28
    46f4:	2f 55       	subi	r18, 0x5F	; 95
    46f6:	3f 4f       	sbci	r19, 0xFF	; 255
    46f8:	f9 01       	movw	r30, r18
    46fa:	20 81       	ld	r18, Z
    46fc:	31 81       	ldd	r19, Z+1	; 0x01
    46fe:	21 50       	subi	r18, 0x01	; 1
    4700:	30 40       	sbci	r19, 0x00	; 0
    4702:	fc 01       	movw	r30, r24
    4704:	31 83       	std	Z+1, r19	; 0x01
    4706:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4708:	ce 01       	movw	r24, r28
    470a:	8f 55       	subi	r24, 0x5F	; 95
    470c:	9f 4f       	sbci	r25, 0xFF	; 255
    470e:	fc 01       	movw	r30, r24
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	00 97       	sbiw	r24, 0x00	; 0
    4716:	89 f6       	brne	.-94     	; 0x46ba <main+0x136a>
    4718:	2f c0       	rjmp	.+94     	; 0x4778 <main+0x1428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    471a:	8e 01       	movw	r16, r28
    471c:	0f 55       	subi	r16, 0x5F	; 95
    471e:	1f 4f       	sbci	r17, 0xFF	; 255
    4720:	ce 01       	movw	r24, r28
    4722:	83 56       	subi	r24, 0x63	; 99
    4724:	9f 4f       	sbci	r25, 0xFF	; 255
    4726:	fc 01       	movw	r30, r24
    4728:	60 81       	ld	r22, Z
    472a:	71 81       	ldd	r23, Z+1	; 0x01
    472c:	82 81       	ldd	r24, Z+2	; 0x02
    472e:	93 81       	ldd	r25, Z+3	; 0x03
    4730:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	f8 01       	movw	r30, r16
    473a:	91 83       	std	Z+1, r25	; 0x01
    473c:	80 83       	st	Z, r24
    473e:	ce 01       	movw	r24, r28
    4740:	8b 55       	subi	r24, 0x5B	; 91
    4742:	9f 4f       	sbci	r25, 0xFF	; 255
    4744:	9e 01       	movw	r18, r28
    4746:	2f 55       	subi	r18, 0x5F	; 95
    4748:	3f 4f       	sbci	r19, 0xFF	; 255
    474a:	f9 01       	movw	r30, r18
    474c:	20 81       	ld	r18, Z
    474e:	31 81       	ldd	r19, Z+1	; 0x01
    4750:	fc 01       	movw	r30, r24
    4752:	31 83       	std	Z+1, r19	; 0x01
    4754:	20 83       	st	Z, r18
    4756:	ce 01       	movw	r24, r28
    4758:	8b 55       	subi	r24, 0x5B	; 91
    475a:	9f 4f       	sbci	r25, 0xFF	; 255
    475c:	fc 01       	movw	r30, r24
    475e:	80 81       	ld	r24, Z
    4760:	91 81       	ldd	r25, Z+1	; 0x01
    4762:	8c 01       	movw	r16, r24
    4764:	c8 01       	movw	r24, r16
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <main+0x1416>
    476a:	8c 01       	movw	r16, r24
    476c:	ce 01       	movw	r24, r28
    476e:	8b 55       	subi	r24, 0x5B	; 91
    4770:	9f 4f       	sbci	r25, 0xFF	; 255
    4772:	fc 01       	movw	r30, r24
    4774:	11 83       	std	Z+1, r17	; 0x01
    4776:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    4778:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    477c:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
			}					
			
		}
		else
		{
			if(final[0]>coor[0])
    4780:	ce 01       	movw	r24, r28
    4782:	8d 52       	subi	r24, 0x2D	; 45
    4784:	99 4f       	sbci	r25, 0xF9	; 249
    4786:	fc 01       	movw	r30, r24
    4788:	20 81       	ld	r18, Z
    478a:	31 81       	ldd	r19, Z+1	; 0x01
    478c:	80 91 a6 04 	lds	r24, 0x04A6
    4790:	90 91 a7 04 	lds	r25, 0x04A7
    4794:	82 17       	cp	r24, r18
    4796:	93 07       	cpc	r25, r19
    4798:	0c f0       	brlt	.+2      	; 0x479c <main+0x144c>
    479a:	27 c6       	rjmp	.+3150   	; 0x53ea <main+0x209a>
			{
				if(compass==4)
    479c:	8b 81       	ldd	r24, Y+3	; 0x03
    479e:	9c 81       	ldd	r25, Y+4	; 0x04
    47a0:	84 30       	cpi	r24, 0x04	; 4
    47a2:	91 05       	cpc	r25, r1
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <main+0x1458>
    47a6:	b9 c1       	rjmp	.+882    	; 0x4b1a <main+0x17ca>
				{
					coor[0]=coor[0]+1;
    47a8:	80 91 a6 04 	lds	r24, 0x04A6
    47ac:	90 91 a7 04 	lds	r25, 0x04A7
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	90 93 a7 04 	sts	0x04A7, r25
    47b6:	80 93 a6 04 	sts	0x04A6, r24
					compass=6;
    47ba:	86 e0       	ldi	r24, 0x06	; 6
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	9c 83       	std	Y+4, r25	; 0x04
    47c0:	8b 83       	std	Y+3, r24	; 0x03
    47c2:	9e 01       	movw	r18, r28
    47c4:	29 55       	subi	r18, 0x59	; 89
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	aa ef       	ldi	r26, 0xFA	; 250
    47ce:	b3 e4       	ldi	r27, 0x43	; 67
    47d0:	f9 01       	movw	r30, r18
    47d2:	80 83       	st	Z, r24
    47d4:	91 83       	std	Z+1, r25	; 0x01
    47d6:	a2 83       	std	Z+2, r26	; 0x02
    47d8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    47da:	8e 01       	movw	r16, r28
    47dc:	05 55       	subi	r16, 0x55	; 85
    47de:	1f 4f       	sbci	r17, 0xFF	; 255
    47e0:	ce 01       	movw	r24, r28
    47e2:	89 55       	subi	r24, 0x59	; 89
    47e4:	9f 4f       	sbci	r25, 0xFF	; 255
    47e6:	fc 01       	movw	r30, r24
    47e8:	60 81       	ld	r22, Z
    47ea:	71 81       	ldd	r23, Z+1	; 0x01
    47ec:	82 81       	ldd	r24, Z+2	; 0x02
    47ee:	93 81       	ldd	r25, Z+3	; 0x03
    47f0:	26 e6       	ldi	r18, 0x66	; 102
    47f2:	36 e6       	ldi	r19, 0x66	; 102
    47f4:	46 e6       	ldi	r20, 0x66	; 102
    47f6:	55 e4       	ldi	r21, 0x45	; 69
    47f8:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	f8 01       	movw	r30, r16
    4802:	80 83       	st	Z, r24
    4804:	91 83       	std	Z+1, r25	; 0x01
    4806:	a2 83       	std	Z+2, r26	; 0x02
    4808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    480a:	ce 01       	movw	r24, r28
    480c:	85 55       	subi	r24, 0x55	; 85
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	11 e0       	ldi	r17, 0x01	; 1
    4812:	fc 01       	movw	r30, r24
    4814:	60 81       	ld	r22, Z
    4816:	71 81       	ldd	r23, Z+1	; 0x01
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e8       	ldi	r20, 0x80	; 128
    4822:	5f e3       	ldi	r21, 0x3F	; 63
    4824:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    4828:	88 23       	and	r24, r24
    482a:	0c f0       	brlt	.+2      	; 0x482e <main+0x14de>
    482c:	10 e0       	ldi	r17, 0x00	; 0
    482e:	11 23       	and	r17, r17
    4830:	49 f0       	breq	.+18     	; 0x4844 <main+0x14f4>
		__ticks = 1;
    4832:	ce 01       	movw	r24, r28
    4834:	81 55       	subi	r24, 0x51	; 81
    4836:	9f 4f       	sbci	r25, 0xFF	; 255
    4838:	21 e0       	ldi	r18, 0x01	; 1
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	fc 01       	movw	r30, r24
    483e:	31 83       	std	Z+1, r19	; 0x01
    4840:	20 83       	st	Z, r18
    4842:	74 c0       	rjmp	.+232    	; 0x492c <main+0x15dc>
	else if (__tmp > 65535)
    4844:	ce 01       	movw	r24, r28
    4846:	85 55       	subi	r24, 0x55	; 85
    4848:	9f 4f       	sbci	r25, 0xFF	; 255
    484a:	11 e0       	ldi	r17, 0x01	; 1
    484c:	fc 01       	movw	r30, r24
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	3f ef       	ldi	r19, 0xFF	; 255
    485a:	4f e7       	ldi	r20, 0x7F	; 127
    485c:	57 e4       	ldi	r21, 0x47	; 71
    485e:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4862:	18 16       	cp	r1, r24
    4864:	0c f0       	brlt	.+2      	; 0x4868 <main+0x1518>
    4866:	10 e0       	ldi	r17, 0x00	; 0
    4868:	11 23       	and	r17, r17
    486a:	09 f4       	brne	.+2      	; 0x486e <main+0x151e>
    486c:	4d c0       	rjmp	.+154    	; 0x4908 <main+0x15b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486e:	ce 01       	movw	r24, r28
    4870:	89 55       	subi	r24, 0x59	; 89
    4872:	9f 4f       	sbci	r25, 0xFF	; 255
    4874:	fc 01       	movw	r30, r24
    4876:	60 81       	ld	r22, Z
    4878:	71 81       	ldd	r23, Z+1	; 0x01
    487a:	82 81       	ldd	r24, Z+2	; 0x02
    487c:	93 81       	ldd	r25, Z+3	; 0x03
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	40 e2       	ldi	r20, 0x20	; 32
    4884:	51 e4       	ldi	r21, 0x41	; 65
    4886:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    488a:	dc 01       	movw	r26, r24
    488c:	cb 01       	movw	r24, r22
    488e:	8e 01       	movw	r16, r28
    4890:	01 55       	subi	r16, 0x51	; 81
    4892:	1f 4f       	sbci	r17, 0xFF	; 255
    4894:	bc 01       	movw	r22, r24
    4896:	cd 01       	movw	r24, r26
    4898:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	f8 01       	movw	r30, r16
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	80 83       	st	Z, r24
    48a6:	27 c0       	rjmp	.+78     	; 0x48f6 <main+0x15a6>
    48a8:	ce 01       	movw	r24, r28
    48aa:	8f 54       	subi	r24, 0x4F	; 79
    48ac:	9f 4f       	sbci	r25, 0xFF	; 255
    48ae:	20 e7       	ldi	r18, 0x70	; 112
    48b0:	31 e0       	ldi	r19, 0x01	; 1
    48b2:	fc 01       	movw	r30, r24
    48b4:	31 83       	std	Z+1, r19	; 0x01
    48b6:	20 83       	st	Z, r18
    48b8:	ce 01       	movw	r24, r28
    48ba:	8f 54       	subi	r24, 0x4F	; 79
    48bc:	9f 4f       	sbci	r25, 0xFF	; 255
    48be:	fc 01       	movw	r30, r24
    48c0:	80 81       	ld	r24, Z
    48c2:	91 81       	ldd	r25, Z+1	; 0x01
    48c4:	8c 01       	movw	r16, r24
    48c6:	c8 01       	movw	r24, r16
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	f1 f7       	brne	.-4      	; 0x48c8 <main+0x1578>
    48cc:	8c 01       	movw	r16, r24
    48ce:	ce 01       	movw	r24, r28
    48d0:	8f 54       	subi	r24, 0x4F	; 79
    48d2:	9f 4f       	sbci	r25, 0xFF	; 255
    48d4:	fc 01       	movw	r30, r24
    48d6:	11 83       	std	Z+1, r17	; 0x01
    48d8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48da:	ce 01       	movw	r24, r28
    48dc:	81 55       	subi	r24, 0x51	; 81
    48de:	9f 4f       	sbci	r25, 0xFF	; 255
    48e0:	9e 01       	movw	r18, r28
    48e2:	21 55       	subi	r18, 0x51	; 81
    48e4:	3f 4f       	sbci	r19, 0xFF	; 255
    48e6:	f9 01       	movw	r30, r18
    48e8:	20 81       	ld	r18, Z
    48ea:	31 81       	ldd	r19, Z+1	; 0x01
    48ec:	21 50       	subi	r18, 0x01	; 1
    48ee:	30 40       	sbci	r19, 0x00	; 0
    48f0:	fc 01       	movw	r30, r24
    48f2:	31 83       	std	Z+1, r19	; 0x01
    48f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f6:	ce 01       	movw	r24, r28
    48f8:	81 55       	subi	r24, 0x51	; 81
    48fa:	9f 4f       	sbci	r25, 0xFF	; 255
    48fc:	fc 01       	movw	r30, r24
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	89 f6       	brne	.-94     	; 0x48a8 <main+0x1558>
    4906:	2f c0       	rjmp	.+94     	; 0x4966 <main+0x1616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4908:	8e 01       	movw	r16, r28
    490a:	01 55       	subi	r16, 0x51	; 81
    490c:	1f 4f       	sbci	r17, 0xFF	; 255
    490e:	ce 01       	movw	r24, r28
    4910:	85 55       	subi	r24, 0x55	; 85
    4912:	9f 4f       	sbci	r25, 0xFF	; 255
    4914:	fc 01       	movw	r30, r24
    4916:	60 81       	ld	r22, Z
    4918:	71 81       	ldd	r23, Z+1	; 0x01
    491a:	82 81       	ldd	r24, Z+2	; 0x02
    491c:	93 81       	ldd	r25, Z+3	; 0x03
    491e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	f8 01       	movw	r30, r16
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	80 83       	st	Z, r24
    492c:	ce 01       	movw	r24, r28
    492e:	8d 54       	subi	r24, 0x4D	; 77
    4930:	9f 4f       	sbci	r25, 0xFF	; 255
    4932:	9e 01       	movw	r18, r28
    4934:	21 55       	subi	r18, 0x51	; 81
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	f9 01       	movw	r30, r18
    493a:	20 81       	ld	r18, Z
    493c:	31 81       	ldd	r19, Z+1	; 0x01
    493e:	fc 01       	movw	r30, r24
    4940:	31 83       	std	Z+1, r19	; 0x01
    4942:	20 83       	st	Z, r18
    4944:	ce 01       	movw	r24, r28
    4946:	8d 54       	subi	r24, 0x4D	; 77
    4948:	9f 4f       	sbci	r25, 0xFF	; 255
    494a:	fc 01       	movw	r30, r24
    494c:	80 81       	ld	r24, Z
    494e:	91 81       	ldd	r25, Z+1	; 0x01
    4950:	8c 01       	movw	r16, r24
    4952:	c8 01       	movw	r24, r16
    4954:	01 97       	sbiw	r24, 0x01	; 1
    4956:	f1 f7       	brne	.-4      	; 0x4954 <main+0x1604>
    4958:	8c 01       	movw	r16, r24
    495a:	ce 01       	movw	r24, r28
    495c:	8d 54       	subi	r24, 0x4D	; 77
    495e:	9f 4f       	sbci	r25, 0xFF	; 255
    4960:	fc 01       	movw	r30, r24
    4962:	11 83       	std	Z+1, r17	; 0x01
    4964:	00 83       	st	Z, r16
					_delay_ms(500);
					right_degrees(85);
    4966:	85 e5       	ldi	r24, 0x55	; 85
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    496e:	9e 01       	movw	r18, r28
    4970:	2b 54       	subi	r18, 0x4B	; 75
    4972:	3f 4f       	sbci	r19, 0xFF	; 255
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	a8 ec       	ldi	r26, 0xC8	; 200
    497a:	b2 e4       	ldi	r27, 0x42	; 66
    497c:	f9 01       	movw	r30, r18
    497e:	80 83       	st	Z, r24
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	a2 83       	std	Z+2, r26	; 0x02
    4984:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4986:	8e 01       	movw	r16, r28
    4988:	07 54       	subi	r16, 0x47	; 71
    498a:	1f 4f       	sbci	r17, 0xFF	; 255
    498c:	ce 01       	movw	r24, r28
    498e:	8b 54       	subi	r24, 0x4B	; 75
    4990:	9f 4f       	sbci	r25, 0xFF	; 255
    4992:	fc 01       	movw	r30, r24
    4994:	60 81       	ld	r22, Z
    4996:	71 81       	ldd	r23, Z+1	; 0x01
    4998:	82 81       	ldd	r24, Z+2	; 0x02
    499a:	93 81       	ldd	r25, Z+3	; 0x03
    499c:	26 e6       	ldi	r18, 0x66	; 102
    499e:	36 e6       	ldi	r19, 0x66	; 102
    49a0:	46 e6       	ldi	r20, 0x66	; 102
    49a2:	55 e4       	ldi	r21, 0x45	; 69
    49a4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	f8 01       	movw	r30, r16
    49ae:	80 83       	st	Z, r24
    49b0:	91 83       	std	Z+1, r25	; 0x01
    49b2:	a2 83       	std	Z+2, r26	; 0x02
    49b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49b6:	ce 01       	movw	r24, r28
    49b8:	87 54       	subi	r24, 0x47	; 71
    49ba:	9f 4f       	sbci	r25, 0xFF	; 255
    49bc:	11 e0       	ldi	r17, 0x01	; 1
    49be:	fc 01       	movw	r30, r24
    49c0:	60 81       	ld	r22, Z
    49c2:	71 81       	ldd	r23, Z+1	; 0x01
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	20 e0       	ldi	r18, 0x00	; 0
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	40 e8       	ldi	r20, 0x80	; 128
    49ce:	5f e3       	ldi	r21, 0x3F	; 63
    49d0:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    49d4:	88 23       	and	r24, r24
    49d6:	0c f0       	brlt	.+2      	; 0x49da <main+0x168a>
    49d8:	10 e0       	ldi	r17, 0x00	; 0
    49da:	11 23       	and	r17, r17
    49dc:	49 f0       	breq	.+18     	; 0x49f0 <main+0x16a0>
		__ticks = 1;
    49de:	ce 01       	movw	r24, r28
    49e0:	83 54       	subi	r24, 0x43	; 67
    49e2:	9f 4f       	sbci	r25, 0xFF	; 255
    49e4:	21 e0       	ldi	r18, 0x01	; 1
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	fc 01       	movw	r30, r24
    49ea:	31 83       	std	Z+1, r19	; 0x01
    49ec:	20 83       	st	Z, r18
    49ee:	74 c0       	rjmp	.+232    	; 0x4ad8 <main+0x1788>
	else if (__tmp > 65535)
    49f0:	ce 01       	movw	r24, r28
    49f2:	87 54       	subi	r24, 0x47	; 71
    49f4:	9f 4f       	sbci	r25, 0xFF	; 255
    49f6:	11 e0       	ldi	r17, 0x01	; 1
    49f8:	fc 01       	movw	r30, r24
    49fa:	60 81       	ld	r22, Z
    49fc:	71 81       	ldd	r23, Z+1	; 0x01
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	3f ef       	ldi	r19, 0xFF	; 255
    4a06:	4f e7       	ldi	r20, 0x7F	; 127
    4a08:	57 e4       	ldi	r21, 0x47	; 71
    4a0a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4a0e:	18 16       	cp	r1, r24
    4a10:	0c f0       	brlt	.+2      	; 0x4a14 <main+0x16c4>
    4a12:	10 e0       	ldi	r17, 0x00	; 0
    4a14:	11 23       	and	r17, r17
    4a16:	09 f4       	brne	.+2      	; 0x4a1a <main+0x16ca>
    4a18:	4d c0       	rjmp	.+154    	; 0x4ab4 <main+0x1764>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	8b 54       	subi	r24, 0x4B	; 75
    4a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a20:	fc 01       	movw	r30, r24
    4a22:	60 81       	ld	r22, Z
    4a24:	71 81       	ldd	r23, Z+1	; 0x01
    4a26:	82 81       	ldd	r24, Z+2	; 0x02
    4a28:	93 81       	ldd	r25, Z+3	; 0x03
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	40 e2       	ldi	r20, 0x20	; 32
    4a30:	51 e4       	ldi	r21, 0x41	; 65
    4a32:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	8e 01       	movw	r16, r28
    4a3c:	03 54       	subi	r16, 0x43	; 67
    4a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a40:	bc 01       	movw	r22, r24
    4a42:	cd 01       	movw	r24, r26
    4a44:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	f8 01       	movw	r30, r16
    4a4e:	91 83       	std	Z+1, r25	; 0x01
    4a50:	80 83       	st	Z, r24
    4a52:	27 c0       	rjmp	.+78     	; 0x4aa2 <main+0x1752>
    4a54:	ce 01       	movw	r24, r28
    4a56:	81 54       	subi	r24, 0x41	; 65
    4a58:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5a:	20 e7       	ldi	r18, 0x70	; 112
    4a5c:	31 e0       	ldi	r19, 0x01	; 1
    4a5e:	fc 01       	movw	r30, r24
    4a60:	31 83       	std	Z+1, r19	; 0x01
    4a62:	20 83       	st	Z, r18
    4a64:	ce 01       	movw	r24, r28
    4a66:	81 54       	subi	r24, 0x41	; 65
    4a68:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	80 81       	ld	r24, Z
    4a6e:	91 81       	ldd	r25, Z+1	; 0x01
    4a70:	8c 01       	movw	r16, r24
    4a72:	c8 01       	movw	r24, r16
    4a74:	01 97       	sbiw	r24, 0x01	; 1
    4a76:	f1 f7       	brne	.-4      	; 0x4a74 <main+0x1724>
    4a78:	8c 01       	movw	r16, r24
    4a7a:	ce 01       	movw	r24, r28
    4a7c:	81 54       	subi	r24, 0x41	; 65
    4a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a80:	fc 01       	movw	r30, r24
    4a82:	11 83       	std	Z+1, r17	; 0x01
    4a84:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a86:	ce 01       	movw	r24, r28
    4a88:	83 54       	subi	r24, 0x43	; 67
    4a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8c:	9e 01       	movw	r18, r28
    4a8e:	23 54       	subi	r18, 0x43	; 67
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	f9 01       	movw	r30, r18
    4a94:	20 81       	ld	r18, Z
    4a96:	31 81       	ldd	r19, Z+1	; 0x01
    4a98:	21 50       	subi	r18, 0x01	; 1
    4a9a:	30 40       	sbci	r19, 0x00	; 0
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	31 83       	std	Z+1, r19	; 0x01
    4aa0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	83 54       	subi	r24, 0x43	; 67
    4aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	80 81       	ld	r24, Z
    4aac:	91 81       	ldd	r25, Z+1	; 0x01
    4aae:	00 97       	sbiw	r24, 0x00	; 0
    4ab0:	89 f6       	brne	.-94     	; 0x4a54 <main+0x1704>
    4ab2:	2f c0       	rjmp	.+94     	; 0x4b12 <main+0x17c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab4:	8e 01       	movw	r16, r28
    4ab6:	03 54       	subi	r16, 0x43	; 67
    4ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aba:	ce 01       	movw	r24, r28
    4abc:	87 54       	subi	r24, 0x47	; 71
    4abe:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	60 81       	ld	r22, Z
    4ac4:	71 81       	ldd	r23, Z+1	; 0x01
    4ac6:	82 81       	ldd	r24, Z+2	; 0x02
    4ac8:	93 81       	ldd	r25, Z+3	; 0x03
    4aca:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	f8 01       	movw	r30, r16
    4ad4:	91 83       	std	Z+1, r25	; 0x01
    4ad6:	80 83       	st	Z, r24
    4ad8:	ce 01       	movw	r24, r28
    4ada:	8f 53       	subi	r24, 0x3F	; 63
    4adc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ade:	9e 01       	movw	r18, r28
    4ae0:	23 54       	subi	r18, 0x43	; 67
    4ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae4:	f9 01       	movw	r30, r18
    4ae6:	20 81       	ld	r18, Z
    4ae8:	31 81       	ldd	r19, Z+1	; 0x01
    4aea:	fc 01       	movw	r30, r24
    4aec:	31 83       	std	Z+1, r19	; 0x01
    4aee:	20 83       	st	Z, r18
    4af0:	ce 01       	movw	r24, r28
    4af2:	8f 53       	subi	r24, 0x3F	; 63
    4af4:	9f 4f       	sbci	r25, 0xFF	; 255
    4af6:	fc 01       	movw	r30, r24
    4af8:	80 81       	ld	r24, Z
    4afa:	91 81       	ldd	r25, Z+1	; 0x01
    4afc:	8c 01       	movw	r16, r24
    4afe:	c8 01       	movw	r24, r16
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <main+0x17b0>
    4b04:	8c 01       	movw	r16, r24
    4b06:	ce 01       	movw	r24, r28
    4b08:	8f 53       	subi	r24, 0x3F	; 63
    4b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	11 83       	std	Z+1, r17	; 0x01
    4b10:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    4b12:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    4b16:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
				}
				else
				{
					if(compass==6)
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1e:	86 30       	cpi	r24, 0x06	; 6
    4b20:	91 05       	cpc	r25, r1
    4b22:	09 f0       	breq	.+2      	; 0x4b26 <main+0x17d6>
    4b24:	e3 c0       	rjmp	.+454    	; 0x4cec <main+0x199c>
					{
						coor[0]=coor[0]+1;
    4b26:	80 91 a6 04 	lds	r24, 0x04A6
    4b2a:	90 91 a7 04 	lds	r25, 0x04A7
    4b2e:	01 96       	adiw	r24, 0x01	; 1
    4b30:	90 93 a7 04 	sts	0x04A7, r25
    4b34:	80 93 a6 04 	sts	0x04A6, r24
						compass=6;
    4b38:	86 e0       	ldi	r24, 0x06	; 6
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	9c 83       	std	Y+4, r25	; 0x04
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
    4b40:	9e 01       	movw	r18, r28
    4b42:	2d 53       	subi	r18, 0x3D	; 61
    4b44:	3f 4f       	sbci	r19, 0xFF	; 255
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	a8 ec       	ldi	r26, 0xC8	; 200
    4b4c:	b2 e4       	ldi	r27, 0x42	; 66
    4b4e:	f9 01       	movw	r30, r18
    4b50:	80 83       	st	Z, r24
    4b52:	91 83       	std	Z+1, r25	; 0x01
    4b54:	a2 83       	std	Z+2, r26	; 0x02
    4b56:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b58:	8e 01       	movw	r16, r28
    4b5a:	09 53       	subi	r16, 0x39	; 57
    4b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5e:	ce 01       	movw	r24, r28
    4b60:	8d 53       	subi	r24, 0x3D	; 61
    4b62:	9f 4f       	sbci	r25, 0xFF	; 255
    4b64:	fc 01       	movw	r30, r24
    4b66:	60 81       	ld	r22, Z
    4b68:	71 81       	ldd	r23, Z+1	; 0x01
    4b6a:	82 81       	ldd	r24, Z+2	; 0x02
    4b6c:	93 81       	ldd	r25, Z+3	; 0x03
    4b6e:	26 e6       	ldi	r18, 0x66	; 102
    4b70:	36 e6       	ldi	r19, 0x66	; 102
    4b72:	46 e6       	ldi	r20, 0x66	; 102
    4b74:	55 e4       	ldi	r21, 0x45	; 69
    4b76:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	f8 01       	movw	r30, r16
    4b80:	80 83       	st	Z, r24
    4b82:	91 83       	std	Z+1, r25	; 0x01
    4b84:	a2 83       	std	Z+2, r26	; 0x02
    4b86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b88:	ce 01       	movw	r24, r28
    4b8a:	89 53       	subi	r24, 0x39	; 57
    4b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8e:	11 e0       	ldi	r17, 0x01	; 1
    4b90:	fc 01       	movw	r30, r24
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	40 e8       	ldi	r20, 0x80	; 128
    4ba0:	5f e3       	ldi	r21, 0x3F	; 63
    4ba2:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    4ba6:	88 23       	and	r24, r24
    4ba8:	0c f0       	brlt	.+2      	; 0x4bac <main+0x185c>
    4baa:	10 e0       	ldi	r17, 0x00	; 0
    4bac:	11 23       	and	r17, r17
    4bae:	49 f0       	breq	.+18     	; 0x4bc2 <main+0x1872>
		__ticks = 1;
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	85 53       	subi	r24, 0x35	; 53
    4bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb6:	21 e0       	ldi	r18, 0x01	; 1
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	fc 01       	movw	r30, r24
    4bbc:	31 83       	std	Z+1, r19	; 0x01
    4bbe:	20 83       	st	Z, r18
    4bc0:	74 c0       	rjmp	.+232    	; 0x4caa <main+0x195a>
	else if (__tmp > 65535)
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	89 53       	subi	r24, 0x39	; 57
    4bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc8:	11 e0       	ldi	r17, 0x01	; 1
    4bca:	fc 01       	movw	r30, r24
    4bcc:	60 81       	ld	r22, Z
    4bce:	71 81       	ldd	r23, Z+1	; 0x01
    4bd0:	82 81       	ldd	r24, Z+2	; 0x02
    4bd2:	93 81       	ldd	r25, Z+3	; 0x03
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	3f ef       	ldi	r19, 0xFF	; 255
    4bd8:	4f e7       	ldi	r20, 0x7F	; 127
    4bda:	57 e4       	ldi	r21, 0x47	; 71
    4bdc:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4be0:	18 16       	cp	r1, r24
    4be2:	0c f0       	brlt	.+2      	; 0x4be6 <main+0x1896>
    4be4:	10 e0       	ldi	r17, 0x00	; 0
    4be6:	11 23       	and	r17, r17
    4be8:	09 f4       	brne	.+2      	; 0x4bec <main+0x189c>
    4bea:	4d c0       	rjmp	.+154    	; 0x4c86 <main+0x1936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bec:	ce 01       	movw	r24, r28
    4bee:	8d 53       	subi	r24, 0x3D	; 61
    4bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	60 81       	ld	r22, Z
    4bf6:	71 81       	ldd	r23, Z+1	; 0x01
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	93 81       	ldd	r25, Z+3	; 0x03
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	30 e0       	ldi	r19, 0x00	; 0
    4c00:	40 e2       	ldi	r20, 0x20	; 32
    4c02:	51 e4       	ldi	r21, 0x41	; 65
    4c04:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	8e 01       	movw	r16, r28
    4c0e:	05 53       	subi	r16, 0x35	; 53
    4c10:	1f 4f       	sbci	r17, 0xFF	; 255
    4c12:	bc 01       	movw	r22, r24
    4c14:	cd 01       	movw	r24, r26
    4c16:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	cb 01       	movw	r24, r22
    4c1e:	f8 01       	movw	r30, r16
    4c20:	91 83       	std	Z+1, r25	; 0x01
    4c22:	80 83       	st	Z, r24
    4c24:	27 c0       	rjmp	.+78     	; 0x4c74 <main+0x1924>
    4c26:	ce 01       	movw	r24, r28
    4c28:	83 53       	subi	r24, 0x33	; 51
    4c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2c:	20 e7       	ldi	r18, 0x70	; 112
    4c2e:	31 e0       	ldi	r19, 0x01	; 1
    4c30:	fc 01       	movw	r30, r24
    4c32:	31 83       	std	Z+1, r19	; 0x01
    4c34:	20 83       	st	Z, r18
    4c36:	ce 01       	movw	r24, r28
    4c38:	83 53       	subi	r24, 0x33	; 51
    4c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	80 81       	ld	r24, Z
    4c40:	91 81       	ldd	r25, Z+1	; 0x01
    4c42:	8c 01       	movw	r16, r24
    4c44:	c8 01       	movw	r24, r16
    4c46:	01 97       	sbiw	r24, 0x01	; 1
    4c48:	f1 f7       	brne	.-4      	; 0x4c46 <main+0x18f6>
    4c4a:	8c 01       	movw	r16, r24
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	83 53       	subi	r24, 0x33	; 51
    4c50:	9f 4f       	sbci	r25, 0xFF	; 255
    4c52:	fc 01       	movw	r30, r24
    4c54:	11 83       	std	Z+1, r17	; 0x01
    4c56:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c58:	ce 01       	movw	r24, r28
    4c5a:	85 53       	subi	r24, 0x35	; 53
    4c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c5e:	9e 01       	movw	r18, r28
    4c60:	25 53       	subi	r18, 0x35	; 53
    4c62:	3f 4f       	sbci	r19, 0xFF	; 255
    4c64:	f9 01       	movw	r30, r18
    4c66:	20 81       	ld	r18, Z
    4c68:	31 81       	ldd	r19, Z+1	; 0x01
    4c6a:	21 50       	subi	r18, 0x01	; 1
    4c6c:	30 40       	sbci	r19, 0x00	; 0
    4c6e:	fc 01       	movw	r30, r24
    4c70:	31 83       	std	Z+1, r19	; 0x01
    4c72:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c74:	ce 01       	movw	r24, r28
    4c76:	85 53       	subi	r24, 0x35	; 53
    4c78:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	80 81       	ld	r24, Z
    4c7e:	91 81       	ldd	r25, Z+1	; 0x01
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	89 f6       	brne	.-94     	; 0x4c26 <main+0x18d6>
    4c84:	2f c0       	rjmp	.+94     	; 0x4ce4 <main+0x1994>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c86:	8e 01       	movw	r16, r28
    4c88:	05 53       	subi	r16, 0x35	; 53
    4c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	89 53       	subi	r24, 0x39	; 57
    4c90:	9f 4f       	sbci	r25, 0xFF	; 255
    4c92:	fc 01       	movw	r30, r24
    4c94:	60 81       	ld	r22, Z
    4c96:	71 81       	ldd	r23, Z+1	; 0x01
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	91 83       	std	Z+1, r25	; 0x01
    4ca8:	80 83       	st	Z, r24
    4caa:	ce 01       	movw	r24, r28
    4cac:	81 53       	subi	r24, 0x31	; 49
    4cae:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb0:	9e 01       	movw	r18, r28
    4cb2:	25 53       	subi	r18, 0x35	; 53
    4cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb6:	f9 01       	movw	r30, r18
    4cb8:	20 81       	ld	r18, Z
    4cba:	31 81       	ldd	r19, Z+1	; 0x01
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	31 83       	std	Z+1, r19	; 0x01
    4cc0:	20 83       	st	Z, r18
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	81 53       	subi	r24, 0x31	; 49
    4cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc8:	fc 01       	movw	r30, r24
    4cca:	80 81       	ld	r24, Z
    4ccc:	91 81       	ldd	r25, Z+1	; 0x01
    4cce:	8c 01       	movw	r16, r24
    4cd0:	c8 01       	movw	r24, r16
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <main+0x1982>
    4cd6:	8c 01       	movw	r16, r24
    4cd8:	ce 01       	movw	r24, r28
    4cda:	81 53       	subi	r24, 0x31	; 49
    4cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cde:	fc 01       	movw	r30, r24
    4ce0:	11 83       	std	Z+1, r17	; 0x01
    4ce2:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    4ce4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    4ce8:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
					}
					else
					{
						if(compass==5)
    4cec:	8b 81       	ldd	r24, Y+3	; 0x03
    4cee:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf0:	85 30       	cpi	r24, 0x05	; 5
    4cf2:	91 05       	cpc	r25, r1
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <main+0x19a8>
    4cf6:	b9 c1       	rjmp	.+882    	; 0x506a <main+0x1d1a>
						{
							coor[0]=coor[0]+1;
    4cf8:	80 91 a6 04 	lds	r24, 0x04A6
    4cfc:	90 91 a7 04 	lds	r25, 0x04A7
    4d00:	01 96       	adiw	r24, 0x01	; 1
    4d02:	90 93 a7 04 	sts	0x04A7, r25
    4d06:	80 93 a6 04 	sts	0x04A6, r24
							compass=6;
    4d0a:	86 e0       	ldi	r24, 0x06	; 6
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	9c 83       	std	Y+4, r25	; 0x04
    4d10:	8b 83       	std	Y+3, r24	; 0x03
    4d12:	9e 01       	movw	r18, r28
    4d14:	2f 52       	subi	r18, 0x2F	; 47
    4d16:	3f 4f       	sbci	r19, 0xFF	; 255
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	aa ef       	ldi	r26, 0xFA	; 250
    4d1e:	b3 e4       	ldi	r27, 0x43	; 67
    4d20:	f9 01       	movw	r30, r18
    4d22:	80 83       	st	Z, r24
    4d24:	91 83       	std	Z+1, r25	; 0x01
    4d26:	a2 83       	std	Z+2, r26	; 0x02
    4d28:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d2a:	8e 01       	movw	r16, r28
    4d2c:	0b 52       	subi	r16, 0x2B	; 43
    4d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d30:	ce 01       	movw	r24, r28
    4d32:	8f 52       	subi	r24, 0x2F	; 47
    4d34:	9f 4f       	sbci	r25, 0xFF	; 255
    4d36:	fc 01       	movw	r30, r24
    4d38:	60 81       	ld	r22, Z
    4d3a:	71 81       	ldd	r23, Z+1	; 0x01
    4d3c:	82 81       	ldd	r24, Z+2	; 0x02
    4d3e:	93 81       	ldd	r25, Z+3	; 0x03
    4d40:	26 e6       	ldi	r18, 0x66	; 102
    4d42:	36 e6       	ldi	r19, 0x66	; 102
    4d44:	46 e6       	ldi	r20, 0x66	; 102
    4d46:	55 e4       	ldi	r21, 0x45	; 69
    4d48:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	f8 01       	movw	r30, r16
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	8b 52       	subi	r24, 0x2B	; 43
    4d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d60:	11 e0       	ldi	r17, 0x01	; 1
    4d62:	fc 01       	movw	r30, r24
    4d64:	60 81       	ld	r22, Z
    4d66:	71 81       	ldd	r23, Z+1	; 0x01
    4d68:	82 81       	ldd	r24, Z+2	; 0x02
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e8       	ldi	r20, 0x80	; 128
    4d72:	5f e3       	ldi	r21, 0x3F	; 63
    4d74:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    4d78:	88 23       	and	r24, r24
    4d7a:	0c f0       	brlt	.+2      	; 0x4d7e <main+0x1a2e>
    4d7c:	10 e0       	ldi	r17, 0x00	; 0
    4d7e:	11 23       	and	r17, r17
    4d80:	49 f0       	breq	.+18     	; 0x4d94 <main+0x1a44>
		__ticks = 1;
    4d82:	ce 01       	movw	r24, r28
    4d84:	87 52       	subi	r24, 0x27	; 39
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	21 e0       	ldi	r18, 0x01	; 1
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	31 83       	std	Z+1, r19	; 0x01
    4d90:	20 83       	st	Z, r18
    4d92:	74 c0       	rjmp	.+232    	; 0x4e7c <main+0x1b2c>
	else if (__tmp > 65535)
    4d94:	ce 01       	movw	r24, r28
    4d96:	8b 52       	subi	r24, 0x2B	; 43
    4d98:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9a:	11 e0       	ldi	r17, 0x01	; 1
    4d9c:	fc 01       	movw	r30, r24
    4d9e:	60 81       	ld	r22, Z
    4da0:	71 81       	ldd	r23, Z+1	; 0x01
    4da2:	82 81       	ldd	r24, Z+2	; 0x02
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	3f ef       	ldi	r19, 0xFF	; 255
    4daa:	4f e7       	ldi	r20, 0x7F	; 127
    4dac:	57 e4       	ldi	r21, 0x47	; 71
    4dae:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4db2:	18 16       	cp	r1, r24
    4db4:	0c f0       	brlt	.+2      	; 0x4db8 <main+0x1a68>
    4db6:	10 e0       	ldi	r17, 0x00	; 0
    4db8:	11 23       	and	r17, r17
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <main+0x1a6e>
    4dbc:	4d c0       	rjmp	.+154    	; 0x4e58 <main+0x1b08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dbe:	ce 01       	movw	r24, r28
    4dc0:	8f 52       	subi	r24, 0x2F	; 47
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	60 81       	ld	r22, Z
    4dc8:	71 81       	ldd	r23, Z+1	; 0x01
    4dca:	82 81       	ldd	r24, Z+2	; 0x02
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	8e 01       	movw	r16, r28
    4de0:	07 52       	subi	r16, 0x27	; 39
    4de2:	1f 4f       	sbci	r17, 0xFF	; 255
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	f8 01       	movw	r30, r16
    4df2:	91 83       	std	Z+1, r25	; 0x01
    4df4:	80 83       	st	Z, r24
    4df6:	27 c0       	rjmp	.+78     	; 0x4e46 <main+0x1af6>
    4df8:	ce 01       	movw	r24, r28
    4dfa:	85 52       	subi	r24, 0x25	; 37
    4dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfe:	20 e7       	ldi	r18, 0x70	; 112
    4e00:	31 e0       	ldi	r19, 0x01	; 1
    4e02:	fc 01       	movw	r30, r24
    4e04:	31 83       	std	Z+1, r19	; 0x01
    4e06:	20 83       	st	Z, r18
    4e08:	ce 01       	movw	r24, r28
    4e0a:	85 52       	subi	r24, 0x25	; 37
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	fc 01       	movw	r30, r24
    4e10:	80 81       	ld	r24, Z
    4e12:	91 81       	ldd	r25, Z+1	; 0x01
    4e14:	8c 01       	movw	r16, r24
    4e16:	c8 01       	movw	r24, r16
    4e18:	01 97       	sbiw	r24, 0x01	; 1
    4e1a:	f1 f7       	brne	.-4      	; 0x4e18 <main+0x1ac8>
    4e1c:	8c 01       	movw	r16, r24
    4e1e:	ce 01       	movw	r24, r28
    4e20:	85 52       	subi	r24, 0x25	; 37
    4e22:	9f 4f       	sbci	r25, 0xFF	; 255
    4e24:	fc 01       	movw	r30, r24
    4e26:	11 83       	std	Z+1, r17	; 0x01
    4e28:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2a:	ce 01       	movw	r24, r28
    4e2c:	87 52       	subi	r24, 0x27	; 39
    4e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e30:	9e 01       	movw	r18, r28
    4e32:	27 52       	subi	r18, 0x27	; 39
    4e34:	3f 4f       	sbci	r19, 0xFF	; 255
    4e36:	f9 01       	movw	r30, r18
    4e38:	20 81       	ld	r18, Z
    4e3a:	31 81       	ldd	r19, Z+1	; 0x01
    4e3c:	21 50       	subi	r18, 0x01	; 1
    4e3e:	30 40       	sbci	r19, 0x00	; 0
    4e40:	fc 01       	movw	r30, r24
    4e42:	31 83       	std	Z+1, r19	; 0x01
    4e44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e46:	ce 01       	movw	r24, r28
    4e48:	87 52       	subi	r24, 0x27	; 39
    4e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e4c:	fc 01       	movw	r30, r24
    4e4e:	80 81       	ld	r24, Z
    4e50:	91 81       	ldd	r25, Z+1	; 0x01
    4e52:	00 97       	sbiw	r24, 0x00	; 0
    4e54:	89 f6       	brne	.-94     	; 0x4df8 <main+0x1aa8>
    4e56:	2f c0       	rjmp	.+94     	; 0x4eb6 <main+0x1b66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e58:	8e 01       	movw	r16, r28
    4e5a:	07 52       	subi	r16, 0x27	; 39
    4e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5e:	ce 01       	movw	r24, r28
    4e60:	8b 52       	subi	r24, 0x2B	; 43
    4e62:	9f 4f       	sbci	r25, 0xFF	; 255
    4e64:	fc 01       	movw	r30, r24
    4e66:	60 81       	ld	r22, Z
    4e68:	71 81       	ldd	r23, Z+1	; 0x01
    4e6a:	82 81       	ldd	r24, Z+2	; 0x02
    4e6c:	93 81       	ldd	r25, Z+3	; 0x03
    4e6e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	f8 01       	movw	r30, r16
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	83 52       	subi	r24, 0x23	; 35
    4e80:	9f 4f       	sbci	r25, 0xFF	; 255
    4e82:	9e 01       	movw	r18, r28
    4e84:	27 52       	subi	r18, 0x27	; 39
    4e86:	3f 4f       	sbci	r19, 0xFF	; 255
    4e88:	f9 01       	movw	r30, r18
    4e8a:	20 81       	ld	r18, Z
    4e8c:	31 81       	ldd	r19, Z+1	; 0x01
    4e8e:	fc 01       	movw	r30, r24
    4e90:	31 83       	std	Z+1, r19	; 0x01
    4e92:	20 83       	st	Z, r18
    4e94:	ce 01       	movw	r24, r28
    4e96:	83 52       	subi	r24, 0x23	; 35
    4e98:	9f 4f       	sbci	r25, 0xFF	; 255
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	8c 01       	movw	r16, r24
    4ea2:	c8 01       	movw	r24, r16
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <main+0x1b54>
    4ea8:	8c 01       	movw	r16, r24
    4eaa:	ce 01       	movw	r24, r28
    4eac:	83 52       	subi	r24, 0x23	; 35
    4eae:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	11 83       	std	Z+1, r17	; 0x01
    4eb4:	00 83       	st	Z, r16
							_delay_ms(500);
							left_degrees(85);
    4eb6:	85 e5       	ldi	r24, 0x55	; 85
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    4ebe:	9e 01       	movw	r18, r28
    4ec0:	21 52       	subi	r18, 0x21	; 33
    4ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	a8 ec       	ldi	r26, 0xC8	; 200
    4eca:	b2 e4       	ldi	r27, 0x42	; 66
    4ecc:	f9 01       	movw	r30, r18
    4ece:	80 83       	st	Z, r24
    4ed0:	91 83       	std	Z+1, r25	; 0x01
    4ed2:	a2 83       	std	Z+2, r26	; 0x02
    4ed4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ed6:	8e 01       	movw	r16, r28
    4ed8:	0d 51       	subi	r16, 0x1D	; 29
    4eda:	1f 4f       	sbci	r17, 0xFF	; 255
    4edc:	ce 01       	movw	r24, r28
    4ede:	81 52       	subi	r24, 0x21	; 33
    4ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	60 81       	ld	r22, Z
    4ee6:	71 81       	ldd	r23, Z+1	; 0x01
    4ee8:	82 81       	ldd	r24, Z+2	; 0x02
    4eea:	93 81       	ldd	r25, Z+3	; 0x03
    4eec:	26 e6       	ldi	r18, 0x66	; 102
    4eee:	36 e6       	ldi	r19, 0x66	; 102
    4ef0:	46 e6       	ldi	r20, 0x66	; 102
    4ef2:	55 e4       	ldi	r21, 0x45	; 69
    4ef4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	f8 01       	movw	r30, r16
    4efe:	80 83       	st	Z, r24
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	a2 83       	std	Z+2, r26	; 0x02
    4f04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f06:	ce 01       	movw	r24, r28
    4f08:	8d 51       	subi	r24, 0x1D	; 29
    4f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0c:	11 e0       	ldi	r17, 0x01	; 1
    4f0e:	fc 01       	movw	r30, r24
    4f10:	60 81       	ld	r22, Z
    4f12:	71 81       	ldd	r23, Z+1	; 0x01
    4f14:	82 81       	ldd	r24, Z+2	; 0x02
    4f16:	93 81       	ldd	r25, Z+3	; 0x03
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	40 e8       	ldi	r20, 0x80	; 128
    4f1e:	5f e3       	ldi	r21, 0x3F	; 63
    4f20:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    4f24:	88 23       	and	r24, r24
    4f26:	0c f0       	brlt	.+2      	; 0x4f2a <main+0x1bda>
    4f28:	10 e0       	ldi	r17, 0x00	; 0
    4f2a:	11 23       	and	r17, r17
    4f2c:	49 f0       	breq	.+18     	; 0x4f40 <main+0x1bf0>
		__ticks = 1;
    4f2e:	ce 01       	movw	r24, r28
    4f30:	89 51       	subi	r24, 0x19	; 25
    4f32:	9f 4f       	sbci	r25, 0xFF	; 255
    4f34:	21 e0       	ldi	r18, 0x01	; 1
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	fc 01       	movw	r30, r24
    4f3a:	31 83       	std	Z+1, r19	; 0x01
    4f3c:	20 83       	st	Z, r18
    4f3e:	74 c0       	rjmp	.+232    	; 0x5028 <main+0x1cd8>
	else if (__tmp > 65535)
    4f40:	ce 01       	movw	r24, r28
    4f42:	8d 51       	subi	r24, 0x1D	; 29
    4f44:	9f 4f       	sbci	r25, 0xFF	; 255
    4f46:	11 e0       	ldi	r17, 0x01	; 1
    4f48:	fc 01       	movw	r30, r24
    4f4a:	60 81       	ld	r22, Z
    4f4c:	71 81       	ldd	r23, Z+1	; 0x01
    4f4e:	82 81       	ldd	r24, Z+2	; 0x02
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	3f ef       	ldi	r19, 0xFF	; 255
    4f56:	4f e7       	ldi	r20, 0x7F	; 127
    4f58:	57 e4       	ldi	r21, 0x47	; 71
    4f5a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    4f5e:	18 16       	cp	r1, r24
    4f60:	0c f0       	brlt	.+2      	; 0x4f64 <main+0x1c14>
    4f62:	10 e0       	ldi	r17, 0x00	; 0
    4f64:	11 23       	and	r17, r17
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <main+0x1c1a>
    4f68:	4d c0       	rjmp	.+154    	; 0x5004 <main+0x1cb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6a:	ce 01       	movw	r24, r28
    4f6c:	81 52       	subi	r24, 0x21	; 33
    4f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f70:	fc 01       	movw	r30, r24
    4f72:	60 81       	ld	r22, Z
    4f74:	71 81       	ldd	r23, Z+1	; 0x01
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e2       	ldi	r20, 0x20	; 32
    4f80:	51 e4       	ldi	r21, 0x41	; 65
    4f82:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	8e 01       	movw	r16, r28
    4f8c:	09 51       	subi	r16, 0x19	; 25
    4f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f90:	bc 01       	movw	r22, r24
    4f92:	cd 01       	movw	r24, r26
    4f94:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	f8 01       	movw	r30, r16
    4f9e:	91 83       	std	Z+1, r25	; 0x01
    4fa0:	80 83       	st	Z, r24
    4fa2:	27 c0       	rjmp	.+78     	; 0x4ff2 <main+0x1ca2>
    4fa4:	ce 01       	movw	r24, r28
    4fa6:	87 51       	subi	r24, 0x17	; 23
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	20 e7       	ldi	r18, 0x70	; 112
    4fac:	31 e0       	ldi	r19, 0x01	; 1
    4fae:	fc 01       	movw	r30, r24
    4fb0:	31 83       	std	Z+1, r19	; 0x01
    4fb2:	20 83       	st	Z, r18
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	87 51       	subi	r24, 0x17	; 23
    4fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fba:	fc 01       	movw	r30, r24
    4fbc:	80 81       	ld	r24, Z
    4fbe:	91 81       	ldd	r25, Z+1	; 0x01
    4fc0:	8c 01       	movw	r16, r24
    4fc2:	c8 01       	movw	r24, r16
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	f1 f7       	brne	.-4      	; 0x4fc4 <main+0x1c74>
    4fc8:	8c 01       	movw	r16, r24
    4fca:	ce 01       	movw	r24, r28
    4fcc:	87 51       	subi	r24, 0x17	; 23
    4fce:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	11 83       	std	Z+1, r17	; 0x01
    4fd4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd6:	ce 01       	movw	r24, r28
    4fd8:	89 51       	subi	r24, 0x19	; 25
    4fda:	9f 4f       	sbci	r25, 0xFF	; 255
    4fdc:	9e 01       	movw	r18, r28
    4fde:	29 51       	subi	r18, 0x19	; 25
    4fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe2:	f9 01       	movw	r30, r18
    4fe4:	20 81       	ld	r18, Z
    4fe6:	31 81       	ldd	r19, Z+1	; 0x01
    4fe8:	21 50       	subi	r18, 0x01	; 1
    4fea:	30 40       	sbci	r19, 0x00	; 0
    4fec:	fc 01       	movw	r30, r24
    4fee:	31 83       	std	Z+1, r19	; 0x01
    4ff0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff2:	ce 01       	movw	r24, r28
    4ff4:	89 51       	subi	r24, 0x19	; 25
    4ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	89 f6       	brne	.-94     	; 0x4fa4 <main+0x1c54>
    5002:	2f c0       	rjmp	.+94     	; 0x5062 <main+0x1d12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	8e 01       	movw	r16, r28
    5006:	09 51       	subi	r16, 0x19	; 25
    5008:	1f 4f       	sbci	r17, 0xFF	; 255
    500a:	ce 01       	movw	r24, r28
    500c:	8d 51       	subi	r24, 0x1D	; 29
    500e:	9f 4f       	sbci	r25, 0xFF	; 255
    5010:	fc 01       	movw	r30, r24
    5012:	60 81       	ld	r22, Z
    5014:	71 81       	ldd	r23, Z+1	; 0x01
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	93 81       	ldd	r25, Z+3	; 0x03
    501a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	f8 01       	movw	r30, r16
    5024:	91 83       	std	Z+1, r25	; 0x01
    5026:	80 83       	st	Z, r24
    5028:	ce 01       	movw	r24, r28
    502a:	85 51       	subi	r24, 0x15	; 21
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	9e 01       	movw	r18, r28
    5030:	29 51       	subi	r18, 0x19	; 25
    5032:	3f 4f       	sbci	r19, 0xFF	; 255
    5034:	f9 01       	movw	r30, r18
    5036:	20 81       	ld	r18, Z
    5038:	31 81       	ldd	r19, Z+1	; 0x01
    503a:	fc 01       	movw	r30, r24
    503c:	31 83       	std	Z+1, r19	; 0x01
    503e:	20 83       	st	Z, r18
    5040:	ce 01       	movw	r24, r28
    5042:	85 51       	subi	r24, 0x15	; 21
    5044:	9f 4f       	sbci	r25, 0xFF	; 255
    5046:	fc 01       	movw	r30, r24
    5048:	80 81       	ld	r24, Z
    504a:	91 81       	ldd	r25, Z+1	; 0x01
    504c:	8c 01       	movw	r16, r24
    504e:	c8 01       	movw	r24, r16
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <main+0x1d00>
    5054:	8c 01       	movw	r16, r24
    5056:	ce 01       	movw	r24, r28
    5058:	85 51       	subi	r24, 0x15	; 21
    505a:	9f 4f       	sbci	r25, 0xFF	; 255
    505c:	fc 01       	movw	r30, r24
    505e:	11 83       	std	Z+1, r17	; 0x01
    5060:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    5062:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    5066:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
						}
						else
						{
							if(compass==7)
    506a:	8b 81       	ldd	r24, Y+3	; 0x03
    506c:	9c 81       	ldd	r25, Y+4	; 0x04
    506e:	87 30       	cpi	r24, 0x07	; 7
    5070:	91 05       	cpc	r25, r1
    5072:	11 f0       	breq	.+4      	; 0x5078 <main+0x1d28>
    5074:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
							{
								coor[0]=coor[0]+1;
    5078:	80 91 a6 04 	lds	r24, 0x04A6
    507c:	90 91 a7 04 	lds	r25, 0x04A7
    5080:	01 96       	adiw	r24, 0x01	; 1
    5082:	90 93 a7 04 	sts	0x04A7, r25
    5086:	80 93 a6 04 	sts	0x04A6, r24
								compass=6;
    508a:	86 e0       	ldi	r24, 0x06	; 6
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	9c 83       	std	Y+4, r25	; 0x04
    5090:	8b 83       	std	Y+3, r24	; 0x03
    5092:	9e 01       	movw	r18, r28
    5094:	23 51       	subi	r18, 0x13	; 19
    5096:	3f 4f       	sbci	r19, 0xFF	; 255
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	aa ef       	ldi	r26, 0xFA	; 250
    509e:	b3 e4       	ldi	r27, 0x43	; 67
    50a0:	f9 01       	movw	r30, r18
    50a2:	80 83       	st	Z, r24
    50a4:	91 83       	std	Z+1, r25	; 0x01
    50a6:	a2 83       	std	Z+2, r26	; 0x02
    50a8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    50aa:	8e 01       	movw	r16, r28
    50ac:	0f 50       	subi	r16, 0x0F	; 15
    50ae:	1f 4f       	sbci	r17, 0xFF	; 255
    50b0:	ce 01       	movw	r24, r28
    50b2:	83 51       	subi	r24, 0x13	; 19
    50b4:	9f 4f       	sbci	r25, 0xFF	; 255
    50b6:	fc 01       	movw	r30, r24
    50b8:	60 81       	ld	r22, Z
    50ba:	71 81       	ldd	r23, Z+1	; 0x01
    50bc:	82 81       	ldd	r24, Z+2	; 0x02
    50be:	93 81       	ldd	r25, Z+3	; 0x03
    50c0:	26 e6       	ldi	r18, 0x66	; 102
    50c2:	36 e6       	ldi	r19, 0x66	; 102
    50c4:	46 e6       	ldi	r20, 0x66	; 102
    50c6:	55 e4       	ldi	r21, 0x45	; 69
    50c8:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	f8 01       	movw	r30, r16
    50d2:	80 83       	st	Z, r24
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	a2 83       	std	Z+2, r26	; 0x02
    50d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50da:	ce 01       	movw	r24, r28
    50dc:	8f 50       	subi	r24, 0x0F	; 15
    50de:	9f 4f       	sbci	r25, 0xFF	; 255
    50e0:	11 e0       	ldi	r17, 0x01	; 1
    50e2:	fc 01       	movw	r30, r24
    50e4:	60 81       	ld	r22, Z
    50e6:	71 81       	ldd	r23, Z+1	; 0x01
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	93 81       	ldd	r25, Z+3	; 0x03
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	40 e8       	ldi	r20, 0x80	; 128
    50f2:	5f e3       	ldi	r21, 0x3F	; 63
    50f4:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    50f8:	88 23       	and	r24, r24
    50fa:	0c f0       	brlt	.+2      	; 0x50fe <main+0x1dae>
    50fc:	10 e0       	ldi	r17, 0x00	; 0
    50fe:	11 23       	and	r17, r17
    5100:	49 f0       	breq	.+18     	; 0x5114 <main+0x1dc4>
		__ticks = 1;
    5102:	ce 01       	movw	r24, r28
    5104:	8b 50       	subi	r24, 0x0B	; 11
    5106:	9f 4f       	sbci	r25, 0xFF	; 255
    5108:	21 e0       	ldi	r18, 0x01	; 1
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	fc 01       	movw	r30, r24
    510e:	31 83       	std	Z+1, r19	; 0x01
    5110:	20 83       	st	Z, r18
    5112:	74 c0       	rjmp	.+232    	; 0x51fc <main+0x1eac>
	else if (__tmp > 65535)
    5114:	ce 01       	movw	r24, r28
    5116:	8f 50       	subi	r24, 0x0F	; 15
    5118:	9f 4f       	sbci	r25, 0xFF	; 255
    511a:	11 e0       	ldi	r17, 0x01	; 1
    511c:	fc 01       	movw	r30, r24
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	3f ef       	ldi	r19, 0xFF	; 255
    512a:	4f e7       	ldi	r20, 0x7F	; 127
    512c:	57 e4       	ldi	r21, 0x47	; 71
    512e:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5132:	18 16       	cp	r1, r24
    5134:	0c f0       	brlt	.+2      	; 0x5138 <main+0x1de8>
    5136:	10 e0       	ldi	r17, 0x00	; 0
    5138:	11 23       	and	r17, r17
    513a:	09 f4       	brne	.+2      	; 0x513e <main+0x1dee>
    513c:	4d c0       	rjmp	.+154    	; 0x51d8 <main+0x1e88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    513e:	ce 01       	movw	r24, r28
    5140:	83 51       	subi	r24, 0x13	; 19
    5142:	9f 4f       	sbci	r25, 0xFF	; 255
    5144:	fc 01       	movw	r30, r24
    5146:	60 81       	ld	r22, Z
    5148:	71 81       	ldd	r23, Z+1	; 0x01
    514a:	82 81       	ldd	r24, Z+2	; 0x02
    514c:	93 81       	ldd	r25, Z+3	; 0x03
    514e:	20 e0       	ldi	r18, 0x00	; 0
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	40 e2       	ldi	r20, 0x20	; 32
    5154:	51 e4       	ldi	r21, 0x41	; 65
    5156:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	8e 01       	movw	r16, r28
    5160:	0b 50       	subi	r16, 0x0B	; 11
    5162:	1f 4f       	sbci	r17, 0xFF	; 255
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	f8 01       	movw	r30, r16
    5172:	91 83       	std	Z+1, r25	; 0x01
    5174:	80 83       	st	Z, r24
    5176:	27 c0       	rjmp	.+78     	; 0x51c6 <main+0x1e76>
    5178:	ce 01       	movw	r24, r28
    517a:	89 50       	subi	r24, 0x09	; 9
    517c:	9f 4f       	sbci	r25, 0xFF	; 255
    517e:	20 e7       	ldi	r18, 0x70	; 112
    5180:	31 e0       	ldi	r19, 0x01	; 1
    5182:	fc 01       	movw	r30, r24
    5184:	31 83       	std	Z+1, r19	; 0x01
    5186:	20 83       	st	Z, r18
    5188:	ce 01       	movw	r24, r28
    518a:	89 50       	subi	r24, 0x09	; 9
    518c:	9f 4f       	sbci	r25, 0xFF	; 255
    518e:	fc 01       	movw	r30, r24
    5190:	80 81       	ld	r24, Z
    5192:	91 81       	ldd	r25, Z+1	; 0x01
    5194:	8c 01       	movw	r16, r24
    5196:	c8 01       	movw	r24, r16
    5198:	01 97       	sbiw	r24, 0x01	; 1
    519a:	f1 f7       	brne	.-4      	; 0x5198 <main+0x1e48>
    519c:	8c 01       	movw	r16, r24
    519e:	ce 01       	movw	r24, r28
    51a0:	89 50       	subi	r24, 0x09	; 9
    51a2:	9f 4f       	sbci	r25, 0xFF	; 255
    51a4:	fc 01       	movw	r30, r24
    51a6:	11 83       	std	Z+1, r17	; 0x01
    51a8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51aa:	ce 01       	movw	r24, r28
    51ac:	8b 50       	subi	r24, 0x0B	; 11
    51ae:	9f 4f       	sbci	r25, 0xFF	; 255
    51b0:	9e 01       	movw	r18, r28
    51b2:	2b 50       	subi	r18, 0x0B	; 11
    51b4:	3f 4f       	sbci	r19, 0xFF	; 255
    51b6:	f9 01       	movw	r30, r18
    51b8:	20 81       	ld	r18, Z
    51ba:	31 81       	ldd	r19, Z+1	; 0x01
    51bc:	21 50       	subi	r18, 0x01	; 1
    51be:	30 40       	sbci	r19, 0x00	; 0
    51c0:	fc 01       	movw	r30, r24
    51c2:	31 83       	std	Z+1, r19	; 0x01
    51c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c6:	ce 01       	movw	r24, r28
    51c8:	8b 50       	subi	r24, 0x0B	; 11
    51ca:	9f 4f       	sbci	r25, 0xFF	; 255
    51cc:	fc 01       	movw	r30, r24
    51ce:	80 81       	ld	r24, Z
    51d0:	91 81       	ldd	r25, Z+1	; 0x01
    51d2:	00 97       	sbiw	r24, 0x00	; 0
    51d4:	89 f6       	brne	.-94     	; 0x5178 <main+0x1e28>
    51d6:	2f c0       	rjmp	.+94     	; 0x5236 <main+0x1ee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d8:	8e 01       	movw	r16, r28
    51da:	0b 50       	subi	r16, 0x0B	; 11
    51dc:	1f 4f       	sbci	r17, 0xFF	; 255
    51de:	ce 01       	movw	r24, r28
    51e0:	8f 50       	subi	r24, 0x0F	; 15
    51e2:	9f 4f       	sbci	r25, 0xFF	; 255
    51e4:	fc 01       	movw	r30, r24
    51e6:	60 81       	ld	r22, Z
    51e8:	71 81       	ldd	r23, Z+1	; 0x01
    51ea:	82 81       	ldd	r24, Z+2	; 0x02
    51ec:	93 81       	ldd	r25, Z+3	; 0x03
    51ee:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	f8 01       	movw	r30, r16
    51f8:	91 83       	std	Z+1, r25	; 0x01
    51fa:	80 83       	st	Z, r24
    51fc:	ce 01       	movw	r24, r28
    51fe:	87 50       	subi	r24, 0x07	; 7
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	9e 01       	movw	r18, r28
    5204:	2b 50       	subi	r18, 0x0B	; 11
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
    5208:	f9 01       	movw	r30, r18
    520a:	20 81       	ld	r18, Z
    520c:	31 81       	ldd	r19, Z+1	; 0x01
    520e:	fc 01       	movw	r30, r24
    5210:	31 83       	std	Z+1, r19	; 0x01
    5212:	20 83       	st	Z, r18
    5214:	ce 01       	movw	r24, r28
    5216:	87 50       	subi	r24, 0x07	; 7
    5218:	9f 4f       	sbci	r25, 0xFF	; 255
    521a:	fc 01       	movw	r30, r24
    521c:	80 81       	ld	r24, Z
    521e:	91 81       	ldd	r25, Z+1	; 0x01
    5220:	8c 01       	movw	r16, r24
    5222:	c8 01       	movw	r24, r16
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <main+0x1ed4>
    5228:	8c 01       	movw	r16, r24
    522a:	ce 01       	movw	r24, r28
    522c:	87 50       	subi	r24, 0x07	; 7
    522e:	9f 4f       	sbci	r25, 0xFF	; 255
    5230:	fc 01       	movw	r30, r24
    5232:	11 83       	std	Z+1, r17	; 0x01
    5234:	00 83       	st	Z, r16
								_delay_ms(500);
								right_degrees(185);
    5236:	89 eb       	ldi	r24, 0xB9	; 185
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    523e:	9e 01       	movw	r18, r28
    5240:	25 50       	subi	r18, 0x05	; 5
    5242:	3f 4f       	sbci	r19, 0xFF	; 255
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	a8 ec       	ldi	r26, 0xC8	; 200
    524a:	b2 e4       	ldi	r27, 0x42	; 66
    524c:	f9 01       	movw	r30, r18
    524e:	80 83       	st	Z, r24
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	a2 83       	std	Z+2, r26	; 0x02
    5254:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5256:	8e 01       	movw	r16, r28
    5258:	01 50       	subi	r16, 0x01	; 1
    525a:	1f 4f       	sbci	r17, 0xFF	; 255
    525c:	ce 01       	movw	r24, r28
    525e:	85 50       	subi	r24, 0x05	; 5
    5260:	9f 4f       	sbci	r25, 0xFF	; 255
    5262:	fc 01       	movw	r30, r24
    5264:	60 81       	ld	r22, Z
    5266:	71 81       	ldd	r23, Z+1	; 0x01
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	93 81       	ldd	r25, Z+3	; 0x03
    526c:	26 e6       	ldi	r18, 0x66	; 102
    526e:	36 e6       	ldi	r19, 0x66	; 102
    5270:	46 e6       	ldi	r20, 0x66	; 102
    5272:	55 e4       	ldi	r21, 0x45	; 69
    5274:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5278:	dc 01       	movw	r26, r24
    527a:	cb 01       	movw	r24, r22
    527c:	f8 01       	movw	r30, r16
    527e:	80 83       	st	Z, r24
    5280:	91 83       	std	Z+1, r25	; 0x01
    5282:	a2 83       	std	Z+2, r26	; 0x02
    5284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5286:	ce 01       	movw	r24, r28
    5288:	81 50       	subi	r24, 0x01	; 1
    528a:	9f 4f       	sbci	r25, 0xFF	; 255
    528c:	11 e0       	ldi	r17, 0x01	; 1
    528e:	fc 01       	movw	r30, r24
    5290:	60 81       	ld	r22, Z
    5292:	71 81       	ldd	r23, Z+1	; 0x01
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	93 81       	ldd	r25, Z+3	; 0x03
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	40 e8       	ldi	r20, 0x80	; 128
    529e:	5f e3       	ldi	r21, 0x3F	; 63
    52a0:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    52a4:	88 23       	and	r24, r24
    52a6:	0c f0       	brlt	.+2      	; 0x52aa <main+0x1f5a>
    52a8:	10 e0       	ldi	r17, 0x00	; 0
    52aa:	11 23       	and	r17, r17
    52ac:	49 f0       	breq	.+18     	; 0x52c0 <main+0x1f70>
		__ticks = 1;
    52ae:	ce 01       	movw	r24, r28
    52b0:	8d 5f       	subi	r24, 0xFD	; 253
    52b2:	9e 4f       	sbci	r25, 0xFE	; 254
    52b4:	21 e0       	ldi	r18, 0x01	; 1
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	fc 01       	movw	r30, r24
    52ba:	31 83       	std	Z+1, r19	; 0x01
    52bc:	20 83       	st	Z, r18
    52be:	74 c0       	rjmp	.+232    	; 0x53a8 <main+0x2058>
	else if (__tmp > 65535)
    52c0:	ce 01       	movw	r24, r28
    52c2:	81 50       	subi	r24, 0x01	; 1
    52c4:	9f 4f       	sbci	r25, 0xFF	; 255
    52c6:	11 e0       	ldi	r17, 0x01	; 1
    52c8:	fc 01       	movw	r30, r24
    52ca:	60 81       	ld	r22, Z
    52cc:	71 81       	ldd	r23, Z+1	; 0x01
    52ce:	82 81       	ldd	r24, Z+2	; 0x02
    52d0:	93 81       	ldd	r25, Z+3	; 0x03
    52d2:	20 e0       	ldi	r18, 0x00	; 0
    52d4:	3f ef       	ldi	r19, 0xFF	; 255
    52d6:	4f e7       	ldi	r20, 0x7F	; 127
    52d8:	57 e4       	ldi	r21, 0x47	; 71
    52da:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    52de:	18 16       	cp	r1, r24
    52e0:	0c f0       	brlt	.+2      	; 0x52e4 <main+0x1f94>
    52e2:	10 e0       	ldi	r17, 0x00	; 0
    52e4:	11 23       	and	r17, r17
    52e6:	09 f4       	brne	.+2      	; 0x52ea <main+0x1f9a>
    52e8:	4d c0       	rjmp	.+154    	; 0x5384 <main+0x2034>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ea:	ce 01       	movw	r24, r28
    52ec:	85 50       	subi	r24, 0x05	; 5
    52ee:	9f 4f       	sbci	r25, 0xFF	; 255
    52f0:	fc 01       	movw	r30, r24
    52f2:	60 81       	ld	r22, Z
    52f4:	71 81       	ldd	r23, Z+1	; 0x01
    52f6:	82 81       	ldd	r24, Z+2	; 0x02
    52f8:	93 81       	ldd	r25, Z+3	; 0x03
    52fa:	20 e0       	ldi	r18, 0x00	; 0
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	40 e2       	ldi	r20, 0x20	; 32
    5300:	51 e4       	ldi	r21, 0x41	; 65
    5302:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5306:	dc 01       	movw	r26, r24
    5308:	cb 01       	movw	r24, r22
    530a:	8e 01       	movw	r16, r28
    530c:	0d 5f       	subi	r16, 0xFD	; 253
    530e:	1e 4f       	sbci	r17, 0xFE	; 254
    5310:	bc 01       	movw	r22, r24
    5312:	cd 01       	movw	r24, r26
    5314:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	f8 01       	movw	r30, r16
    531e:	91 83       	std	Z+1, r25	; 0x01
    5320:	80 83       	st	Z, r24
    5322:	27 c0       	rjmp	.+78     	; 0x5372 <main+0x2022>
    5324:	ce 01       	movw	r24, r28
    5326:	8b 5f       	subi	r24, 0xFB	; 251
    5328:	9e 4f       	sbci	r25, 0xFE	; 254
    532a:	20 e7       	ldi	r18, 0x70	; 112
    532c:	31 e0       	ldi	r19, 0x01	; 1
    532e:	fc 01       	movw	r30, r24
    5330:	31 83       	std	Z+1, r19	; 0x01
    5332:	20 83       	st	Z, r18
    5334:	ce 01       	movw	r24, r28
    5336:	8b 5f       	subi	r24, 0xFB	; 251
    5338:	9e 4f       	sbci	r25, 0xFE	; 254
    533a:	fc 01       	movw	r30, r24
    533c:	80 81       	ld	r24, Z
    533e:	91 81       	ldd	r25, Z+1	; 0x01
    5340:	8c 01       	movw	r16, r24
    5342:	c8 01       	movw	r24, r16
    5344:	01 97       	sbiw	r24, 0x01	; 1
    5346:	f1 f7       	brne	.-4      	; 0x5344 <main+0x1ff4>
    5348:	8c 01       	movw	r16, r24
    534a:	ce 01       	movw	r24, r28
    534c:	8b 5f       	subi	r24, 0xFB	; 251
    534e:	9e 4f       	sbci	r25, 0xFE	; 254
    5350:	fc 01       	movw	r30, r24
    5352:	11 83       	std	Z+1, r17	; 0x01
    5354:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5356:	ce 01       	movw	r24, r28
    5358:	8d 5f       	subi	r24, 0xFD	; 253
    535a:	9e 4f       	sbci	r25, 0xFE	; 254
    535c:	9e 01       	movw	r18, r28
    535e:	2d 5f       	subi	r18, 0xFD	; 253
    5360:	3e 4f       	sbci	r19, 0xFE	; 254
    5362:	f9 01       	movw	r30, r18
    5364:	20 81       	ld	r18, Z
    5366:	31 81       	ldd	r19, Z+1	; 0x01
    5368:	21 50       	subi	r18, 0x01	; 1
    536a:	30 40       	sbci	r19, 0x00	; 0
    536c:	fc 01       	movw	r30, r24
    536e:	31 83       	std	Z+1, r19	; 0x01
    5370:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5372:	ce 01       	movw	r24, r28
    5374:	8d 5f       	subi	r24, 0xFD	; 253
    5376:	9e 4f       	sbci	r25, 0xFE	; 254
    5378:	fc 01       	movw	r30, r24
    537a:	80 81       	ld	r24, Z
    537c:	91 81       	ldd	r25, Z+1	; 0x01
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	89 f6       	brne	.-94     	; 0x5324 <main+0x1fd4>
    5382:	2f c0       	rjmp	.+94     	; 0x53e2 <main+0x2092>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5384:	8e 01       	movw	r16, r28
    5386:	0d 5f       	subi	r16, 0xFD	; 253
    5388:	1e 4f       	sbci	r17, 0xFE	; 254
    538a:	ce 01       	movw	r24, r28
    538c:	81 50       	subi	r24, 0x01	; 1
    538e:	9f 4f       	sbci	r25, 0xFF	; 255
    5390:	fc 01       	movw	r30, r24
    5392:	60 81       	ld	r22, Z
    5394:	71 81       	ldd	r23, Z+1	; 0x01
    5396:	82 81       	ldd	r24, Z+2	; 0x02
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	f8 01       	movw	r30, r16
    53a4:	91 83       	std	Z+1, r25	; 0x01
    53a6:	80 83       	st	Z, r24
    53a8:	ce 01       	movw	r24, r28
    53aa:	89 5f       	subi	r24, 0xF9	; 249
    53ac:	9e 4f       	sbci	r25, 0xFE	; 254
    53ae:	9e 01       	movw	r18, r28
    53b0:	2d 5f       	subi	r18, 0xFD	; 253
    53b2:	3e 4f       	sbci	r19, 0xFE	; 254
    53b4:	f9 01       	movw	r30, r18
    53b6:	20 81       	ld	r18, Z
    53b8:	31 81       	ldd	r19, Z+1	; 0x01
    53ba:	fc 01       	movw	r30, r24
    53bc:	31 83       	std	Z+1, r19	; 0x01
    53be:	20 83       	st	Z, r18
    53c0:	ce 01       	movw	r24, r28
    53c2:	89 5f       	subi	r24, 0xF9	; 249
    53c4:	9e 4f       	sbci	r25, 0xFE	; 254
    53c6:	fc 01       	movw	r30, r24
    53c8:	80 81       	ld	r24, Z
    53ca:	91 81       	ldd	r25, Z+1	; 0x01
    53cc:	8c 01       	movw	r16, r24
    53ce:	c8 01       	movw	r24, r16
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	f1 f7       	brne	.-4      	; 0x53d0 <main+0x2080>
    53d4:	8c 01       	movw	r16, r24
    53d6:	ce 01       	movw	r24, r28
    53d8:	89 5f       	subi	r24, 0xF9	; 249
    53da:	9e 4f       	sbci	r25, 0xFE	; 254
    53dc:	fc 01       	movw	r30, r24
    53de:	11 83       	std	Z+1, r17	; 0x01
    53e0:	00 83       	st	Z, r16
								_delay_ms(100);
								linefollwer();
    53e2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    53e6:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
					
				}
			}
			else
			{
				if(final[0]<coor[0])
    53ea:	ce 01       	movw	r24, r28
    53ec:	8d 52       	subi	r24, 0x2D	; 45
    53ee:	99 4f       	sbci	r25, 0xF9	; 249
    53f0:	fc 01       	movw	r30, r24
    53f2:	20 81       	ld	r18, Z
    53f4:	31 81       	ldd	r19, Z+1	; 0x01
    53f6:	80 91 a6 04 	lds	r24, 0x04A6
    53fa:	90 91 a7 04 	lds	r25, 0x04A7
    53fe:	28 17       	cp	r18, r24
    5400:	39 07       	cpc	r19, r25
    5402:	0c f0       	brlt	.+2      	; 0x5406 <main+0x20b6>
    5404:	26 c6       	rjmp	.+3148   	; 0x6052 <main+0x2d02>
				{
					if(compass==4)
    5406:	8b 81       	ldd	r24, Y+3	; 0x03
    5408:	9c 81       	ldd	r25, Y+4	; 0x04
    540a:	84 30       	cpi	r24, 0x04	; 4
    540c:	91 05       	cpc	r25, r1
    540e:	09 f0       	breq	.+2      	; 0x5412 <main+0x20c2>
    5410:	b9 c1       	rjmp	.+882    	; 0x5784 <main+0x2434>
					{
						coor[0]=coor[0]-1;
    5412:	80 91 a6 04 	lds	r24, 0x04A6
    5416:	90 91 a7 04 	lds	r25, 0x04A7
    541a:	01 97       	sbiw	r24, 0x01	; 1
    541c:	90 93 a7 04 	sts	0x04A7, r25
    5420:	80 93 a6 04 	sts	0x04A6, r24
						compass=7;
    5424:	87 e0       	ldi	r24, 0x07	; 7
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	9c 83       	std	Y+4, r25	; 0x04
    542a:	8b 83       	std	Y+3, r24	; 0x03
    542c:	9e 01       	movw	r18, r28
    542e:	27 5f       	subi	r18, 0xF7	; 247
    5430:	3e 4f       	sbci	r19, 0xFE	; 254
    5432:	80 e0       	ldi	r24, 0x00	; 0
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	aa ef       	ldi	r26, 0xFA	; 250
    5438:	b3 e4       	ldi	r27, 0x43	; 67
    543a:	f9 01       	movw	r30, r18
    543c:	80 83       	st	Z, r24
    543e:	91 83       	std	Z+1, r25	; 0x01
    5440:	a2 83       	std	Z+2, r26	; 0x02
    5442:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5444:	8e 01       	movw	r16, r28
    5446:	03 5f       	subi	r16, 0xF3	; 243
    5448:	1e 4f       	sbci	r17, 0xFE	; 254
    544a:	ce 01       	movw	r24, r28
    544c:	87 5f       	subi	r24, 0xF7	; 247
    544e:	9e 4f       	sbci	r25, 0xFE	; 254
    5450:	fc 01       	movw	r30, r24
    5452:	60 81       	ld	r22, Z
    5454:	71 81       	ldd	r23, Z+1	; 0x01
    5456:	82 81       	ldd	r24, Z+2	; 0x02
    5458:	93 81       	ldd	r25, Z+3	; 0x03
    545a:	26 e6       	ldi	r18, 0x66	; 102
    545c:	36 e6       	ldi	r19, 0x66	; 102
    545e:	46 e6       	ldi	r20, 0x66	; 102
    5460:	55 e4       	ldi	r21, 0x45	; 69
    5462:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	f8 01       	movw	r30, r16
    546c:	80 83       	st	Z, r24
    546e:	91 83       	std	Z+1, r25	; 0x01
    5470:	a2 83       	std	Z+2, r26	; 0x02
    5472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5474:	ce 01       	movw	r24, r28
    5476:	83 5f       	subi	r24, 0xF3	; 243
    5478:	9e 4f       	sbci	r25, 0xFE	; 254
    547a:	11 e0       	ldi	r17, 0x01	; 1
    547c:	fc 01       	movw	r30, r24
    547e:	60 81       	ld	r22, Z
    5480:	71 81       	ldd	r23, Z+1	; 0x01
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	40 e8       	ldi	r20, 0x80	; 128
    548c:	5f e3       	ldi	r21, 0x3F	; 63
    548e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    5492:	88 23       	and	r24, r24
    5494:	0c f0       	brlt	.+2      	; 0x5498 <main+0x2148>
    5496:	10 e0       	ldi	r17, 0x00	; 0
    5498:	11 23       	and	r17, r17
    549a:	49 f0       	breq	.+18     	; 0x54ae <main+0x215e>
		__ticks = 1;
    549c:	ce 01       	movw	r24, r28
    549e:	8f 5e       	subi	r24, 0xEF	; 239
    54a0:	9e 4f       	sbci	r25, 0xFE	; 254
    54a2:	21 e0       	ldi	r18, 0x01	; 1
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	fc 01       	movw	r30, r24
    54a8:	31 83       	std	Z+1, r19	; 0x01
    54aa:	20 83       	st	Z, r18
    54ac:	74 c0       	rjmp	.+232    	; 0x5596 <main+0x2246>
	else if (__tmp > 65535)
    54ae:	ce 01       	movw	r24, r28
    54b0:	83 5f       	subi	r24, 0xF3	; 243
    54b2:	9e 4f       	sbci	r25, 0xFE	; 254
    54b4:	11 e0       	ldi	r17, 0x01	; 1
    54b6:	fc 01       	movw	r30, r24
    54b8:	60 81       	ld	r22, Z
    54ba:	71 81       	ldd	r23, Z+1	; 0x01
    54bc:	82 81       	ldd	r24, Z+2	; 0x02
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	3f ef       	ldi	r19, 0xFF	; 255
    54c4:	4f e7       	ldi	r20, 0x7F	; 127
    54c6:	57 e4       	ldi	r21, 0x47	; 71
    54c8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    54cc:	18 16       	cp	r1, r24
    54ce:	0c f0       	brlt	.+2      	; 0x54d2 <main+0x2182>
    54d0:	10 e0       	ldi	r17, 0x00	; 0
    54d2:	11 23       	and	r17, r17
    54d4:	09 f4       	brne	.+2      	; 0x54d8 <main+0x2188>
    54d6:	4d c0       	rjmp	.+154    	; 0x5572 <main+0x2222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d8:	ce 01       	movw	r24, r28
    54da:	87 5f       	subi	r24, 0xF7	; 247
    54dc:	9e 4f       	sbci	r25, 0xFE	; 254
    54de:	fc 01       	movw	r30, r24
    54e0:	60 81       	ld	r22, Z
    54e2:	71 81       	ldd	r23, Z+1	; 0x01
    54e4:	82 81       	ldd	r24, Z+2	; 0x02
    54e6:	93 81       	ldd	r25, Z+3	; 0x03
    54e8:	20 e0       	ldi	r18, 0x00	; 0
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	40 e2       	ldi	r20, 0x20	; 32
    54ee:	51 e4       	ldi	r21, 0x41	; 65
    54f0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    54f4:	dc 01       	movw	r26, r24
    54f6:	cb 01       	movw	r24, r22
    54f8:	8e 01       	movw	r16, r28
    54fa:	0f 5e       	subi	r16, 0xEF	; 239
    54fc:	1e 4f       	sbci	r17, 0xFE	; 254
    54fe:	bc 01       	movw	r22, r24
    5500:	cd 01       	movw	r24, r26
    5502:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5506:	dc 01       	movw	r26, r24
    5508:	cb 01       	movw	r24, r22
    550a:	f8 01       	movw	r30, r16
    550c:	91 83       	std	Z+1, r25	; 0x01
    550e:	80 83       	st	Z, r24
    5510:	27 c0       	rjmp	.+78     	; 0x5560 <main+0x2210>
    5512:	ce 01       	movw	r24, r28
    5514:	8d 5e       	subi	r24, 0xED	; 237
    5516:	9e 4f       	sbci	r25, 0xFE	; 254
    5518:	20 e7       	ldi	r18, 0x70	; 112
    551a:	31 e0       	ldi	r19, 0x01	; 1
    551c:	fc 01       	movw	r30, r24
    551e:	31 83       	std	Z+1, r19	; 0x01
    5520:	20 83       	st	Z, r18
    5522:	ce 01       	movw	r24, r28
    5524:	8d 5e       	subi	r24, 0xED	; 237
    5526:	9e 4f       	sbci	r25, 0xFE	; 254
    5528:	fc 01       	movw	r30, r24
    552a:	80 81       	ld	r24, Z
    552c:	91 81       	ldd	r25, Z+1	; 0x01
    552e:	8c 01       	movw	r16, r24
    5530:	c8 01       	movw	r24, r16
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	f1 f7       	brne	.-4      	; 0x5532 <main+0x21e2>
    5536:	8c 01       	movw	r16, r24
    5538:	ce 01       	movw	r24, r28
    553a:	8d 5e       	subi	r24, 0xED	; 237
    553c:	9e 4f       	sbci	r25, 0xFE	; 254
    553e:	fc 01       	movw	r30, r24
    5540:	11 83       	std	Z+1, r17	; 0x01
    5542:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5544:	ce 01       	movw	r24, r28
    5546:	8f 5e       	subi	r24, 0xEF	; 239
    5548:	9e 4f       	sbci	r25, 0xFE	; 254
    554a:	9e 01       	movw	r18, r28
    554c:	2f 5e       	subi	r18, 0xEF	; 239
    554e:	3e 4f       	sbci	r19, 0xFE	; 254
    5550:	f9 01       	movw	r30, r18
    5552:	20 81       	ld	r18, Z
    5554:	31 81       	ldd	r19, Z+1	; 0x01
    5556:	21 50       	subi	r18, 0x01	; 1
    5558:	30 40       	sbci	r19, 0x00	; 0
    555a:	fc 01       	movw	r30, r24
    555c:	31 83       	std	Z+1, r19	; 0x01
    555e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5560:	ce 01       	movw	r24, r28
    5562:	8f 5e       	subi	r24, 0xEF	; 239
    5564:	9e 4f       	sbci	r25, 0xFE	; 254
    5566:	fc 01       	movw	r30, r24
    5568:	80 81       	ld	r24, Z
    556a:	91 81       	ldd	r25, Z+1	; 0x01
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	89 f6       	brne	.-94     	; 0x5512 <main+0x21c2>
    5570:	2f c0       	rjmp	.+94     	; 0x55d0 <main+0x2280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5572:	8e 01       	movw	r16, r28
    5574:	0f 5e       	subi	r16, 0xEF	; 239
    5576:	1e 4f       	sbci	r17, 0xFE	; 254
    5578:	ce 01       	movw	r24, r28
    557a:	83 5f       	subi	r24, 0xF3	; 243
    557c:	9e 4f       	sbci	r25, 0xFE	; 254
    557e:	fc 01       	movw	r30, r24
    5580:	60 81       	ld	r22, Z
    5582:	71 81       	ldd	r23, Z+1	; 0x01
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	93 81       	ldd	r25, Z+3	; 0x03
    5588:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	f8 01       	movw	r30, r16
    5592:	91 83       	std	Z+1, r25	; 0x01
    5594:	80 83       	st	Z, r24
    5596:	ce 01       	movw	r24, r28
    5598:	8b 5e       	subi	r24, 0xEB	; 235
    559a:	9e 4f       	sbci	r25, 0xFE	; 254
    559c:	9e 01       	movw	r18, r28
    559e:	2f 5e       	subi	r18, 0xEF	; 239
    55a0:	3e 4f       	sbci	r19, 0xFE	; 254
    55a2:	f9 01       	movw	r30, r18
    55a4:	20 81       	ld	r18, Z
    55a6:	31 81       	ldd	r19, Z+1	; 0x01
    55a8:	fc 01       	movw	r30, r24
    55aa:	31 83       	std	Z+1, r19	; 0x01
    55ac:	20 83       	st	Z, r18
    55ae:	ce 01       	movw	r24, r28
    55b0:	8b 5e       	subi	r24, 0xEB	; 235
    55b2:	9e 4f       	sbci	r25, 0xFE	; 254
    55b4:	fc 01       	movw	r30, r24
    55b6:	80 81       	ld	r24, Z
    55b8:	91 81       	ldd	r25, Z+1	; 0x01
    55ba:	8c 01       	movw	r16, r24
    55bc:	c8 01       	movw	r24, r16
    55be:	01 97       	sbiw	r24, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <main+0x226e>
    55c2:	8c 01       	movw	r16, r24
    55c4:	ce 01       	movw	r24, r28
    55c6:	8b 5e       	subi	r24, 0xEB	; 235
    55c8:	9e 4f       	sbci	r25, 0xFE	; 254
    55ca:	fc 01       	movw	r30, r24
    55cc:	11 83       	std	Z+1, r17	; 0x01
    55ce:	00 83       	st	Z, r16
						_delay_ms(500);
						left_degrees(85);
    55d0:	85 e5       	ldi	r24, 0x55	; 85
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    55d8:	9e 01       	movw	r18, r28
    55da:	29 5e       	subi	r18, 0xE9	; 233
    55dc:	3e 4f       	sbci	r19, 0xFE	; 254
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	a8 ec       	ldi	r26, 0xC8	; 200
    55e4:	b2 e4       	ldi	r27, 0x42	; 66
    55e6:	f9 01       	movw	r30, r18
    55e8:	80 83       	st	Z, r24
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	a2 83       	std	Z+2, r26	; 0x02
    55ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    55f0:	8e 01       	movw	r16, r28
    55f2:	05 5e       	subi	r16, 0xE5	; 229
    55f4:	1e 4f       	sbci	r17, 0xFE	; 254
    55f6:	ce 01       	movw	r24, r28
    55f8:	89 5e       	subi	r24, 0xE9	; 233
    55fa:	9e 4f       	sbci	r25, 0xFE	; 254
    55fc:	fc 01       	movw	r30, r24
    55fe:	60 81       	ld	r22, Z
    5600:	71 81       	ldd	r23, Z+1	; 0x01
    5602:	82 81       	ldd	r24, Z+2	; 0x02
    5604:	93 81       	ldd	r25, Z+3	; 0x03
    5606:	26 e6       	ldi	r18, 0x66	; 102
    5608:	36 e6       	ldi	r19, 0x66	; 102
    560a:	46 e6       	ldi	r20, 0x66	; 102
    560c:	55 e4       	ldi	r21, 0x45	; 69
    560e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	f8 01       	movw	r30, r16
    5618:	80 83       	st	Z, r24
    561a:	91 83       	std	Z+1, r25	; 0x01
    561c:	a2 83       	std	Z+2, r26	; 0x02
    561e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5620:	ce 01       	movw	r24, r28
    5622:	85 5e       	subi	r24, 0xE5	; 229
    5624:	9e 4f       	sbci	r25, 0xFE	; 254
    5626:	11 e0       	ldi	r17, 0x01	; 1
    5628:	fc 01       	movw	r30, r24
    562a:	60 81       	ld	r22, Z
    562c:	71 81       	ldd	r23, Z+1	; 0x01
    562e:	82 81       	ldd	r24, Z+2	; 0x02
    5630:	93 81       	ldd	r25, Z+3	; 0x03
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	40 e8       	ldi	r20, 0x80	; 128
    5638:	5f e3       	ldi	r21, 0x3F	; 63
    563a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    563e:	88 23       	and	r24, r24
    5640:	0c f0       	brlt	.+2      	; 0x5644 <main+0x22f4>
    5642:	10 e0       	ldi	r17, 0x00	; 0
    5644:	11 23       	and	r17, r17
    5646:	49 f0       	breq	.+18     	; 0x565a <main+0x230a>
		__ticks = 1;
    5648:	ce 01       	movw	r24, r28
    564a:	81 5e       	subi	r24, 0xE1	; 225
    564c:	9e 4f       	sbci	r25, 0xFE	; 254
    564e:	21 e0       	ldi	r18, 0x01	; 1
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	fc 01       	movw	r30, r24
    5654:	31 83       	std	Z+1, r19	; 0x01
    5656:	20 83       	st	Z, r18
    5658:	74 c0       	rjmp	.+232    	; 0x5742 <main+0x23f2>
	else if (__tmp > 65535)
    565a:	ce 01       	movw	r24, r28
    565c:	85 5e       	subi	r24, 0xE5	; 229
    565e:	9e 4f       	sbci	r25, 0xFE	; 254
    5660:	11 e0       	ldi	r17, 0x01	; 1
    5662:	fc 01       	movw	r30, r24
    5664:	60 81       	ld	r22, Z
    5666:	71 81       	ldd	r23, Z+1	; 0x01
    5668:	82 81       	ldd	r24, Z+2	; 0x02
    566a:	93 81       	ldd	r25, Z+3	; 0x03
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	3f ef       	ldi	r19, 0xFF	; 255
    5670:	4f e7       	ldi	r20, 0x7F	; 127
    5672:	57 e4       	ldi	r21, 0x47	; 71
    5674:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5678:	18 16       	cp	r1, r24
    567a:	0c f0       	brlt	.+2      	; 0x567e <main+0x232e>
    567c:	10 e0       	ldi	r17, 0x00	; 0
    567e:	11 23       	and	r17, r17
    5680:	09 f4       	brne	.+2      	; 0x5684 <main+0x2334>
    5682:	4d c0       	rjmp	.+154    	; 0x571e <main+0x23ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5684:	ce 01       	movw	r24, r28
    5686:	89 5e       	subi	r24, 0xE9	; 233
    5688:	9e 4f       	sbci	r25, 0xFE	; 254
    568a:	fc 01       	movw	r30, r24
    568c:	60 81       	ld	r22, Z
    568e:	71 81       	ldd	r23, Z+1	; 0x01
    5690:	82 81       	ldd	r24, Z+2	; 0x02
    5692:	93 81       	ldd	r25, Z+3	; 0x03
    5694:	20 e0       	ldi	r18, 0x00	; 0
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	40 e2       	ldi	r20, 0x20	; 32
    569a:	51 e4       	ldi	r21, 0x41	; 65
    569c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	8e 01       	movw	r16, r28
    56a6:	01 5e       	subi	r16, 0xE1	; 225
    56a8:	1e 4f       	sbci	r17, 0xFE	; 254
    56aa:	bc 01       	movw	r22, r24
    56ac:	cd 01       	movw	r24, r26
    56ae:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    56b2:	dc 01       	movw	r26, r24
    56b4:	cb 01       	movw	r24, r22
    56b6:	f8 01       	movw	r30, r16
    56b8:	91 83       	std	Z+1, r25	; 0x01
    56ba:	80 83       	st	Z, r24
    56bc:	27 c0       	rjmp	.+78     	; 0x570c <main+0x23bc>
    56be:	ce 01       	movw	r24, r28
    56c0:	8f 5d       	subi	r24, 0xDF	; 223
    56c2:	9e 4f       	sbci	r25, 0xFE	; 254
    56c4:	20 e7       	ldi	r18, 0x70	; 112
    56c6:	31 e0       	ldi	r19, 0x01	; 1
    56c8:	fc 01       	movw	r30, r24
    56ca:	31 83       	std	Z+1, r19	; 0x01
    56cc:	20 83       	st	Z, r18
    56ce:	ce 01       	movw	r24, r28
    56d0:	8f 5d       	subi	r24, 0xDF	; 223
    56d2:	9e 4f       	sbci	r25, 0xFE	; 254
    56d4:	fc 01       	movw	r30, r24
    56d6:	80 81       	ld	r24, Z
    56d8:	91 81       	ldd	r25, Z+1	; 0x01
    56da:	8c 01       	movw	r16, r24
    56dc:	c8 01       	movw	r24, r16
    56de:	01 97       	sbiw	r24, 0x01	; 1
    56e0:	f1 f7       	brne	.-4      	; 0x56de <main+0x238e>
    56e2:	8c 01       	movw	r16, r24
    56e4:	ce 01       	movw	r24, r28
    56e6:	8f 5d       	subi	r24, 0xDF	; 223
    56e8:	9e 4f       	sbci	r25, 0xFE	; 254
    56ea:	fc 01       	movw	r30, r24
    56ec:	11 83       	std	Z+1, r17	; 0x01
    56ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f0:	ce 01       	movw	r24, r28
    56f2:	81 5e       	subi	r24, 0xE1	; 225
    56f4:	9e 4f       	sbci	r25, 0xFE	; 254
    56f6:	9e 01       	movw	r18, r28
    56f8:	21 5e       	subi	r18, 0xE1	; 225
    56fa:	3e 4f       	sbci	r19, 0xFE	; 254
    56fc:	f9 01       	movw	r30, r18
    56fe:	20 81       	ld	r18, Z
    5700:	31 81       	ldd	r19, Z+1	; 0x01
    5702:	21 50       	subi	r18, 0x01	; 1
    5704:	30 40       	sbci	r19, 0x00	; 0
    5706:	fc 01       	movw	r30, r24
    5708:	31 83       	std	Z+1, r19	; 0x01
    570a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    570c:	ce 01       	movw	r24, r28
    570e:	81 5e       	subi	r24, 0xE1	; 225
    5710:	9e 4f       	sbci	r25, 0xFE	; 254
    5712:	fc 01       	movw	r30, r24
    5714:	80 81       	ld	r24, Z
    5716:	91 81       	ldd	r25, Z+1	; 0x01
    5718:	00 97       	sbiw	r24, 0x00	; 0
    571a:	89 f6       	brne	.-94     	; 0x56be <main+0x236e>
    571c:	2f c0       	rjmp	.+94     	; 0x577c <main+0x242c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    571e:	8e 01       	movw	r16, r28
    5720:	01 5e       	subi	r16, 0xE1	; 225
    5722:	1e 4f       	sbci	r17, 0xFE	; 254
    5724:	ce 01       	movw	r24, r28
    5726:	85 5e       	subi	r24, 0xE5	; 229
    5728:	9e 4f       	sbci	r25, 0xFE	; 254
    572a:	fc 01       	movw	r30, r24
    572c:	60 81       	ld	r22, Z
    572e:	71 81       	ldd	r23, Z+1	; 0x01
    5730:	82 81       	ldd	r24, Z+2	; 0x02
    5732:	93 81       	ldd	r25, Z+3	; 0x03
    5734:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	f8 01       	movw	r30, r16
    573e:	91 83       	std	Z+1, r25	; 0x01
    5740:	80 83       	st	Z, r24
    5742:	ce 01       	movw	r24, r28
    5744:	8d 5d       	subi	r24, 0xDD	; 221
    5746:	9e 4f       	sbci	r25, 0xFE	; 254
    5748:	9e 01       	movw	r18, r28
    574a:	21 5e       	subi	r18, 0xE1	; 225
    574c:	3e 4f       	sbci	r19, 0xFE	; 254
    574e:	f9 01       	movw	r30, r18
    5750:	20 81       	ld	r18, Z
    5752:	31 81       	ldd	r19, Z+1	; 0x01
    5754:	fc 01       	movw	r30, r24
    5756:	31 83       	std	Z+1, r19	; 0x01
    5758:	20 83       	st	Z, r18
    575a:	ce 01       	movw	r24, r28
    575c:	8d 5d       	subi	r24, 0xDD	; 221
    575e:	9e 4f       	sbci	r25, 0xFE	; 254
    5760:	fc 01       	movw	r30, r24
    5762:	80 81       	ld	r24, Z
    5764:	91 81       	ldd	r25, Z+1	; 0x01
    5766:	8c 01       	movw	r16, r24
    5768:	c8 01       	movw	r24, r16
    576a:	01 97       	sbiw	r24, 0x01	; 1
    576c:	f1 f7       	brne	.-4      	; 0x576a <main+0x241a>
    576e:	8c 01       	movw	r16, r24
    5770:	ce 01       	movw	r24, r28
    5772:	8d 5d       	subi	r24, 0xDD	; 221
    5774:	9e 4f       	sbci	r25, 0xFE	; 254
    5776:	fc 01       	movw	r30, r24
    5778:	11 83       	std	Z+1, r17	; 0x01
    577a:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    577c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    5780:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
					}
					else
					{
						if(compass==7)
    5784:	8b 81       	ldd	r24, Y+3	; 0x03
    5786:	9c 81       	ldd	r25, Y+4	; 0x04
    5788:	87 30       	cpi	r24, 0x07	; 7
    578a:	91 05       	cpc	r25, r1
    578c:	09 f0       	breq	.+2      	; 0x5790 <main+0x2440>
    578e:	e3 c0       	rjmp	.+454    	; 0x5956 <main+0x2606>
						{
							coor[0]=coor[0]-1;
    5790:	80 91 a6 04 	lds	r24, 0x04A6
    5794:	90 91 a7 04 	lds	r25, 0x04A7
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	90 93 a7 04 	sts	0x04A7, r25
    579e:	80 93 a6 04 	sts	0x04A6, r24
							compass=7;
    57a2:	87 e0       	ldi	r24, 0x07	; 7
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	9c 83       	std	Y+4, r25	; 0x04
    57a8:	8b 83       	std	Y+3, r24	; 0x03
    57aa:	9e 01       	movw	r18, r28
    57ac:	2b 5d       	subi	r18, 0xDB	; 219
    57ae:	3e 4f       	sbci	r19, 0xFE	; 254
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	a8 ec       	ldi	r26, 0xC8	; 200
    57b6:	b2 e4       	ldi	r27, 0x42	; 66
    57b8:	f9 01       	movw	r30, r18
    57ba:	80 83       	st	Z, r24
    57bc:	91 83       	std	Z+1, r25	; 0x01
    57be:	a2 83       	std	Z+2, r26	; 0x02
    57c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    57c2:	8e 01       	movw	r16, r28
    57c4:	07 5d       	subi	r16, 0xD7	; 215
    57c6:	1e 4f       	sbci	r17, 0xFE	; 254
    57c8:	ce 01       	movw	r24, r28
    57ca:	8b 5d       	subi	r24, 0xDB	; 219
    57cc:	9e 4f       	sbci	r25, 0xFE	; 254
    57ce:	fc 01       	movw	r30, r24
    57d0:	60 81       	ld	r22, Z
    57d2:	71 81       	ldd	r23, Z+1	; 0x01
    57d4:	82 81       	ldd	r24, Z+2	; 0x02
    57d6:	93 81       	ldd	r25, Z+3	; 0x03
    57d8:	26 e6       	ldi	r18, 0x66	; 102
    57da:	36 e6       	ldi	r19, 0x66	; 102
    57dc:	46 e6       	ldi	r20, 0x66	; 102
    57de:	55 e4       	ldi	r21, 0x45	; 69
    57e0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    57e4:	dc 01       	movw	r26, r24
    57e6:	cb 01       	movw	r24, r22
    57e8:	f8 01       	movw	r30, r16
    57ea:	80 83       	st	Z, r24
    57ec:	91 83       	std	Z+1, r25	; 0x01
    57ee:	a2 83       	std	Z+2, r26	; 0x02
    57f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57f2:	ce 01       	movw	r24, r28
    57f4:	87 5d       	subi	r24, 0xD7	; 215
    57f6:	9e 4f       	sbci	r25, 0xFE	; 254
    57f8:	11 e0       	ldi	r17, 0x01	; 1
    57fa:	fc 01       	movw	r30, r24
    57fc:	60 81       	ld	r22, Z
    57fe:	71 81       	ldd	r23, Z+1	; 0x01
    5800:	82 81       	ldd	r24, Z+2	; 0x02
    5802:	93 81       	ldd	r25, Z+3	; 0x03
    5804:	20 e0       	ldi	r18, 0x00	; 0
    5806:	30 e0       	ldi	r19, 0x00	; 0
    5808:	40 e8       	ldi	r20, 0x80	; 128
    580a:	5f e3       	ldi	r21, 0x3F	; 63
    580c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    5810:	88 23       	and	r24, r24
    5812:	0c f0       	brlt	.+2      	; 0x5816 <main+0x24c6>
    5814:	10 e0       	ldi	r17, 0x00	; 0
    5816:	11 23       	and	r17, r17
    5818:	49 f0       	breq	.+18     	; 0x582c <main+0x24dc>
		__ticks = 1;
    581a:	ce 01       	movw	r24, r28
    581c:	83 5d       	subi	r24, 0xD3	; 211
    581e:	9e 4f       	sbci	r25, 0xFE	; 254
    5820:	21 e0       	ldi	r18, 0x01	; 1
    5822:	30 e0       	ldi	r19, 0x00	; 0
    5824:	fc 01       	movw	r30, r24
    5826:	31 83       	std	Z+1, r19	; 0x01
    5828:	20 83       	st	Z, r18
    582a:	74 c0       	rjmp	.+232    	; 0x5914 <main+0x25c4>
	else if (__tmp > 65535)
    582c:	ce 01       	movw	r24, r28
    582e:	87 5d       	subi	r24, 0xD7	; 215
    5830:	9e 4f       	sbci	r25, 0xFE	; 254
    5832:	11 e0       	ldi	r17, 0x01	; 1
    5834:	fc 01       	movw	r30, r24
    5836:	60 81       	ld	r22, Z
    5838:	71 81       	ldd	r23, Z+1	; 0x01
    583a:	82 81       	ldd	r24, Z+2	; 0x02
    583c:	93 81       	ldd	r25, Z+3	; 0x03
    583e:	20 e0       	ldi	r18, 0x00	; 0
    5840:	3f ef       	ldi	r19, 0xFF	; 255
    5842:	4f e7       	ldi	r20, 0x7F	; 127
    5844:	57 e4       	ldi	r21, 0x47	; 71
    5846:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    584a:	18 16       	cp	r1, r24
    584c:	0c f0       	brlt	.+2      	; 0x5850 <main+0x2500>
    584e:	10 e0       	ldi	r17, 0x00	; 0
    5850:	11 23       	and	r17, r17
    5852:	09 f4       	brne	.+2      	; 0x5856 <main+0x2506>
    5854:	4d c0       	rjmp	.+154    	; 0x58f0 <main+0x25a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5856:	ce 01       	movw	r24, r28
    5858:	8b 5d       	subi	r24, 0xDB	; 219
    585a:	9e 4f       	sbci	r25, 0xFE	; 254
    585c:	fc 01       	movw	r30, r24
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	40 e2       	ldi	r20, 0x20	; 32
    586c:	51 e4       	ldi	r21, 0x41	; 65
    586e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	8e 01       	movw	r16, r28
    5878:	03 5d       	subi	r16, 0xD3	; 211
    587a:	1e 4f       	sbci	r17, 0xFE	; 254
    587c:	bc 01       	movw	r22, r24
    587e:	cd 01       	movw	r24, r26
    5880:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	f8 01       	movw	r30, r16
    588a:	91 83       	std	Z+1, r25	; 0x01
    588c:	80 83       	st	Z, r24
    588e:	27 c0       	rjmp	.+78     	; 0x58de <main+0x258e>
    5890:	ce 01       	movw	r24, r28
    5892:	81 5d       	subi	r24, 0xD1	; 209
    5894:	9e 4f       	sbci	r25, 0xFE	; 254
    5896:	20 e7       	ldi	r18, 0x70	; 112
    5898:	31 e0       	ldi	r19, 0x01	; 1
    589a:	fc 01       	movw	r30, r24
    589c:	31 83       	std	Z+1, r19	; 0x01
    589e:	20 83       	st	Z, r18
    58a0:	ce 01       	movw	r24, r28
    58a2:	81 5d       	subi	r24, 0xD1	; 209
    58a4:	9e 4f       	sbci	r25, 0xFE	; 254
    58a6:	fc 01       	movw	r30, r24
    58a8:	80 81       	ld	r24, Z
    58aa:	91 81       	ldd	r25, Z+1	; 0x01
    58ac:	8c 01       	movw	r16, r24
    58ae:	c8 01       	movw	r24, r16
    58b0:	01 97       	sbiw	r24, 0x01	; 1
    58b2:	f1 f7       	brne	.-4      	; 0x58b0 <main+0x2560>
    58b4:	8c 01       	movw	r16, r24
    58b6:	ce 01       	movw	r24, r28
    58b8:	81 5d       	subi	r24, 0xD1	; 209
    58ba:	9e 4f       	sbci	r25, 0xFE	; 254
    58bc:	fc 01       	movw	r30, r24
    58be:	11 83       	std	Z+1, r17	; 0x01
    58c0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58c2:	ce 01       	movw	r24, r28
    58c4:	83 5d       	subi	r24, 0xD3	; 211
    58c6:	9e 4f       	sbci	r25, 0xFE	; 254
    58c8:	9e 01       	movw	r18, r28
    58ca:	23 5d       	subi	r18, 0xD3	; 211
    58cc:	3e 4f       	sbci	r19, 0xFE	; 254
    58ce:	f9 01       	movw	r30, r18
    58d0:	20 81       	ld	r18, Z
    58d2:	31 81       	ldd	r19, Z+1	; 0x01
    58d4:	21 50       	subi	r18, 0x01	; 1
    58d6:	30 40       	sbci	r19, 0x00	; 0
    58d8:	fc 01       	movw	r30, r24
    58da:	31 83       	std	Z+1, r19	; 0x01
    58dc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58de:	ce 01       	movw	r24, r28
    58e0:	83 5d       	subi	r24, 0xD3	; 211
    58e2:	9e 4f       	sbci	r25, 0xFE	; 254
    58e4:	fc 01       	movw	r30, r24
    58e6:	80 81       	ld	r24, Z
    58e8:	91 81       	ldd	r25, Z+1	; 0x01
    58ea:	00 97       	sbiw	r24, 0x00	; 0
    58ec:	89 f6       	brne	.-94     	; 0x5890 <main+0x2540>
    58ee:	2f c0       	rjmp	.+94     	; 0x594e <main+0x25fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58f0:	8e 01       	movw	r16, r28
    58f2:	03 5d       	subi	r16, 0xD3	; 211
    58f4:	1e 4f       	sbci	r17, 0xFE	; 254
    58f6:	ce 01       	movw	r24, r28
    58f8:	87 5d       	subi	r24, 0xD7	; 215
    58fa:	9e 4f       	sbci	r25, 0xFE	; 254
    58fc:	fc 01       	movw	r30, r24
    58fe:	60 81       	ld	r22, Z
    5900:	71 81       	ldd	r23, Z+1	; 0x01
    5902:	82 81       	ldd	r24, Z+2	; 0x02
    5904:	93 81       	ldd	r25, Z+3	; 0x03
    5906:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	f8 01       	movw	r30, r16
    5910:	91 83       	std	Z+1, r25	; 0x01
    5912:	80 83       	st	Z, r24
    5914:	ce 01       	movw	r24, r28
    5916:	8f 5c       	subi	r24, 0xCF	; 207
    5918:	9e 4f       	sbci	r25, 0xFE	; 254
    591a:	9e 01       	movw	r18, r28
    591c:	23 5d       	subi	r18, 0xD3	; 211
    591e:	3e 4f       	sbci	r19, 0xFE	; 254
    5920:	f9 01       	movw	r30, r18
    5922:	20 81       	ld	r18, Z
    5924:	31 81       	ldd	r19, Z+1	; 0x01
    5926:	fc 01       	movw	r30, r24
    5928:	31 83       	std	Z+1, r19	; 0x01
    592a:	20 83       	st	Z, r18
    592c:	ce 01       	movw	r24, r28
    592e:	8f 5c       	subi	r24, 0xCF	; 207
    5930:	9e 4f       	sbci	r25, 0xFE	; 254
    5932:	fc 01       	movw	r30, r24
    5934:	80 81       	ld	r24, Z
    5936:	91 81       	ldd	r25, Z+1	; 0x01
    5938:	8c 01       	movw	r16, r24
    593a:	c8 01       	movw	r24, r16
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	f1 f7       	brne	.-4      	; 0x593c <main+0x25ec>
    5940:	8c 01       	movw	r16, r24
    5942:	ce 01       	movw	r24, r28
    5944:	8f 5c       	subi	r24, 0xCF	; 207
    5946:	9e 4f       	sbci	r25, 0xFE	; 254
    5948:	fc 01       	movw	r30, r24
    594a:	11 83       	std	Z+1, r17	; 0x01
    594c:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    594e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    5952:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
						}
						else
						{
							if(compass==5)
    5956:	8b 81       	ldd	r24, Y+3	; 0x03
    5958:	9c 81       	ldd	r25, Y+4	; 0x04
    595a:	85 30       	cpi	r24, 0x05	; 5
    595c:	91 05       	cpc	r25, r1
    595e:	09 f0       	breq	.+2      	; 0x5962 <main+0x2612>
    5960:	b9 c1       	rjmp	.+882    	; 0x5cd4 <main+0x2984>
							{
								coor[0]=coor[0]-1;
    5962:	80 91 a6 04 	lds	r24, 0x04A6
    5966:	90 91 a7 04 	lds	r25, 0x04A7
    596a:	01 97       	sbiw	r24, 0x01	; 1
    596c:	90 93 a7 04 	sts	0x04A7, r25
    5970:	80 93 a6 04 	sts	0x04A6, r24
								compass=7;
    5974:	87 e0       	ldi	r24, 0x07	; 7
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	9c 83       	std	Y+4, r25	; 0x04
    597a:	8b 83       	std	Y+3, r24	; 0x03
    597c:	9e 01       	movw	r18, r28
    597e:	2d 5c       	subi	r18, 0xCD	; 205
    5980:	3e 4f       	sbci	r19, 0xFE	; 254
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	aa ef       	ldi	r26, 0xFA	; 250
    5988:	b3 e4       	ldi	r27, 0x43	; 67
    598a:	f9 01       	movw	r30, r18
    598c:	80 83       	st	Z, r24
    598e:	91 83       	std	Z+1, r25	; 0x01
    5990:	a2 83       	std	Z+2, r26	; 0x02
    5992:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5994:	8e 01       	movw	r16, r28
    5996:	09 5c       	subi	r16, 0xC9	; 201
    5998:	1e 4f       	sbci	r17, 0xFE	; 254
    599a:	ce 01       	movw	r24, r28
    599c:	8d 5c       	subi	r24, 0xCD	; 205
    599e:	9e 4f       	sbci	r25, 0xFE	; 254
    59a0:	fc 01       	movw	r30, r24
    59a2:	60 81       	ld	r22, Z
    59a4:	71 81       	ldd	r23, Z+1	; 0x01
    59a6:	82 81       	ldd	r24, Z+2	; 0x02
    59a8:	93 81       	ldd	r25, Z+3	; 0x03
    59aa:	26 e6       	ldi	r18, 0x66	; 102
    59ac:	36 e6       	ldi	r19, 0x66	; 102
    59ae:	46 e6       	ldi	r20, 0x66	; 102
    59b0:	55 e4       	ldi	r21, 0x45	; 69
    59b2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    59b6:	dc 01       	movw	r26, r24
    59b8:	cb 01       	movw	r24, r22
    59ba:	f8 01       	movw	r30, r16
    59bc:	80 83       	st	Z, r24
    59be:	91 83       	std	Z+1, r25	; 0x01
    59c0:	a2 83       	std	Z+2, r26	; 0x02
    59c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59c4:	ce 01       	movw	r24, r28
    59c6:	89 5c       	subi	r24, 0xC9	; 201
    59c8:	9e 4f       	sbci	r25, 0xFE	; 254
    59ca:	11 e0       	ldi	r17, 0x01	; 1
    59cc:	fc 01       	movw	r30, r24
    59ce:	60 81       	ld	r22, Z
    59d0:	71 81       	ldd	r23, Z+1	; 0x01
    59d2:	82 81       	ldd	r24, Z+2	; 0x02
    59d4:	93 81       	ldd	r25, Z+3	; 0x03
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	40 e8       	ldi	r20, 0x80	; 128
    59dc:	5f e3       	ldi	r21, 0x3F	; 63
    59de:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    59e2:	88 23       	and	r24, r24
    59e4:	0c f0       	brlt	.+2      	; 0x59e8 <main+0x2698>
    59e6:	10 e0       	ldi	r17, 0x00	; 0
    59e8:	11 23       	and	r17, r17
    59ea:	49 f0       	breq	.+18     	; 0x59fe <main+0x26ae>
		__ticks = 1;
    59ec:	ce 01       	movw	r24, r28
    59ee:	85 5c       	subi	r24, 0xC5	; 197
    59f0:	9e 4f       	sbci	r25, 0xFE	; 254
    59f2:	21 e0       	ldi	r18, 0x01	; 1
    59f4:	30 e0       	ldi	r19, 0x00	; 0
    59f6:	fc 01       	movw	r30, r24
    59f8:	31 83       	std	Z+1, r19	; 0x01
    59fa:	20 83       	st	Z, r18
    59fc:	74 c0       	rjmp	.+232    	; 0x5ae6 <main+0x2796>
	else if (__tmp > 65535)
    59fe:	ce 01       	movw	r24, r28
    5a00:	89 5c       	subi	r24, 0xC9	; 201
    5a02:	9e 4f       	sbci	r25, 0xFE	; 254
    5a04:	11 e0       	ldi	r17, 0x01	; 1
    5a06:	fc 01       	movw	r30, r24
    5a08:	60 81       	ld	r22, Z
    5a0a:	71 81       	ldd	r23, Z+1	; 0x01
    5a0c:	82 81       	ldd	r24, Z+2	; 0x02
    5a0e:	93 81       	ldd	r25, Z+3	; 0x03
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	3f ef       	ldi	r19, 0xFF	; 255
    5a14:	4f e7       	ldi	r20, 0x7F	; 127
    5a16:	57 e4       	ldi	r21, 0x47	; 71
    5a18:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5a1c:	18 16       	cp	r1, r24
    5a1e:	0c f0       	brlt	.+2      	; 0x5a22 <main+0x26d2>
    5a20:	10 e0       	ldi	r17, 0x00	; 0
    5a22:	11 23       	and	r17, r17
    5a24:	09 f4       	brne	.+2      	; 0x5a28 <main+0x26d8>
    5a26:	4d c0       	rjmp	.+154    	; 0x5ac2 <main+0x2772>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a28:	ce 01       	movw	r24, r28
    5a2a:	8d 5c       	subi	r24, 0xCD	; 205
    5a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    5a2e:	fc 01       	movw	r30, r24
    5a30:	60 81       	ld	r22, Z
    5a32:	71 81       	ldd	r23, Z+1	; 0x01
    5a34:	82 81       	ldd	r24, Z+2	; 0x02
    5a36:	93 81       	ldd	r25, Z+3	; 0x03
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	40 e2       	ldi	r20, 0x20	; 32
    5a3e:	51 e4       	ldi	r21, 0x41	; 65
    5a40:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	8e 01       	movw	r16, r28
    5a4a:	05 5c       	subi	r16, 0xC5	; 197
    5a4c:	1e 4f       	sbci	r17, 0xFE	; 254
    5a4e:	bc 01       	movw	r22, r24
    5a50:	cd 01       	movw	r24, r26
    5a52:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	f8 01       	movw	r30, r16
    5a5c:	91 83       	std	Z+1, r25	; 0x01
    5a5e:	80 83       	st	Z, r24
    5a60:	27 c0       	rjmp	.+78     	; 0x5ab0 <main+0x2760>
    5a62:	ce 01       	movw	r24, r28
    5a64:	83 5c       	subi	r24, 0xC3	; 195
    5a66:	9e 4f       	sbci	r25, 0xFE	; 254
    5a68:	20 e7       	ldi	r18, 0x70	; 112
    5a6a:	31 e0       	ldi	r19, 0x01	; 1
    5a6c:	fc 01       	movw	r30, r24
    5a6e:	31 83       	std	Z+1, r19	; 0x01
    5a70:	20 83       	st	Z, r18
    5a72:	ce 01       	movw	r24, r28
    5a74:	83 5c       	subi	r24, 0xC3	; 195
    5a76:	9e 4f       	sbci	r25, 0xFE	; 254
    5a78:	fc 01       	movw	r30, r24
    5a7a:	80 81       	ld	r24, Z
    5a7c:	91 81       	ldd	r25, Z+1	; 0x01
    5a7e:	8c 01       	movw	r16, r24
    5a80:	c8 01       	movw	r24, r16
    5a82:	01 97       	sbiw	r24, 0x01	; 1
    5a84:	f1 f7       	brne	.-4      	; 0x5a82 <main+0x2732>
    5a86:	8c 01       	movw	r16, r24
    5a88:	ce 01       	movw	r24, r28
    5a8a:	83 5c       	subi	r24, 0xC3	; 195
    5a8c:	9e 4f       	sbci	r25, 0xFE	; 254
    5a8e:	fc 01       	movw	r30, r24
    5a90:	11 83       	std	Z+1, r17	; 0x01
    5a92:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a94:	ce 01       	movw	r24, r28
    5a96:	85 5c       	subi	r24, 0xC5	; 197
    5a98:	9e 4f       	sbci	r25, 0xFE	; 254
    5a9a:	9e 01       	movw	r18, r28
    5a9c:	25 5c       	subi	r18, 0xC5	; 197
    5a9e:	3e 4f       	sbci	r19, 0xFE	; 254
    5aa0:	f9 01       	movw	r30, r18
    5aa2:	20 81       	ld	r18, Z
    5aa4:	31 81       	ldd	r19, Z+1	; 0x01
    5aa6:	21 50       	subi	r18, 0x01	; 1
    5aa8:	30 40       	sbci	r19, 0x00	; 0
    5aaa:	fc 01       	movw	r30, r24
    5aac:	31 83       	std	Z+1, r19	; 0x01
    5aae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab0:	ce 01       	movw	r24, r28
    5ab2:	85 5c       	subi	r24, 0xC5	; 197
    5ab4:	9e 4f       	sbci	r25, 0xFE	; 254
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	80 81       	ld	r24, Z
    5aba:	91 81       	ldd	r25, Z+1	; 0x01
    5abc:	00 97       	sbiw	r24, 0x00	; 0
    5abe:	89 f6       	brne	.-94     	; 0x5a62 <main+0x2712>
    5ac0:	2f c0       	rjmp	.+94     	; 0x5b20 <main+0x27d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ac2:	8e 01       	movw	r16, r28
    5ac4:	05 5c       	subi	r16, 0xC5	; 197
    5ac6:	1e 4f       	sbci	r17, 0xFE	; 254
    5ac8:	ce 01       	movw	r24, r28
    5aca:	89 5c       	subi	r24, 0xC9	; 201
    5acc:	9e 4f       	sbci	r25, 0xFE	; 254
    5ace:	fc 01       	movw	r30, r24
    5ad0:	60 81       	ld	r22, Z
    5ad2:	71 81       	ldd	r23, Z+1	; 0x01
    5ad4:	82 81       	ldd	r24, Z+2	; 0x02
    5ad6:	93 81       	ldd	r25, Z+3	; 0x03
    5ad8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5adc:	dc 01       	movw	r26, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	91 83       	std	Z+1, r25	; 0x01
    5ae4:	80 83       	st	Z, r24
    5ae6:	ce 01       	movw	r24, r28
    5ae8:	81 5c       	subi	r24, 0xC1	; 193
    5aea:	9e 4f       	sbci	r25, 0xFE	; 254
    5aec:	9e 01       	movw	r18, r28
    5aee:	25 5c       	subi	r18, 0xC5	; 197
    5af0:	3e 4f       	sbci	r19, 0xFE	; 254
    5af2:	f9 01       	movw	r30, r18
    5af4:	20 81       	ld	r18, Z
    5af6:	31 81       	ldd	r19, Z+1	; 0x01
    5af8:	fc 01       	movw	r30, r24
    5afa:	31 83       	std	Z+1, r19	; 0x01
    5afc:	20 83       	st	Z, r18
    5afe:	ce 01       	movw	r24, r28
    5b00:	81 5c       	subi	r24, 0xC1	; 193
    5b02:	9e 4f       	sbci	r25, 0xFE	; 254
    5b04:	fc 01       	movw	r30, r24
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	8c 01       	movw	r16, r24
    5b0c:	c8 01       	movw	r24, r16
    5b0e:	01 97       	sbiw	r24, 0x01	; 1
    5b10:	f1 f7       	brne	.-4      	; 0x5b0e <main+0x27be>
    5b12:	8c 01       	movw	r16, r24
    5b14:	ce 01       	movw	r24, r28
    5b16:	81 5c       	subi	r24, 0xC1	; 193
    5b18:	9e 4f       	sbci	r25, 0xFE	; 254
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	11 83       	std	Z+1, r17	; 0x01
    5b1e:	00 83       	st	Z, r16
								_delay_ms(500);
								right_degrees(85);
    5b20:	85 e5       	ldi	r24, 0x55	; 85
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    5b28:	9e 01       	movw	r18, r28
    5b2a:	2f 5b       	subi	r18, 0xBF	; 191
    5b2c:	3e 4f       	sbci	r19, 0xFE	; 254
    5b2e:	80 e0       	ldi	r24, 0x00	; 0
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	a8 ec       	ldi	r26, 0xC8	; 200
    5b34:	b2 e4       	ldi	r27, 0x42	; 66
    5b36:	f9 01       	movw	r30, r18
    5b38:	80 83       	st	Z, r24
    5b3a:	91 83       	std	Z+1, r25	; 0x01
    5b3c:	a2 83       	std	Z+2, r26	; 0x02
    5b3e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5b40:	8e 01       	movw	r16, r28
    5b42:	0b 5b       	subi	r16, 0xBB	; 187
    5b44:	1e 4f       	sbci	r17, 0xFE	; 254
    5b46:	ce 01       	movw	r24, r28
    5b48:	8f 5b       	subi	r24, 0xBF	; 191
    5b4a:	9e 4f       	sbci	r25, 0xFE	; 254
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	60 81       	ld	r22, Z
    5b50:	71 81       	ldd	r23, Z+1	; 0x01
    5b52:	82 81       	ldd	r24, Z+2	; 0x02
    5b54:	93 81       	ldd	r25, Z+3	; 0x03
    5b56:	26 e6       	ldi	r18, 0x66	; 102
    5b58:	36 e6       	ldi	r19, 0x66	; 102
    5b5a:	46 e6       	ldi	r20, 0x66	; 102
    5b5c:	55 e4       	ldi	r21, 0x45	; 69
    5b5e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5b62:	dc 01       	movw	r26, r24
    5b64:	cb 01       	movw	r24, r22
    5b66:	f8 01       	movw	r30, r16
    5b68:	80 83       	st	Z, r24
    5b6a:	91 83       	std	Z+1, r25	; 0x01
    5b6c:	a2 83       	std	Z+2, r26	; 0x02
    5b6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b70:	ce 01       	movw	r24, r28
    5b72:	8b 5b       	subi	r24, 0xBB	; 187
    5b74:	9e 4f       	sbci	r25, 0xFE	; 254
    5b76:	11 e0       	ldi	r17, 0x01	; 1
    5b78:	fc 01       	movw	r30, r24
    5b7a:	60 81       	ld	r22, Z
    5b7c:	71 81       	ldd	r23, Z+1	; 0x01
    5b7e:	82 81       	ldd	r24, Z+2	; 0x02
    5b80:	93 81       	ldd	r25, Z+3	; 0x03
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	40 e8       	ldi	r20, 0x80	; 128
    5b88:	5f e3       	ldi	r21, 0x3F	; 63
    5b8a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    5b8e:	88 23       	and	r24, r24
    5b90:	0c f0       	brlt	.+2      	; 0x5b94 <main+0x2844>
    5b92:	10 e0       	ldi	r17, 0x00	; 0
    5b94:	11 23       	and	r17, r17
    5b96:	49 f0       	breq	.+18     	; 0x5baa <main+0x285a>
		__ticks = 1;
    5b98:	ce 01       	movw	r24, r28
    5b9a:	87 5b       	subi	r24, 0xB7	; 183
    5b9c:	9e 4f       	sbci	r25, 0xFE	; 254
    5b9e:	21 e0       	ldi	r18, 0x01	; 1
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	31 83       	std	Z+1, r19	; 0x01
    5ba6:	20 83       	st	Z, r18
    5ba8:	74 c0       	rjmp	.+232    	; 0x5c92 <main+0x2942>
	else if (__tmp > 65535)
    5baa:	ce 01       	movw	r24, r28
    5bac:	8b 5b       	subi	r24, 0xBB	; 187
    5bae:	9e 4f       	sbci	r25, 0xFE	; 254
    5bb0:	11 e0       	ldi	r17, 0x01	; 1
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	60 81       	ld	r22, Z
    5bb6:	71 81       	ldd	r23, Z+1	; 0x01
    5bb8:	82 81       	ldd	r24, Z+2	; 0x02
    5bba:	93 81       	ldd	r25, Z+3	; 0x03
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	3f ef       	ldi	r19, 0xFF	; 255
    5bc0:	4f e7       	ldi	r20, 0x7F	; 127
    5bc2:	57 e4       	ldi	r21, 0x47	; 71
    5bc4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5bc8:	18 16       	cp	r1, r24
    5bca:	0c f0       	brlt	.+2      	; 0x5bce <main+0x287e>
    5bcc:	10 e0       	ldi	r17, 0x00	; 0
    5bce:	11 23       	and	r17, r17
    5bd0:	09 f4       	brne	.+2      	; 0x5bd4 <main+0x2884>
    5bd2:	4d c0       	rjmp	.+154    	; 0x5c6e <main+0x291e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd4:	ce 01       	movw	r24, r28
    5bd6:	8f 5b       	subi	r24, 0xBF	; 191
    5bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    5bda:	fc 01       	movw	r30, r24
    5bdc:	60 81       	ld	r22, Z
    5bde:	71 81       	ldd	r23, Z+1	; 0x01
    5be0:	82 81       	ldd	r24, Z+2	; 0x02
    5be2:	93 81       	ldd	r25, Z+3	; 0x03
    5be4:	20 e0       	ldi	r18, 0x00	; 0
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	40 e2       	ldi	r20, 0x20	; 32
    5bea:	51 e4       	ldi	r21, 0x41	; 65
    5bec:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	8e 01       	movw	r16, r28
    5bf6:	07 5b       	subi	r16, 0xB7	; 183
    5bf8:	1e 4f       	sbci	r17, 0xFE	; 254
    5bfa:	bc 01       	movw	r22, r24
    5bfc:	cd 01       	movw	r24, r26
    5bfe:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5c02:	dc 01       	movw	r26, r24
    5c04:	cb 01       	movw	r24, r22
    5c06:	f8 01       	movw	r30, r16
    5c08:	91 83       	std	Z+1, r25	; 0x01
    5c0a:	80 83       	st	Z, r24
    5c0c:	27 c0       	rjmp	.+78     	; 0x5c5c <main+0x290c>
    5c0e:	ce 01       	movw	r24, r28
    5c10:	85 5b       	subi	r24, 0xB5	; 181
    5c12:	9e 4f       	sbci	r25, 0xFE	; 254
    5c14:	20 e7       	ldi	r18, 0x70	; 112
    5c16:	31 e0       	ldi	r19, 0x01	; 1
    5c18:	fc 01       	movw	r30, r24
    5c1a:	31 83       	std	Z+1, r19	; 0x01
    5c1c:	20 83       	st	Z, r18
    5c1e:	ce 01       	movw	r24, r28
    5c20:	85 5b       	subi	r24, 0xB5	; 181
    5c22:	9e 4f       	sbci	r25, 0xFE	; 254
    5c24:	fc 01       	movw	r30, r24
    5c26:	80 81       	ld	r24, Z
    5c28:	91 81       	ldd	r25, Z+1	; 0x01
    5c2a:	8c 01       	movw	r16, r24
    5c2c:	c8 01       	movw	r24, r16
    5c2e:	01 97       	sbiw	r24, 0x01	; 1
    5c30:	f1 f7       	brne	.-4      	; 0x5c2e <main+0x28de>
    5c32:	8c 01       	movw	r16, r24
    5c34:	ce 01       	movw	r24, r28
    5c36:	85 5b       	subi	r24, 0xB5	; 181
    5c38:	9e 4f       	sbci	r25, 0xFE	; 254
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	11 83       	std	Z+1, r17	; 0x01
    5c3e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c40:	ce 01       	movw	r24, r28
    5c42:	87 5b       	subi	r24, 0xB7	; 183
    5c44:	9e 4f       	sbci	r25, 0xFE	; 254
    5c46:	9e 01       	movw	r18, r28
    5c48:	27 5b       	subi	r18, 0xB7	; 183
    5c4a:	3e 4f       	sbci	r19, 0xFE	; 254
    5c4c:	f9 01       	movw	r30, r18
    5c4e:	20 81       	ld	r18, Z
    5c50:	31 81       	ldd	r19, Z+1	; 0x01
    5c52:	21 50       	subi	r18, 0x01	; 1
    5c54:	30 40       	sbci	r19, 0x00	; 0
    5c56:	fc 01       	movw	r30, r24
    5c58:	31 83       	std	Z+1, r19	; 0x01
    5c5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c5c:	ce 01       	movw	r24, r28
    5c5e:	87 5b       	subi	r24, 0xB7	; 183
    5c60:	9e 4f       	sbci	r25, 0xFE	; 254
    5c62:	fc 01       	movw	r30, r24
    5c64:	80 81       	ld	r24, Z
    5c66:	91 81       	ldd	r25, Z+1	; 0x01
    5c68:	00 97       	sbiw	r24, 0x00	; 0
    5c6a:	89 f6       	brne	.-94     	; 0x5c0e <main+0x28be>
    5c6c:	2f c0       	rjmp	.+94     	; 0x5ccc <main+0x297c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c6e:	8e 01       	movw	r16, r28
    5c70:	07 5b       	subi	r16, 0xB7	; 183
    5c72:	1e 4f       	sbci	r17, 0xFE	; 254
    5c74:	ce 01       	movw	r24, r28
    5c76:	8b 5b       	subi	r24, 0xBB	; 187
    5c78:	9e 4f       	sbci	r25, 0xFE	; 254
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	60 81       	ld	r22, Z
    5c7e:	71 81       	ldd	r23, Z+1	; 0x01
    5c80:	82 81       	ldd	r24, Z+2	; 0x02
    5c82:	93 81       	ldd	r25, Z+3	; 0x03
    5c84:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	f8 01       	movw	r30, r16
    5c8e:	91 83       	std	Z+1, r25	; 0x01
    5c90:	80 83       	st	Z, r24
    5c92:	ce 01       	movw	r24, r28
    5c94:	83 5b       	subi	r24, 0xB3	; 179
    5c96:	9e 4f       	sbci	r25, 0xFE	; 254
    5c98:	9e 01       	movw	r18, r28
    5c9a:	27 5b       	subi	r18, 0xB7	; 183
    5c9c:	3e 4f       	sbci	r19, 0xFE	; 254
    5c9e:	f9 01       	movw	r30, r18
    5ca0:	20 81       	ld	r18, Z
    5ca2:	31 81       	ldd	r19, Z+1	; 0x01
    5ca4:	fc 01       	movw	r30, r24
    5ca6:	31 83       	std	Z+1, r19	; 0x01
    5ca8:	20 83       	st	Z, r18
    5caa:	ce 01       	movw	r24, r28
    5cac:	83 5b       	subi	r24, 0xB3	; 179
    5cae:	9e 4f       	sbci	r25, 0xFE	; 254
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	80 81       	ld	r24, Z
    5cb4:	91 81       	ldd	r25, Z+1	; 0x01
    5cb6:	8c 01       	movw	r16, r24
    5cb8:	c8 01       	movw	r24, r16
    5cba:	01 97       	sbiw	r24, 0x01	; 1
    5cbc:	f1 f7       	brne	.-4      	; 0x5cba <main+0x296a>
    5cbe:	8c 01       	movw	r16, r24
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	83 5b       	subi	r24, 0xB3	; 179
    5cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    5cc6:	fc 01       	movw	r30, r24
    5cc8:	11 83       	std	Z+1, r17	; 0x01
    5cca:	00 83       	st	Z, r16
								_delay_ms(100);
								linefollwer();
    5ccc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    5cd0:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
							}
							else
							{
								if(compass==6)
    5cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    5cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd8:	86 30       	cpi	r24, 0x06	; 6
    5cda:	91 05       	cpc	r25, r1
    5cdc:	11 f0       	breq	.+4      	; 0x5ce2 <main+0x2992>
    5cde:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <main+0x3960>
								{
									coor[0]=coor[0]-1;
    5ce2:	80 91 a6 04 	lds	r24, 0x04A6
    5ce6:	90 91 a7 04 	lds	r25, 0x04A7
    5cea:	01 97       	sbiw	r24, 0x01	; 1
    5cec:	90 93 a7 04 	sts	0x04A7, r25
    5cf0:	80 93 a6 04 	sts	0x04A6, r24
									compass=7;
    5cf4:	87 e0       	ldi	r24, 0x07	; 7
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	9c 83       	std	Y+4, r25	; 0x04
    5cfa:	8b 83       	std	Y+3, r24	; 0x03
    5cfc:	9e 01       	movw	r18, r28
    5cfe:	21 5b       	subi	r18, 0xB1	; 177
    5d00:	3e 4f       	sbci	r19, 0xFE	; 254
    5d02:	80 e0       	ldi	r24, 0x00	; 0
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	aa ef       	ldi	r26, 0xFA	; 250
    5d08:	b3 e4       	ldi	r27, 0x43	; 67
    5d0a:	f9 01       	movw	r30, r18
    5d0c:	80 83       	st	Z, r24
    5d0e:	91 83       	std	Z+1, r25	; 0x01
    5d10:	a2 83       	std	Z+2, r26	; 0x02
    5d12:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d14:	8e 01       	movw	r16, r28
    5d16:	0d 5a       	subi	r16, 0xAD	; 173
    5d18:	1e 4f       	sbci	r17, 0xFE	; 254
    5d1a:	ce 01       	movw	r24, r28
    5d1c:	81 5b       	subi	r24, 0xB1	; 177
    5d1e:	9e 4f       	sbci	r25, 0xFE	; 254
    5d20:	fc 01       	movw	r30, r24
    5d22:	60 81       	ld	r22, Z
    5d24:	71 81       	ldd	r23, Z+1	; 0x01
    5d26:	82 81       	ldd	r24, Z+2	; 0x02
    5d28:	93 81       	ldd	r25, Z+3	; 0x03
    5d2a:	26 e6       	ldi	r18, 0x66	; 102
    5d2c:	36 e6       	ldi	r19, 0x66	; 102
    5d2e:	46 e6       	ldi	r20, 0x66	; 102
    5d30:	55 e4       	ldi	r21, 0x45	; 69
    5d32:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	f8 01       	movw	r30, r16
    5d3c:	80 83       	st	Z, r24
    5d3e:	91 83       	std	Z+1, r25	; 0x01
    5d40:	a2 83       	std	Z+2, r26	; 0x02
    5d42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d44:	ce 01       	movw	r24, r28
    5d46:	8d 5a       	subi	r24, 0xAD	; 173
    5d48:	9e 4f       	sbci	r25, 0xFE	; 254
    5d4a:	11 e0       	ldi	r17, 0x01	; 1
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	60 81       	ld	r22, Z
    5d50:	71 81       	ldd	r23, Z+1	; 0x01
    5d52:	82 81       	ldd	r24, Z+2	; 0x02
    5d54:	93 81       	ldd	r25, Z+3	; 0x03
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	40 e8       	ldi	r20, 0x80	; 128
    5d5c:	5f e3       	ldi	r21, 0x3F	; 63
    5d5e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    5d62:	88 23       	and	r24, r24
    5d64:	0c f0       	brlt	.+2      	; 0x5d68 <main+0x2a18>
    5d66:	10 e0       	ldi	r17, 0x00	; 0
    5d68:	11 23       	and	r17, r17
    5d6a:	49 f0       	breq	.+18     	; 0x5d7e <main+0x2a2e>
		__ticks = 1;
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	89 5a       	subi	r24, 0xA9	; 169
    5d70:	9e 4f       	sbci	r25, 0xFE	; 254
    5d72:	21 e0       	ldi	r18, 0x01	; 1
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	fc 01       	movw	r30, r24
    5d78:	31 83       	std	Z+1, r19	; 0x01
    5d7a:	20 83       	st	Z, r18
    5d7c:	74 c0       	rjmp	.+232    	; 0x5e66 <main+0x2b16>
	else if (__tmp > 65535)
    5d7e:	ce 01       	movw	r24, r28
    5d80:	8d 5a       	subi	r24, 0xAD	; 173
    5d82:	9e 4f       	sbci	r25, 0xFE	; 254
    5d84:	11 e0       	ldi	r17, 0x01	; 1
    5d86:	fc 01       	movw	r30, r24
    5d88:	60 81       	ld	r22, Z
    5d8a:	71 81       	ldd	r23, Z+1	; 0x01
    5d8c:	82 81       	ldd	r24, Z+2	; 0x02
    5d8e:	93 81       	ldd	r25, Z+3	; 0x03
    5d90:	20 e0       	ldi	r18, 0x00	; 0
    5d92:	3f ef       	ldi	r19, 0xFF	; 255
    5d94:	4f e7       	ldi	r20, 0x7F	; 127
    5d96:	57 e4       	ldi	r21, 0x47	; 71
    5d98:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5d9c:	18 16       	cp	r1, r24
    5d9e:	0c f0       	brlt	.+2      	; 0x5da2 <main+0x2a52>
    5da0:	10 e0       	ldi	r17, 0x00	; 0
    5da2:	11 23       	and	r17, r17
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <main+0x2a58>
    5da6:	4d c0       	rjmp	.+154    	; 0x5e42 <main+0x2af2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5da8:	ce 01       	movw	r24, r28
    5daa:	81 5b       	subi	r24, 0xB1	; 177
    5dac:	9e 4f       	sbci	r25, 0xFE	; 254
    5dae:	fc 01       	movw	r30, r24
    5db0:	60 81       	ld	r22, Z
    5db2:	71 81       	ldd	r23, Z+1	; 0x01
    5db4:	82 81       	ldd	r24, Z+2	; 0x02
    5db6:	93 81       	ldd	r25, Z+3	; 0x03
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	40 e2       	ldi	r20, 0x20	; 32
    5dbe:	51 e4       	ldi	r21, 0x41	; 65
    5dc0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	cb 01       	movw	r24, r22
    5dc8:	8e 01       	movw	r16, r28
    5dca:	09 5a       	subi	r16, 0xA9	; 169
    5dcc:	1e 4f       	sbci	r17, 0xFE	; 254
    5dce:	bc 01       	movw	r22, r24
    5dd0:	cd 01       	movw	r24, r26
    5dd2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5dd6:	dc 01       	movw	r26, r24
    5dd8:	cb 01       	movw	r24, r22
    5dda:	f8 01       	movw	r30, r16
    5ddc:	91 83       	std	Z+1, r25	; 0x01
    5dde:	80 83       	st	Z, r24
    5de0:	27 c0       	rjmp	.+78     	; 0x5e30 <main+0x2ae0>
    5de2:	ce 01       	movw	r24, r28
    5de4:	87 5a       	subi	r24, 0xA7	; 167
    5de6:	9e 4f       	sbci	r25, 0xFE	; 254
    5de8:	20 e7       	ldi	r18, 0x70	; 112
    5dea:	31 e0       	ldi	r19, 0x01	; 1
    5dec:	fc 01       	movw	r30, r24
    5dee:	31 83       	std	Z+1, r19	; 0x01
    5df0:	20 83       	st	Z, r18
    5df2:	ce 01       	movw	r24, r28
    5df4:	87 5a       	subi	r24, 0xA7	; 167
    5df6:	9e 4f       	sbci	r25, 0xFE	; 254
    5df8:	fc 01       	movw	r30, r24
    5dfa:	80 81       	ld	r24, Z
    5dfc:	91 81       	ldd	r25, Z+1	; 0x01
    5dfe:	8c 01       	movw	r16, r24
    5e00:	c8 01       	movw	r24, r16
    5e02:	01 97       	sbiw	r24, 0x01	; 1
    5e04:	f1 f7       	brne	.-4      	; 0x5e02 <main+0x2ab2>
    5e06:	8c 01       	movw	r16, r24
    5e08:	ce 01       	movw	r24, r28
    5e0a:	87 5a       	subi	r24, 0xA7	; 167
    5e0c:	9e 4f       	sbci	r25, 0xFE	; 254
    5e0e:	fc 01       	movw	r30, r24
    5e10:	11 83       	std	Z+1, r17	; 0x01
    5e12:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e14:	ce 01       	movw	r24, r28
    5e16:	89 5a       	subi	r24, 0xA9	; 169
    5e18:	9e 4f       	sbci	r25, 0xFE	; 254
    5e1a:	9e 01       	movw	r18, r28
    5e1c:	29 5a       	subi	r18, 0xA9	; 169
    5e1e:	3e 4f       	sbci	r19, 0xFE	; 254
    5e20:	f9 01       	movw	r30, r18
    5e22:	20 81       	ld	r18, Z
    5e24:	31 81       	ldd	r19, Z+1	; 0x01
    5e26:	21 50       	subi	r18, 0x01	; 1
    5e28:	30 40       	sbci	r19, 0x00	; 0
    5e2a:	fc 01       	movw	r30, r24
    5e2c:	31 83       	std	Z+1, r19	; 0x01
    5e2e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e30:	ce 01       	movw	r24, r28
    5e32:	89 5a       	subi	r24, 0xA9	; 169
    5e34:	9e 4f       	sbci	r25, 0xFE	; 254
    5e36:	fc 01       	movw	r30, r24
    5e38:	80 81       	ld	r24, Z
    5e3a:	91 81       	ldd	r25, Z+1	; 0x01
    5e3c:	00 97       	sbiw	r24, 0x00	; 0
    5e3e:	89 f6       	brne	.-94     	; 0x5de2 <main+0x2a92>
    5e40:	2f c0       	rjmp	.+94     	; 0x5ea0 <main+0x2b50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e42:	8e 01       	movw	r16, r28
    5e44:	09 5a       	subi	r16, 0xA9	; 169
    5e46:	1e 4f       	sbci	r17, 0xFE	; 254
    5e48:	ce 01       	movw	r24, r28
    5e4a:	8d 5a       	subi	r24, 0xAD	; 173
    5e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    5e4e:	fc 01       	movw	r30, r24
    5e50:	60 81       	ld	r22, Z
    5e52:	71 81       	ldd	r23, Z+1	; 0x01
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	93 81       	ldd	r25, Z+3	; 0x03
    5e58:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5e5c:	dc 01       	movw	r26, r24
    5e5e:	cb 01       	movw	r24, r22
    5e60:	f8 01       	movw	r30, r16
    5e62:	91 83       	std	Z+1, r25	; 0x01
    5e64:	80 83       	st	Z, r24
    5e66:	ce 01       	movw	r24, r28
    5e68:	85 5a       	subi	r24, 0xA5	; 165
    5e6a:	9e 4f       	sbci	r25, 0xFE	; 254
    5e6c:	9e 01       	movw	r18, r28
    5e6e:	29 5a       	subi	r18, 0xA9	; 169
    5e70:	3e 4f       	sbci	r19, 0xFE	; 254
    5e72:	f9 01       	movw	r30, r18
    5e74:	20 81       	ld	r18, Z
    5e76:	31 81       	ldd	r19, Z+1	; 0x01
    5e78:	fc 01       	movw	r30, r24
    5e7a:	31 83       	std	Z+1, r19	; 0x01
    5e7c:	20 83       	st	Z, r18
    5e7e:	ce 01       	movw	r24, r28
    5e80:	85 5a       	subi	r24, 0xA5	; 165
    5e82:	9e 4f       	sbci	r25, 0xFE	; 254
    5e84:	fc 01       	movw	r30, r24
    5e86:	80 81       	ld	r24, Z
    5e88:	91 81       	ldd	r25, Z+1	; 0x01
    5e8a:	8c 01       	movw	r16, r24
    5e8c:	c8 01       	movw	r24, r16
    5e8e:	01 97       	sbiw	r24, 0x01	; 1
    5e90:	f1 f7       	brne	.-4      	; 0x5e8e <main+0x2b3e>
    5e92:	8c 01       	movw	r16, r24
    5e94:	ce 01       	movw	r24, r28
    5e96:	85 5a       	subi	r24, 0xA5	; 165
    5e98:	9e 4f       	sbci	r25, 0xFE	; 254
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	11 83       	std	Z+1, r17	; 0x01
    5e9e:	00 83       	st	Z, r16
									_delay_ms(500);
									right_degrees(185);
    5ea0:	89 eb       	ldi	r24, 0xB9	; 185
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    5ea8:	9e 01       	movw	r18, r28
    5eaa:	23 5a       	subi	r18, 0xA3	; 163
    5eac:	3e 4f       	sbci	r19, 0xFE	; 254
    5eae:	80 e0       	ldi	r24, 0x00	; 0
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	a8 ec       	ldi	r26, 0xC8	; 200
    5eb4:	b2 e4       	ldi	r27, 0x42	; 66
    5eb6:	f9 01       	movw	r30, r18
    5eb8:	80 83       	st	Z, r24
    5eba:	91 83       	std	Z+1, r25	; 0x01
    5ebc:	a2 83       	std	Z+2, r26	; 0x02
    5ebe:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5ec0:	8e 01       	movw	r16, r28
    5ec2:	0f 59       	subi	r16, 0x9F	; 159
    5ec4:	1e 4f       	sbci	r17, 0xFE	; 254
    5ec6:	ce 01       	movw	r24, r28
    5ec8:	83 5a       	subi	r24, 0xA3	; 163
    5eca:	9e 4f       	sbci	r25, 0xFE	; 254
    5ecc:	fc 01       	movw	r30, r24
    5ece:	60 81       	ld	r22, Z
    5ed0:	71 81       	ldd	r23, Z+1	; 0x01
    5ed2:	82 81       	ldd	r24, Z+2	; 0x02
    5ed4:	93 81       	ldd	r25, Z+3	; 0x03
    5ed6:	26 e6       	ldi	r18, 0x66	; 102
    5ed8:	36 e6       	ldi	r19, 0x66	; 102
    5eda:	46 e6       	ldi	r20, 0x66	; 102
    5edc:	55 e4       	ldi	r21, 0x45	; 69
    5ede:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	f8 01       	movw	r30, r16
    5ee8:	80 83       	st	Z, r24
    5eea:	91 83       	std	Z+1, r25	; 0x01
    5eec:	a2 83       	std	Z+2, r26	; 0x02
    5eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ef0:	ce 01       	movw	r24, r28
    5ef2:	8f 59       	subi	r24, 0x9F	; 159
    5ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    5ef6:	11 e0       	ldi	r17, 0x01	; 1
    5ef8:	fc 01       	movw	r30, r24
    5efa:	60 81       	ld	r22, Z
    5efc:	71 81       	ldd	r23, Z+1	; 0x01
    5efe:	82 81       	ldd	r24, Z+2	; 0x02
    5f00:	93 81       	ldd	r25, Z+3	; 0x03
    5f02:	20 e0       	ldi	r18, 0x00	; 0
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	40 e8       	ldi	r20, 0x80	; 128
    5f08:	5f e3       	ldi	r21, 0x3F	; 63
    5f0a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    5f0e:	88 23       	and	r24, r24
    5f10:	0c f0       	brlt	.+2      	; 0x5f14 <main+0x2bc4>
    5f12:	10 e0       	ldi	r17, 0x00	; 0
    5f14:	11 23       	and	r17, r17
    5f16:	49 f0       	breq	.+18     	; 0x5f2a <main+0x2bda>
		__ticks = 1;
    5f18:	ce 01       	movw	r24, r28
    5f1a:	8b 59       	subi	r24, 0x9B	; 155
    5f1c:	9e 4f       	sbci	r25, 0xFE	; 254
    5f1e:	21 e0       	ldi	r18, 0x01	; 1
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	fc 01       	movw	r30, r24
    5f24:	31 83       	std	Z+1, r19	; 0x01
    5f26:	20 83       	st	Z, r18
    5f28:	74 c0       	rjmp	.+232    	; 0x6012 <main+0x2cc2>
	else if (__tmp > 65535)
    5f2a:	ce 01       	movw	r24, r28
    5f2c:	8f 59       	subi	r24, 0x9F	; 159
    5f2e:	9e 4f       	sbci	r25, 0xFE	; 254
    5f30:	11 e0       	ldi	r17, 0x01	; 1
    5f32:	fc 01       	movw	r30, r24
    5f34:	60 81       	ld	r22, Z
    5f36:	71 81       	ldd	r23, Z+1	; 0x01
    5f38:	82 81       	ldd	r24, Z+2	; 0x02
    5f3a:	93 81       	ldd	r25, Z+3	; 0x03
    5f3c:	20 e0       	ldi	r18, 0x00	; 0
    5f3e:	3f ef       	ldi	r19, 0xFF	; 255
    5f40:	4f e7       	ldi	r20, 0x7F	; 127
    5f42:	57 e4       	ldi	r21, 0x47	; 71
    5f44:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    5f48:	18 16       	cp	r1, r24
    5f4a:	0c f0       	brlt	.+2      	; 0x5f4e <main+0x2bfe>
    5f4c:	10 e0       	ldi	r17, 0x00	; 0
    5f4e:	11 23       	and	r17, r17
    5f50:	09 f4       	brne	.+2      	; 0x5f54 <main+0x2c04>
    5f52:	4d c0       	rjmp	.+154    	; 0x5fee <main+0x2c9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f54:	ce 01       	movw	r24, r28
    5f56:	83 5a       	subi	r24, 0xA3	; 163
    5f58:	9e 4f       	sbci	r25, 0xFE	; 254
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	60 81       	ld	r22, Z
    5f5e:	71 81       	ldd	r23, Z+1	; 0x01
    5f60:	82 81       	ldd	r24, Z+2	; 0x02
    5f62:	93 81       	ldd	r25, Z+3	; 0x03
    5f64:	20 e0       	ldi	r18, 0x00	; 0
    5f66:	30 e0       	ldi	r19, 0x00	; 0
    5f68:	40 e2       	ldi	r20, 0x20	; 32
    5f6a:	51 e4       	ldi	r21, 0x41	; 65
    5f6c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    5f70:	dc 01       	movw	r26, r24
    5f72:	cb 01       	movw	r24, r22
    5f74:	8e 01       	movw	r16, r28
    5f76:	0b 59       	subi	r16, 0x9B	; 155
    5f78:	1e 4f       	sbci	r17, 0xFE	; 254
    5f7a:	bc 01       	movw	r22, r24
    5f7c:	cd 01       	movw	r24, r26
    5f7e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    5f82:	dc 01       	movw	r26, r24
    5f84:	cb 01       	movw	r24, r22
    5f86:	f8 01       	movw	r30, r16
    5f88:	91 83       	std	Z+1, r25	; 0x01
    5f8a:	80 83       	st	Z, r24
    5f8c:	27 c0       	rjmp	.+78     	; 0x5fdc <main+0x2c8c>
    5f8e:	ce 01       	movw	r24, r28
    5f90:	89 59       	subi	r24, 0x99	; 153
    5f92:	9e 4f       	sbci	r25, 0xFE	; 254
    5f94:	20 e7       	ldi	r18, 0x70	; 112
    5f96:	31 e0       	ldi	r19, 0x01	; 1
    5f98:	fc 01       	movw	r30, r24
    5f9a:	31 83       	std	Z+1, r19	; 0x01
    5f9c:	20 83       	st	Z, r18
    5f9e:	ce 01       	movw	r24, r28
    5fa0:	89 59       	subi	r24, 0x99	; 153
    5fa2:	9e 4f       	sbci	r25, 0xFE	; 254
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	80 81       	ld	r24, Z
    5fa8:	91 81       	ldd	r25, Z+1	; 0x01
    5faa:	8c 01       	movw	r16, r24
    5fac:	c8 01       	movw	r24, r16
    5fae:	01 97       	sbiw	r24, 0x01	; 1
    5fb0:	f1 f7       	brne	.-4      	; 0x5fae <main+0x2c5e>
    5fb2:	8c 01       	movw	r16, r24
    5fb4:	ce 01       	movw	r24, r28
    5fb6:	89 59       	subi	r24, 0x99	; 153
    5fb8:	9e 4f       	sbci	r25, 0xFE	; 254
    5fba:	fc 01       	movw	r30, r24
    5fbc:	11 83       	std	Z+1, r17	; 0x01
    5fbe:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fc0:	ce 01       	movw	r24, r28
    5fc2:	8b 59       	subi	r24, 0x9B	; 155
    5fc4:	9e 4f       	sbci	r25, 0xFE	; 254
    5fc6:	9e 01       	movw	r18, r28
    5fc8:	2b 59       	subi	r18, 0x9B	; 155
    5fca:	3e 4f       	sbci	r19, 0xFE	; 254
    5fcc:	f9 01       	movw	r30, r18
    5fce:	20 81       	ld	r18, Z
    5fd0:	31 81       	ldd	r19, Z+1	; 0x01
    5fd2:	21 50       	subi	r18, 0x01	; 1
    5fd4:	30 40       	sbci	r19, 0x00	; 0
    5fd6:	fc 01       	movw	r30, r24
    5fd8:	31 83       	std	Z+1, r19	; 0x01
    5fda:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fdc:	ce 01       	movw	r24, r28
    5fde:	8b 59       	subi	r24, 0x9B	; 155
    5fe0:	9e 4f       	sbci	r25, 0xFE	; 254
    5fe2:	fc 01       	movw	r30, r24
    5fe4:	80 81       	ld	r24, Z
    5fe6:	91 81       	ldd	r25, Z+1	; 0x01
    5fe8:	00 97       	sbiw	r24, 0x00	; 0
    5fea:	89 f6       	brne	.-94     	; 0x5f8e <main+0x2c3e>
    5fec:	2f c0       	rjmp	.+94     	; 0x604c <main+0x2cfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fee:	8e 01       	movw	r16, r28
    5ff0:	0b 59       	subi	r16, 0x9B	; 155
    5ff2:	1e 4f       	sbci	r17, 0xFE	; 254
    5ff4:	ce 01       	movw	r24, r28
    5ff6:	8f 59       	subi	r24, 0x9F	; 159
    5ff8:	9e 4f       	sbci	r25, 0xFE	; 254
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	60 81       	ld	r22, Z
    5ffe:	71 81       	ldd	r23, Z+1	; 0x01
    6000:	82 81       	ldd	r24, Z+2	; 0x02
    6002:	93 81       	ldd	r25, Z+3	; 0x03
    6004:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6008:	dc 01       	movw	r26, r24
    600a:	cb 01       	movw	r24, r22
    600c:	f8 01       	movw	r30, r16
    600e:	91 83       	std	Z+1, r25	; 0x01
    6010:	80 83       	st	Z, r24
    6012:	ce 01       	movw	r24, r28
    6014:	87 59       	subi	r24, 0x97	; 151
    6016:	9e 4f       	sbci	r25, 0xFE	; 254
    6018:	9e 01       	movw	r18, r28
    601a:	2b 59       	subi	r18, 0x9B	; 155
    601c:	3e 4f       	sbci	r19, 0xFE	; 254
    601e:	f9 01       	movw	r30, r18
    6020:	20 81       	ld	r18, Z
    6022:	31 81       	ldd	r19, Z+1	; 0x01
    6024:	fc 01       	movw	r30, r24
    6026:	31 83       	std	Z+1, r19	; 0x01
    6028:	20 83       	st	Z, r18
    602a:	ce 01       	movw	r24, r28
    602c:	87 59       	subi	r24, 0x97	; 151
    602e:	9e 4f       	sbci	r25, 0xFE	; 254
    6030:	fc 01       	movw	r30, r24
    6032:	80 81       	ld	r24, Z
    6034:	91 81       	ldd	r25, Z+1	; 0x01
    6036:	8c 01       	movw	r16, r24
    6038:	c8 01       	movw	r24, r16
    603a:	01 97       	sbiw	r24, 0x01	; 1
    603c:	f1 f7       	brne	.-4      	; 0x603a <main+0x2cea>
    603e:	8c 01       	movw	r16, r24
    6040:	ce 01       	movw	r24, r28
    6042:	87 59       	subi	r24, 0x97	; 151
    6044:	9e 4f       	sbci	r25, 0xFE	; 254
    6046:	fc 01       	movw	r30, r24
    6048:	11 83       	std	Z+1, r17	; 0x01
    604a:	00 83       	st	Z, r16
									_delay_ms(100);
									linefollwer();
    604c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    6050:	2f c6       	rjmp	.+3166   	; 0x6cb0 <main+0x3960>
						}
					}
				}
				else
				{
					if(final[1]<coor[1])
    6052:	ce 01       	movw	r24, r28
    6054:	8d 52       	subi	r24, 0x2D	; 45
    6056:	99 4f       	sbci	r25, 0xF9	; 249
    6058:	fc 01       	movw	r30, r24
    605a:	22 81       	ldd	r18, Z+2	; 0x02
    605c:	33 81       	ldd	r19, Z+3	; 0x03
    605e:	80 91 a8 04 	lds	r24, 0x04A8
    6062:	90 91 a9 04 	lds	r25, 0x04A9
    6066:	28 17       	cp	r18, r24
    6068:	39 07       	cpc	r19, r25
    606a:	0c f0       	brlt	.+2      	; 0x606e <main+0x2d1e>
    606c:	21 c6       	rjmp	.+3138   	; 0x6cb0 <main+0x3960>
					{
						if(compass==6)
    606e:	8b 81       	ldd	r24, Y+3	; 0x03
    6070:	9c 81       	ldd	r25, Y+4	; 0x04
    6072:	86 30       	cpi	r24, 0x06	; 6
    6074:	91 05       	cpc	r25, r1
    6076:	09 f0       	breq	.+2      	; 0x607a <main+0x2d2a>
    6078:	b8 c1       	rjmp	.+880    	; 0x63ea <main+0x309a>
						{
							coor[1]=coor[1]-1;
    607a:	80 91 a8 04 	lds	r24, 0x04A8
    607e:	90 91 a9 04 	lds	r25, 0x04A9
    6082:	01 97       	sbiw	r24, 0x01	; 1
    6084:	90 93 a9 04 	sts	0x04A9, r25
    6088:	80 93 a8 04 	sts	0x04A8, r24
							compass=5;
    608c:	85 e0       	ldi	r24, 0x05	; 5
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	9c 83       	std	Y+4, r25	; 0x04
    6092:	8b 83       	std	Y+3, r24	; 0x03
    6094:	9e 01       	movw	r18, r28
    6096:	25 59       	subi	r18, 0x95	; 149
    6098:	3e 4f       	sbci	r19, 0xFE	; 254
    609a:	80 e0       	ldi	r24, 0x00	; 0
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	aa ef       	ldi	r26, 0xFA	; 250
    60a0:	b3 e4       	ldi	r27, 0x43	; 67
    60a2:	f9 01       	movw	r30, r18
    60a4:	80 83       	st	Z, r24
    60a6:	91 83       	std	Z+1, r25	; 0x01
    60a8:	a2 83       	std	Z+2, r26	; 0x02
    60aa:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    60ac:	8e 01       	movw	r16, r28
    60ae:	01 59       	subi	r16, 0x91	; 145
    60b0:	1e 4f       	sbci	r17, 0xFE	; 254
    60b2:	ce 01       	movw	r24, r28
    60b4:	85 59       	subi	r24, 0x95	; 149
    60b6:	9e 4f       	sbci	r25, 0xFE	; 254
    60b8:	fc 01       	movw	r30, r24
    60ba:	60 81       	ld	r22, Z
    60bc:	71 81       	ldd	r23, Z+1	; 0x01
    60be:	82 81       	ldd	r24, Z+2	; 0x02
    60c0:	93 81       	ldd	r25, Z+3	; 0x03
    60c2:	26 e6       	ldi	r18, 0x66	; 102
    60c4:	36 e6       	ldi	r19, 0x66	; 102
    60c6:	46 e6       	ldi	r20, 0x66	; 102
    60c8:	55 e4       	ldi	r21, 0x45	; 69
    60ca:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    60ce:	dc 01       	movw	r26, r24
    60d0:	cb 01       	movw	r24, r22
    60d2:	f8 01       	movw	r30, r16
    60d4:	80 83       	st	Z, r24
    60d6:	91 83       	std	Z+1, r25	; 0x01
    60d8:	a2 83       	std	Z+2, r26	; 0x02
    60da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    60dc:	ce 01       	movw	r24, r28
    60de:	81 59       	subi	r24, 0x91	; 145
    60e0:	9e 4f       	sbci	r25, 0xFE	; 254
    60e2:	11 e0       	ldi	r17, 0x01	; 1
    60e4:	fc 01       	movw	r30, r24
    60e6:	60 81       	ld	r22, Z
    60e8:	71 81       	ldd	r23, Z+1	; 0x01
    60ea:	82 81       	ldd	r24, Z+2	; 0x02
    60ec:	93 81       	ldd	r25, Z+3	; 0x03
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	40 e8       	ldi	r20, 0x80	; 128
    60f4:	5f e3       	ldi	r21, 0x3F	; 63
    60f6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    60fa:	88 23       	and	r24, r24
    60fc:	0c f0       	brlt	.+2      	; 0x6100 <main+0x2db0>
    60fe:	10 e0       	ldi	r17, 0x00	; 0
    6100:	11 23       	and	r17, r17
    6102:	49 f0       	breq	.+18     	; 0x6116 <main+0x2dc6>
		__ticks = 1;
    6104:	ce 01       	movw	r24, r28
    6106:	8d 58       	subi	r24, 0x8D	; 141
    6108:	9e 4f       	sbci	r25, 0xFE	; 254
    610a:	21 e0       	ldi	r18, 0x01	; 1
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	fc 01       	movw	r30, r24
    6110:	31 83       	std	Z+1, r19	; 0x01
    6112:	20 83       	st	Z, r18
    6114:	74 c0       	rjmp	.+232    	; 0x61fe <main+0x2eae>
	else if (__tmp > 65535)
    6116:	ce 01       	movw	r24, r28
    6118:	81 59       	subi	r24, 0x91	; 145
    611a:	9e 4f       	sbci	r25, 0xFE	; 254
    611c:	11 e0       	ldi	r17, 0x01	; 1
    611e:	fc 01       	movw	r30, r24
    6120:	60 81       	ld	r22, Z
    6122:	71 81       	ldd	r23, Z+1	; 0x01
    6124:	82 81       	ldd	r24, Z+2	; 0x02
    6126:	93 81       	ldd	r25, Z+3	; 0x03
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	3f ef       	ldi	r19, 0xFF	; 255
    612c:	4f e7       	ldi	r20, 0x7F	; 127
    612e:	57 e4       	ldi	r21, 0x47	; 71
    6130:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    6134:	18 16       	cp	r1, r24
    6136:	0c f0       	brlt	.+2      	; 0x613a <main+0x2dea>
    6138:	10 e0       	ldi	r17, 0x00	; 0
    613a:	11 23       	and	r17, r17
    613c:	09 f4       	brne	.+2      	; 0x6140 <main+0x2df0>
    613e:	4d c0       	rjmp	.+154    	; 0x61da <main+0x2e8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6140:	ce 01       	movw	r24, r28
    6142:	85 59       	subi	r24, 0x95	; 149
    6144:	9e 4f       	sbci	r25, 0xFE	; 254
    6146:	fc 01       	movw	r30, r24
    6148:	60 81       	ld	r22, Z
    614a:	71 81       	ldd	r23, Z+1	; 0x01
    614c:	82 81       	ldd	r24, Z+2	; 0x02
    614e:	93 81       	ldd	r25, Z+3	; 0x03
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	40 e2       	ldi	r20, 0x20	; 32
    6156:	51 e4       	ldi	r21, 0x41	; 65
    6158:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    615c:	dc 01       	movw	r26, r24
    615e:	cb 01       	movw	r24, r22
    6160:	8e 01       	movw	r16, r28
    6162:	0d 58       	subi	r16, 0x8D	; 141
    6164:	1e 4f       	sbci	r17, 0xFE	; 254
    6166:	bc 01       	movw	r22, r24
    6168:	cd 01       	movw	r24, r26
    616a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    616e:	dc 01       	movw	r26, r24
    6170:	cb 01       	movw	r24, r22
    6172:	f8 01       	movw	r30, r16
    6174:	91 83       	std	Z+1, r25	; 0x01
    6176:	80 83       	st	Z, r24
    6178:	27 c0       	rjmp	.+78     	; 0x61c8 <main+0x2e78>
    617a:	ce 01       	movw	r24, r28
    617c:	8b 58       	subi	r24, 0x8B	; 139
    617e:	9e 4f       	sbci	r25, 0xFE	; 254
    6180:	20 e7       	ldi	r18, 0x70	; 112
    6182:	31 e0       	ldi	r19, 0x01	; 1
    6184:	fc 01       	movw	r30, r24
    6186:	31 83       	std	Z+1, r19	; 0x01
    6188:	20 83       	st	Z, r18
    618a:	ce 01       	movw	r24, r28
    618c:	8b 58       	subi	r24, 0x8B	; 139
    618e:	9e 4f       	sbci	r25, 0xFE	; 254
    6190:	fc 01       	movw	r30, r24
    6192:	80 81       	ld	r24, Z
    6194:	91 81       	ldd	r25, Z+1	; 0x01
    6196:	8c 01       	movw	r16, r24
    6198:	c8 01       	movw	r24, r16
    619a:	01 97       	sbiw	r24, 0x01	; 1
    619c:	f1 f7       	brne	.-4      	; 0x619a <main+0x2e4a>
    619e:	8c 01       	movw	r16, r24
    61a0:	ce 01       	movw	r24, r28
    61a2:	8b 58       	subi	r24, 0x8B	; 139
    61a4:	9e 4f       	sbci	r25, 0xFE	; 254
    61a6:	fc 01       	movw	r30, r24
    61a8:	11 83       	std	Z+1, r17	; 0x01
    61aa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61ac:	ce 01       	movw	r24, r28
    61ae:	8d 58       	subi	r24, 0x8D	; 141
    61b0:	9e 4f       	sbci	r25, 0xFE	; 254
    61b2:	9e 01       	movw	r18, r28
    61b4:	2d 58       	subi	r18, 0x8D	; 141
    61b6:	3e 4f       	sbci	r19, 0xFE	; 254
    61b8:	f9 01       	movw	r30, r18
    61ba:	20 81       	ld	r18, Z
    61bc:	31 81       	ldd	r19, Z+1	; 0x01
    61be:	21 50       	subi	r18, 0x01	; 1
    61c0:	30 40       	sbci	r19, 0x00	; 0
    61c2:	fc 01       	movw	r30, r24
    61c4:	31 83       	std	Z+1, r19	; 0x01
    61c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61c8:	ce 01       	movw	r24, r28
    61ca:	8d 58       	subi	r24, 0x8D	; 141
    61cc:	9e 4f       	sbci	r25, 0xFE	; 254
    61ce:	fc 01       	movw	r30, r24
    61d0:	80 81       	ld	r24, Z
    61d2:	91 81       	ldd	r25, Z+1	; 0x01
    61d4:	00 97       	sbiw	r24, 0x00	; 0
    61d6:	89 f6       	brne	.-94     	; 0x617a <main+0x2e2a>
    61d8:	2f c0       	rjmp	.+94     	; 0x6238 <main+0x2ee8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61da:	8e 01       	movw	r16, r28
    61dc:	0d 58       	subi	r16, 0x8D	; 141
    61de:	1e 4f       	sbci	r17, 0xFE	; 254
    61e0:	ce 01       	movw	r24, r28
    61e2:	81 59       	subi	r24, 0x91	; 145
    61e4:	9e 4f       	sbci	r25, 0xFE	; 254
    61e6:	fc 01       	movw	r30, r24
    61e8:	60 81       	ld	r22, Z
    61ea:	71 81       	ldd	r23, Z+1	; 0x01
    61ec:	82 81       	ldd	r24, Z+2	; 0x02
    61ee:	93 81       	ldd	r25, Z+3	; 0x03
    61f0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    61f4:	dc 01       	movw	r26, r24
    61f6:	cb 01       	movw	r24, r22
    61f8:	f8 01       	movw	r30, r16
    61fa:	91 83       	std	Z+1, r25	; 0x01
    61fc:	80 83       	st	Z, r24
    61fe:	ce 01       	movw	r24, r28
    6200:	89 58       	subi	r24, 0x89	; 137
    6202:	9e 4f       	sbci	r25, 0xFE	; 254
    6204:	9e 01       	movw	r18, r28
    6206:	2d 58       	subi	r18, 0x8D	; 141
    6208:	3e 4f       	sbci	r19, 0xFE	; 254
    620a:	f9 01       	movw	r30, r18
    620c:	20 81       	ld	r18, Z
    620e:	31 81       	ldd	r19, Z+1	; 0x01
    6210:	fc 01       	movw	r30, r24
    6212:	31 83       	std	Z+1, r19	; 0x01
    6214:	20 83       	st	Z, r18
    6216:	ce 01       	movw	r24, r28
    6218:	89 58       	subi	r24, 0x89	; 137
    621a:	9e 4f       	sbci	r25, 0xFE	; 254
    621c:	fc 01       	movw	r30, r24
    621e:	80 81       	ld	r24, Z
    6220:	91 81       	ldd	r25, Z+1	; 0x01
    6222:	8c 01       	movw	r16, r24
    6224:	c8 01       	movw	r24, r16
    6226:	01 97       	sbiw	r24, 0x01	; 1
    6228:	f1 f7       	brne	.-4      	; 0x6226 <main+0x2ed6>
    622a:	8c 01       	movw	r16, r24
    622c:	ce 01       	movw	r24, r28
    622e:	89 58       	subi	r24, 0x89	; 137
    6230:	9e 4f       	sbci	r25, 0xFE	; 254
    6232:	fc 01       	movw	r30, r24
    6234:	11 83       	std	Z+1, r17	; 0x01
    6236:	00 83       	st	Z, r16
							_delay_ms(500);
							right_degrees(90);                 ////// my mistake calibration
    6238:	8a e5       	ldi	r24, 0x5A	; 90
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    6240:	9e 01       	movw	r18, r28
    6242:	27 58       	subi	r18, 0x87	; 135
    6244:	3e 4f       	sbci	r19, 0xFE	; 254
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	a8 ec       	ldi	r26, 0xC8	; 200
    624c:	b2 e4       	ldi	r27, 0x42	; 66
    624e:	f9 01       	movw	r30, r18
    6250:	80 83       	st	Z, r24
    6252:	91 83       	std	Z+1, r25	; 0x01
    6254:	a2 83       	std	Z+2, r26	; 0x02
    6256:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6258:	8e 01       	movw	r16, r28
    625a:	03 58       	subi	r16, 0x83	; 131
    625c:	1e 4f       	sbci	r17, 0xFE	; 254
    625e:	ce 01       	movw	r24, r28
    6260:	87 58       	subi	r24, 0x87	; 135
    6262:	9e 4f       	sbci	r25, 0xFE	; 254
    6264:	fc 01       	movw	r30, r24
    6266:	60 81       	ld	r22, Z
    6268:	71 81       	ldd	r23, Z+1	; 0x01
    626a:	82 81       	ldd	r24, Z+2	; 0x02
    626c:	93 81       	ldd	r25, Z+3	; 0x03
    626e:	26 e6       	ldi	r18, 0x66	; 102
    6270:	36 e6       	ldi	r19, 0x66	; 102
    6272:	46 e6       	ldi	r20, 0x66	; 102
    6274:	55 e4       	ldi	r21, 0x45	; 69
    6276:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    627a:	dc 01       	movw	r26, r24
    627c:	cb 01       	movw	r24, r22
    627e:	f8 01       	movw	r30, r16
    6280:	80 83       	st	Z, r24
    6282:	91 83       	std	Z+1, r25	; 0x01
    6284:	a2 83       	std	Z+2, r26	; 0x02
    6286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6288:	ce 01       	movw	r24, r28
    628a:	83 58       	subi	r24, 0x83	; 131
    628c:	9e 4f       	sbci	r25, 0xFE	; 254
    628e:	11 e0       	ldi	r17, 0x01	; 1
    6290:	fc 01       	movw	r30, r24
    6292:	60 81       	ld	r22, Z
    6294:	71 81       	ldd	r23, Z+1	; 0x01
    6296:	82 81       	ldd	r24, Z+2	; 0x02
    6298:	93 81       	ldd	r25, Z+3	; 0x03
    629a:	20 e0       	ldi	r18, 0x00	; 0
    629c:	30 e0       	ldi	r19, 0x00	; 0
    629e:	40 e8       	ldi	r20, 0x80	; 128
    62a0:	5f e3       	ldi	r21, 0x3F	; 63
    62a2:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    62a6:	88 23       	and	r24, r24
    62a8:	0c f0       	brlt	.+2      	; 0x62ac <main+0x2f5c>
    62aa:	10 e0       	ldi	r17, 0x00	; 0
    62ac:	11 23       	and	r17, r17
    62ae:	49 f0       	breq	.+18     	; 0x62c2 <main+0x2f72>
		__ticks = 1;
    62b0:	ce 01       	movw	r24, r28
    62b2:	8f 57       	subi	r24, 0x7F	; 127
    62b4:	9e 4f       	sbci	r25, 0xFE	; 254
    62b6:	21 e0       	ldi	r18, 0x01	; 1
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	fc 01       	movw	r30, r24
    62bc:	31 83       	std	Z+1, r19	; 0x01
    62be:	20 83       	st	Z, r18
    62c0:	74 c0       	rjmp	.+232    	; 0x63aa <main+0x305a>
	else if (__tmp > 65535)
    62c2:	ce 01       	movw	r24, r28
    62c4:	83 58       	subi	r24, 0x83	; 131
    62c6:	9e 4f       	sbci	r25, 0xFE	; 254
    62c8:	11 e0       	ldi	r17, 0x01	; 1
    62ca:	fc 01       	movw	r30, r24
    62cc:	60 81       	ld	r22, Z
    62ce:	71 81       	ldd	r23, Z+1	; 0x01
    62d0:	82 81       	ldd	r24, Z+2	; 0x02
    62d2:	93 81       	ldd	r25, Z+3	; 0x03
    62d4:	20 e0       	ldi	r18, 0x00	; 0
    62d6:	3f ef       	ldi	r19, 0xFF	; 255
    62d8:	4f e7       	ldi	r20, 0x7F	; 127
    62da:	57 e4       	ldi	r21, 0x47	; 71
    62dc:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    62e0:	18 16       	cp	r1, r24
    62e2:	0c f0       	brlt	.+2      	; 0x62e6 <main+0x2f96>
    62e4:	10 e0       	ldi	r17, 0x00	; 0
    62e6:	11 23       	and	r17, r17
    62e8:	09 f4       	brne	.+2      	; 0x62ec <main+0x2f9c>
    62ea:	4d c0       	rjmp	.+154    	; 0x6386 <main+0x3036>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62ec:	ce 01       	movw	r24, r28
    62ee:	87 58       	subi	r24, 0x87	; 135
    62f0:	9e 4f       	sbci	r25, 0xFE	; 254
    62f2:	fc 01       	movw	r30, r24
    62f4:	60 81       	ld	r22, Z
    62f6:	71 81       	ldd	r23, Z+1	; 0x01
    62f8:	82 81       	ldd	r24, Z+2	; 0x02
    62fa:	93 81       	ldd	r25, Z+3	; 0x03
    62fc:	20 e0       	ldi	r18, 0x00	; 0
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	40 e2       	ldi	r20, 0x20	; 32
    6302:	51 e4       	ldi	r21, 0x41	; 65
    6304:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6308:	dc 01       	movw	r26, r24
    630a:	cb 01       	movw	r24, r22
    630c:	8e 01       	movw	r16, r28
    630e:	0f 57       	subi	r16, 0x7F	; 127
    6310:	1e 4f       	sbci	r17, 0xFE	; 254
    6312:	bc 01       	movw	r22, r24
    6314:	cd 01       	movw	r24, r26
    6316:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    631a:	dc 01       	movw	r26, r24
    631c:	cb 01       	movw	r24, r22
    631e:	f8 01       	movw	r30, r16
    6320:	91 83       	std	Z+1, r25	; 0x01
    6322:	80 83       	st	Z, r24
    6324:	27 c0       	rjmp	.+78     	; 0x6374 <main+0x3024>
    6326:	ce 01       	movw	r24, r28
    6328:	8d 57       	subi	r24, 0x7D	; 125
    632a:	9e 4f       	sbci	r25, 0xFE	; 254
    632c:	20 e7       	ldi	r18, 0x70	; 112
    632e:	31 e0       	ldi	r19, 0x01	; 1
    6330:	fc 01       	movw	r30, r24
    6332:	31 83       	std	Z+1, r19	; 0x01
    6334:	20 83       	st	Z, r18
    6336:	ce 01       	movw	r24, r28
    6338:	8d 57       	subi	r24, 0x7D	; 125
    633a:	9e 4f       	sbci	r25, 0xFE	; 254
    633c:	fc 01       	movw	r30, r24
    633e:	80 81       	ld	r24, Z
    6340:	91 81       	ldd	r25, Z+1	; 0x01
    6342:	8c 01       	movw	r16, r24
    6344:	c8 01       	movw	r24, r16
    6346:	01 97       	sbiw	r24, 0x01	; 1
    6348:	f1 f7       	brne	.-4      	; 0x6346 <main+0x2ff6>
    634a:	8c 01       	movw	r16, r24
    634c:	ce 01       	movw	r24, r28
    634e:	8d 57       	subi	r24, 0x7D	; 125
    6350:	9e 4f       	sbci	r25, 0xFE	; 254
    6352:	fc 01       	movw	r30, r24
    6354:	11 83       	std	Z+1, r17	; 0x01
    6356:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6358:	ce 01       	movw	r24, r28
    635a:	8f 57       	subi	r24, 0x7F	; 127
    635c:	9e 4f       	sbci	r25, 0xFE	; 254
    635e:	9e 01       	movw	r18, r28
    6360:	2f 57       	subi	r18, 0x7F	; 127
    6362:	3e 4f       	sbci	r19, 0xFE	; 254
    6364:	f9 01       	movw	r30, r18
    6366:	20 81       	ld	r18, Z
    6368:	31 81       	ldd	r19, Z+1	; 0x01
    636a:	21 50       	subi	r18, 0x01	; 1
    636c:	30 40       	sbci	r19, 0x00	; 0
    636e:	fc 01       	movw	r30, r24
    6370:	31 83       	std	Z+1, r19	; 0x01
    6372:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6374:	ce 01       	movw	r24, r28
    6376:	8f 57       	subi	r24, 0x7F	; 127
    6378:	9e 4f       	sbci	r25, 0xFE	; 254
    637a:	fc 01       	movw	r30, r24
    637c:	80 81       	ld	r24, Z
    637e:	91 81       	ldd	r25, Z+1	; 0x01
    6380:	00 97       	sbiw	r24, 0x00	; 0
    6382:	89 f6       	brne	.-94     	; 0x6326 <main+0x2fd6>
    6384:	2f c0       	rjmp	.+94     	; 0x63e4 <main+0x3094>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6386:	8e 01       	movw	r16, r28
    6388:	0f 57       	subi	r16, 0x7F	; 127
    638a:	1e 4f       	sbci	r17, 0xFE	; 254
    638c:	ce 01       	movw	r24, r28
    638e:	83 58       	subi	r24, 0x83	; 131
    6390:	9e 4f       	sbci	r25, 0xFE	; 254
    6392:	fc 01       	movw	r30, r24
    6394:	60 81       	ld	r22, Z
    6396:	71 81       	ldd	r23, Z+1	; 0x01
    6398:	82 81       	ldd	r24, Z+2	; 0x02
    639a:	93 81       	ldd	r25, Z+3	; 0x03
    639c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    63a0:	dc 01       	movw	r26, r24
    63a2:	cb 01       	movw	r24, r22
    63a4:	f8 01       	movw	r30, r16
    63a6:	91 83       	std	Z+1, r25	; 0x01
    63a8:	80 83       	st	Z, r24
    63aa:	ce 01       	movw	r24, r28
    63ac:	8b 57       	subi	r24, 0x7B	; 123
    63ae:	9e 4f       	sbci	r25, 0xFE	; 254
    63b0:	9e 01       	movw	r18, r28
    63b2:	2f 57       	subi	r18, 0x7F	; 127
    63b4:	3e 4f       	sbci	r19, 0xFE	; 254
    63b6:	f9 01       	movw	r30, r18
    63b8:	20 81       	ld	r18, Z
    63ba:	31 81       	ldd	r19, Z+1	; 0x01
    63bc:	fc 01       	movw	r30, r24
    63be:	31 83       	std	Z+1, r19	; 0x01
    63c0:	20 83       	st	Z, r18
    63c2:	ce 01       	movw	r24, r28
    63c4:	8b 57       	subi	r24, 0x7B	; 123
    63c6:	9e 4f       	sbci	r25, 0xFE	; 254
    63c8:	fc 01       	movw	r30, r24
    63ca:	80 81       	ld	r24, Z
    63cc:	91 81       	ldd	r25, Z+1	; 0x01
    63ce:	8c 01       	movw	r16, r24
    63d0:	c8 01       	movw	r24, r16
    63d2:	01 97       	sbiw	r24, 0x01	; 1
    63d4:	f1 f7       	brne	.-4      	; 0x63d2 <main+0x3082>
    63d6:	8c 01       	movw	r16, r24
    63d8:	ce 01       	movw	r24, r28
    63da:	8b 57       	subi	r24, 0x7B	; 123
    63dc:	9e 4f       	sbci	r25, 0xFE	; 254
    63de:	fc 01       	movw	r30, r24
    63e0:	11 83       	std	Z+1, r17	; 0x01
    63e2:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    63e4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    63e8:	63 c4       	rjmp	.+2246   	; 0x6cb0 <main+0x3960>
						}
						else
						{
							if(compass==7)
    63ea:	8b 81       	ldd	r24, Y+3	; 0x03
    63ec:	9c 81       	ldd	r25, Y+4	; 0x04
    63ee:	87 30       	cpi	r24, 0x07	; 7
    63f0:	91 05       	cpc	r25, r1
    63f2:	09 f0       	breq	.+2      	; 0x63f6 <main+0x30a6>
    63f4:	b8 c1       	rjmp	.+880    	; 0x6766 <main+0x3416>
							{
								coor[1]=coor[1]-1;
    63f6:	80 91 a8 04 	lds	r24, 0x04A8
    63fa:	90 91 a9 04 	lds	r25, 0x04A9
    63fe:	01 97       	sbiw	r24, 0x01	; 1
    6400:	90 93 a9 04 	sts	0x04A9, r25
    6404:	80 93 a8 04 	sts	0x04A8, r24
								compass=5;
    6408:	85 e0       	ldi	r24, 0x05	; 5
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	9c 83       	std	Y+4, r25	; 0x04
    640e:	8b 83       	std	Y+3, r24	; 0x03
    6410:	9e 01       	movw	r18, r28
    6412:	29 57       	subi	r18, 0x79	; 121
    6414:	3e 4f       	sbci	r19, 0xFE	; 254
    6416:	80 e0       	ldi	r24, 0x00	; 0
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	aa ef       	ldi	r26, 0xFA	; 250
    641c:	b3 e4       	ldi	r27, 0x43	; 67
    641e:	f9 01       	movw	r30, r18
    6420:	80 83       	st	Z, r24
    6422:	91 83       	std	Z+1, r25	; 0x01
    6424:	a2 83       	std	Z+2, r26	; 0x02
    6426:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6428:	8e 01       	movw	r16, r28
    642a:	05 57       	subi	r16, 0x75	; 117
    642c:	1e 4f       	sbci	r17, 0xFE	; 254
    642e:	ce 01       	movw	r24, r28
    6430:	89 57       	subi	r24, 0x79	; 121
    6432:	9e 4f       	sbci	r25, 0xFE	; 254
    6434:	fc 01       	movw	r30, r24
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	82 81       	ldd	r24, Z+2	; 0x02
    643c:	93 81       	ldd	r25, Z+3	; 0x03
    643e:	26 e6       	ldi	r18, 0x66	; 102
    6440:	36 e6       	ldi	r19, 0x66	; 102
    6442:	46 e6       	ldi	r20, 0x66	; 102
    6444:	55 e4       	ldi	r21, 0x45	; 69
    6446:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    644a:	dc 01       	movw	r26, r24
    644c:	cb 01       	movw	r24, r22
    644e:	f8 01       	movw	r30, r16
    6450:	80 83       	st	Z, r24
    6452:	91 83       	std	Z+1, r25	; 0x01
    6454:	a2 83       	std	Z+2, r26	; 0x02
    6456:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6458:	ce 01       	movw	r24, r28
    645a:	85 57       	subi	r24, 0x75	; 117
    645c:	9e 4f       	sbci	r25, 0xFE	; 254
    645e:	11 e0       	ldi	r17, 0x01	; 1
    6460:	fc 01       	movw	r30, r24
    6462:	60 81       	ld	r22, Z
    6464:	71 81       	ldd	r23, Z+1	; 0x01
    6466:	82 81       	ldd	r24, Z+2	; 0x02
    6468:	93 81       	ldd	r25, Z+3	; 0x03
    646a:	20 e0       	ldi	r18, 0x00	; 0
    646c:	30 e0       	ldi	r19, 0x00	; 0
    646e:	40 e8       	ldi	r20, 0x80	; 128
    6470:	5f e3       	ldi	r21, 0x3F	; 63
    6472:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    6476:	88 23       	and	r24, r24
    6478:	0c f0       	brlt	.+2      	; 0x647c <main+0x312c>
    647a:	10 e0       	ldi	r17, 0x00	; 0
    647c:	11 23       	and	r17, r17
    647e:	49 f0       	breq	.+18     	; 0x6492 <main+0x3142>
		__ticks = 1;
    6480:	ce 01       	movw	r24, r28
    6482:	81 57       	subi	r24, 0x71	; 113
    6484:	9e 4f       	sbci	r25, 0xFE	; 254
    6486:	21 e0       	ldi	r18, 0x01	; 1
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	fc 01       	movw	r30, r24
    648c:	31 83       	std	Z+1, r19	; 0x01
    648e:	20 83       	st	Z, r18
    6490:	74 c0       	rjmp	.+232    	; 0x657a <main+0x322a>
	else if (__tmp > 65535)
    6492:	ce 01       	movw	r24, r28
    6494:	85 57       	subi	r24, 0x75	; 117
    6496:	9e 4f       	sbci	r25, 0xFE	; 254
    6498:	11 e0       	ldi	r17, 0x01	; 1
    649a:	fc 01       	movw	r30, r24
    649c:	60 81       	ld	r22, Z
    649e:	71 81       	ldd	r23, Z+1	; 0x01
    64a0:	82 81       	ldd	r24, Z+2	; 0x02
    64a2:	93 81       	ldd	r25, Z+3	; 0x03
    64a4:	20 e0       	ldi	r18, 0x00	; 0
    64a6:	3f ef       	ldi	r19, 0xFF	; 255
    64a8:	4f e7       	ldi	r20, 0x7F	; 127
    64aa:	57 e4       	ldi	r21, 0x47	; 71
    64ac:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    64b0:	18 16       	cp	r1, r24
    64b2:	0c f0       	brlt	.+2      	; 0x64b6 <main+0x3166>
    64b4:	10 e0       	ldi	r17, 0x00	; 0
    64b6:	11 23       	and	r17, r17
    64b8:	09 f4       	brne	.+2      	; 0x64bc <main+0x316c>
    64ba:	4d c0       	rjmp	.+154    	; 0x6556 <main+0x3206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64bc:	ce 01       	movw	r24, r28
    64be:	89 57       	subi	r24, 0x79	; 121
    64c0:	9e 4f       	sbci	r25, 0xFE	; 254
    64c2:	fc 01       	movw	r30, r24
    64c4:	60 81       	ld	r22, Z
    64c6:	71 81       	ldd	r23, Z+1	; 0x01
    64c8:	82 81       	ldd	r24, Z+2	; 0x02
    64ca:	93 81       	ldd	r25, Z+3	; 0x03
    64cc:	20 e0       	ldi	r18, 0x00	; 0
    64ce:	30 e0       	ldi	r19, 0x00	; 0
    64d0:	40 e2       	ldi	r20, 0x20	; 32
    64d2:	51 e4       	ldi	r21, 0x41	; 65
    64d4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    64d8:	dc 01       	movw	r26, r24
    64da:	cb 01       	movw	r24, r22
    64dc:	8e 01       	movw	r16, r28
    64de:	01 57       	subi	r16, 0x71	; 113
    64e0:	1e 4f       	sbci	r17, 0xFE	; 254
    64e2:	bc 01       	movw	r22, r24
    64e4:	cd 01       	movw	r24, r26
    64e6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    64ea:	dc 01       	movw	r26, r24
    64ec:	cb 01       	movw	r24, r22
    64ee:	f8 01       	movw	r30, r16
    64f0:	91 83       	std	Z+1, r25	; 0x01
    64f2:	80 83       	st	Z, r24
    64f4:	27 c0       	rjmp	.+78     	; 0x6544 <main+0x31f4>
    64f6:	ce 01       	movw	r24, r28
    64f8:	8f 56       	subi	r24, 0x6F	; 111
    64fa:	9e 4f       	sbci	r25, 0xFE	; 254
    64fc:	20 e7       	ldi	r18, 0x70	; 112
    64fe:	31 e0       	ldi	r19, 0x01	; 1
    6500:	fc 01       	movw	r30, r24
    6502:	31 83       	std	Z+1, r19	; 0x01
    6504:	20 83       	st	Z, r18
    6506:	ce 01       	movw	r24, r28
    6508:	8f 56       	subi	r24, 0x6F	; 111
    650a:	9e 4f       	sbci	r25, 0xFE	; 254
    650c:	fc 01       	movw	r30, r24
    650e:	80 81       	ld	r24, Z
    6510:	91 81       	ldd	r25, Z+1	; 0x01
    6512:	8c 01       	movw	r16, r24
    6514:	c8 01       	movw	r24, r16
    6516:	01 97       	sbiw	r24, 0x01	; 1
    6518:	f1 f7       	brne	.-4      	; 0x6516 <main+0x31c6>
    651a:	8c 01       	movw	r16, r24
    651c:	ce 01       	movw	r24, r28
    651e:	8f 56       	subi	r24, 0x6F	; 111
    6520:	9e 4f       	sbci	r25, 0xFE	; 254
    6522:	fc 01       	movw	r30, r24
    6524:	11 83       	std	Z+1, r17	; 0x01
    6526:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6528:	ce 01       	movw	r24, r28
    652a:	81 57       	subi	r24, 0x71	; 113
    652c:	9e 4f       	sbci	r25, 0xFE	; 254
    652e:	9e 01       	movw	r18, r28
    6530:	21 57       	subi	r18, 0x71	; 113
    6532:	3e 4f       	sbci	r19, 0xFE	; 254
    6534:	f9 01       	movw	r30, r18
    6536:	20 81       	ld	r18, Z
    6538:	31 81       	ldd	r19, Z+1	; 0x01
    653a:	21 50       	subi	r18, 0x01	; 1
    653c:	30 40       	sbci	r19, 0x00	; 0
    653e:	fc 01       	movw	r30, r24
    6540:	31 83       	std	Z+1, r19	; 0x01
    6542:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6544:	ce 01       	movw	r24, r28
    6546:	81 57       	subi	r24, 0x71	; 113
    6548:	9e 4f       	sbci	r25, 0xFE	; 254
    654a:	fc 01       	movw	r30, r24
    654c:	80 81       	ld	r24, Z
    654e:	91 81       	ldd	r25, Z+1	; 0x01
    6550:	00 97       	sbiw	r24, 0x00	; 0
    6552:	89 f6       	brne	.-94     	; 0x64f6 <main+0x31a6>
    6554:	2f c0       	rjmp	.+94     	; 0x65b4 <main+0x3264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6556:	8e 01       	movw	r16, r28
    6558:	01 57       	subi	r16, 0x71	; 113
    655a:	1e 4f       	sbci	r17, 0xFE	; 254
    655c:	ce 01       	movw	r24, r28
    655e:	85 57       	subi	r24, 0x75	; 117
    6560:	9e 4f       	sbci	r25, 0xFE	; 254
    6562:	fc 01       	movw	r30, r24
    6564:	60 81       	ld	r22, Z
    6566:	71 81       	ldd	r23, Z+1	; 0x01
    6568:	82 81       	ldd	r24, Z+2	; 0x02
    656a:	93 81       	ldd	r25, Z+3	; 0x03
    656c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6570:	dc 01       	movw	r26, r24
    6572:	cb 01       	movw	r24, r22
    6574:	f8 01       	movw	r30, r16
    6576:	91 83       	std	Z+1, r25	; 0x01
    6578:	80 83       	st	Z, r24
    657a:	ce 01       	movw	r24, r28
    657c:	8d 56       	subi	r24, 0x6D	; 109
    657e:	9e 4f       	sbci	r25, 0xFE	; 254
    6580:	9e 01       	movw	r18, r28
    6582:	21 57       	subi	r18, 0x71	; 113
    6584:	3e 4f       	sbci	r19, 0xFE	; 254
    6586:	f9 01       	movw	r30, r18
    6588:	20 81       	ld	r18, Z
    658a:	31 81       	ldd	r19, Z+1	; 0x01
    658c:	fc 01       	movw	r30, r24
    658e:	31 83       	std	Z+1, r19	; 0x01
    6590:	20 83       	st	Z, r18
    6592:	ce 01       	movw	r24, r28
    6594:	8d 56       	subi	r24, 0x6D	; 109
    6596:	9e 4f       	sbci	r25, 0xFE	; 254
    6598:	fc 01       	movw	r30, r24
    659a:	80 81       	ld	r24, Z
    659c:	91 81       	ldd	r25, Z+1	; 0x01
    659e:	8c 01       	movw	r16, r24
    65a0:	c8 01       	movw	r24, r16
    65a2:	01 97       	sbiw	r24, 0x01	; 1
    65a4:	f1 f7       	brne	.-4      	; 0x65a2 <main+0x3252>
    65a6:	8c 01       	movw	r16, r24
    65a8:	ce 01       	movw	r24, r28
    65aa:	8d 56       	subi	r24, 0x6D	; 109
    65ac:	9e 4f       	sbci	r25, 0xFE	; 254
    65ae:	fc 01       	movw	r30, r24
    65b0:	11 83       	std	Z+1, r17	; 0x01
    65b2:	00 83       	st	Z, r16
								_delay_ms(500);
								left_degrees(85);
    65b4:	85 e5       	ldi	r24, 0x55	; 85
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    65bc:	9e 01       	movw	r18, r28
    65be:	2b 56       	subi	r18, 0x6B	; 107
    65c0:	3e 4f       	sbci	r19, 0xFE	; 254
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	a8 ec       	ldi	r26, 0xC8	; 200
    65c8:	b2 e4       	ldi	r27, 0x42	; 66
    65ca:	f9 01       	movw	r30, r18
    65cc:	80 83       	st	Z, r24
    65ce:	91 83       	std	Z+1, r25	; 0x01
    65d0:	a2 83       	std	Z+2, r26	; 0x02
    65d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    65d4:	8e 01       	movw	r16, r28
    65d6:	07 56       	subi	r16, 0x67	; 103
    65d8:	1e 4f       	sbci	r17, 0xFE	; 254
    65da:	ce 01       	movw	r24, r28
    65dc:	8b 56       	subi	r24, 0x6B	; 107
    65de:	9e 4f       	sbci	r25, 0xFE	; 254
    65e0:	fc 01       	movw	r30, r24
    65e2:	60 81       	ld	r22, Z
    65e4:	71 81       	ldd	r23, Z+1	; 0x01
    65e6:	82 81       	ldd	r24, Z+2	; 0x02
    65e8:	93 81       	ldd	r25, Z+3	; 0x03
    65ea:	26 e6       	ldi	r18, 0x66	; 102
    65ec:	36 e6       	ldi	r19, 0x66	; 102
    65ee:	46 e6       	ldi	r20, 0x66	; 102
    65f0:	55 e4       	ldi	r21, 0x45	; 69
    65f2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    65f6:	dc 01       	movw	r26, r24
    65f8:	cb 01       	movw	r24, r22
    65fa:	f8 01       	movw	r30, r16
    65fc:	80 83       	st	Z, r24
    65fe:	91 83       	std	Z+1, r25	; 0x01
    6600:	a2 83       	std	Z+2, r26	; 0x02
    6602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6604:	ce 01       	movw	r24, r28
    6606:	87 56       	subi	r24, 0x67	; 103
    6608:	9e 4f       	sbci	r25, 0xFE	; 254
    660a:	11 e0       	ldi	r17, 0x01	; 1
    660c:	fc 01       	movw	r30, r24
    660e:	60 81       	ld	r22, Z
    6610:	71 81       	ldd	r23, Z+1	; 0x01
    6612:	82 81       	ldd	r24, Z+2	; 0x02
    6614:	93 81       	ldd	r25, Z+3	; 0x03
    6616:	20 e0       	ldi	r18, 0x00	; 0
    6618:	30 e0       	ldi	r19, 0x00	; 0
    661a:	40 e8       	ldi	r20, 0x80	; 128
    661c:	5f e3       	ldi	r21, 0x3F	; 63
    661e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    6622:	88 23       	and	r24, r24
    6624:	0c f0       	brlt	.+2      	; 0x6628 <main+0x32d8>
    6626:	10 e0       	ldi	r17, 0x00	; 0
    6628:	11 23       	and	r17, r17
    662a:	49 f0       	breq	.+18     	; 0x663e <main+0x32ee>
		__ticks = 1;
    662c:	ce 01       	movw	r24, r28
    662e:	83 56       	subi	r24, 0x63	; 99
    6630:	9e 4f       	sbci	r25, 0xFE	; 254
    6632:	21 e0       	ldi	r18, 0x01	; 1
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	fc 01       	movw	r30, r24
    6638:	31 83       	std	Z+1, r19	; 0x01
    663a:	20 83       	st	Z, r18
    663c:	74 c0       	rjmp	.+232    	; 0x6726 <main+0x33d6>
	else if (__tmp > 65535)
    663e:	ce 01       	movw	r24, r28
    6640:	87 56       	subi	r24, 0x67	; 103
    6642:	9e 4f       	sbci	r25, 0xFE	; 254
    6644:	11 e0       	ldi	r17, 0x01	; 1
    6646:	fc 01       	movw	r30, r24
    6648:	60 81       	ld	r22, Z
    664a:	71 81       	ldd	r23, Z+1	; 0x01
    664c:	82 81       	ldd	r24, Z+2	; 0x02
    664e:	93 81       	ldd	r25, Z+3	; 0x03
    6650:	20 e0       	ldi	r18, 0x00	; 0
    6652:	3f ef       	ldi	r19, 0xFF	; 255
    6654:	4f e7       	ldi	r20, 0x7F	; 127
    6656:	57 e4       	ldi	r21, 0x47	; 71
    6658:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    665c:	18 16       	cp	r1, r24
    665e:	0c f0       	brlt	.+2      	; 0x6662 <main+0x3312>
    6660:	10 e0       	ldi	r17, 0x00	; 0
    6662:	11 23       	and	r17, r17
    6664:	09 f4       	brne	.+2      	; 0x6668 <main+0x3318>
    6666:	4d c0       	rjmp	.+154    	; 0x6702 <main+0x33b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6668:	ce 01       	movw	r24, r28
    666a:	8b 56       	subi	r24, 0x6B	; 107
    666c:	9e 4f       	sbci	r25, 0xFE	; 254
    666e:	fc 01       	movw	r30, r24
    6670:	60 81       	ld	r22, Z
    6672:	71 81       	ldd	r23, Z+1	; 0x01
    6674:	82 81       	ldd	r24, Z+2	; 0x02
    6676:	93 81       	ldd	r25, Z+3	; 0x03
    6678:	20 e0       	ldi	r18, 0x00	; 0
    667a:	30 e0       	ldi	r19, 0x00	; 0
    667c:	40 e2       	ldi	r20, 0x20	; 32
    667e:	51 e4       	ldi	r21, 0x41	; 65
    6680:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6684:	dc 01       	movw	r26, r24
    6686:	cb 01       	movw	r24, r22
    6688:	8e 01       	movw	r16, r28
    668a:	03 56       	subi	r16, 0x63	; 99
    668c:	1e 4f       	sbci	r17, 0xFE	; 254
    668e:	bc 01       	movw	r22, r24
    6690:	cd 01       	movw	r24, r26
    6692:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6696:	dc 01       	movw	r26, r24
    6698:	cb 01       	movw	r24, r22
    669a:	f8 01       	movw	r30, r16
    669c:	91 83       	std	Z+1, r25	; 0x01
    669e:	80 83       	st	Z, r24
    66a0:	27 c0       	rjmp	.+78     	; 0x66f0 <main+0x33a0>
    66a2:	ce 01       	movw	r24, r28
    66a4:	81 56       	subi	r24, 0x61	; 97
    66a6:	9e 4f       	sbci	r25, 0xFE	; 254
    66a8:	20 e7       	ldi	r18, 0x70	; 112
    66aa:	31 e0       	ldi	r19, 0x01	; 1
    66ac:	fc 01       	movw	r30, r24
    66ae:	31 83       	std	Z+1, r19	; 0x01
    66b0:	20 83       	st	Z, r18
    66b2:	ce 01       	movw	r24, r28
    66b4:	81 56       	subi	r24, 0x61	; 97
    66b6:	9e 4f       	sbci	r25, 0xFE	; 254
    66b8:	fc 01       	movw	r30, r24
    66ba:	80 81       	ld	r24, Z
    66bc:	91 81       	ldd	r25, Z+1	; 0x01
    66be:	8c 01       	movw	r16, r24
    66c0:	c8 01       	movw	r24, r16
    66c2:	01 97       	sbiw	r24, 0x01	; 1
    66c4:	f1 f7       	brne	.-4      	; 0x66c2 <main+0x3372>
    66c6:	8c 01       	movw	r16, r24
    66c8:	ce 01       	movw	r24, r28
    66ca:	81 56       	subi	r24, 0x61	; 97
    66cc:	9e 4f       	sbci	r25, 0xFE	; 254
    66ce:	fc 01       	movw	r30, r24
    66d0:	11 83       	std	Z+1, r17	; 0x01
    66d2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66d4:	ce 01       	movw	r24, r28
    66d6:	83 56       	subi	r24, 0x63	; 99
    66d8:	9e 4f       	sbci	r25, 0xFE	; 254
    66da:	9e 01       	movw	r18, r28
    66dc:	23 56       	subi	r18, 0x63	; 99
    66de:	3e 4f       	sbci	r19, 0xFE	; 254
    66e0:	f9 01       	movw	r30, r18
    66e2:	20 81       	ld	r18, Z
    66e4:	31 81       	ldd	r19, Z+1	; 0x01
    66e6:	21 50       	subi	r18, 0x01	; 1
    66e8:	30 40       	sbci	r19, 0x00	; 0
    66ea:	fc 01       	movw	r30, r24
    66ec:	31 83       	std	Z+1, r19	; 0x01
    66ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66f0:	ce 01       	movw	r24, r28
    66f2:	83 56       	subi	r24, 0x63	; 99
    66f4:	9e 4f       	sbci	r25, 0xFE	; 254
    66f6:	fc 01       	movw	r30, r24
    66f8:	80 81       	ld	r24, Z
    66fa:	91 81       	ldd	r25, Z+1	; 0x01
    66fc:	00 97       	sbiw	r24, 0x00	; 0
    66fe:	89 f6       	brne	.-94     	; 0x66a2 <main+0x3352>
    6700:	2f c0       	rjmp	.+94     	; 0x6760 <main+0x3410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6702:	8e 01       	movw	r16, r28
    6704:	03 56       	subi	r16, 0x63	; 99
    6706:	1e 4f       	sbci	r17, 0xFE	; 254
    6708:	ce 01       	movw	r24, r28
    670a:	87 56       	subi	r24, 0x67	; 103
    670c:	9e 4f       	sbci	r25, 0xFE	; 254
    670e:	fc 01       	movw	r30, r24
    6710:	60 81       	ld	r22, Z
    6712:	71 81       	ldd	r23, Z+1	; 0x01
    6714:	82 81       	ldd	r24, Z+2	; 0x02
    6716:	93 81       	ldd	r25, Z+3	; 0x03
    6718:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    671c:	dc 01       	movw	r26, r24
    671e:	cb 01       	movw	r24, r22
    6720:	f8 01       	movw	r30, r16
    6722:	91 83       	std	Z+1, r25	; 0x01
    6724:	80 83       	st	Z, r24
    6726:	ce 01       	movw	r24, r28
    6728:	8f 55       	subi	r24, 0x5F	; 95
    672a:	9e 4f       	sbci	r25, 0xFE	; 254
    672c:	9e 01       	movw	r18, r28
    672e:	23 56       	subi	r18, 0x63	; 99
    6730:	3e 4f       	sbci	r19, 0xFE	; 254
    6732:	f9 01       	movw	r30, r18
    6734:	20 81       	ld	r18, Z
    6736:	31 81       	ldd	r19, Z+1	; 0x01
    6738:	fc 01       	movw	r30, r24
    673a:	31 83       	std	Z+1, r19	; 0x01
    673c:	20 83       	st	Z, r18
    673e:	ce 01       	movw	r24, r28
    6740:	8f 55       	subi	r24, 0x5F	; 95
    6742:	9e 4f       	sbci	r25, 0xFE	; 254
    6744:	fc 01       	movw	r30, r24
    6746:	80 81       	ld	r24, Z
    6748:	91 81       	ldd	r25, Z+1	; 0x01
    674a:	8c 01       	movw	r16, r24
    674c:	c8 01       	movw	r24, r16
    674e:	01 97       	sbiw	r24, 0x01	; 1
    6750:	f1 f7       	brne	.-4      	; 0x674e <main+0x33fe>
    6752:	8c 01       	movw	r16, r24
    6754:	ce 01       	movw	r24, r28
    6756:	8f 55       	subi	r24, 0x5F	; 95
    6758:	9e 4f       	sbci	r25, 0xFE	; 254
    675a:	fc 01       	movw	r30, r24
    675c:	11 83       	std	Z+1, r17	; 0x01
    675e:	00 83       	st	Z, r16
								_delay_ms(100);
								linefollwer();
    6760:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    6764:	a5 c2       	rjmp	.+1354   	; 0x6cb0 <main+0x3960>
							}
							else
							{
								if(compass==5)
    6766:	8b 81       	ldd	r24, Y+3	; 0x03
    6768:	9c 81       	ldd	r25, Y+4	; 0x04
    676a:	85 30       	cpi	r24, 0x05	; 5
    676c:	91 05       	cpc	r25, r1
    676e:	09 f0       	breq	.+2      	; 0x6772 <main+0x3422>
    6770:	e2 c0       	rjmp	.+452    	; 0x6936 <main+0x35e6>
								{		   
									coor[1]=coor[1]-1;
    6772:	80 91 a8 04 	lds	r24, 0x04A8
    6776:	90 91 a9 04 	lds	r25, 0x04A9
    677a:	01 97       	sbiw	r24, 0x01	; 1
    677c:	90 93 a9 04 	sts	0x04A9, r25
    6780:	80 93 a8 04 	sts	0x04A8, r24
									compass=5;
    6784:	85 e0       	ldi	r24, 0x05	; 5
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	9c 83       	std	Y+4, r25	; 0x04
    678a:	8b 83       	std	Y+3, r24	; 0x03
    678c:	9e 01       	movw	r18, r28
    678e:	2d 55       	subi	r18, 0x5D	; 93
    6790:	3e 4f       	sbci	r19, 0xFE	; 254
    6792:	80 e0       	ldi	r24, 0x00	; 0
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	a8 ec       	ldi	r26, 0xC8	; 200
    6798:	b2 e4       	ldi	r27, 0x42	; 66
    679a:	f9 01       	movw	r30, r18
    679c:	80 83       	st	Z, r24
    679e:	91 83       	std	Z+1, r25	; 0x01
    67a0:	a2 83       	std	Z+2, r26	; 0x02
    67a2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    67a4:	8e 01       	movw	r16, r28
    67a6:	09 55       	subi	r16, 0x59	; 89
    67a8:	1e 4f       	sbci	r17, 0xFE	; 254
    67aa:	ce 01       	movw	r24, r28
    67ac:	8d 55       	subi	r24, 0x5D	; 93
    67ae:	9e 4f       	sbci	r25, 0xFE	; 254
    67b0:	fc 01       	movw	r30, r24
    67b2:	60 81       	ld	r22, Z
    67b4:	71 81       	ldd	r23, Z+1	; 0x01
    67b6:	82 81       	ldd	r24, Z+2	; 0x02
    67b8:	93 81       	ldd	r25, Z+3	; 0x03
    67ba:	26 e6       	ldi	r18, 0x66	; 102
    67bc:	36 e6       	ldi	r19, 0x66	; 102
    67be:	46 e6       	ldi	r20, 0x66	; 102
    67c0:	55 e4       	ldi	r21, 0x45	; 69
    67c2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    67c6:	dc 01       	movw	r26, r24
    67c8:	cb 01       	movw	r24, r22
    67ca:	f8 01       	movw	r30, r16
    67cc:	80 83       	st	Z, r24
    67ce:	91 83       	std	Z+1, r25	; 0x01
    67d0:	a2 83       	std	Z+2, r26	; 0x02
    67d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67d4:	ce 01       	movw	r24, r28
    67d6:	89 55       	subi	r24, 0x59	; 89
    67d8:	9e 4f       	sbci	r25, 0xFE	; 254
    67da:	11 e0       	ldi	r17, 0x01	; 1
    67dc:	fc 01       	movw	r30, r24
    67de:	60 81       	ld	r22, Z
    67e0:	71 81       	ldd	r23, Z+1	; 0x01
    67e2:	82 81       	ldd	r24, Z+2	; 0x02
    67e4:	93 81       	ldd	r25, Z+3	; 0x03
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	30 e0       	ldi	r19, 0x00	; 0
    67ea:	40 e8       	ldi	r20, 0x80	; 128
    67ec:	5f e3       	ldi	r21, 0x3F	; 63
    67ee:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    67f2:	88 23       	and	r24, r24
    67f4:	0c f0       	brlt	.+2      	; 0x67f8 <main+0x34a8>
    67f6:	10 e0       	ldi	r17, 0x00	; 0
    67f8:	11 23       	and	r17, r17
    67fa:	49 f0       	breq	.+18     	; 0x680e <main+0x34be>
		__ticks = 1;
    67fc:	ce 01       	movw	r24, r28
    67fe:	85 55       	subi	r24, 0x55	; 85
    6800:	9e 4f       	sbci	r25, 0xFE	; 254
    6802:	21 e0       	ldi	r18, 0x01	; 1
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	fc 01       	movw	r30, r24
    6808:	31 83       	std	Z+1, r19	; 0x01
    680a:	20 83       	st	Z, r18
    680c:	74 c0       	rjmp	.+232    	; 0x68f6 <main+0x35a6>
	else if (__tmp > 65535)
    680e:	ce 01       	movw	r24, r28
    6810:	89 55       	subi	r24, 0x59	; 89
    6812:	9e 4f       	sbci	r25, 0xFE	; 254
    6814:	11 e0       	ldi	r17, 0x01	; 1
    6816:	fc 01       	movw	r30, r24
    6818:	60 81       	ld	r22, Z
    681a:	71 81       	ldd	r23, Z+1	; 0x01
    681c:	82 81       	ldd	r24, Z+2	; 0x02
    681e:	93 81       	ldd	r25, Z+3	; 0x03
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	3f ef       	ldi	r19, 0xFF	; 255
    6824:	4f e7       	ldi	r20, 0x7F	; 127
    6826:	57 e4       	ldi	r21, 0x47	; 71
    6828:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    682c:	18 16       	cp	r1, r24
    682e:	0c f0       	brlt	.+2      	; 0x6832 <main+0x34e2>
    6830:	10 e0       	ldi	r17, 0x00	; 0
    6832:	11 23       	and	r17, r17
    6834:	09 f4       	brne	.+2      	; 0x6838 <main+0x34e8>
    6836:	4d c0       	rjmp	.+154    	; 0x68d2 <main+0x3582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6838:	ce 01       	movw	r24, r28
    683a:	8d 55       	subi	r24, 0x5D	; 93
    683c:	9e 4f       	sbci	r25, 0xFE	; 254
    683e:	fc 01       	movw	r30, r24
    6840:	60 81       	ld	r22, Z
    6842:	71 81       	ldd	r23, Z+1	; 0x01
    6844:	82 81       	ldd	r24, Z+2	; 0x02
    6846:	93 81       	ldd	r25, Z+3	; 0x03
    6848:	20 e0       	ldi	r18, 0x00	; 0
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	40 e2       	ldi	r20, 0x20	; 32
    684e:	51 e4       	ldi	r21, 0x41	; 65
    6850:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6854:	dc 01       	movw	r26, r24
    6856:	cb 01       	movw	r24, r22
    6858:	8e 01       	movw	r16, r28
    685a:	05 55       	subi	r16, 0x55	; 85
    685c:	1e 4f       	sbci	r17, 0xFE	; 254
    685e:	bc 01       	movw	r22, r24
    6860:	cd 01       	movw	r24, r26
    6862:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6866:	dc 01       	movw	r26, r24
    6868:	cb 01       	movw	r24, r22
    686a:	f8 01       	movw	r30, r16
    686c:	91 83       	std	Z+1, r25	; 0x01
    686e:	80 83       	st	Z, r24
    6870:	27 c0       	rjmp	.+78     	; 0x68c0 <main+0x3570>
    6872:	ce 01       	movw	r24, r28
    6874:	83 55       	subi	r24, 0x53	; 83
    6876:	9e 4f       	sbci	r25, 0xFE	; 254
    6878:	20 e7       	ldi	r18, 0x70	; 112
    687a:	31 e0       	ldi	r19, 0x01	; 1
    687c:	fc 01       	movw	r30, r24
    687e:	31 83       	std	Z+1, r19	; 0x01
    6880:	20 83       	st	Z, r18
    6882:	ce 01       	movw	r24, r28
    6884:	83 55       	subi	r24, 0x53	; 83
    6886:	9e 4f       	sbci	r25, 0xFE	; 254
    6888:	fc 01       	movw	r30, r24
    688a:	80 81       	ld	r24, Z
    688c:	91 81       	ldd	r25, Z+1	; 0x01
    688e:	8c 01       	movw	r16, r24
    6890:	c8 01       	movw	r24, r16
    6892:	01 97       	sbiw	r24, 0x01	; 1
    6894:	f1 f7       	brne	.-4      	; 0x6892 <main+0x3542>
    6896:	8c 01       	movw	r16, r24
    6898:	ce 01       	movw	r24, r28
    689a:	83 55       	subi	r24, 0x53	; 83
    689c:	9e 4f       	sbci	r25, 0xFE	; 254
    689e:	fc 01       	movw	r30, r24
    68a0:	11 83       	std	Z+1, r17	; 0x01
    68a2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a4:	ce 01       	movw	r24, r28
    68a6:	85 55       	subi	r24, 0x55	; 85
    68a8:	9e 4f       	sbci	r25, 0xFE	; 254
    68aa:	9e 01       	movw	r18, r28
    68ac:	25 55       	subi	r18, 0x55	; 85
    68ae:	3e 4f       	sbci	r19, 0xFE	; 254
    68b0:	f9 01       	movw	r30, r18
    68b2:	20 81       	ld	r18, Z
    68b4:	31 81       	ldd	r19, Z+1	; 0x01
    68b6:	21 50       	subi	r18, 0x01	; 1
    68b8:	30 40       	sbci	r19, 0x00	; 0
    68ba:	fc 01       	movw	r30, r24
    68bc:	31 83       	std	Z+1, r19	; 0x01
    68be:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68c0:	ce 01       	movw	r24, r28
    68c2:	85 55       	subi	r24, 0x55	; 85
    68c4:	9e 4f       	sbci	r25, 0xFE	; 254
    68c6:	fc 01       	movw	r30, r24
    68c8:	80 81       	ld	r24, Z
    68ca:	91 81       	ldd	r25, Z+1	; 0x01
    68cc:	00 97       	sbiw	r24, 0x00	; 0
    68ce:	89 f6       	brne	.-94     	; 0x6872 <main+0x3522>
    68d0:	2f c0       	rjmp	.+94     	; 0x6930 <main+0x35e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68d2:	8e 01       	movw	r16, r28
    68d4:	05 55       	subi	r16, 0x55	; 85
    68d6:	1e 4f       	sbci	r17, 0xFE	; 254
    68d8:	ce 01       	movw	r24, r28
    68da:	89 55       	subi	r24, 0x59	; 89
    68dc:	9e 4f       	sbci	r25, 0xFE	; 254
    68de:	fc 01       	movw	r30, r24
    68e0:	60 81       	ld	r22, Z
    68e2:	71 81       	ldd	r23, Z+1	; 0x01
    68e4:	82 81       	ldd	r24, Z+2	; 0x02
    68e6:	93 81       	ldd	r25, Z+3	; 0x03
    68e8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    68ec:	dc 01       	movw	r26, r24
    68ee:	cb 01       	movw	r24, r22
    68f0:	f8 01       	movw	r30, r16
    68f2:	91 83       	std	Z+1, r25	; 0x01
    68f4:	80 83       	st	Z, r24
    68f6:	ce 01       	movw	r24, r28
    68f8:	81 55       	subi	r24, 0x51	; 81
    68fa:	9e 4f       	sbci	r25, 0xFE	; 254
    68fc:	9e 01       	movw	r18, r28
    68fe:	25 55       	subi	r18, 0x55	; 85
    6900:	3e 4f       	sbci	r19, 0xFE	; 254
    6902:	f9 01       	movw	r30, r18
    6904:	20 81       	ld	r18, Z
    6906:	31 81       	ldd	r19, Z+1	; 0x01
    6908:	fc 01       	movw	r30, r24
    690a:	31 83       	std	Z+1, r19	; 0x01
    690c:	20 83       	st	Z, r18
    690e:	ce 01       	movw	r24, r28
    6910:	81 55       	subi	r24, 0x51	; 81
    6912:	9e 4f       	sbci	r25, 0xFE	; 254
    6914:	fc 01       	movw	r30, r24
    6916:	80 81       	ld	r24, Z
    6918:	91 81       	ldd	r25, Z+1	; 0x01
    691a:	8c 01       	movw	r16, r24
    691c:	c8 01       	movw	r24, r16
    691e:	01 97       	sbiw	r24, 0x01	; 1
    6920:	f1 f7       	brne	.-4      	; 0x691e <main+0x35ce>
    6922:	8c 01       	movw	r16, r24
    6924:	ce 01       	movw	r24, r28
    6926:	81 55       	subi	r24, 0x51	; 81
    6928:	9e 4f       	sbci	r25, 0xFE	; 254
    692a:	fc 01       	movw	r30, r24
    692c:	11 83       	std	Z+1, r17	; 0x01
    692e:	00 83       	st	Z, r16
									_delay_ms(100);
									linefollwer();
    6930:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
    6934:	bd c1       	rjmp	.+890    	; 0x6cb0 <main+0x3960>
								}
								else
								{
									if(compass==4)
    6936:	8b 81       	ldd	r24, Y+3	; 0x03
    6938:	9c 81       	ldd	r25, Y+4	; 0x04
    693a:	84 30       	cpi	r24, 0x04	; 4
    693c:	91 05       	cpc	r25, r1
    693e:	09 f0       	breq	.+2      	; 0x6942 <main+0x35f2>
    6940:	b7 c1       	rjmp	.+878    	; 0x6cb0 <main+0x3960>
									{
										coor[1]=coor[1]-1;
    6942:	80 91 a8 04 	lds	r24, 0x04A8
    6946:	90 91 a9 04 	lds	r25, 0x04A9
    694a:	01 97       	sbiw	r24, 0x01	; 1
    694c:	90 93 a9 04 	sts	0x04A9, r25
    6950:	80 93 a8 04 	sts	0x04A8, r24
										compass=5;
    6954:	85 e0       	ldi	r24, 0x05	; 5
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	9c 83       	std	Y+4, r25	; 0x04
    695a:	8b 83       	std	Y+3, r24	; 0x03
    695c:	9e 01       	movw	r18, r28
    695e:	2f 54       	subi	r18, 0x4F	; 79
    6960:	3e 4f       	sbci	r19, 0xFE	; 254
    6962:	80 e0       	ldi	r24, 0x00	; 0
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	aa ef       	ldi	r26, 0xFA	; 250
    6968:	b3 e4       	ldi	r27, 0x43	; 67
    696a:	f9 01       	movw	r30, r18
    696c:	80 83       	st	Z, r24
    696e:	91 83       	std	Z+1, r25	; 0x01
    6970:	a2 83       	std	Z+2, r26	; 0x02
    6972:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6974:	8e 01       	movw	r16, r28
    6976:	0b 54       	subi	r16, 0x4B	; 75
    6978:	1e 4f       	sbci	r17, 0xFE	; 254
    697a:	ce 01       	movw	r24, r28
    697c:	8f 54       	subi	r24, 0x4F	; 79
    697e:	9e 4f       	sbci	r25, 0xFE	; 254
    6980:	fc 01       	movw	r30, r24
    6982:	60 81       	ld	r22, Z
    6984:	71 81       	ldd	r23, Z+1	; 0x01
    6986:	82 81       	ldd	r24, Z+2	; 0x02
    6988:	93 81       	ldd	r25, Z+3	; 0x03
    698a:	26 e6       	ldi	r18, 0x66	; 102
    698c:	36 e6       	ldi	r19, 0x66	; 102
    698e:	46 e6       	ldi	r20, 0x66	; 102
    6990:	55 e4       	ldi	r21, 0x45	; 69
    6992:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6996:	dc 01       	movw	r26, r24
    6998:	cb 01       	movw	r24, r22
    699a:	f8 01       	movw	r30, r16
    699c:	80 83       	st	Z, r24
    699e:	91 83       	std	Z+1, r25	; 0x01
    69a0:	a2 83       	std	Z+2, r26	; 0x02
    69a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    69a4:	ce 01       	movw	r24, r28
    69a6:	8b 54       	subi	r24, 0x4B	; 75
    69a8:	9e 4f       	sbci	r25, 0xFE	; 254
    69aa:	11 e0       	ldi	r17, 0x01	; 1
    69ac:	fc 01       	movw	r30, r24
    69ae:	60 81       	ld	r22, Z
    69b0:	71 81       	ldd	r23, Z+1	; 0x01
    69b2:	82 81       	ldd	r24, Z+2	; 0x02
    69b4:	93 81       	ldd	r25, Z+3	; 0x03
    69b6:	20 e0       	ldi	r18, 0x00	; 0
    69b8:	30 e0       	ldi	r19, 0x00	; 0
    69ba:	40 e8       	ldi	r20, 0x80	; 128
    69bc:	5f e3       	ldi	r21, 0x3F	; 63
    69be:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    69c2:	88 23       	and	r24, r24
    69c4:	0c f0       	brlt	.+2      	; 0x69c8 <main+0x3678>
    69c6:	10 e0       	ldi	r17, 0x00	; 0
    69c8:	11 23       	and	r17, r17
    69ca:	49 f0       	breq	.+18     	; 0x69de <main+0x368e>
		__ticks = 1;
    69cc:	ce 01       	movw	r24, r28
    69ce:	87 54       	subi	r24, 0x47	; 71
    69d0:	9e 4f       	sbci	r25, 0xFE	; 254
    69d2:	21 e0       	ldi	r18, 0x01	; 1
    69d4:	30 e0       	ldi	r19, 0x00	; 0
    69d6:	fc 01       	movw	r30, r24
    69d8:	31 83       	std	Z+1, r19	; 0x01
    69da:	20 83       	st	Z, r18
    69dc:	74 c0       	rjmp	.+232    	; 0x6ac6 <main+0x3776>
	else if (__tmp > 65535)
    69de:	ce 01       	movw	r24, r28
    69e0:	8b 54       	subi	r24, 0x4B	; 75
    69e2:	9e 4f       	sbci	r25, 0xFE	; 254
    69e4:	11 e0       	ldi	r17, 0x01	; 1
    69e6:	fc 01       	movw	r30, r24
    69e8:	60 81       	ld	r22, Z
    69ea:	71 81       	ldd	r23, Z+1	; 0x01
    69ec:	82 81       	ldd	r24, Z+2	; 0x02
    69ee:	93 81       	ldd	r25, Z+3	; 0x03
    69f0:	20 e0       	ldi	r18, 0x00	; 0
    69f2:	3f ef       	ldi	r19, 0xFF	; 255
    69f4:	4f e7       	ldi	r20, 0x7F	; 127
    69f6:	57 e4       	ldi	r21, 0x47	; 71
    69f8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    69fc:	18 16       	cp	r1, r24
    69fe:	0c f0       	brlt	.+2      	; 0x6a02 <main+0x36b2>
    6a00:	10 e0       	ldi	r17, 0x00	; 0
    6a02:	11 23       	and	r17, r17
    6a04:	09 f4       	brne	.+2      	; 0x6a08 <main+0x36b8>
    6a06:	4d c0       	rjmp	.+154    	; 0x6aa2 <main+0x3752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a08:	ce 01       	movw	r24, r28
    6a0a:	8f 54       	subi	r24, 0x4F	; 79
    6a0c:	9e 4f       	sbci	r25, 0xFE	; 254
    6a0e:	fc 01       	movw	r30, r24
    6a10:	60 81       	ld	r22, Z
    6a12:	71 81       	ldd	r23, Z+1	; 0x01
    6a14:	82 81       	ldd	r24, Z+2	; 0x02
    6a16:	93 81       	ldd	r25, Z+3	; 0x03
    6a18:	20 e0       	ldi	r18, 0x00	; 0
    6a1a:	30 e0       	ldi	r19, 0x00	; 0
    6a1c:	40 e2       	ldi	r20, 0x20	; 32
    6a1e:	51 e4       	ldi	r21, 0x41	; 65
    6a20:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6a24:	dc 01       	movw	r26, r24
    6a26:	cb 01       	movw	r24, r22
    6a28:	8e 01       	movw	r16, r28
    6a2a:	07 54       	subi	r16, 0x47	; 71
    6a2c:	1e 4f       	sbci	r17, 0xFE	; 254
    6a2e:	bc 01       	movw	r22, r24
    6a30:	cd 01       	movw	r24, r26
    6a32:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6a36:	dc 01       	movw	r26, r24
    6a38:	cb 01       	movw	r24, r22
    6a3a:	f8 01       	movw	r30, r16
    6a3c:	91 83       	std	Z+1, r25	; 0x01
    6a3e:	80 83       	st	Z, r24
    6a40:	27 c0       	rjmp	.+78     	; 0x6a90 <main+0x3740>
    6a42:	ce 01       	movw	r24, r28
    6a44:	85 54       	subi	r24, 0x45	; 69
    6a46:	9e 4f       	sbci	r25, 0xFE	; 254
    6a48:	20 e7       	ldi	r18, 0x70	; 112
    6a4a:	31 e0       	ldi	r19, 0x01	; 1
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	31 83       	std	Z+1, r19	; 0x01
    6a50:	20 83       	st	Z, r18
    6a52:	ce 01       	movw	r24, r28
    6a54:	85 54       	subi	r24, 0x45	; 69
    6a56:	9e 4f       	sbci	r25, 0xFE	; 254
    6a58:	fc 01       	movw	r30, r24
    6a5a:	80 81       	ld	r24, Z
    6a5c:	91 81       	ldd	r25, Z+1	; 0x01
    6a5e:	8c 01       	movw	r16, r24
    6a60:	c8 01       	movw	r24, r16
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	f1 f7       	brne	.-4      	; 0x6a62 <main+0x3712>
    6a66:	8c 01       	movw	r16, r24
    6a68:	ce 01       	movw	r24, r28
    6a6a:	85 54       	subi	r24, 0x45	; 69
    6a6c:	9e 4f       	sbci	r25, 0xFE	; 254
    6a6e:	fc 01       	movw	r30, r24
    6a70:	11 83       	std	Z+1, r17	; 0x01
    6a72:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a74:	ce 01       	movw	r24, r28
    6a76:	87 54       	subi	r24, 0x47	; 71
    6a78:	9e 4f       	sbci	r25, 0xFE	; 254
    6a7a:	9e 01       	movw	r18, r28
    6a7c:	27 54       	subi	r18, 0x47	; 71
    6a7e:	3e 4f       	sbci	r19, 0xFE	; 254
    6a80:	f9 01       	movw	r30, r18
    6a82:	20 81       	ld	r18, Z
    6a84:	31 81       	ldd	r19, Z+1	; 0x01
    6a86:	21 50       	subi	r18, 0x01	; 1
    6a88:	30 40       	sbci	r19, 0x00	; 0
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	31 83       	std	Z+1, r19	; 0x01
    6a8e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a90:	ce 01       	movw	r24, r28
    6a92:	87 54       	subi	r24, 0x47	; 71
    6a94:	9e 4f       	sbci	r25, 0xFE	; 254
    6a96:	fc 01       	movw	r30, r24
    6a98:	80 81       	ld	r24, Z
    6a9a:	91 81       	ldd	r25, Z+1	; 0x01
    6a9c:	00 97       	sbiw	r24, 0x00	; 0
    6a9e:	89 f6       	brne	.-94     	; 0x6a42 <main+0x36f2>
    6aa0:	2f c0       	rjmp	.+94     	; 0x6b00 <main+0x37b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6aa2:	8e 01       	movw	r16, r28
    6aa4:	07 54       	subi	r16, 0x47	; 71
    6aa6:	1e 4f       	sbci	r17, 0xFE	; 254
    6aa8:	ce 01       	movw	r24, r28
    6aaa:	8b 54       	subi	r24, 0x4B	; 75
    6aac:	9e 4f       	sbci	r25, 0xFE	; 254
    6aae:	fc 01       	movw	r30, r24
    6ab0:	60 81       	ld	r22, Z
    6ab2:	71 81       	ldd	r23, Z+1	; 0x01
    6ab4:	82 81       	ldd	r24, Z+2	; 0x02
    6ab6:	93 81       	ldd	r25, Z+3	; 0x03
    6ab8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6abc:	dc 01       	movw	r26, r24
    6abe:	cb 01       	movw	r24, r22
    6ac0:	f8 01       	movw	r30, r16
    6ac2:	91 83       	std	Z+1, r25	; 0x01
    6ac4:	80 83       	st	Z, r24
    6ac6:	ce 01       	movw	r24, r28
    6ac8:	83 54       	subi	r24, 0x43	; 67
    6aca:	9e 4f       	sbci	r25, 0xFE	; 254
    6acc:	9e 01       	movw	r18, r28
    6ace:	27 54       	subi	r18, 0x47	; 71
    6ad0:	3e 4f       	sbci	r19, 0xFE	; 254
    6ad2:	f9 01       	movw	r30, r18
    6ad4:	20 81       	ld	r18, Z
    6ad6:	31 81       	ldd	r19, Z+1	; 0x01
    6ad8:	fc 01       	movw	r30, r24
    6ada:	31 83       	std	Z+1, r19	; 0x01
    6adc:	20 83       	st	Z, r18
    6ade:	ce 01       	movw	r24, r28
    6ae0:	83 54       	subi	r24, 0x43	; 67
    6ae2:	9e 4f       	sbci	r25, 0xFE	; 254
    6ae4:	fc 01       	movw	r30, r24
    6ae6:	80 81       	ld	r24, Z
    6ae8:	91 81       	ldd	r25, Z+1	; 0x01
    6aea:	8c 01       	movw	r16, r24
    6aec:	c8 01       	movw	r24, r16
    6aee:	01 97       	sbiw	r24, 0x01	; 1
    6af0:	f1 f7       	brne	.-4      	; 0x6aee <main+0x379e>
    6af2:	8c 01       	movw	r16, r24
    6af4:	ce 01       	movw	r24, r28
    6af6:	83 54       	subi	r24, 0x43	; 67
    6af8:	9e 4f       	sbci	r25, 0xFE	; 254
    6afa:	fc 01       	movw	r30, r24
    6afc:	11 83       	std	Z+1, r17	; 0x01
    6afe:	00 83       	st	Z, r16
										_delay_ms(500);
										right_degrees(185);
    6b00:	89 eb       	ldi	r24, 0xB9	; 185
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    6b08:	9e 01       	movw	r18, r28
    6b0a:	21 54       	subi	r18, 0x41	; 65
    6b0c:	3e 4f       	sbci	r19, 0xFE	; 254
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	a8 ec       	ldi	r26, 0xC8	; 200
    6b14:	b2 e4       	ldi	r27, 0x42	; 66
    6b16:	f9 01       	movw	r30, r18
    6b18:	80 83       	st	Z, r24
    6b1a:	91 83       	std	Z+1, r25	; 0x01
    6b1c:	a2 83       	std	Z+2, r26	; 0x02
    6b1e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b20:	8e 01       	movw	r16, r28
    6b22:	0d 53       	subi	r16, 0x3D	; 61
    6b24:	1e 4f       	sbci	r17, 0xFE	; 254
    6b26:	ce 01       	movw	r24, r28
    6b28:	81 54       	subi	r24, 0x41	; 65
    6b2a:	9e 4f       	sbci	r25, 0xFE	; 254
    6b2c:	fc 01       	movw	r30, r24
    6b2e:	60 81       	ld	r22, Z
    6b30:	71 81       	ldd	r23, Z+1	; 0x01
    6b32:	82 81       	ldd	r24, Z+2	; 0x02
    6b34:	93 81       	ldd	r25, Z+3	; 0x03
    6b36:	26 e6       	ldi	r18, 0x66	; 102
    6b38:	36 e6       	ldi	r19, 0x66	; 102
    6b3a:	46 e6       	ldi	r20, 0x66	; 102
    6b3c:	55 e4       	ldi	r21, 0x45	; 69
    6b3e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6b42:	dc 01       	movw	r26, r24
    6b44:	cb 01       	movw	r24, r22
    6b46:	f8 01       	movw	r30, r16
    6b48:	80 83       	st	Z, r24
    6b4a:	91 83       	std	Z+1, r25	; 0x01
    6b4c:	a2 83       	std	Z+2, r26	; 0x02
    6b4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6b50:	ce 01       	movw	r24, r28
    6b52:	8d 53       	subi	r24, 0x3D	; 61
    6b54:	9e 4f       	sbci	r25, 0xFE	; 254
    6b56:	11 e0       	ldi	r17, 0x01	; 1
    6b58:	fc 01       	movw	r30, r24
    6b5a:	60 81       	ld	r22, Z
    6b5c:	71 81       	ldd	r23, Z+1	; 0x01
    6b5e:	82 81       	ldd	r24, Z+2	; 0x02
    6b60:	93 81       	ldd	r25, Z+3	; 0x03
    6b62:	20 e0       	ldi	r18, 0x00	; 0
    6b64:	30 e0       	ldi	r19, 0x00	; 0
    6b66:	40 e8       	ldi	r20, 0x80	; 128
    6b68:	5f e3       	ldi	r21, 0x3F	; 63
    6b6a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    6b6e:	88 23       	and	r24, r24
    6b70:	0c f0       	brlt	.+2      	; 0x6b74 <main+0x3824>
    6b72:	10 e0       	ldi	r17, 0x00	; 0
    6b74:	11 23       	and	r17, r17
    6b76:	49 f0       	breq	.+18     	; 0x6b8a <main+0x383a>
		__ticks = 1;
    6b78:	ce 01       	movw	r24, r28
    6b7a:	89 53       	subi	r24, 0x39	; 57
    6b7c:	9e 4f       	sbci	r25, 0xFE	; 254
    6b7e:	21 e0       	ldi	r18, 0x01	; 1
    6b80:	30 e0       	ldi	r19, 0x00	; 0
    6b82:	fc 01       	movw	r30, r24
    6b84:	31 83       	std	Z+1, r19	; 0x01
    6b86:	20 83       	st	Z, r18
    6b88:	74 c0       	rjmp	.+232    	; 0x6c72 <main+0x3922>
	else if (__tmp > 65535)
    6b8a:	ce 01       	movw	r24, r28
    6b8c:	8d 53       	subi	r24, 0x3D	; 61
    6b8e:	9e 4f       	sbci	r25, 0xFE	; 254
    6b90:	11 e0       	ldi	r17, 0x01	; 1
    6b92:	fc 01       	movw	r30, r24
    6b94:	60 81       	ld	r22, Z
    6b96:	71 81       	ldd	r23, Z+1	; 0x01
    6b98:	82 81       	ldd	r24, Z+2	; 0x02
    6b9a:	93 81       	ldd	r25, Z+3	; 0x03
    6b9c:	20 e0       	ldi	r18, 0x00	; 0
    6b9e:	3f ef       	ldi	r19, 0xFF	; 255
    6ba0:	4f e7       	ldi	r20, 0x7F	; 127
    6ba2:	57 e4       	ldi	r21, 0x47	; 71
    6ba4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    6ba8:	18 16       	cp	r1, r24
    6baa:	0c f0       	brlt	.+2      	; 0x6bae <main+0x385e>
    6bac:	10 e0       	ldi	r17, 0x00	; 0
    6bae:	11 23       	and	r17, r17
    6bb0:	09 f4       	brne	.+2      	; 0x6bb4 <main+0x3864>
    6bb2:	4d c0       	rjmp	.+154    	; 0x6c4e <main+0x38fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bb4:	ce 01       	movw	r24, r28
    6bb6:	81 54       	subi	r24, 0x41	; 65
    6bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    6bba:	fc 01       	movw	r30, r24
    6bbc:	60 81       	ld	r22, Z
    6bbe:	71 81       	ldd	r23, Z+1	; 0x01
    6bc0:	82 81       	ldd	r24, Z+2	; 0x02
    6bc2:	93 81       	ldd	r25, Z+3	; 0x03
    6bc4:	20 e0       	ldi	r18, 0x00	; 0
    6bc6:	30 e0       	ldi	r19, 0x00	; 0
    6bc8:	40 e2       	ldi	r20, 0x20	; 32
    6bca:	51 e4       	ldi	r21, 0x41	; 65
    6bcc:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6bd0:	dc 01       	movw	r26, r24
    6bd2:	cb 01       	movw	r24, r22
    6bd4:	8e 01       	movw	r16, r28
    6bd6:	09 53       	subi	r16, 0x39	; 57
    6bd8:	1e 4f       	sbci	r17, 0xFE	; 254
    6bda:	bc 01       	movw	r22, r24
    6bdc:	cd 01       	movw	r24, r26
    6bde:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6be2:	dc 01       	movw	r26, r24
    6be4:	cb 01       	movw	r24, r22
    6be6:	f8 01       	movw	r30, r16
    6be8:	91 83       	std	Z+1, r25	; 0x01
    6bea:	80 83       	st	Z, r24
    6bec:	27 c0       	rjmp	.+78     	; 0x6c3c <main+0x38ec>
    6bee:	ce 01       	movw	r24, r28
    6bf0:	87 53       	subi	r24, 0x37	; 55
    6bf2:	9e 4f       	sbci	r25, 0xFE	; 254
    6bf4:	20 e7       	ldi	r18, 0x70	; 112
    6bf6:	31 e0       	ldi	r19, 0x01	; 1
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	31 83       	std	Z+1, r19	; 0x01
    6bfc:	20 83       	st	Z, r18
    6bfe:	ce 01       	movw	r24, r28
    6c00:	87 53       	subi	r24, 0x37	; 55
    6c02:	9e 4f       	sbci	r25, 0xFE	; 254
    6c04:	fc 01       	movw	r30, r24
    6c06:	80 81       	ld	r24, Z
    6c08:	91 81       	ldd	r25, Z+1	; 0x01
    6c0a:	8c 01       	movw	r16, r24
    6c0c:	c8 01       	movw	r24, r16
    6c0e:	01 97       	sbiw	r24, 0x01	; 1
    6c10:	f1 f7       	brne	.-4      	; 0x6c0e <main+0x38be>
    6c12:	8c 01       	movw	r16, r24
    6c14:	ce 01       	movw	r24, r28
    6c16:	87 53       	subi	r24, 0x37	; 55
    6c18:	9e 4f       	sbci	r25, 0xFE	; 254
    6c1a:	fc 01       	movw	r30, r24
    6c1c:	11 83       	std	Z+1, r17	; 0x01
    6c1e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c20:	ce 01       	movw	r24, r28
    6c22:	89 53       	subi	r24, 0x39	; 57
    6c24:	9e 4f       	sbci	r25, 0xFE	; 254
    6c26:	9e 01       	movw	r18, r28
    6c28:	29 53       	subi	r18, 0x39	; 57
    6c2a:	3e 4f       	sbci	r19, 0xFE	; 254
    6c2c:	f9 01       	movw	r30, r18
    6c2e:	20 81       	ld	r18, Z
    6c30:	31 81       	ldd	r19, Z+1	; 0x01
    6c32:	21 50       	subi	r18, 0x01	; 1
    6c34:	30 40       	sbci	r19, 0x00	; 0
    6c36:	fc 01       	movw	r30, r24
    6c38:	31 83       	std	Z+1, r19	; 0x01
    6c3a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c3c:	ce 01       	movw	r24, r28
    6c3e:	89 53       	subi	r24, 0x39	; 57
    6c40:	9e 4f       	sbci	r25, 0xFE	; 254
    6c42:	fc 01       	movw	r30, r24
    6c44:	80 81       	ld	r24, Z
    6c46:	91 81       	ldd	r25, Z+1	; 0x01
    6c48:	00 97       	sbiw	r24, 0x00	; 0
    6c4a:	89 f6       	brne	.-94     	; 0x6bee <main+0x389e>
    6c4c:	2f c0       	rjmp	.+94     	; 0x6cac <main+0x395c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c4e:	8e 01       	movw	r16, r28
    6c50:	09 53       	subi	r16, 0x39	; 57
    6c52:	1e 4f       	sbci	r17, 0xFE	; 254
    6c54:	ce 01       	movw	r24, r28
    6c56:	8d 53       	subi	r24, 0x3D	; 61
    6c58:	9e 4f       	sbci	r25, 0xFE	; 254
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	60 81       	ld	r22, Z
    6c5e:	71 81       	ldd	r23, Z+1	; 0x01
    6c60:	82 81       	ldd	r24, Z+2	; 0x02
    6c62:	93 81       	ldd	r25, Z+3	; 0x03
    6c64:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6c68:	dc 01       	movw	r26, r24
    6c6a:	cb 01       	movw	r24, r22
    6c6c:	f8 01       	movw	r30, r16
    6c6e:	91 83       	std	Z+1, r25	; 0x01
    6c70:	80 83       	st	Z, r24
    6c72:	ce 01       	movw	r24, r28
    6c74:	85 53       	subi	r24, 0x35	; 53
    6c76:	9e 4f       	sbci	r25, 0xFE	; 254
    6c78:	9e 01       	movw	r18, r28
    6c7a:	29 53       	subi	r18, 0x39	; 57
    6c7c:	3e 4f       	sbci	r19, 0xFE	; 254
    6c7e:	f9 01       	movw	r30, r18
    6c80:	20 81       	ld	r18, Z
    6c82:	31 81       	ldd	r19, Z+1	; 0x01
    6c84:	fc 01       	movw	r30, r24
    6c86:	31 83       	std	Z+1, r19	; 0x01
    6c88:	20 83       	st	Z, r18
    6c8a:	ce 01       	movw	r24, r28
    6c8c:	85 53       	subi	r24, 0x35	; 53
    6c8e:	9e 4f       	sbci	r25, 0xFE	; 254
    6c90:	fc 01       	movw	r30, r24
    6c92:	80 81       	ld	r24, Z
    6c94:	91 81       	ldd	r25, Z+1	; 0x01
    6c96:	8c 01       	movw	r16, r24
    6c98:	c8 01       	movw	r24, r16
    6c9a:	01 97       	sbiw	r24, 0x01	; 1
    6c9c:	f1 f7       	brne	.-4      	; 0x6c9a <main+0x394a>
    6c9e:	8c 01       	movw	r16, r24
    6ca0:	ce 01       	movw	r24, r28
    6ca2:	85 53       	subi	r24, 0x35	; 53
    6ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    6ca6:	fc 01       	movw	r30, r24
    6ca8:	11 83       	std	Z+1, r17	; 0x01
    6caa:	00 83       	st	Z, r16
										_delay_ms(100);
										linefollwer();
    6cac:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
				}
			}
		}							
			
	}		
		if(final[0]==coor[0] && final[1]==coor[1])
    6cb0:	ce 01       	movw	r24, r28
    6cb2:	8d 52       	subi	r24, 0x2D	; 45
    6cb4:	99 4f       	sbci	r25, 0xF9	; 249
    6cb6:	fc 01       	movw	r30, r24
    6cb8:	20 81       	ld	r18, Z
    6cba:	31 81       	ldd	r19, Z+1	; 0x01
    6cbc:	80 91 a6 04 	lds	r24, 0x04A6
    6cc0:	90 91 a7 04 	lds	r25, 0x04A7
    6cc4:	28 17       	cp	r18, r24
    6cc6:	39 07       	cpc	r19, r25
    6cc8:	11 f0       	breq	.+4      	; 0x6cce <main+0x397e>
    6cca:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <main+0x7c4>
    6cce:	ce 01       	movw	r24, r28
    6cd0:	8d 52       	subi	r24, 0x2D	; 45
    6cd2:	99 4f       	sbci	r25, 0xF9	; 249
    6cd4:	fc 01       	movw	r30, r24
    6cd6:	22 81       	ldd	r18, Z+2	; 0x02
    6cd8:	33 81       	ldd	r19, Z+3	; 0x03
    6cda:	80 91 a8 04 	lds	r24, 0x04A8
    6cde:	90 91 a9 04 	lds	r25, 0x04A9
    6ce2:	28 17       	cp	r18, r24
    6ce4:	39 07       	cpc	r19, r25
    6ce6:	11 f0       	breq	.+4      	; 0x6cec <main+0x399c>
    6ce8:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <main+0x7c4>
		{
			if(coor[0]==0 && coor[1]==0 && flag4==1)
    6cec:	80 91 a6 04 	lds	r24, 0x04A6
    6cf0:	90 91 a7 04 	lds	r25, 0x04A7
    6cf4:	00 97       	sbiw	r24, 0x00	; 0
    6cf6:	59 f4       	brne	.+22     	; 0x6d0e <main+0x39be>
    6cf8:	80 91 a8 04 	lds	r24, 0x04A8
    6cfc:	90 91 a9 04 	lds	r25, 0x04A9
    6d00:	00 97       	sbiw	r24, 0x00	; 0
    6d02:	29 f4       	brne	.+10     	; 0x6d0e <main+0x39be>
    6d04:	89 89       	ldd	r24, Y+17	; 0x11
    6d06:	9a 89       	ldd	r25, Y+18	; 0x12
    6d08:	81 30       	cpi	r24, 0x01	; 1
    6d0a:	91 05       	cpc	r25, r1
    6d0c:	a9 f0       	breq	.+42     	; 0x6d38 <main+0x39e8>
			{
				break;
			}
			else
			{
				if(flag1%2!=0)
    6d0e:	89 81       	ldd	r24, Y+1	; 0x01
    6d10:	9a 81       	ldd	r25, Y+2	; 0x02
    6d12:	81 70       	andi	r24, 0x01	; 1
    6d14:	90 70       	andi	r25, 0x00	; 0
    6d16:	88 23       	and	r24, r24
    6d18:	11 f0       	breq	.+4      	; 0x6d1e <main+0x39ce>
    6d1a:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <main+0x49d6>
					goto ppt;
				else
				{
					if(flag1%2==0)
    6d1e:	89 81       	ldd	r24, Y+1	; 0x01
    6d20:	9a 81       	ldd	r25, Y+2	; 0x02
    6d22:	81 70       	andi	r24, 0x01	; 1
    6d24:	90 70       	andi	r25, 0x00	; 0
    6d26:	00 97       	sbiw	r24, 0x00	; 0
    6d28:	11 f4       	brne	.+4      	; 0x6d2e <main+0x39de>
    6d2a:	0c 94 90 42 	jmp	0x8520	; 0x8520 <main+0x51d0>
					    goto ppt1;
					else
						break;
    6d2e:	00 00       	nop
    6d30:	03 c0       	rjmp	.+6      	; 0x6d38 <main+0x39e8>
				}
			}
		}
		
	}
	goto hotspot;
    6d32:	00 00       	nop
    6d34:	01 c0       	rjmp	.+2      	; 0x6d38 <main+0x39e8>
					}
				}					
			}
		}
	}
	goto hotspot;
    6d36:	00 00       	nop
				}						
			}					
		}
	}
	
	hotspot: if(coor[0]==0 && coor[1]==0 && flag1%2!=0)    ////////////////////////////////////////////////////////////////////////////////////
    6d38:	80 91 a6 04 	lds	r24, 0x04A6
    6d3c:	90 91 a7 04 	lds	r25, 0x04A7
    6d40:	00 97       	sbiw	r24, 0x00	; 0
    6d42:	09 f0       	breq	.+2      	; 0x6d46 <main+0x39f6>
    6d44:	d6 c3       	rjmp	.+1964   	; 0x74f2 <main+0x41a2>
    6d46:	80 91 a8 04 	lds	r24, 0x04A8
    6d4a:	90 91 a9 04 	lds	r25, 0x04A9
    6d4e:	00 97       	sbiw	r24, 0x00	; 0
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <main+0x3a04>
    6d52:	cf c3       	rjmp	.+1950   	; 0x74f2 <main+0x41a2>
    6d54:	89 81       	ldd	r24, Y+1	; 0x01
    6d56:	9a 81       	ldd	r25, Y+2	; 0x02
    6d58:	81 70       	andi	r24, 0x01	; 1
    6d5a:	90 70       	andi	r25, 0x00	; 0
    6d5c:	88 23       	and	r24, r24
    6d5e:	09 f4       	brne	.+2      	; 0x6d62 <main+0x3a12>
    6d60:	c8 c3       	rjmp	.+1936   	; 0x74f2 <main+0x41a2>
	{
		if(compass==6)
    6d62:	8b 81       	ldd	r24, Y+3	; 0x03
    6d64:	9c 81       	ldd	r25, Y+4	; 0x04
    6d66:	86 30       	cpi	r24, 0x06	; 6
    6d68:	91 05       	cpc	r25, r1
    6d6a:	09 f0       	breq	.+2      	; 0x6d6e <main+0x3a1e>
    6d6c:	e9 c0       	rjmp	.+466    	; 0x6f40 <main+0x3bf0>
		{
			right_degrees(85);                                
    6d6e:	85 e5       	ldi	r24, 0x55	; 85
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    6d76:	9e 01       	movw	r18, r28
    6d78:	23 53       	subi	r18, 0x33	; 51
    6d7a:	3e 4f       	sbci	r19, 0xFE	; 254
    6d7c:	80 e0       	ldi	r24, 0x00	; 0
    6d7e:	90 e0       	ldi	r25, 0x00	; 0
    6d80:	a8 ec       	ldi	r26, 0xC8	; 200
    6d82:	b2 e4       	ldi	r27, 0x42	; 66
    6d84:	f9 01       	movw	r30, r18
    6d86:	80 83       	st	Z, r24
    6d88:	91 83       	std	Z+1, r25	; 0x01
    6d8a:	a2 83       	std	Z+2, r26	; 0x02
    6d8c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6d8e:	8e 01       	movw	r16, r28
    6d90:	0f 52       	subi	r16, 0x2F	; 47
    6d92:	1e 4f       	sbci	r17, 0xFE	; 254
    6d94:	ce 01       	movw	r24, r28
    6d96:	83 53       	subi	r24, 0x33	; 51
    6d98:	9e 4f       	sbci	r25, 0xFE	; 254
    6d9a:	fc 01       	movw	r30, r24
    6d9c:	60 81       	ld	r22, Z
    6d9e:	71 81       	ldd	r23, Z+1	; 0x01
    6da0:	82 81       	ldd	r24, Z+2	; 0x02
    6da2:	93 81       	ldd	r25, Z+3	; 0x03
    6da4:	26 e6       	ldi	r18, 0x66	; 102
    6da6:	36 e6       	ldi	r19, 0x66	; 102
    6da8:	46 e6       	ldi	r20, 0x66	; 102
    6daa:	55 e4       	ldi	r21, 0x45	; 69
    6dac:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6db0:	dc 01       	movw	r26, r24
    6db2:	cb 01       	movw	r24, r22
    6db4:	f8 01       	movw	r30, r16
    6db6:	80 83       	st	Z, r24
    6db8:	91 83       	std	Z+1, r25	; 0x01
    6dba:	a2 83       	std	Z+2, r26	; 0x02
    6dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6dbe:	ce 01       	movw	r24, r28
    6dc0:	8f 52       	subi	r24, 0x2F	; 47
    6dc2:	9e 4f       	sbci	r25, 0xFE	; 254
    6dc4:	11 e0       	ldi	r17, 0x01	; 1
    6dc6:	fc 01       	movw	r30, r24
    6dc8:	60 81       	ld	r22, Z
    6dca:	71 81       	ldd	r23, Z+1	; 0x01
    6dcc:	82 81       	ldd	r24, Z+2	; 0x02
    6dce:	93 81       	ldd	r25, Z+3	; 0x03
    6dd0:	20 e0       	ldi	r18, 0x00	; 0
    6dd2:	30 e0       	ldi	r19, 0x00	; 0
    6dd4:	40 e8       	ldi	r20, 0x80	; 128
    6dd6:	5f e3       	ldi	r21, 0x3F	; 63
    6dd8:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    6ddc:	88 23       	and	r24, r24
    6dde:	0c f0       	brlt	.+2      	; 0x6de2 <main+0x3a92>
    6de0:	10 e0       	ldi	r17, 0x00	; 0
    6de2:	11 23       	and	r17, r17
    6de4:	49 f0       	breq	.+18     	; 0x6df8 <main+0x3aa8>
		__ticks = 1;
    6de6:	ce 01       	movw	r24, r28
    6de8:	8b 52       	subi	r24, 0x2B	; 43
    6dea:	9e 4f       	sbci	r25, 0xFE	; 254
    6dec:	21 e0       	ldi	r18, 0x01	; 1
    6dee:	30 e0       	ldi	r19, 0x00	; 0
    6df0:	fc 01       	movw	r30, r24
    6df2:	31 83       	std	Z+1, r19	; 0x01
    6df4:	20 83       	st	Z, r18
    6df6:	74 c0       	rjmp	.+232    	; 0x6ee0 <main+0x3b90>
	else if (__tmp > 65535)
    6df8:	ce 01       	movw	r24, r28
    6dfa:	8f 52       	subi	r24, 0x2F	; 47
    6dfc:	9e 4f       	sbci	r25, 0xFE	; 254
    6dfe:	11 e0       	ldi	r17, 0x01	; 1
    6e00:	fc 01       	movw	r30, r24
    6e02:	60 81       	ld	r22, Z
    6e04:	71 81       	ldd	r23, Z+1	; 0x01
    6e06:	82 81       	ldd	r24, Z+2	; 0x02
    6e08:	93 81       	ldd	r25, Z+3	; 0x03
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	3f ef       	ldi	r19, 0xFF	; 255
    6e0e:	4f e7       	ldi	r20, 0x7F	; 127
    6e10:	57 e4       	ldi	r21, 0x47	; 71
    6e12:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    6e16:	18 16       	cp	r1, r24
    6e18:	0c f0       	brlt	.+2      	; 0x6e1c <main+0x3acc>
    6e1a:	10 e0       	ldi	r17, 0x00	; 0
    6e1c:	11 23       	and	r17, r17
    6e1e:	09 f4       	brne	.+2      	; 0x6e22 <main+0x3ad2>
    6e20:	4d c0       	rjmp	.+154    	; 0x6ebc <main+0x3b6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e22:	ce 01       	movw	r24, r28
    6e24:	83 53       	subi	r24, 0x33	; 51
    6e26:	9e 4f       	sbci	r25, 0xFE	; 254
    6e28:	fc 01       	movw	r30, r24
    6e2a:	60 81       	ld	r22, Z
    6e2c:	71 81       	ldd	r23, Z+1	; 0x01
    6e2e:	82 81       	ldd	r24, Z+2	; 0x02
    6e30:	93 81       	ldd	r25, Z+3	; 0x03
    6e32:	20 e0       	ldi	r18, 0x00	; 0
    6e34:	30 e0       	ldi	r19, 0x00	; 0
    6e36:	40 e2       	ldi	r20, 0x20	; 32
    6e38:	51 e4       	ldi	r21, 0x41	; 65
    6e3a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6e3e:	dc 01       	movw	r26, r24
    6e40:	cb 01       	movw	r24, r22
    6e42:	8e 01       	movw	r16, r28
    6e44:	0b 52       	subi	r16, 0x2B	; 43
    6e46:	1e 4f       	sbci	r17, 0xFE	; 254
    6e48:	bc 01       	movw	r22, r24
    6e4a:	cd 01       	movw	r24, r26
    6e4c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6e50:	dc 01       	movw	r26, r24
    6e52:	cb 01       	movw	r24, r22
    6e54:	f8 01       	movw	r30, r16
    6e56:	91 83       	std	Z+1, r25	; 0x01
    6e58:	80 83       	st	Z, r24
    6e5a:	27 c0       	rjmp	.+78     	; 0x6eaa <main+0x3b5a>
    6e5c:	ce 01       	movw	r24, r28
    6e5e:	89 52       	subi	r24, 0x29	; 41
    6e60:	9e 4f       	sbci	r25, 0xFE	; 254
    6e62:	20 e7       	ldi	r18, 0x70	; 112
    6e64:	31 e0       	ldi	r19, 0x01	; 1
    6e66:	fc 01       	movw	r30, r24
    6e68:	31 83       	std	Z+1, r19	; 0x01
    6e6a:	20 83       	st	Z, r18
    6e6c:	ce 01       	movw	r24, r28
    6e6e:	89 52       	subi	r24, 0x29	; 41
    6e70:	9e 4f       	sbci	r25, 0xFE	; 254
    6e72:	fc 01       	movw	r30, r24
    6e74:	80 81       	ld	r24, Z
    6e76:	91 81       	ldd	r25, Z+1	; 0x01
    6e78:	8c 01       	movw	r16, r24
    6e7a:	c8 01       	movw	r24, r16
    6e7c:	01 97       	sbiw	r24, 0x01	; 1
    6e7e:	f1 f7       	brne	.-4      	; 0x6e7c <main+0x3b2c>
    6e80:	8c 01       	movw	r16, r24
    6e82:	ce 01       	movw	r24, r28
    6e84:	89 52       	subi	r24, 0x29	; 41
    6e86:	9e 4f       	sbci	r25, 0xFE	; 254
    6e88:	fc 01       	movw	r30, r24
    6e8a:	11 83       	std	Z+1, r17	; 0x01
    6e8c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e8e:	ce 01       	movw	r24, r28
    6e90:	8b 52       	subi	r24, 0x2B	; 43
    6e92:	9e 4f       	sbci	r25, 0xFE	; 254
    6e94:	9e 01       	movw	r18, r28
    6e96:	2b 52       	subi	r18, 0x2B	; 43
    6e98:	3e 4f       	sbci	r19, 0xFE	; 254
    6e9a:	f9 01       	movw	r30, r18
    6e9c:	20 81       	ld	r18, Z
    6e9e:	31 81       	ldd	r19, Z+1	; 0x01
    6ea0:	21 50       	subi	r18, 0x01	; 1
    6ea2:	30 40       	sbci	r19, 0x00	; 0
    6ea4:	fc 01       	movw	r30, r24
    6ea6:	31 83       	std	Z+1, r19	; 0x01
    6ea8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6eaa:	ce 01       	movw	r24, r28
    6eac:	8b 52       	subi	r24, 0x2B	; 43
    6eae:	9e 4f       	sbci	r25, 0xFE	; 254
    6eb0:	fc 01       	movw	r30, r24
    6eb2:	80 81       	ld	r24, Z
    6eb4:	91 81       	ldd	r25, Z+1	; 0x01
    6eb6:	00 97       	sbiw	r24, 0x00	; 0
    6eb8:	89 f6       	brne	.-94     	; 0x6e5c <main+0x3b0c>
    6eba:	2f c0       	rjmp	.+94     	; 0x6f1a <main+0x3bca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ebc:	8e 01       	movw	r16, r28
    6ebe:	0b 52       	subi	r16, 0x2B	; 43
    6ec0:	1e 4f       	sbci	r17, 0xFE	; 254
    6ec2:	ce 01       	movw	r24, r28
    6ec4:	8f 52       	subi	r24, 0x2F	; 47
    6ec6:	9e 4f       	sbci	r25, 0xFE	; 254
    6ec8:	fc 01       	movw	r30, r24
    6eca:	60 81       	ld	r22, Z
    6ecc:	71 81       	ldd	r23, Z+1	; 0x01
    6ece:	82 81       	ldd	r24, Z+2	; 0x02
    6ed0:	93 81       	ldd	r25, Z+3	; 0x03
    6ed2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    6ed6:	dc 01       	movw	r26, r24
    6ed8:	cb 01       	movw	r24, r22
    6eda:	f8 01       	movw	r30, r16
    6edc:	91 83       	std	Z+1, r25	; 0x01
    6ede:	80 83       	st	Z, r24
    6ee0:	ce 01       	movw	r24, r28
    6ee2:	87 52       	subi	r24, 0x27	; 39
    6ee4:	9e 4f       	sbci	r25, 0xFE	; 254
    6ee6:	9e 01       	movw	r18, r28
    6ee8:	2b 52       	subi	r18, 0x2B	; 43
    6eea:	3e 4f       	sbci	r19, 0xFE	; 254
    6eec:	f9 01       	movw	r30, r18
    6eee:	20 81       	ld	r18, Z
    6ef0:	31 81       	ldd	r19, Z+1	; 0x01
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	31 83       	std	Z+1, r19	; 0x01
    6ef6:	20 83       	st	Z, r18
    6ef8:	ce 01       	movw	r24, r28
    6efa:	87 52       	subi	r24, 0x27	; 39
    6efc:	9e 4f       	sbci	r25, 0xFE	; 254
    6efe:	fc 01       	movw	r30, r24
    6f00:	80 81       	ld	r24, Z
    6f02:	91 81       	ldd	r25, Z+1	; 0x01
    6f04:	8c 01       	movw	r16, r24
    6f06:	c8 01       	movw	r24, r16
    6f08:	01 97       	sbiw	r24, 0x01	; 1
    6f0a:	f1 f7       	brne	.-4      	; 0x6f08 <main+0x3bb8>
    6f0c:	8c 01       	movw	r16, r24
    6f0e:	ce 01       	movw	r24, r28
    6f10:	87 52       	subi	r24, 0x27	; 39
    6f12:	9e 4f       	sbci	r25, 0xFE	; 254
    6f14:	fc 01       	movw	r30, r24
    6f16:	11 83       	std	Z+1, r17	; 0x01
    6f18:	00 83       	st	Z, r16
			_delay_ms(100);
			coor[0]=0;
    6f1a:	10 92 a7 04 	sts	0x04A7, r1
    6f1e:	10 92 a6 04 	sts	0x04A6, r1
			coor[1]=0;
    6f22:	10 92 a9 04 	sts	0x04A9, r1
    6f26:	10 92 a8 04 	sts	0x04A8, r1
			forward_mm(150);
    6f2a:	86 e9       	ldi	r24, 0x96	; 150
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
    6f2e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
			linefollwer();
    6f32:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
			compass=4;
    6f36:	84 e0       	ldi	r24, 0x04	; 4
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	9c 83       	std	Y+4, r25	; 0x04
    6f3c:	8b 83       	std	Y+3, r24	; 0x03
    6f3e:	c0 c2       	rjmp	.+1408   	; 0x74c0 <main+0x4170>
		}
		else
		{
			if(compass==7)
    6f40:	8b 81       	ldd	r24, Y+3	; 0x03
    6f42:	9c 81       	ldd	r25, Y+4	; 0x04
    6f44:	87 30       	cpi	r24, 0x07	; 7
    6f46:	91 05       	cpc	r25, r1
    6f48:	09 f0       	breq	.+2      	; 0x6f4c <main+0x3bfc>
    6f4a:	e9 c0       	rjmp	.+466    	; 0x711e <main+0x3dce>
			{
				left_degrees(85);
    6f4c:	85 e5       	ldi	r24, 0x55	; 85
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    6f54:	9e 01       	movw	r18, r28
    6f56:	25 52       	subi	r18, 0x25	; 37
    6f58:	3e 4f       	sbci	r19, 0xFE	; 254
    6f5a:	80 e0       	ldi	r24, 0x00	; 0
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	a8 ec       	ldi	r26, 0xC8	; 200
    6f60:	b2 e4       	ldi	r27, 0x42	; 66
    6f62:	f9 01       	movw	r30, r18
    6f64:	80 83       	st	Z, r24
    6f66:	91 83       	std	Z+1, r25	; 0x01
    6f68:	a2 83       	std	Z+2, r26	; 0x02
    6f6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6f6c:	8e 01       	movw	r16, r28
    6f6e:	01 52       	subi	r16, 0x21	; 33
    6f70:	1e 4f       	sbci	r17, 0xFE	; 254
    6f72:	ce 01       	movw	r24, r28
    6f74:	85 52       	subi	r24, 0x25	; 37
    6f76:	9e 4f       	sbci	r25, 0xFE	; 254
    6f78:	fc 01       	movw	r30, r24
    6f7a:	60 81       	ld	r22, Z
    6f7c:	71 81       	ldd	r23, Z+1	; 0x01
    6f7e:	82 81       	ldd	r24, Z+2	; 0x02
    6f80:	93 81       	ldd	r25, Z+3	; 0x03
    6f82:	26 e6       	ldi	r18, 0x66	; 102
    6f84:	36 e6       	ldi	r19, 0x66	; 102
    6f86:	46 e6       	ldi	r20, 0x66	; 102
    6f88:	55 e4       	ldi	r21, 0x45	; 69
    6f8a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    6f8e:	dc 01       	movw	r26, r24
    6f90:	cb 01       	movw	r24, r22
    6f92:	f8 01       	movw	r30, r16
    6f94:	80 83       	st	Z, r24
    6f96:	91 83       	std	Z+1, r25	; 0x01
    6f98:	a2 83       	std	Z+2, r26	; 0x02
    6f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	81 52       	subi	r24, 0x21	; 33
    6fa0:	9e 4f       	sbci	r25, 0xFE	; 254
    6fa2:	11 e0       	ldi	r17, 0x01	; 1
    6fa4:	fc 01       	movw	r30, r24
    6fa6:	60 81       	ld	r22, Z
    6fa8:	71 81       	ldd	r23, Z+1	; 0x01
    6faa:	82 81       	ldd	r24, Z+2	; 0x02
    6fac:	93 81       	ldd	r25, Z+3	; 0x03
    6fae:	20 e0       	ldi	r18, 0x00	; 0
    6fb0:	30 e0       	ldi	r19, 0x00	; 0
    6fb2:	40 e8       	ldi	r20, 0x80	; 128
    6fb4:	5f e3       	ldi	r21, 0x3F	; 63
    6fb6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    6fba:	88 23       	and	r24, r24
    6fbc:	0c f0       	brlt	.+2      	; 0x6fc0 <main+0x3c70>
    6fbe:	10 e0       	ldi	r17, 0x00	; 0
    6fc0:	11 23       	and	r17, r17
    6fc2:	49 f0       	breq	.+18     	; 0x6fd6 <main+0x3c86>
		__ticks = 1;
    6fc4:	ce 01       	movw	r24, r28
    6fc6:	8d 51       	subi	r24, 0x1D	; 29
    6fc8:	9e 4f       	sbci	r25, 0xFE	; 254
    6fca:	21 e0       	ldi	r18, 0x01	; 1
    6fcc:	30 e0       	ldi	r19, 0x00	; 0
    6fce:	fc 01       	movw	r30, r24
    6fd0:	31 83       	std	Z+1, r19	; 0x01
    6fd2:	20 83       	st	Z, r18
    6fd4:	74 c0       	rjmp	.+232    	; 0x70be <main+0x3d6e>
	else if (__tmp > 65535)
    6fd6:	ce 01       	movw	r24, r28
    6fd8:	81 52       	subi	r24, 0x21	; 33
    6fda:	9e 4f       	sbci	r25, 0xFE	; 254
    6fdc:	11 e0       	ldi	r17, 0x01	; 1
    6fde:	fc 01       	movw	r30, r24
    6fe0:	60 81       	ld	r22, Z
    6fe2:	71 81       	ldd	r23, Z+1	; 0x01
    6fe4:	82 81       	ldd	r24, Z+2	; 0x02
    6fe6:	93 81       	ldd	r25, Z+3	; 0x03
    6fe8:	20 e0       	ldi	r18, 0x00	; 0
    6fea:	3f ef       	ldi	r19, 0xFF	; 255
    6fec:	4f e7       	ldi	r20, 0x7F	; 127
    6fee:	57 e4       	ldi	r21, 0x47	; 71
    6ff0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    6ff4:	18 16       	cp	r1, r24
    6ff6:	0c f0       	brlt	.+2      	; 0x6ffa <main+0x3caa>
    6ff8:	10 e0       	ldi	r17, 0x00	; 0
    6ffa:	11 23       	and	r17, r17
    6ffc:	09 f4       	brne	.+2      	; 0x7000 <main+0x3cb0>
    6ffe:	4d c0       	rjmp	.+154    	; 0x709a <main+0x3d4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7000:	ce 01       	movw	r24, r28
    7002:	85 52       	subi	r24, 0x25	; 37
    7004:	9e 4f       	sbci	r25, 0xFE	; 254
    7006:	fc 01       	movw	r30, r24
    7008:	60 81       	ld	r22, Z
    700a:	71 81       	ldd	r23, Z+1	; 0x01
    700c:	82 81       	ldd	r24, Z+2	; 0x02
    700e:	93 81       	ldd	r25, Z+3	; 0x03
    7010:	20 e0       	ldi	r18, 0x00	; 0
    7012:	30 e0       	ldi	r19, 0x00	; 0
    7014:	40 e2       	ldi	r20, 0x20	; 32
    7016:	51 e4       	ldi	r21, 0x41	; 65
    7018:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    701c:	dc 01       	movw	r26, r24
    701e:	cb 01       	movw	r24, r22
    7020:	8e 01       	movw	r16, r28
    7022:	0d 51       	subi	r16, 0x1D	; 29
    7024:	1e 4f       	sbci	r17, 0xFE	; 254
    7026:	bc 01       	movw	r22, r24
    7028:	cd 01       	movw	r24, r26
    702a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    702e:	dc 01       	movw	r26, r24
    7030:	cb 01       	movw	r24, r22
    7032:	f8 01       	movw	r30, r16
    7034:	91 83       	std	Z+1, r25	; 0x01
    7036:	80 83       	st	Z, r24
    7038:	27 c0       	rjmp	.+78     	; 0x7088 <main+0x3d38>
    703a:	ce 01       	movw	r24, r28
    703c:	8b 51       	subi	r24, 0x1B	; 27
    703e:	9e 4f       	sbci	r25, 0xFE	; 254
    7040:	20 e7       	ldi	r18, 0x70	; 112
    7042:	31 e0       	ldi	r19, 0x01	; 1
    7044:	fc 01       	movw	r30, r24
    7046:	31 83       	std	Z+1, r19	; 0x01
    7048:	20 83       	st	Z, r18
    704a:	ce 01       	movw	r24, r28
    704c:	8b 51       	subi	r24, 0x1B	; 27
    704e:	9e 4f       	sbci	r25, 0xFE	; 254
    7050:	fc 01       	movw	r30, r24
    7052:	80 81       	ld	r24, Z
    7054:	91 81       	ldd	r25, Z+1	; 0x01
    7056:	8c 01       	movw	r16, r24
    7058:	c8 01       	movw	r24, r16
    705a:	01 97       	sbiw	r24, 0x01	; 1
    705c:	f1 f7       	brne	.-4      	; 0x705a <main+0x3d0a>
    705e:	8c 01       	movw	r16, r24
    7060:	ce 01       	movw	r24, r28
    7062:	8b 51       	subi	r24, 0x1B	; 27
    7064:	9e 4f       	sbci	r25, 0xFE	; 254
    7066:	fc 01       	movw	r30, r24
    7068:	11 83       	std	Z+1, r17	; 0x01
    706a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    706c:	ce 01       	movw	r24, r28
    706e:	8d 51       	subi	r24, 0x1D	; 29
    7070:	9e 4f       	sbci	r25, 0xFE	; 254
    7072:	9e 01       	movw	r18, r28
    7074:	2d 51       	subi	r18, 0x1D	; 29
    7076:	3e 4f       	sbci	r19, 0xFE	; 254
    7078:	f9 01       	movw	r30, r18
    707a:	20 81       	ld	r18, Z
    707c:	31 81       	ldd	r19, Z+1	; 0x01
    707e:	21 50       	subi	r18, 0x01	; 1
    7080:	30 40       	sbci	r19, 0x00	; 0
    7082:	fc 01       	movw	r30, r24
    7084:	31 83       	std	Z+1, r19	; 0x01
    7086:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7088:	ce 01       	movw	r24, r28
    708a:	8d 51       	subi	r24, 0x1D	; 29
    708c:	9e 4f       	sbci	r25, 0xFE	; 254
    708e:	fc 01       	movw	r30, r24
    7090:	80 81       	ld	r24, Z
    7092:	91 81       	ldd	r25, Z+1	; 0x01
    7094:	00 97       	sbiw	r24, 0x00	; 0
    7096:	89 f6       	brne	.-94     	; 0x703a <main+0x3cea>
    7098:	2f c0       	rjmp	.+94     	; 0x70f8 <main+0x3da8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    709a:	8e 01       	movw	r16, r28
    709c:	0d 51       	subi	r16, 0x1D	; 29
    709e:	1e 4f       	sbci	r17, 0xFE	; 254
    70a0:	ce 01       	movw	r24, r28
    70a2:	81 52       	subi	r24, 0x21	; 33
    70a4:	9e 4f       	sbci	r25, 0xFE	; 254
    70a6:	fc 01       	movw	r30, r24
    70a8:	60 81       	ld	r22, Z
    70aa:	71 81       	ldd	r23, Z+1	; 0x01
    70ac:	82 81       	ldd	r24, Z+2	; 0x02
    70ae:	93 81       	ldd	r25, Z+3	; 0x03
    70b0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    70b4:	dc 01       	movw	r26, r24
    70b6:	cb 01       	movw	r24, r22
    70b8:	f8 01       	movw	r30, r16
    70ba:	91 83       	std	Z+1, r25	; 0x01
    70bc:	80 83       	st	Z, r24
    70be:	ce 01       	movw	r24, r28
    70c0:	89 51       	subi	r24, 0x19	; 25
    70c2:	9e 4f       	sbci	r25, 0xFE	; 254
    70c4:	9e 01       	movw	r18, r28
    70c6:	2d 51       	subi	r18, 0x1D	; 29
    70c8:	3e 4f       	sbci	r19, 0xFE	; 254
    70ca:	f9 01       	movw	r30, r18
    70cc:	20 81       	ld	r18, Z
    70ce:	31 81       	ldd	r19, Z+1	; 0x01
    70d0:	fc 01       	movw	r30, r24
    70d2:	31 83       	std	Z+1, r19	; 0x01
    70d4:	20 83       	st	Z, r18
    70d6:	ce 01       	movw	r24, r28
    70d8:	89 51       	subi	r24, 0x19	; 25
    70da:	9e 4f       	sbci	r25, 0xFE	; 254
    70dc:	fc 01       	movw	r30, r24
    70de:	80 81       	ld	r24, Z
    70e0:	91 81       	ldd	r25, Z+1	; 0x01
    70e2:	8c 01       	movw	r16, r24
    70e4:	c8 01       	movw	r24, r16
    70e6:	01 97       	sbiw	r24, 0x01	; 1
    70e8:	f1 f7       	brne	.-4      	; 0x70e6 <main+0x3d96>
    70ea:	8c 01       	movw	r16, r24
    70ec:	ce 01       	movw	r24, r28
    70ee:	89 51       	subi	r24, 0x19	; 25
    70f0:	9e 4f       	sbci	r25, 0xFE	; 254
    70f2:	fc 01       	movw	r30, r24
    70f4:	11 83       	std	Z+1, r17	; 0x01
    70f6:	00 83       	st	Z, r16
				_delay_ms(100);
				coor[0]=0;
    70f8:	10 92 a7 04 	sts	0x04A7, r1
    70fc:	10 92 a6 04 	sts	0x04A6, r1
				coor[1]=0;
    7100:	10 92 a9 04 	sts	0x04A9, r1
    7104:	10 92 a8 04 	sts	0x04A8, r1
				forward_mm(150);
    7108:	86 e9       	ldi	r24, 0x96	; 150
    710a:	90 e0       	ldi	r25, 0x00	; 0
    710c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
				linefollwer();
    7110:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
				compass=4;
    7114:	84 e0       	ldi	r24, 0x04	; 4
    7116:	90 e0       	ldi	r25, 0x00	; 0
    7118:	9c 83       	std	Y+4, r25	; 0x04
    711a:	8b 83       	std	Y+3, r24	; 0x03
    711c:	d1 c1       	rjmp	.+930    	; 0x74c0 <main+0x4170>
				
			}
			else
			{
				if(compass==5)
    711e:	8b 81       	ldd	r24, Y+3	; 0x03
    7120:	9c 81       	ldd	r25, Y+4	; 0x04
    7122:	85 30       	cpi	r24, 0x05	; 5
    7124:	91 05       	cpc	r25, r1
    7126:	09 f0       	breq	.+2      	; 0x712a <main+0x3dda>
    7128:	e1 c0       	rjmp	.+450    	; 0x72ec <main+0x3f9c>
    712a:	9e 01       	movw	r18, r28
    712c:	27 51       	subi	r18, 0x17	; 23
    712e:	3e 4f       	sbci	r19, 0xFE	; 254
    7130:	80 e0       	ldi	r24, 0x00	; 0
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	a8 ec       	ldi	r26, 0xC8	; 200
    7136:	b2 e4       	ldi	r27, 0x42	; 66
    7138:	f9 01       	movw	r30, r18
    713a:	80 83       	st	Z, r24
    713c:	91 83       	std	Z+1, r25	; 0x01
    713e:	a2 83       	std	Z+2, r26	; 0x02
    7140:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7142:	8e 01       	movw	r16, r28
    7144:	03 51       	subi	r16, 0x13	; 19
    7146:	1e 4f       	sbci	r17, 0xFE	; 254
    7148:	ce 01       	movw	r24, r28
    714a:	87 51       	subi	r24, 0x17	; 23
    714c:	9e 4f       	sbci	r25, 0xFE	; 254
    714e:	fc 01       	movw	r30, r24
    7150:	60 81       	ld	r22, Z
    7152:	71 81       	ldd	r23, Z+1	; 0x01
    7154:	82 81       	ldd	r24, Z+2	; 0x02
    7156:	93 81       	ldd	r25, Z+3	; 0x03
    7158:	26 e6       	ldi	r18, 0x66	; 102
    715a:	36 e6       	ldi	r19, 0x66	; 102
    715c:	46 e6       	ldi	r20, 0x66	; 102
    715e:	55 e4       	ldi	r21, 0x45	; 69
    7160:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7164:	dc 01       	movw	r26, r24
    7166:	cb 01       	movw	r24, r22
    7168:	f8 01       	movw	r30, r16
    716a:	80 83       	st	Z, r24
    716c:	91 83       	std	Z+1, r25	; 0x01
    716e:	a2 83       	std	Z+2, r26	; 0x02
    7170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7172:	ce 01       	movw	r24, r28
    7174:	83 51       	subi	r24, 0x13	; 19
    7176:	9e 4f       	sbci	r25, 0xFE	; 254
    7178:	11 e0       	ldi	r17, 0x01	; 1
    717a:	fc 01       	movw	r30, r24
    717c:	60 81       	ld	r22, Z
    717e:	71 81       	ldd	r23, Z+1	; 0x01
    7180:	82 81       	ldd	r24, Z+2	; 0x02
    7182:	93 81       	ldd	r25, Z+3	; 0x03
    7184:	20 e0       	ldi	r18, 0x00	; 0
    7186:	30 e0       	ldi	r19, 0x00	; 0
    7188:	40 e8       	ldi	r20, 0x80	; 128
    718a:	5f e3       	ldi	r21, 0x3F	; 63
    718c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7190:	88 23       	and	r24, r24
    7192:	0c f0       	brlt	.+2      	; 0x7196 <main+0x3e46>
    7194:	10 e0       	ldi	r17, 0x00	; 0
    7196:	11 23       	and	r17, r17
    7198:	49 f0       	breq	.+18     	; 0x71ac <main+0x3e5c>
		__ticks = 1;
    719a:	ce 01       	movw	r24, r28
    719c:	8f 50       	subi	r24, 0x0F	; 15
    719e:	9e 4f       	sbci	r25, 0xFE	; 254
    71a0:	21 e0       	ldi	r18, 0x01	; 1
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	fc 01       	movw	r30, r24
    71a6:	31 83       	std	Z+1, r19	; 0x01
    71a8:	20 83       	st	Z, r18
    71aa:	74 c0       	rjmp	.+232    	; 0x7294 <main+0x3f44>
	else if (__tmp > 65535)
    71ac:	ce 01       	movw	r24, r28
    71ae:	83 51       	subi	r24, 0x13	; 19
    71b0:	9e 4f       	sbci	r25, 0xFE	; 254
    71b2:	11 e0       	ldi	r17, 0x01	; 1
    71b4:	fc 01       	movw	r30, r24
    71b6:	60 81       	ld	r22, Z
    71b8:	71 81       	ldd	r23, Z+1	; 0x01
    71ba:	82 81       	ldd	r24, Z+2	; 0x02
    71bc:	93 81       	ldd	r25, Z+3	; 0x03
    71be:	20 e0       	ldi	r18, 0x00	; 0
    71c0:	3f ef       	ldi	r19, 0xFF	; 255
    71c2:	4f e7       	ldi	r20, 0x7F	; 127
    71c4:	57 e4       	ldi	r21, 0x47	; 71
    71c6:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    71ca:	18 16       	cp	r1, r24
    71cc:	0c f0       	brlt	.+2      	; 0x71d0 <main+0x3e80>
    71ce:	10 e0       	ldi	r17, 0x00	; 0
    71d0:	11 23       	and	r17, r17
    71d2:	09 f4       	brne	.+2      	; 0x71d6 <main+0x3e86>
    71d4:	4d c0       	rjmp	.+154    	; 0x7270 <main+0x3f20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71d6:	ce 01       	movw	r24, r28
    71d8:	87 51       	subi	r24, 0x17	; 23
    71da:	9e 4f       	sbci	r25, 0xFE	; 254
    71dc:	fc 01       	movw	r30, r24
    71de:	60 81       	ld	r22, Z
    71e0:	71 81       	ldd	r23, Z+1	; 0x01
    71e2:	82 81       	ldd	r24, Z+2	; 0x02
    71e4:	93 81       	ldd	r25, Z+3	; 0x03
    71e6:	20 e0       	ldi	r18, 0x00	; 0
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	40 e2       	ldi	r20, 0x20	; 32
    71ec:	51 e4       	ldi	r21, 0x41	; 65
    71ee:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    71f2:	dc 01       	movw	r26, r24
    71f4:	cb 01       	movw	r24, r22
    71f6:	8e 01       	movw	r16, r28
    71f8:	0f 50       	subi	r16, 0x0F	; 15
    71fa:	1e 4f       	sbci	r17, 0xFE	; 254
    71fc:	bc 01       	movw	r22, r24
    71fe:	cd 01       	movw	r24, r26
    7200:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7204:	dc 01       	movw	r26, r24
    7206:	cb 01       	movw	r24, r22
    7208:	f8 01       	movw	r30, r16
    720a:	91 83       	std	Z+1, r25	; 0x01
    720c:	80 83       	st	Z, r24
    720e:	27 c0       	rjmp	.+78     	; 0x725e <main+0x3f0e>
    7210:	ce 01       	movw	r24, r28
    7212:	8d 50       	subi	r24, 0x0D	; 13
    7214:	9e 4f       	sbci	r25, 0xFE	; 254
    7216:	20 e7       	ldi	r18, 0x70	; 112
    7218:	31 e0       	ldi	r19, 0x01	; 1
    721a:	fc 01       	movw	r30, r24
    721c:	31 83       	std	Z+1, r19	; 0x01
    721e:	20 83       	st	Z, r18
    7220:	ce 01       	movw	r24, r28
    7222:	8d 50       	subi	r24, 0x0D	; 13
    7224:	9e 4f       	sbci	r25, 0xFE	; 254
    7226:	fc 01       	movw	r30, r24
    7228:	80 81       	ld	r24, Z
    722a:	91 81       	ldd	r25, Z+1	; 0x01
    722c:	8c 01       	movw	r16, r24
    722e:	c8 01       	movw	r24, r16
    7230:	01 97       	sbiw	r24, 0x01	; 1
    7232:	f1 f7       	brne	.-4      	; 0x7230 <main+0x3ee0>
    7234:	8c 01       	movw	r16, r24
    7236:	ce 01       	movw	r24, r28
    7238:	8d 50       	subi	r24, 0x0D	; 13
    723a:	9e 4f       	sbci	r25, 0xFE	; 254
    723c:	fc 01       	movw	r30, r24
    723e:	11 83       	std	Z+1, r17	; 0x01
    7240:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7242:	ce 01       	movw	r24, r28
    7244:	8f 50       	subi	r24, 0x0F	; 15
    7246:	9e 4f       	sbci	r25, 0xFE	; 254
    7248:	9e 01       	movw	r18, r28
    724a:	2f 50       	subi	r18, 0x0F	; 15
    724c:	3e 4f       	sbci	r19, 0xFE	; 254
    724e:	f9 01       	movw	r30, r18
    7250:	20 81       	ld	r18, Z
    7252:	31 81       	ldd	r19, Z+1	; 0x01
    7254:	21 50       	subi	r18, 0x01	; 1
    7256:	30 40       	sbci	r19, 0x00	; 0
    7258:	fc 01       	movw	r30, r24
    725a:	31 83       	std	Z+1, r19	; 0x01
    725c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    725e:	ce 01       	movw	r24, r28
    7260:	8f 50       	subi	r24, 0x0F	; 15
    7262:	9e 4f       	sbci	r25, 0xFE	; 254
    7264:	fc 01       	movw	r30, r24
    7266:	80 81       	ld	r24, Z
    7268:	91 81       	ldd	r25, Z+1	; 0x01
    726a:	00 97       	sbiw	r24, 0x00	; 0
    726c:	89 f6       	brne	.-94     	; 0x7210 <main+0x3ec0>
    726e:	2f c0       	rjmp	.+94     	; 0x72ce <main+0x3f7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7270:	8e 01       	movw	r16, r28
    7272:	0f 50       	subi	r16, 0x0F	; 15
    7274:	1e 4f       	sbci	r17, 0xFE	; 254
    7276:	ce 01       	movw	r24, r28
    7278:	83 51       	subi	r24, 0x13	; 19
    727a:	9e 4f       	sbci	r25, 0xFE	; 254
    727c:	fc 01       	movw	r30, r24
    727e:	60 81       	ld	r22, Z
    7280:	71 81       	ldd	r23, Z+1	; 0x01
    7282:	82 81       	ldd	r24, Z+2	; 0x02
    7284:	93 81       	ldd	r25, Z+3	; 0x03
    7286:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    728a:	dc 01       	movw	r26, r24
    728c:	cb 01       	movw	r24, r22
    728e:	f8 01       	movw	r30, r16
    7290:	91 83       	std	Z+1, r25	; 0x01
    7292:	80 83       	st	Z, r24
    7294:	ce 01       	movw	r24, r28
    7296:	8b 50       	subi	r24, 0x0B	; 11
    7298:	9e 4f       	sbci	r25, 0xFE	; 254
    729a:	9e 01       	movw	r18, r28
    729c:	2f 50       	subi	r18, 0x0F	; 15
    729e:	3e 4f       	sbci	r19, 0xFE	; 254
    72a0:	f9 01       	movw	r30, r18
    72a2:	20 81       	ld	r18, Z
    72a4:	31 81       	ldd	r19, Z+1	; 0x01
    72a6:	fc 01       	movw	r30, r24
    72a8:	31 83       	std	Z+1, r19	; 0x01
    72aa:	20 83       	st	Z, r18
    72ac:	ce 01       	movw	r24, r28
    72ae:	8b 50       	subi	r24, 0x0B	; 11
    72b0:	9e 4f       	sbci	r25, 0xFE	; 254
    72b2:	fc 01       	movw	r30, r24
    72b4:	80 81       	ld	r24, Z
    72b6:	91 81       	ldd	r25, Z+1	; 0x01
    72b8:	8c 01       	movw	r16, r24
    72ba:	c8 01       	movw	r24, r16
    72bc:	01 97       	sbiw	r24, 0x01	; 1
    72be:	f1 f7       	brne	.-4      	; 0x72bc <main+0x3f6c>
    72c0:	8c 01       	movw	r16, r24
    72c2:	ce 01       	movw	r24, r28
    72c4:	8b 50       	subi	r24, 0x0B	; 11
    72c6:	9e 4f       	sbci	r25, 0xFE	; 254
    72c8:	fc 01       	movw	r30, r24
    72ca:	11 83       	std	Z+1, r17	; 0x01
    72cc:	00 83       	st	Z, r16
				{
					_delay_ms(100);
					coor[0]=0;
    72ce:	10 92 a7 04 	sts	0x04A7, r1
    72d2:	10 92 a6 04 	sts	0x04A6, r1
					coor[1]=0;
    72d6:	10 92 a9 04 	sts	0x04A9, r1
    72da:	10 92 a8 04 	sts	0x04A8, r1
					linefollwer();
    72de:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
					compass=4;
    72e2:	84 e0       	ldi	r24, 0x04	; 4
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	9c 83       	std	Y+4, r25	; 0x04
    72e8:	8b 83       	std	Y+3, r24	; 0x03
    72ea:	ea c0       	rjmp	.+468    	; 0x74c0 <main+0x4170>
					
				}
				else
				{
					if(compass==4)
    72ec:	8b 81       	ldd	r24, Y+3	; 0x03
    72ee:	9c 81       	ldd	r25, Y+4	; 0x04
    72f0:	84 30       	cpi	r24, 0x04	; 4
    72f2:	91 05       	cpc	r25, r1
    72f4:	09 f0       	breq	.+2      	; 0x72f8 <main+0x3fa8>
    72f6:	e4 c0       	rjmp	.+456    	; 0x74c0 <main+0x4170>
					{
						right_degrees(185);
    72f8:	89 eb       	ldi	r24, 0xB9	; 185
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    7300:	9e 01       	movw	r18, r28
    7302:	29 50       	subi	r18, 0x09	; 9
    7304:	3e 4f       	sbci	r19, 0xFE	; 254
    7306:	80 e0       	ldi	r24, 0x00	; 0
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	a8 ec       	ldi	r26, 0xC8	; 200
    730c:	b2 e4       	ldi	r27, 0x42	; 66
    730e:	f9 01       	movw	r30, r18
    7310:	80 83       	st	Z, r24
    7312:	91 83       	std	Z+1, r25	; 0x01
    7314:	a2 83       	std	Z+2, r26	; 0x02
    7316:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7318:	8e 01       	movw	r16, r28
    731a:	05 50       	subi	r16, 0x05	; 5
    731c:	1e 4f       	sbci	r17, 0xFE	; 254
    731e:	ce 01       	movw	r24, r28
    7320:	89 50       	subi	r24, 0x09	; 9
    7322:	9e 4f       	sbci	r25, 0xFE	; 254
    7324:	fc 01       	movw	r30, r24
    7326:	60 81       	ld	r22, Z
    7328:	71 81       	ldd	r23, Z+1	; 0x01
    732a:	82 81       	ldd	r24, Z+2	; 0x02
    732c:	93 81       	ldd	r25, Z+3	; 0x03
    732e:	26 e6       	ldi	r18, 0x66	; 102
    7330:	36 e6       	ldi	r19, 0x66	; 102
    7332:	46 e6       	ldi	r20, 0x66	; 102
    7334:	55 e4       	ldi	r21, 0x45	; 69
    7336:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    733a:	dc 01       	movw	r26, r24
    733c:	cb 01       	movw	r24, r22
    733e:	f8 01       	movw	r30, r16
    7340:	80 83       	st	Z, r24
    7342:	91 83       	std	Z+1, r25	; 0x01
    7344:	a2 83       	std	Z+2, r26	; 0x02
    7346:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7348:	ce 01       	movw	r24, r28
    734a:	85 50       	subi	r24, 0x05	; 5
    734c:	9e 4f       	sbci	r25, 0xFE	; 254
    734e:	11 e0       	ldi	r17, 0x01	; 1
    7350:	fc 01       	movw	r30, r24
    7352:	60 81       	ld	r22, Z
    7354:	71 81       	ldd	r23, Z+1	; 0x01
    7356:	82 81       	ldd	r24, Z+2	; 0x02
    7358:	93 81       	ldd	r25, Z+3	; 0x03
    735a:	20 e0       	ldi	r18, 0x00	; 0
    735c:	30 e0       	ldi	r19, 0x00	; 0
    735e:	40 e8       	ldi	r20, 0x80	; 128
    7360:	5f e3       	ldi	r21, 0x3F	; 63
    7362:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7366:	88 23       	and	r24, r24
    7368:	0c f0       	brlt	.+2      	; 0x736c <main+0x401c>
    736a:	10 e0       	ldi	r17, 0x00	; 0
    736c:	11 23       	and	r17, r17
    736e:	49 f0       	breq	.+18     	; 0x7382 <main+0x4032>
		__ticks = 1;
    7370:	ce 01       	movw	r24, r28
    7372:	81 50       	subi	r24, 0x01	; 1
    7374:	9e 4f       	sbci	r25, 0xFE	; 254
    7376:	21 e0       	ldi	r18, 0x01	; 1
    7378:	30 e0       	ldi	r19, 0x00	; 0
    737a:	fc 01       	movw	r30, r24
    737c:	31 83       	std	Z+1, r19	; 0x01
    737e:	20 83       	st	Z, r18
    7380:	74 c0       	rjmp	.+232    	; 0x746a <main+0x411a>
	else if (__tmp > 65535)
    7382:	ce 01       	movw	r24, r28
    7384:	85 50       	subi	r24, 0x05	; 5
    7386:	9e 4f       	sbci	r25, 0xFE	; 254
    7388:	11 e0       	ldi	r17, 0x01	; 1
    738a:	fc 01       	movw	r30, r24
    738c:	60 81       	ld	r22, Z
    738e:	71 81       	ldd	r23, Z+1	; 0x01
    7390:	82 81       	ldd	r24, Z+2	; 0x02
    7392:	93 81       	ldd	r25, Z+3	; 0x03
    7394:	20 e0       	ldi	r18, 0x00	; 0
    7396:	3f ef       	ldi	r19, 0xFF	; 255
    7398:	4f e7       	ldi	r20, 0x7F	; 127
    739a:	57 e4       	ldi	r21, 0x47	; 71
    739c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    73a0:	18 16       	cp	r1, r24
    73a2:	0c f0       	brlt	.+2      	; 0x73a6 <main+0x4056>
    73a4:	10 e0       	ldi	r17, 0x00	; 0
    73a6:	11 23       	and	r17, r17
    73a8:	09 f4       	brne	.+2      	; 0x73ac <main+0x405c>
    73aa:	4d c0       	rjmp	.+154    	; 0x7446 <main+0x40f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73ac:	ce 01       	movw	r24, r28
    73ae:	89 50       	subi	r24, 0x09	; 9
    73b0:	9e 4f       	sbci	r25, 0xFE	; 254
    73b2:	fc 01       	movw	r30, r24
    73b4:	60 81       	ld	r22, Z
    73b6:	71 81       	ldd	r23, Z+1	; 0x01
    73b8:	82 81       	ldd	r24, Z+2	; 0x02
    73ba:	93 81       	ldd	r25, Z+3	; 0x03
    73bc:	20 e0       	ldi	r18, 0x00	; 0
    73be:	30 e0       	ldi	r19, 0x00	; 0
    73c0:	40 e2       	ldi	r20, 0x20	; 32
    73c2:	51 e4       	ldi	r21, 0x41	; 65
    73c4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    73c8:	dc 01       	movw	r26, r24
    73ca:	cb 01       	movw	r24, r22
    73cc:	8e 01       	movw	r16, r28
    73ce:	01 50       	subi	r16, 0x01	; 1
    73d0:	1e 4f       	sbci	r17, 0xFE	; 254
    73d2:	bc 01       	movw	r22, r24
    73d4:	cd 01       	movw	r24, r26
    73d6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    73da:	dc 01       	movw	r26, r24
    73dc:	cb 01       	movw	r24, r22
    73de:	f8 01       	movw	r30, r16
    73e0:	91 83       	std	Z+1, r25	; 0x01
    73e2:	80 83       	st	Z, r24
    73e4:	27 c0       	rjmp	.+78     	; 0x7434 <main+0x40e4>
    73e6:	ce 01       	movw	r24, r28
    73e8:	8f 5f       	subi	r24, 0xFF	; 255
    73ea:	9d 4f       	sbci	r25, 0xFD	; 253
    73ec:	20 e7       	ldi	r18, 0x70	; 112
    73ee:	31 e0       	ldi	r19, 0x01	; 1
    73f0:	fc 01       	movw	r30, r24
    73f2:	31 83       	std	Z+1, r19	; 0x01
    73f4:	20 83       	st	Z, r18
    73f6:	ce 01       	movw	r24, r28
    73f8:	8f 5f       	subi	r24, 0xFF	; 255
    73fa:	9d 4f       	sbci	r25, 0xFD	; 253
    73fc:	fc 01       	movw	r30, r24
    73fe:	80 81       	ld	r24, Z
    7400:	91 81       	ldd	r25, Z+1	; 0x01
    7402:	8c 01       	movw	r16, r24
    7404:	c8 01       	movw	r24, r16
    7406:	01 97       	sbiw	r24, 0x01	; 1
    7408:	f1 f7       	brne	.-4      	; 0x7406 <main+0x40b6>
    740a:	8c 01       	movw	r16, r24
    740c:	ce 01       	movw	r24, r28
    740e:	8f 5f       	subi	r24, 0xFF	; 255
    7410:	9d 4f       	sbci	r25, 0xFD	; 253
    7412:	fc 01       	movw	r30, r24
    7414:	11 83       	std	Z+1, r17	; 0x01
    7416:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7418:	ce 01       	movw	r24, r28
    741a:	81 50       	subi	r24, 0x01	; 1
    741c:	9e 4f       	sbci	r25, 0xFE	; 254
    741e:	9e 01       	movw	r18, r28
    7420:	21 50       	subi	r18, 0x01	; 1
    7422:	3e 4f       	sbci	r19, 0xFE	; 254
    7424:	f9 01       	movw	r30, r18
    7426:	20 81       	ld	r18, Z
    7428:	31 81       	ldd	r19, Z+1	; 0x01
    742a:	21 50       	subi	r18, 0x01	; 1
    742c:	30 40       	sbci	r19, 0x00	; 0
    742e:	fc 01       	movw	r30, r24
    7430:	31 83       	std	Z+1, r19	; 0x01
    7432:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7434:	ce 01       	movw	r24, r28
    7436:	81 50       	subi	r24, 0x01	; 1
    7438:	9e 4f       	sbci	r25, 0xFE	; 254
    743a:	fc 01       	movw	r30, r24
    743c:	80 81       	ld	r24, Z
    743e:	91 81       	ldd	r25, Z+1	; 0x01
    7440:	00 97       	sbiw	r24, 0x00	; 0
    7442:	89 f6       	brne	.-94     	; 0x73e6 <main+0x4096>
    7444:	2f c0       	rjmp	.+94     	; 0x74a4 <main+0x4154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7446:	8e 01       	movw	r16, r28
    7448:	01 50       	subi	r16, 0x01	; 1
    744a:	1e 4f       	sbci	r17, 0xFE	; 254
    744c:	ce 01       	movw	r24, r28
    744e:	85 50       	subi	r24, 0x05	; 5
    7450:	9e 4f       	sbci	r25, 0xFE	; 254
    7452:	fc 01       	movw	r30, r24
    7454:	60 81       	ld	r22, Z
    7456:	71 81       	ldd	r23, Z+1	; 0x01
    7458:	82 81       	ldd	r24, Z+2	; 0x02
    745a:	93 81       	ldd	r25, Z+3	; 0x03
    745c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7460:	dc 01       	movw	r26, r24
    7462:	cb 01       	movw	r24, r22
    7464:	f8 01       	movw	r30, r16
    7466:	91 83       	std	Z+1, r25	; 0x01
    7468:	80 83       	st	Z, r24
    746a:	ce 01       	movw	r24, r28
    746c:	8d 5f       	subi	r24, 0xFD	; 253
    746e:	9d 4f       	sbci	r25, 0xFD	; 253
    7470:	9e 01       	movw	r18, r28
    7472:	21 50       	subi	r18, 0x01	; 1
    7474:	3e 4f       	sbci	r19, 0xFE	; 254
    7476:	f9 01       	movw	r30, r18
    7478:	20 81       	ld	r18, Z
    747a:	31 81       	ldd	r19, Z+1	; 0x01
    747c:	fc 01       	movw	r30, r24
    747e:	31 83       	std	Z+1, r19	; 0x01
    7480:	20 83       	st	Z, r18
    7482:	ce 01       	movw	r24, r28
    7484:	8d 5f       	subi	r24, 0xFD	; 253
    7486:	9d 4f       	sbci	r25, 0xFD	; 253
    7488:	fc 01       	movw	r30, r24
    748a:	80 81       	ld	r24, Z
    748c:	91 81       	ldd	r25, Z+1	; 0x01
    748e:	8c 01       	movw	r16, r24
    7490:	c8 01       	movw	r24, r16
    7492:	01 97       	sbiw	r24, 0x01	; 1
    7494:	f1 f7       	brne	.-4      	; 0x7492 <main+0x4142>
    7496:	8c 01       	movw	r16, r24
    7498:	ce 01       	movw	r24, r28
    749a:	8d 5f       	subi	r24, 0xFD	; 253
    749c:	9d 4f       	sbci	r25, 0xFD	; 253
    749e:	fc 01       	movw	r30, r24
    74a0:	11 83       	std	Z+1, r17	; 0x01
    74a2:	00 83       	st	Z, r16
						_delay_ms(100);
						coor[0]=0;
    74a4:	10 92 a7 04 	sts	0x04A7, r1
    74a8:	10 92 a6 04 	sts	0x04A6, r1
						coor[1]=0;
    74ac:	10 92 a9 04 	sts	0x04A9, r1
    74b0:	10 92 a8 04 	sts	0x04A8, r1
						linefollwer();
    74b4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
						compass=4;
    74b8:	84 e0       	ldi	r24, 0x04	; 4
    74ba:	90 e0       	ldi	r25, 0x00	; 0
    74bc:	9c 83       	std	Y+4, r25	; 0x04
    74be:	8b 83       	std	Y+3, r24	; 0x03
					}
				}					
			}
		}
		flag1=flag1+1;
    74c0:	89 81       	ldd	r24, Y+1	; 0x01
    74c2:	9a 81       	ldd	r25, Y+2	; 0x02
    74c4:	01 96       	adiw	r24, 0x01	; 1
    74c6:	9a 83       	std	Y+2, r25	; 0x02
    74c8:	89 83       	std	Y+1, r24	; 0x01
		boxnumber=D2[recur1][0];
    74ca:	9e 01       	movw	r18, r28
    74cc:	25 56       	subi	r18, 0x65	; 101
    74ce:	39 4f       	sbci	r19, 0xF9	; 249
    74d0:	89 85       	ldd	r24, Y+9	; 0x09
    74d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    74d4:	88 0f       	add	r24, r24
    74d6:	99 1f       	adc	r25, r25
    74d8:	88 0f       	add	r24, r24
    74da:	99 1f       	adc	r25, r25
    74dc:	88 0f       	add	r24, r24
    74de:	99 1f       	adc	r25, r25
    74e0:	82 0f       	add	r24, r18
    74e2:	93 1f       	adc	r25, r19
    74e4:	fc 01       	movw	r30, r24
    74e6:	80 81       	ld	r24, Z
    74e8:	91 81       	ldd	r25, Z+1	; 0x01
    74ea:	9e 83       	std	Y+6, r25	; 0x06
    74ec:	8d 83       	std	Y+5, r24	; 0x05
		goto point1;
    74ee:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <main+0x476>
	}
	else
	{
		if(coor[0]==0 && coor[1]==0 && flag1%2==0)
    74f2:	80 91 a6 04 	lds	r24, 0x04A6
    74f6:	90 91 a7 04 	lds	r25, 0x04A7
    74fa:	00 97       	sbiw	r24, 0x00	; 0
    74fc:	09 f0       	breq	.+2      	; 0x7500 <main+0x41b0>
    74fe:	cf c3       	rjmp	.+1950   	; 0x7c9e <main+0x494e>
    7500:	80 91 a8 04 	lds	r24, 0x04A8
    7504:	90 91 a9 04 	lds	r25, 0x04A9
    7508:	00 97       	sbiw	r24, 0x00	; 0
    750a:	09 f0       	breq	.+2      	; 0x750e <main+0x41be>
    750c:	c8 c3       	rjmp	.+1936   	; 0x7c9e <main+0x494e>
    750e:	89 81       	ldd	r24, Y+1	; 0x01
    7510:	9a 81       	ldd	r25, Y+2	; 0x02
    7512:	81 70       	andi	r24, 0x01	; 1
    7514:	90 70       	andi	r25, 0x00	; 0
    7516:	00 97       	sbiw	r24, 0x00	; 0
    7518:	09 f0       	breq	.+2      	; 0x751c <main+0x41cc>
    751a:	c1 c3       	rjmp	.+1922   	; 0x7c9e <main+0x494e>
		{
			if(compass==6)
    751c:	8b 81       	ldd	r24, Y+3	; 0x03
    751e:	9c 81       	ldd	r25, Y+4	; 0x04
    7520:	86 30       	cpi	r24, 0x06	; 6
    7522:	91 05       	cpc	r25, r1
    7524:	09 f0       	breq	.+2      	; 0x7528 <main+0x41d8>
    7526:	e5 c0       	rjmp	.+458    	; 0x76f2 <main+0x43a2>
			{
				right_degrees(92);                           ////// calibration required
    7528:	8c e5       	ldi	r24, 0x5C	; 92
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    7530:	9e 01       	movw	r18, r28
    7532:	2b 5f       	subi	r18, 0xFB	; 251
    7534:	3d 4f       	sbci	r19, 0xFD	; 253
    7536:	80 e0       	ldi	r24, 0x00	; 0
    7538:	90 e0       	ldi	r25, 0x00	; 0
    753a:	a8 ec       	ldi	r26, 0xC8	; 200
    753c:	b2 e4       	ldi	r27, 0x42	; 66
    753e:	f9 01       	movw	r30, r18
    7540:	80 83       	st	Z, r24
    7542:	91 83       	std	Z+1, r25	; 0x01
    7544:	a2 83       	std	Z+2, r26	; 0x02
    7546:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7548:	8e 01       	movw	r16, r28
    754a:	07 5f       	subi	r16, 0xF7	; 247
    754c:	1d 4f       	sbci	r17, 0xFD	; 253
    754e:	ce 01       	movw	r24, r28
    7550:	8b 5f       	subi	r24, 0xFB	; 251
    7552:	9d 4f       	sbci	r25, 0xFD	; 253
    7554:	fc 01       	movw	r30, r24
    7556:	60 81       	ld	r22, Z
    7558:	71 81       	ldd	r23, Z+1	; 0x01
    755a:	82 81       	ldd	r24, Z+2	; 0x02
    755c:	93 81       	ldd	r25, Z+3	; 0x03
    755e:	26 e6       	ldi	r18, 0x66	; 102
    7560:	36 e6       	ldi	r19, 0x66	; 102
    7562:	46 e6       	ldi	r20, 0x66	; 102
    7564:	55 e4       	ldi	r21, 0x45	; 69
    7566:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    756a:	dc 01       	movw	r26, r24
    756c:	cb 01       	movw	r24, r22
    756e:	f8 01       	movw	r30, r16
    7570:	80 83       	st	Z, r24
    7572:	91 83       	std	Z+1, r25	; 0x01
    7574:	a2 83       	std	Z+2, r26	; 0x02
    7576:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7578:	ce 01       	movw	r24, r28
    757a:	87 5f       	subi	r24, 0xF7	; 247
    757c:	9d 4f       	sbci	r25, 0xFD	; 253
    757e:	11 e0       	ldi	r17, 0x01	; 1
    7580:	fc 01       	movw	r30, r24
    7582:	60 81       	ld	r22, Z
    7584:	71 81       	ldd	r23, Z+1	; 0x01
    7586:	82 81       	ldd	r24, Z+2	; 0x02
    7588:	93 81       	ldd	r25, Z+3	; 0x03
    758a:	20 e0       	ldi	r18, 0x00	; 0
    758c:	30 e0       	ldi	r19, 0x00	; 0
    758e:	40 e8       	ldi	r20, 0x80	; 128
    7590:	5f e3       	ldi	r21, 0x3F	; 63
    7592:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7596:	88 23       	and	r24, r24
    7598:	0c f0       	brlt	.+2      	; 0x759c <main+0x424c>
    759a:	10 e0       	ldi	r17, 0x00	; 0
    759c:	11 23       	and	r17, r17
    759e:	49 f0       	breq	.+18     	; 0x75b2 <main+0x4262>
		__ticks = 1;
    75a0:	ce 01       	movw	r24, r28
    75a2:	83 5f       	subi	r24, 0xF3	; 243
    75a4:	9d 4f       	sbci	r25, 0xFD	; 253
    75a6:	21 e0       	ldi	r18, 0x01	; 1
    75a8:	30 e0       	ldi	r19, 0x00	; 0
    75aa:	fc 01       	movw	r30, r24
    75ac:	31 83       	std	Z+1, r19	; 0x01
    75ae:	20 83       	st	Z, r18
    75b0:	74 c0       	rjmp	.+232    	; 0x769a <main+0x434a>
	else if (__tmp > 65535)
    75b2:	ce 01       	movw	r24, r28
    75b4:	87 5f       	subi	r24, 0xF7	; 247
    75b6:	9d 4f       	sbci	r25, 0xFD	; 253
    75b8:	11 e0       	ldi	r17, 0x01	; 1
    75ba:	fc 01       	movw	r30, r24
    75bc:	60 81       	ld	r22, Z
    75be:	71 81       	ldd	r23, Z+1	; 0x01
    75c0:	82 81       	ldd	r24, Z+2	; 0x02
    75c2:	93 81       	ldd	r25, Z+3	; 0x03
    75c4:	20 e0       	ldi	r18, 0x00	; 0
    75c6:	3f ef       	ldi	r19, 0xFF	; 255
    75c8:	4f e7       	ldi	r20, 0x7F	; 127
    75ca:	57 e4       	ldi	r21, 0x47	; 71
    75cc:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    75d0:	18 16       	cp	r1, r24
    75d2:	0c f0       	brlt	.+2      	; 0x75d6 <main+0x4286>
    75d4:	10 e0       	ldi	r17, 0x00	; 0
    75d6:	11 23       	and	r17, r17
    75d8:	09 f4       	brne	.+2      	; 0x75dc <main+0x428c>
    75da:	4d c0       	rjmp	.+154    	; 0x7676 <main+0x4326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75dc:	ce 01       	movw	r24, r28
    75de:	8b 5f       	subi	r24, 0xFB	; 251
    75e0:	9d 4f       	sbci	r25, 0xFD	; 253
    75e2:	fc 01       	movw	r30, r24
    75e4:	60 81       	ld	r22, Z
    75e6:	71 81       	ldd	r23, Z+1	; 0x01
    75e8:	82 81       	ldd	r24, Z+2	; 0x02
    75ea:	93 81       	ldd	r25, Z+3	; 0x03
    75ec:	20 e0       	ldi	r18, 0x00	; 0
    75ee:	30 e0       	ldi	r19, 0x00	; 0
    75f0:	40 e2       	ldi	r20, 0x20	; 32
    75f2:	51 e4       	ldi	r21, 0x41	; 65
    75f4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    75f8:	dc 01       	movw	r26, r24
    75fa:	cb 01       	movw	r24, r22
    75fc:	8e 01       	movw	r16, r28
    75fe:	03 5f       	subi	r16, 0xF3	; 243
    7600:	1d 4f       	sbci	r17, 0xFD	; 253
    7602:	bc 01       	movw	r22, r24
    7604:	cd 01       	movw	r24, r26
    7606:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    760a:	dc 01       	movw	r26, r24
    760c:	cb 01       	movw	r24, r22
    760e:	f8 01       	movw	r30, r16
    7610:	91 83       	std	Z+1, r25	; 0x01
    7612:	80 83       	st	Z, r24
    7614:	27 c0       	rjmp	.+78     	; 0x7664 <main+0x4314>
    7616:	ce 01       	movw	r24, r28
    7618:	81 5f       	subi	r24, 0xF1	; 241
    761a:	9d 4f       	sbci	r25, 0xFD	; 253
    761c:	20 e7       	ldi	r18, 0x70	; 112
    761e:	31 e0       	ldi	r19, 0x01	; 1
    7620:	fc 01       	movw	r30, r24
    7622:	31 83       	std	Z+1, r19	; 0x01
    7624:	20 83       	st	Z, r18
    7626:	ce 01       	movw	r24, r28
    7628:	81 5f       	subi	r24, 0xF1	; 241
    762a:	9d 4f       	sbci	r25, 0xFD	; 253
    762c:	fc 01       	movw	r30, r24
    762e:	80 81       	ld	r24, Z
    7630:	91 81       	ldd	r25, Z+1	; 0x01
    7632:	8c 01       	movw	r16, r24
    7634:	c8 01       	movw	r24, r16
    7636:	01 97       	sbiw	r24, 0x01	; 1
    7638:	f1 f7       	brne	.-4      	; 0x7636 <main+0x42e6>
    763a:	8c 01       	movw	r16, r24
    763c:	ce 01       	movw	r24, r28
    763e:	81 5f       	subi	r24, 0xF1	; 241
    7640:	9d 4f       	sbci	r25, 0xFD	; 253
    7642:	fc 01       	movw	r30, r24
    7644:	11 83       	std	Z+1, r17	; 0x01
    7646:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7648:	ce 01       	movw	r24, r28
    764a:	83 5f       	subi	r24, 0xF3	; 243
    764c:	9d 4f       	sbci	r25, 0xFD	; 253
    764e:	9e 01       	movw	r18, r28
    7650:	23 5f       	subi	r18, 0xF3	; 243
    7652:	3d 4f       	sbci	r19, 0xFD	; 253
    7654:	f9 01       	movw	r30, r18
    7656:	20 81       	ld	r18, Z
    7658:	31 81       	ldd	r19, Z+1	; 0x01
    765a:	21 50       	subi	r18, 0x01	; 1
    765c:	30 40       	sbci	r19, 0x00	; 0
    765e:	fc 01       	movw	r30, r24
    7660:	31 83       	std	Z+1, r19	; 0x01
    7662:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7664:	ce 01       	movw	r24, r28
    7666:	83 5f       	subi	r24, 0xF3	; 243
    7668:	9d 4f       	sbci	r25, 0xFD	; 253
    766a:	fc 01       	movw	r30, r24
    766c:	80 81       	ld	r24, Z
    766e:	91 81       	ldd	r25, Z+1	; 0x01
    7670:	00 97       	sbiw	r24, 0x00	; 0
    7672:	89 f6       	brne	.-94     	; 0x7616 <main+0x42c6>
    7674:	2f c0       	rjmp	.+94     	; 0x76d4 <main+0x4384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7676:	8e 01       	movw	r16, r28
    7678:	03 5f       	subi	r16, 0xF3	; 243
    767a:	1d 4f       	sbci	r17, 0xFD	; 253
    767c:	ce 01       	movw	r24, r28
    767e:	87 5f       	subi	r24, 0xF7	; 247
    7680:	9d 4f       	sbci	r25, 0xFD	; 253
    7682:	fc 01       	movw	r30, r24
    7684:	60 81       	ld	r22, Z
    7686:	71 81       	ldd	r23, Z+1	; 0x01
    7688:	82 81       	ldd	r24, Z+2	; 0x02
    768a:	93 81       	ldd	r25, Z+3	; 0x03
    768c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7690:	dc 01       	movw	r26, r24
    7692:	cb 01       	movw	r24, r22
    7694:	f8 01       	movw	r30, r16
    7696:	91 83       	std	Z+1, r25	; 0x01
    7698:	80 83       	st	Z, r24
    769a:	ce 01       	movw	r24, r28
    769c:	8f 5e       	subi	r24, 0xEF	; 239
    769e:	9d 4f       	sbci	r25, 0xFD	; 253
    76a0:	9e 01       	movw	r18, r28
    76a2:	23 5f       	subi	r18, 0xF3	; 243
    76a4:	3d 4f       	sbci	r19, 0xFD	; 253
    76a6:	f9 01       	movw	r30, r18
    76a8:	20 81       	ld	r18, Z
    76aa:	31 81       	ldd	r19, Z+1	; 0x01
    76ac:	fc 01       	movw	r30, r24
    76ae:	31 83       	std	Z+1, r19	; 0x01
    76b0:	20 83       	st	Z, r18
    76b2:	ce 01       	movw	r24, r28
    76b4:	8f 5e       	subi	r24, 0xEF	; 239
    76b6:	9d 4f       	sbci	r25, 0xFD	; 253
    76b8:	fc 01       	movw	r30, r24
    76ba:	80 81       	ld	r24, Z
    76bc:	91 81       	ldd	r25, Z+1	; 0x01
    76be:	8c 01       	movw	r16, r24
    76c0:	c8 01       	movw	r24, r16
    76c2:	01 97       	sbiw	r24, 0x01	; 1
    76c4:	f1 f7       	brne	.-4      	; 0x76c2 <main+0x4372>
    76c6:	8c 01       	movw	r16, r24
    76c8:	ce 01       	movw	r24, r28
    76ca:	8f 5e       	subi	r24, 0xEF	; 239
    76cc:	9d 4f       	sbci	r25, 0xFD	; 253
    76ce:	fc 01       	movw	r30, r24
    76d0:	11 83       	std	Z+1, r17	; 0x01
    76d2:	00 83       	st	Z, r16
				_delay_ms(100);
				coor[0]=0;
    76d4:	10 92 a7 04 	sts	0x04A7, r1
    76d8:	10 92 a6 04 	sts	0x04A6, r1
				coor[1]=0;
    76dc:	10 92 a9 04 	sts	0x04A9, r1
    76e0:	10 92 a8 04 	sts	0x04A8, r1
				linefollwer();
    76e4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
				compass=4;
    76e8:	84 e0       	ldi	r24, 0x04	; 4
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	9c 83       	std	Y+4, r25	; 0x04
    76ee:	8b 83       	std	Y+3, r24	; 0x03
    76f0:	bc c2       	rjmp	.+1400   	; 0x7c6a <main+0x491a>
			}
			else
			{
				if(compass==7)
    76f2:	8b 81       	ldd	r24, Y+3	; 0x03
    76f4:	9c 81       	ldd	r25, Y+4	; 0x04
    76f6:	87 30       	cpi	r24, 0x07	; 7
    76f8:	91 05       	cpc	r25, r1
    76fa:	09 f0       	breq	.+2      	; 0x76fe <main+0x43ae>
    76fc:	e5 c0       	rjmp	.+458    	; 0x78c8 <main+0x4578>
				{
					left_degrees(85);
    76fe:	85 e5       	ldi	r24, 0x55	; 85
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    7706:	9e 01       	movw	r18, r28
    7708:	2d 5e       	subi	r18, 0xED	; 237
    770a:	3d 4f       	sbci	r19, 0xFD	; 253
    770c:	80 e0       	ldi	r24, 0x00	; 0
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	a8 ec       	ldi	r26, 0xC8	; 200
    7712:	b2 e4       	ldi	r27, 0x42	; 66
    7714:	f9 01       	movw	r30, r18
    7716:	80 83       	st	Z, r24
    7718:	91 83       	std	Z+1, r25	; 0x01
    771a:	a2 83       	std	Z+2, r26	; 0x02
    771c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    771e:	8e 01       	movw	r16, r28
    7720:	09 5e       	subi	r16, 0xE9	; 233
    7722:	1d 4f       	sbci	r17, 0xFD	; 253
    7724:	ce 01       	movw	r24, r28
    7726:	8d 5e       	subi	r24, 0xED	; 237
    7728:	9d 4f       	sbci	r25, 0xFD	; 253
    772a:	fc 01       	movw	r30, r24
    772c:	60 81       	ld	r22, Z
    772e:	71 81       	ldd	r23, Z+1	; 0x01
    7730:	82 81       	ldd	r24, Z+2	; 0x02
    7732:	93 81       	ldd	r25, Z+3	; 0x03
    7734:	26 e6       	ldi	r18, 0x66	; 102
    7736:	36 e6       	ldi	r19, 0x66	; 102
    7738:	46 e6       	ldi	r20, 0x66	; 102
    773a:	55 e4       	ldi	r21, 0x45	; 69
    773c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7740:	dc 01       	movw	r26, r24
    7742:	cb 01       	movw	r24, r22
    7744:	f8 01       	movw	r30, r16
    7746:	80 83       	st	Z, r24
    7748:	91 83       	std	Z+1, r25	; 0x01
    774a:	a2 83       	std	Z+2, r26	; 0x02
    774c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    774e:	ce 01       	movw	r24, r28
    7750:	89 5e       	subi	r24, 0xE9	; 233
    7752:	9d 4f       	sbci	r25, 0xFD	; 253
    7754:	11 e0       	ldi	r17, 0x01	; 1
    7756:	fc 01       	movw	r30, r24
    7758:	60 81       	ld	r22, Z
    775a:	71 81       	ldd	r23, Z+1	; 0x01
    775c:	82 81       	ldd	r24, Z+2	; 0x02
    775e:	93 81       	ldd	r25, Z+3	; 0x03
    7760:	20 e0       	ldi	r18, 0x00	; 0
    7762:	30 e0       	ldi	r19, 0x00	; 0
    7764:	40 e8       	ldi	r20, 0x80	; 128
    7766:	5f e3       	ldi	r21, 0x3F	; 63
    7768:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    776c:	88 23       	and	r24, r24
    776e:	0c f0       	brlt	.+2      	; 0x7772 <main+0x4422>
    7770:	10 e0       	ldi	r17, 0x00	; 0
    7772:	11 23       	and	r17, r17
    7774:	49 f0       	breq	.+18     	; 0x7788 <main+0x4438>
		__ticks = 1;
    7776:	ce 01       	movw	r24, r28
    7778:	85 5e       	subi	r24, 0xE5	; 229
    777a:	9d 4f       	sbci	r25, 0xFD	; 253
    777c:	21 e0       	ldi	r18, 0x01	; 1
    777e:	30 e0       	ldi	r19, 0x00	; 0
    7780:	fc 01       	movw	r30, r24
    7782:	31 83       	std	Z+1, r19	; 0x01
    7784:	20 83       	st	Z, r18
    7786:	74 c0       	rjmp	.+232    	; 0x7870 <main+0x4520>
	else if (__tmp > 65535)
    7788:	ce 01       	movw	r24, r28
    778a:	89 5e       	subi	r24, 0xE9	; 233
    778c:	9d 4f       	sbci	r25, 0xFD	; 253
    778e:	11 e0       	ldi	r17, 0x01	; 1
    7790:	fc 01       	movw	r30, r24
    7792:	60 81       	ld	r22, Z
    7794:	71 81       	ldd	r23, Z+1	; 0x01
    7796:	82 81       	ldd	r24, Z+2	; 0x02
    7798:	93 81       	ldd	r25, Z+3	; 0x03
    779a:	20 e0       	ldi	r18, 0x00	; 0
    779c:	3f ef       	ldi	r19, 0xFF	; 255
    779e:	4f e7       	ldi	r20, 0x7F	; 127
    77a0:	57 e4       	ldi	r21, 0x47	; 71
    77a2:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    77a6:	18 16       	cp	r1, r24
    77a8:	0c f0       	brlt	.+2      	; 0x77ac <main+0x445c>
    77aa:	10 e0       	ldi	r17, 0x00	; 0
    77ac:	11 23       	and	r17, r17
    77ae:	09 f4       	brne	.+2      	; 0x77b2 <main+0x4462>
    77b0:	4d c0       	rjmp	.+154    	; 0x784c <main+0x44fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77b2:	ce 01       	movw	r24, r28
    77b4:	8d 5e       	subi	r24, 0xED	; 237
    77b6:	9d 4f       	sbci	r25, 0xFD	; 253
    77b8:	fc 01       	movw	r30, r24
    77ba:	60 81       	ld	r22, Z
    77bc:	71 81       	ldd	r23, Z+1	; 0x01
    77be:	82 81       	ldd	r24, Z+2	; 0x02
    77c0:	93 81       	ldd	r25, Z+3	; 0x03
    77c2:	20 e0       	ldi	r18, 0x00	; 0
    77c4:	30 e0       	ldi	r19, 0x00	; 0
    77c6:	40 e2       	ldi	r20, 0x20	; 32
    77c8:	51 e4       	ldi	r21, 0x41	; 65
    77ca:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    77ce:	dc 01       	movw	r26, r24
    77d0:	cb 01       	movw	r24, r22
    77d2:	8e 01       	movw	r16, r28
    77d4:	05 5e       	subi	r16, 0xE5	; 229
    77d6:	1d 4f       	sbci	r17, 0xFD	; 253
    77d8:	bc 01       	movw	r22, r24
    77da:	cd 01       	movw	r24, r26
    77dc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    77e0:	dc 01       	movw	r26, r24
    77e2:	cb 01       	movw	r24, r22
    77e4:	f8 01       	movw	r30, r16
    77e6:	91 83       	std	Z+1, r25	; 0x01
    77e8:	80 83       	st	Z, r24
    77ea:	27 c0       	rjmp	.+78     	; 0x783a <main+0x44ea>
    77ec:	ce 01       	movw	r24, r28
    77ee:	83 5e       	subi	r24, 0xE3	; 227
    77f0:	9d 4f       	sbci	r25, 0xFD	; 253
    77f2:	20 e7       	ldi	r18, 0x70	; 112
    77f4:	31 e0       	ldi	r19, 0x01	; 1
    77f6:	fc 01       	movw	r30, r24
    77f8:	31 83       	std	Z+1, r19	; 0x01
    77fa:	20 83       	st	Z, r18
    77fc:	ce 01       	movw	r24, r28
    77fe:	83 5e       	subi	r24, 0xE3	; 227
    7800:	9d 4f       	sbci	r25, 0xFD	; 253
    7802:	fc 01       	movw	r30, r24
    7804:	80 81       	ld	r24, Z
    7806:	91 81       	ldd	r25, Z+1	; 0x01
    7808:	8c 01       	movw	r16, r24
    780a:	c8 01       	movw	r24, r16
    780c:	01 97       	sbiw	r24, 0x01	; 1
    780e:	f1 f7       	brne	.-4      	; 0x780c <main+0x44bc>
    7810:	8c 01       	movw	r16, r24
    7812:	ce 01       	movw	r24, r28
    7814:	83 5e       	subi	r24, 0xE3	; 227
    7816:	9d 4f       	sbci	r25, 0xFD	; 253
    7818:	fc 01       	movw	r30, r24
    781a:	11 83       	std	Z+1, r17	; 0x01
    781c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    781e:	ce 01       	movw	r24, r28
    7820:	85 5e       	subi	r24, 0xE5	; 229
    7822:	9d 4f       	sbci	r25, 0xFD	; 253
    7824:	9e 01       	movw	r18, r28
    7826:	25 5e       	subi	r18, 0xE5	; 229
    7828:	3d 4f       	sbci	r19, 0xFD	; 253
    782a:	f9 01       	movw	r30, r18
    782c:	20 81       	ld	r18, Z
    782e:	31 81       	ldd	r19, Z+1	; 0x01
    7830:	21 50       	subi	r18, 0x01	; 1
    7832:	30 40       	sbci	r19, 0x00	; 0
    7834:	fc 01       	movw	r30, r24
    7836:	31 83       	std	Z+1, r19	; 0x01
    7838:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    783a:	ce 01       	movw	r24, r28
    783c:	85 5e       	subi	r24, 0xE5	; 229
    783e:	9d 4f       	sbci	r25, 0xFD	; 253
    7840:	fc 01       	movw	r30, r24
    7842:	80 81       	ld	r24, Z
    7844:	91 81       	ldd	r25, Z+1	; 0x01
    7846:	00 97       	sbiw	r24, 0x00	; 0
    7848:	89 f6       	brne	.-94     	; 0x77ec <main+0x449c>
    784a:	2f c0       	rjmp	.+94     	; 0x78aa <main+0x455a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    784c:	8e 01       	movw	r16, r28
    784e:	05 5e       	subi	r16, 0xE5	; 229
    7850:	1d 4f       	sbci	r17, 0xFD	; 253
    7852:	ce 01       	movw	r24, r28
    7854:	89 5e       	subi	r24, 0xE9	; 233
    7856:	9d 4f       	sbci	r25, 0xFD	; 253
    7858:	fc 01       	movw	r30, r24
    785a:	60 81       	ld	r22, Z
    785c:	71 81       	ldd	r23, Z+1	; 0x01
    785e:	82 81       	ldd	r24, Z+2	; 0x02
    7860:	93 81       	ldd	r25, Z+3	; 0x03
    7862:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7866:	dc 01       	movw	r26, r24
    7868:	cb 01       	movw	r24, r22
    786a:	f8 01       	movw	r30, r16
    786c:	91 83       	std	Z+1, r25	; 0x01
    786e:	80 83       	st	Z, r24
    7870:	ce 01       	movw	r24, r28
    7872:	81 5e       	subi	r24, 0xE1	; 225
    7874:	9d 4f       	sbci	r25, 0xFD	; 253
    7876:	9e 01       	movw	r18, r28
    7878:	25 5e       	subi	r18, 0xE5	; 229
    787a:	3d 4f       	sbci	r19, 0xFD	; 253
    787c:	f9 01       	movw	r30, r18
    787e:	20 81       	ld	r18, Z
    7880:	31 81       	ldd	r19, Z+1	; 0x01
    7882:	fc 01       	movw	r30, r24
    7884:	31 83       	std	Z+1, r19	; 0x01
    7886:	20 83       	st	Z, r18
    7888:	ce 01       	movw	r24, r28
    788a:	81 5e       	subi	r24, 0xE1	; 225
    788c:	9d 4f       	sbci	r25, 0xFD	; 253
    788e:	fc 01       	movw	r30, r24
    7890:	80 81       	ld	r24, Z
    7892:	91 81       	ldd	r25, Z+1	; 0x01
    7894:	8c 01       	movw	r16, r24
    7896:	c8 01       	movw	r24, r16
    7898:	01 97       	sbiw	r24, 0x01	; 1
    789a:	f1 f7       	brne	.-4      	; 0x7898 <main+0x4548>
    789c:	8c 01       	movw	r16, r24
    789e:	ce 01       	movw	r24, r28
    78a0:	81 5e       	subi	r24, 0xE1	; 225
    78a2:	9d 4f       	sbci	r25, 0xFD	; 253
    78a4:	fc 01       	movw	r30, r24
    78a6:	11 83       	std	Z+1, r17	; 0x01
    78a8:	00 83       	st	Z, r16
					_delay_ms(100);
					coor[0]=0;
    78aa:	10 92 a7 04 	sts	0x04A7, r1
    78ae:	10 92 a6 04 	sts	0x04A6, r1
					coor[1]=0;
    78b2:	10 92 a9 04 	sts	0x04A9, r1
    78b6:	10 92 a8 04 	sts	0x04A8, r1
					linefollwer();
    78ba:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
					compass=4;
    78be:	84 e0       	ldi	r24, 0x04	; 4
    78c0:	90 e0       	ldi	r25, 0x00	; 0
    78c2:	9c 83       	std	Y+4, r25	; 0x04
    78c4:	8b 83       	std	Y+3, r24	; 0x03
    78c6:	d1 c1       	rjmp	.+930    	; 0x7c6a <main+0x491a>
					
				}
				else
				{
					if(compass==5)
    78c8:	8b 81       	ldd	r24, Y+3	; 0x03
    78ca:	9c 81       	ldd	r25, Y+4	; 0x04
    78cc:	85 30       	cpi	r24, 0x05	; 5
    78ce:	91 05       	cpc	r25, r1
    78d0:	09 f0       	breq	.+2      	; 0x78d4 <main+0x4584>
    78d2:	e1 c0       	rjmp	.+450    	; 0x7a96 <main+0x4746>
    78d4:	9e 01       	movw	r18, r28
    78d6:	2f 5d       	subi	r18, 0xDF	; 223
    78d8:	3d 4f       	sbci	r19, 0xFD	; 253
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	90 e0       	ldi	r25, 0x00	; 0
    78de:	a8 ec       	ldi	r26, 0xC8	; 200
    78e0:	b2 e4       	ldi	r27, 0x42	; 66
    78e2:	f9 01       	movw	r30, r18
    78e4:	80 83       	st	Z, r24
    78e6:	91 83       	std	Z+1, r25	; 0x01
    78e8:	a2 83       	std	Z+2, r26	; 0x02
    78ea:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    78ec:	8e 01       	movw	r16, r28
    78ee:	0b 5d       	subi	r16, 0xDB	; 219
    78f0:	1d 4f       	sbci	r17, 0xFD	; 253
    78f2:	ce 01       	movw	r24, r28
    78f4:	8f 5d       	subi	r24, 0xDF	; 223
    78f6:	9d 4f       	sbci	r25, 0xFD	; 253
    78f8:	fc 01       	movw	r30, r24
    78fa:	60 81       	ld	r22, Z
    78fc:	71 81       	ldd	r23, Z+1	; 0x01
    78fe:	82 81       	ldd	r24, Z+2	; 0x02
    7900:	93 81       	ldd	r25, Z+3	; 0x03
    7902:	26 e6       	ldi	r18, 0x66	; 102
    7904:	36 e6       	ldi	r19, 0x66	; 102
    7906:	46 e6       	ldi	r20, 0x66	; 102
    7908:	55 e4       	ldi	r21, 0x45	; 69
    790a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    790e:	dc 01       	movw	r26, r24
    7910:	cb 01       	movw	r24, r22
    7912:	f8 01       	movw	r30, r16
    7914:	80 83       	st	Z, r24
    7916:	91 83       	std	Z+1, r25	; 0x01
    7918:	a2 83       	std	Z+2, r26	; 0x02
    791a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    791c:	ce 01       	movw	r24, r28
    791e:	8b 5d       	subi	r24, 0xDB	; 219
    7920:	9d 4f       	sbci	r25, 0xFD	; 253
    7922:	11 e0       	ldi	r17, 0x01	; 1
    7924:	fc 01       	movw	r30, r24
    7926:	60 81       	ld	r22, Z
    7928:	71 81       	ldd	r23, Z+1	; 0x01
    792a:	82 81       	ldd	r24, Z+2	; 0x02
    792c:	93 81       	ldd	r25, Z+3	; 0x03
    792e:	20 e0       	ldi	r18, 0x00	; 0
    7930:	30 e0       	ldi	r19, 0x00	; 0
    7932:	40 e8       	ldi	r20, 0x80	; 128
    7934:	5f e3       	ldi	r21, 0x3F	; 63
    7936:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    793a:	88 23       	and	r24, r24
    793c:	0c f0       	brlt	.+2      	; 0x7940 <main+0x45f0>
    793e:	10 e0       	ldi	r17, 0x00	; 0
    7940:	11 23       	and	r17, r17
    7942:	49 f0       	breq	.+18     	; 0x7956 <main+0x4606>
		__ticks = 1;
    7944:	ce 01       	movw	r24, r28
    7946:	87 5d       	subi	r24, 0xD7	; 215
    7948:	9d 4f       	sbci	r25, 0xFD	; 253
    794a:	21 e0       	ldi	r18, 0x01	; 1
    794c:	30 e0       	ldi	r19, 0x00	; 0
    794e:	fc 01       	movw	r30, r24
    7950:	31 83       	std	Z+1, r19	; 0x01
    7952:	20 83       	st	Z, r18
    7954:	74 c0       	rjmp	.+232    	; 0x7a3e <main+0x46ee>
	else if (__tmp > 65535)
    7956:	ce 01       	movw	r24, r28
    7958:	8b 5d       	subi	r24, 0xDB	; 219
    795a:	9d 4f       	sbci	r25, 0xFD	; 253
    795c:	11 e0       	ldi	r17, 0x01	; 1
    795e:	fc 01       	movw	r30, r24
    7960:	60 81       	ld	r22, Z
    7962:	71 81       	ldd	r23, Z+1	; 0x01
    7964:	82 81       	ldd	r24, Z+2	; 0x02
    7966:	93 81       	ldd	r25, Z+3	; 0x03
    7968:	20 e0       	ldi	r18, 0x00	; 0
    796a:	3f ef       	ldi	r19, 0xFF	; 255
    796c:	4f e7       	ldi	r20, 0x7F	; 127
    796e:	57 e4       	ldi	r21, 0x47	; 71
    7970:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    7974:	18 16       	cp	r1, r24
    7976:	0c f0       	brlt	.+2      	; 0x797a <main+0x462a>
    7978:	10 e0       	ldi	r17, 0x00	; 0
    797a:	11 23       	and	r17, r17
    797c:	09 f4       	brne	.+2      	; 0x7980 <main+0x4630>
    797e:	4d c0       	rjmp	.+154    	; 0x7a1a <main+0x46ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7980:	ce 01       	movw	r24, r28
    7982:	8f 5d       	subi	r24, 0xDF	; 223
    7984:	9d 4f       	sbci	r25, 0xFD	; 253
    7986:	fc 01       	movw	r30, r24
    7988:	60 81       	ld	r22, Z
    798a:	71 81       	ldd	r23, Z+1	; 0x01
    798c:	82 81       	ldd	r24, Z+2	; 0x02
    798e:	93 81       	ldd	r25, Z+3	; 0x03
    7990:	20 e0       	ldi	r18, 0x00	; 0
    7992:	30 e0       	ldi	r19, 0x00	; 0
    7994:	40 e2       	ldi	r20, 0x20	; 32
    7996:	51 e4       	ldi	r21, 0x41	; 65
    7998:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    799c:	dc 01       	movw	r26, r24
    799e:	cb 01       	movw	r24, r22
    79a0:	8e 01       	movw	r16, r28
    79a2:	07 5d       	subi	r16, 0xD7	; 215
    79a4:	1d 4f       	sbci	r17, 0xFD	; 253
    79a6:	bc 01       	movw	r22, r24
    79a8:	cd 01       	movw	r24, r26
    79aa:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    79ae:	dc 01       	movw	r26, r24
    79b0:	cb 01       	movw	r24, r22
    79b2:	f8 01       	movw	r30, r16
    79b4:	91 83       	std	Z+1, r25	; 0x01
    79b6:	80 83       	st	Z, r24
    79b8:	27 c0       	rjmp	.+78     	; 0x7a08 <main+0x46b8>
    79ba:	ce 01       	movw	r24, r28
    79bc:	85 5d       	subi	r24, 0xD5	; 213
    79be:	9d 4f       	sbci	r25, 0xFD	; 253
    79c0:	20 e7       	ldi	r18, 0x70	; 112
    79c2:	31 e0       	ldi	r19, 0x01	; 1
    79c4:	fc 01       	movw	r30, r24
    79c6:	31 83       	std	Z+1, r19	; 0x01
    79c8:	20 83       	st	Z, r18
    79ca:	ce 01       	movw	r24, r28
    79cc:	85 5d       	subi	r24, 0xD5	; 213
    79ce:	9d 4f       	sbci	r25, 0xFD	; 253
    79d0:	fc 01       	movw	r30, r24
    79d2:	80 81       	ld	r24, Z
    79d4:	91 81       	ldd	r25, Z+1	; 0x01
    79d6:	8c 01       	movw	r16, r24
    79d8:	c8 01       	movw	r24, r16
    79da:	01 97       	sbiw	r24, 0x01	; 1
    79dc:	f1 f7       	brne	.-4      	; 0x79da <main+0x468a>
    79de:	8c 01       	movw	r16, r24
    79e0:	ce 01       	movw	r24, r28
    79e2:	85 5d       	subi	r24, 0xD5	; 213
    79e4:	9d 4f       	sbci	r25, 0xFD	; 253
    79e6:	fc 01       	movw	r30, r24
    79e8:	11 83       	std	Z+1, r17	; 0x01
    79ea:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79ec:	ce 01       	movw	r24, r28
    79ee:	87 5d       	subi	r24, 0xD7	; 215
    79f0:	9d 4f       	sbci	r25, 0xFD	; 253
    79f2:	9e 01       	movw	r18, r28
    79f4:	27 5d       	subi	r18, 0xD7	; 215
    79f6:	3d 4f       	sbci	r19, 0xFD	; 253
    79f8:	f9 01       	movw	r30, r18
    79fa:	20 81       	ld	r18, Z
    79fc:	31 81       	ldd	r19, Z+1	; 0x01
    79fe:	21 50       	subi	r18, 0x01	; 1
    7a00:	30 40       	sbci	r19, 0x00	; 0
    7a02:	fc 01       	movw	r30, r24
    7a04:	31 83       	std	Z+1, r19	; 0x01
    7a06:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a08:	ce 01       	movw	r24, r28
    7a0a:	87 5d       	subi	r24, 0xD7	; 215
    7a0c:	9d 4f       	sbci	r25, 0xFD	; 253
    7a0e:	fc 01       	movw	r30, r24
    7a10:	80 81       	ld	r24, Z
    7a12:	91 81       	ldd	r25, Z+1	; 0x01
    7a14:	00 97       	sbiw	r24, 0x00	; 0
    7a16:	89 f6       	brne	.-94     	; 0x79ba <main+0x466a>
    7a18:	2f c0       	rjmp	.+94     	; 0x7a78 <main+0x4728>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a1a:	8e 01       	movw	r16, r28
    7a1c:	07 5d       	subi	r16, 0xD7	; 215
    7a1e:	1d 4f       	sbci	r17, 0xFD	; 253
    7a20:	ce 01       	movw	r24, r28
    7a22:	8b 5d       	subi	r24, 0xDB	; 219
    7a24:	9d 4f       	sbci	r25, 0xFD	; 253
    7a26:	fc 01       	movw	r30, r24
    7a28:	60 81       	ld	r22, Z
    7a2a:	71 81       	ldd	r23, Z+1	; 0x01
    7a2c:	82 81       	ldd	r24, Z+2	; 0x02
    7a2e:	93 81       	ldd	r25, Z+3	; 0x03
    7a30:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7a34:	dc 01       	movw	r26, r24
    7a36:	cb 01       	movw	r24, r22
    7a38:	f8 01       	movw	r30, r16
    7a3a:	91 83       	std	Z+1, r25	; 0x01
    7a3c:	80 83       	st	Z, r24
    7a3e:	ce 01       	movw	r24, r28
    7a40:	83 5d       	subi	r24, 0xD3	; 211
    7a42:	9d 4f       	sbci	r25, 0xFD	; 253
    7a44:	9e 01       	movw	r18, r28
    7a46:	27 5d       	subi	r18, 0xD7	; 215
    7a48:	3d 4f       	sbci	r19, 0xFD	; 253
    7a4a:	f9 01       	movw	r30, r18
    7a4c:	20 81       	ld	r18, Z
    7a4e:	31 81       	ldd	r19, Z+1	; 0x01
    7a50:	fc 01       	movw	r30, r24
    7a52:	31 83       	std	Z+1, r19	; 0x01
    7a54:	20 83       	st	Z, r18
    7a56:	ce 01       	movw	r24, r28
    7a58:	83 5d       	subi	r24, 0xD3	; 211
    7a5a:	9d 4f       	sbci	r25, 0xFD	; 253
    7a5c:	fc 01       	movw	r30, r24
    7a5e:	80 81       	ld	r24, Z
    7a60:	91 81       	ldd	r25, Z+1	; 0x01
    7a62:	8c 01       	movw	r16, r24
    7a64:	c8 01       	movw	r24, r16
    7a66:	01 97       	sbiw	r24, 0x01	; 1
    7a68:	f1 f7       	brne	.-4      	; 0x7a66 <main+0x4716>
    7a6a:	8c 01       	movw	r16, r24
    7a6c:	ce 01       	movw	r24, r28
    7a6e:	83 5d       	subi	r24, 0xD3	; 211
    7a70:	9d 4f       	sbci	r25, 0xFD	; 253
    7a72:	fc 01       	movw	r30, r24
    7a74:	11 83       	std	Z+1, r17	; 0x01
    7a76:	00 83       	st	Z, r16
					{
					    _delay_ms(100);                      /// calibration required
						coor[0]=0;
    7a78:	10 92 a7 04 	sts	0x04A7, r1
    7a7c:	10 92 a6 04 	sts	0x04A6, r1
						coor[1]=0;
    7a80:	10 92 a9 04 	sts	0x04A9, r1
    7a84:	10 92 a8 04 	sts	0x04A8, r1
						linefollwer();
    7a88:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
						compass=4;
    7a8c:	84 e0       	ldi	r24, 0x04	; 4
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	9c 83       	std	Y+4, r25	; 0x04
    7a92:	8b 83       	std	Y+3, r24	; 0x03
    7a94:	ea c0       	rjmp	.+468    	; 0x7c6a <main+0x491a>
						
					}
						else
						{
							if(compass==4)
    7a96:	8b 81       	ldd	r24, Y+3	; 0x03
    7a98:	9c 81       	ldd	r25, Y+4	; 0x04
    7a9a:	84 30       	cpi	r24, 0x04	; 4
    7a9c:	91 05       	cpc	r25, r1
    7a9e:	09 f0       	breq	.+2      	; 0x7aa2 <main+0x4752>
    7aa0:	e4 c0       	rjmp	.+456    	; 0x7c6a <main+0x491a>
							{
								right_degrees(185);
    7aa2:	89 eb       	ldi	r24, 0xB9	; 185
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    7aaa:	9e 01       	movw	r18, r28
    7aac:	21 5d       	subi	r18, 0xD1	; 209
    7aae:	3d 4f       	sbci	r19, 0xFD	; 253
    7ab0:	80 e0       	ldi	r24, 0x00	; 0
    7ab2:	90 e0       	ldi	r25, 0x00	; 0
    7ab4:	a8 ec       	ldi	r26, 0xC8	; 200
    7ab6:	b2 e4       	ldi	r27, 0x42	; 66
    7ab8:	f9 01       	movw	r30, r18
    7aba:	80 83       	st	Z, r24
    7abc:	91 83       	std	Z+1, r25	; 0x01
    7abe:	a2 83       	std	Z+2, r26	; 0x02
    7ac0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7ac2:	8e 01       	movw	r16, r28
    7ac4:	0d 5c       	subi	r16, 0xCD	; 205
    7ac6:	1d 4f       	sbci	r17, 0xFD	; 253
    7ac8:	ce 01       	movw	r24, r28
    7aca:	81 5d       	subi	r24, 0xD1	; 209
    7acc:	9d 4f       	sbci	r25, 0xFD	; 253
    7ace:	fc 01       	movw	r30, r24
    7ad0:	60 81       	ld	r22, Z
    7ad2:	71 81       	ldd	r23, Z+1	; 0x01
    7ad4:	82 81       	ldd	r24, Z+2	; 0x02
    7ad6:	93 81       	ldd	r25, Z+3	; 0x03
    7ad8:	26 e6       	ldi	r18, 0x66	; 102
    7ada:	36 e6       	ldi	r19, 0x66	; 102
    7adc:	46 e6       	ldi	r20, 0x66	; 102
    7ade:	55 e4       	ldi	r21, 0x45	; 69
    7ae0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7ae4:	dc 01       	movw	r26, r24
    7ae6:	cb 01       	movw	r24, r22
    7ae8:	f8 01       	movw	r30, r16
    7aea:	80 83       	st	Z, r24
    7aec:	91 83       	std	Z+1, r25	; 0x01
    7aee:	a2 83       	std	Z+2, r26	; 0x02
    7af0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7af2:	ce 01       	movw	r24, r28
    7af4:	8d 5c       	subi	r24, 0xCD	; 205
    7af6:	9d 4f       	sbci	r25, 0xFD	; 253
    7af8:	11 e0       	ldi	r17, 0x01	; 1
    7afa:	fc 01       	movw	r30, r24
    7afc:	60 81       	ld	r22, Z
    7afe:	71 81       	ldd	r23, Z+1	; 0x01
    7b00:	82 81       	ldd	r24, Z+2	; 0x02
    7b02:	93 81       	ldd	r25, Z+3	; 0x03
    7b04:	20 e0       	ldi	r18, 0x00	; 0
    7b06:	30 e0       	ldi	r19, 0x00	; 0
    7b08:	40 e8       	ldi	r20, 0x80	; 128
    7b0a:	5f e3       	ldi	r21, 0x3F	; 63
    7b0c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7b10:	88 23       	and	r24, r24
    7b12:	0c f0       	brlt	.+2      	; 0x7b16 <main+0x47c6>
    7b14:	10 e0       	ldi	r17, 0x00	; 0
    7b16:	11 23       	and	r17, r17
    7b18:	49 f0       	breq	.+18     	; 0x7b2c <main+0x47dc>
		__ticks = 1;
    7b1a:	ce 01       	movw	r24, r28
    7b1c:	89 5c       	subi	r24, 0xC9	; 201
    7b1e:	9d 4f       	sbci	r25, 0xFD	; 253
    7b20:	21 e0       	ldi	r18, 0x01	; 1
    7b22:	30 e0       	ldi	r19, 0x00	; 0
    7b24:	fc 01       	movw	r30, r24
    7b26:	31 83       	std	Z+1, r19	; 0x01
    7b28:	20 83       	st	Z, r18
    7b2a:	74 c0       	rjmp	.+232    	; 0x7c14 <main+0x48c4>
	else if (__tmp > 65535)
    7b2c:	ce 01       	movw	r24, r28
    7b2e:	8d 5c       	subi	r24, 0xCD	; 205
    7b30:	9d 4f       	sbci	r25, 0xFD	; 253
    7b32:	11 e0       	ldi	r17, 0x01	; 1
    7b34:	fc 01       	movw	r30, r24
    7b36:	60 81       	ld	r22, Z
    7b38:	71 81       	ldd	r23, Z+1	; 0x01
    7b3a:	82 81       	ldd	r24, Z+2	; 0x02
    7b3c:	93 81       	ldd	r25, Z+3	; 0x03
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	3f ef       	ldi	r19, 0xFF	; 255
    7b42:	4f e7       	ldi	r20, 0x7F	; 127
    7b44:	57 e4       	ldi	r21, 0x47	; 71
    7b46:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    7b4a:	18 16       	cp	r1, r24
    7b4c:	0c f0       	brlt	.+2      	; 0x7b50 <main+0x4800>
    7b4e:	10 e0       	ldi	r17, 0x00	; 0
    7b50:	11 23       	and	r17, r17
    7b52:	09 f4       	brne	.+2      	; 0x7b56 <main+0x4806>
    7b54:	4d c0       	rjmp	.+154    	; 0x7bf0 <main+0x48a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b56:	ce 01       	movw	r24, r28
    7b58:	81 5d       	subi	r24, 0xD1	; 209
    7b5a:	9d 4f       	sbci	r25, 0xFD	; 253
    7b5c:	fc 01       	movw	r30, r24
    7b5e:	60 81       	ld	r22, Z
    7b60:	71 81       	ldd	r23, Z+1	; 0x01
    7b62:	82 81       	ldd	r24, Z+2	; 0x02
    7b64:	93 81       	ldd	r25, Z+3	; 0x03
    7b66:	20 e0       	ldi	r18, 0x00	; 0
    7b68:	30 e0       	ldi	r19, 0x00	; 0
    7b6a:	40 e2       	ldi	r20, 0x20	; 32
    7b6c:	51 e4       	ldi	r21, 0x41	; 65
    7b6e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7b72:	dc 01       	movw	r26, r24
    7b74:	cb 01       	movw	r24, r22
    7b76:	8e 01       	movw	r16, r28
    7b78:	09 5c       	subi	r16, 0xC9	; 201
    7b7a:	1d 4f       	sbci	r17, 0xFD	; 253
    7b7c:	bc 01       	movw	r22, r24
    7b7e:	cd 01       	movw	r24, r26
    7b80:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7b84:	dc 01       	movw	r26, r24
    7b86:	cb 01       	movw	r24, r22
    7b88:	f8 01       	movw	r30, r16
    7b8a:	91 83       	std	Z+1, r25	; 0x01
    7b8c:	80 83       	st	Z, r24
    7b8e:	27 c0       	rjmp	.+78     	; 0x7bde <main+0x488e>
    7b90:	ce 01       	movw	r24, r28
    7b92:	87 5c       	subi	r24, 0xC7	; 199
    7b94:	9d 4f       	sbci	r25, 0xFD	; 253
    7b96:	20 e7       	ldi	r18, 0x70	; 112
    7b98:	31 e0       	ldi	r19, 0x01	; 1
    7b9a:	fc 01       	movw	r30, r24
    7b9c:	31 83       	std	Z+1, r19	; 0x01
    7b9e:	20 83       	st	Z, r18
    7ba0:	ce 01       	movw	r24, r28
    7ba2:	87 5c       	subi	r24, 0xC7	; 199
    7ba4:	9d 4f       	sbci	r25, 0xFD	; 253
    7ba6:	fc 01       	movw	r30, r24
    7ba8:	80 81       	ld	r24, Z
    7baa:	91 81       	ldd	r25, Z+1	; 0x01
    7bac:	8c 01       	movw	r16, r24
    7bae:	c8 01       	movw	r24, r16
    7bb0:	01 97       	sbiw	r24, 0x01	; 1
    7bb2:	f1 f7       	brne	.-4      	; 0x7bb0 <main+0x4860>
    7bb4:	8c 01       	movw	r16, r24
    7bb6:	ce 01       	movw	r24, r28
    7bb8:	87 5c       	subi	r24, 0xC7	; 199
    7bba:	9d 4f       	sbci	r25, 0xFD	; 253
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	11 83       	std	Z+1, r17	; 0x01
    7bc0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bc2:	ce 01       	movw	r24, r28
    7bc4:	89 5c       	subi	r24, 0xC9	; 201
    7bc6:	9d 4f       	sbci	r25, 0xFD	; 253
    7bc8:	9e 01       	movw	r18, r28
    7bca:	29 5c       	subi	r18, 0xC9	; 201
    7bcc:	3d 4f       	sbci	r19, 0xFD	; 253
    7bce:	f9 01       	movw	r30, r18
    7bd0:	20 81       	ld	r18, Z
    7bd2:	31 81       	ldd	r19, Z+1	; 0x01
    7bd4:	21 50       	subi	r18, 0x01	; 1
    7bd6:	30 40       	sbci	r19, 0x00	; 0
    7bd8:	fc 01       	movw	r30, r24
    7bda:	31 83       	std	Z+1, r19	; 0x01
    7bdc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bde:	ce 01       	movw	r24, r28
    7be0:	89 5c       	subi	r24, 0xC9	; 201
    7be2:	9d 4f       	sbci	r25, 0xFD	; 253
    7be4:	fc 01       	movw	r30, r24
    7be6:	80 81       	ld	r24, Z
    7be8:	91 81       	ldd	r25, Z+1	; 0x01
    7bea:	00 97       	sbiw	r24, 0x00	; 0
    7bec:	89 f6       	brne	.-94     	; 0x7b90 <main+0x4840>
    7bee:	2f c0       	rjmp	.+94     	; 0x7c4e <main+0x48fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7bf0:	8e 01       	movw	r16, r28
    7bf2:	09 5c       	subi	r16, 0xC9	; 201
    7bf4:	1d 4f       	sbci	r17, 0xFD	; 253
    7bf6:	ce 01       	movw	r24, r28
    7bf8:	8d 5c       	subi	r24, 0xCD	; 205
    7bfa:	9d 4f       	sbci	r25, 0xFD	; 253
    7bfc:	fc 01       	movw	r30, r24
    7bfe:	60 81       	ld	r22, Z
    7c00:	71 81       	ldd	r23, Z+1	; 0x01
    7c02:	82 81       	ldd	r24, Z+2	; 0x02
    7c04:	93 81       	ldd	r25, Z+3	; 0x03
    7c06:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7c0a:	dc 01       	movw	r26, r24
    7c0c:	cb 01       	movw	r24, r22
    7c0e:	f8 01       	movw	r30, r16
    7c10:	91 83       	std	Z+1, r25	; 0x01
    7c12:	80 83       	st	Z, r24
    7c14:	ce 01       	movw	r24, r28
    7c16:	85 5c       	subi	r24, 0xC5	; 197
    7c18:	9d 4f       	sbci	r25, 0xFD	; 253
    7c1a:	9e 01       	movw	r18, r28
    7c1c:	29 5c       	subi	r18, 0xC9	; 201
    7c1e:	3d 4f       	sbci	r19, 0xFD	; 253
    7c20:	f9 01       	movw	r30, r18
    7c22:	20 81       	ld	r18, Z
    7c24:	31 81       	ldd	r19, Z+1	; 0x01
    7c26:	fc 01       	movw	r30, r24
    7c28:	31 83       	std	Z+1, r19	; 0x01
    7c2a:	20 83       	st	Z, r18
    7c2c:	ce 01       	movw	r24, r28
    7c2e:	85 5c       	subi	r24, 0xC5	; 197
    7c30:	9d 4f       	sbci	r25, 0xFD	; 253
    7c32:	fc 01       	movw	r30, r24
    7c34:	80 81       	ld	r24, Z
    7c36:	91 81       	ldd	r25, Z+1	; 0x01
    7c38:	8c 01       	movw	r16, r24
    7c3a:	c8 01       	movw	r24, r16
    7c3c:	01 97       	sbiw	r24, 0x01	; 1
    7c3e:	f1 f7       	brne	.-4      	; 0x7c3c <main+0x48ec>
    7c40:	8c 01       	movw	r16, r24
    7c42:	ce 01       	movw	r24, r28
    7c44:	85 5c       	subi	r24, 0xC5	; 197
    7c46:	9d 4f       	sbci	r25, 0xFD	; 253
    7c48:	fc 01       	movw	r30, r24
    7c4a:	11 83       	std	Z+1, r17	; 0x01
    7c4c:	00 83       	st	Z, r16
								_delay_ms(100);
								coor[0]=0;
    7c4e:	10 92 a7 04 	sts	0x04A7, r1
    7c52:	10 92 a6 04 	sts	0x04A6, r1
								coor[1]=0;
    7c56:	10 92 a9 04 	sts	0x04A9, r1
    7c5a:	10 92 a8 04 	sts	0x04A8, r1
								linefollwer();
    7c5e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <linefollwer>
								compass=4;
    7c62:	84 e0       	ldi	r24, 0x04	; 4
    7c64:	90 e0       	ldi	r25, 0x00	; 0
    7c66:	9c 83       	std	Y+4, r25	; 0x04
    7c68:	8b 83       	std	Y+3, r24	; 0x03
							}
						}
				
				}
			}				
			flag1=flag1+1;
    7c6a:	89 81       	ldd	r24, Y+1	; 0x01
    7c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c6e:	01 96       	adiw	r24, 0x01	; 1
    7c70:	9a 83       	std	Y+2, r25	; 0x02
    7c72:	89 83       	std	Y+1, r24	; 0x01
			recur=recur+1;
    7c74:	8f 81       	ldd	r24, Y+7	; 0x07
    7c76:	98 85       	ldd	r25, Y+8	; 0x08
    7c78:	01 96       	adiw	r24, 0x01	; 1
    7c7a:	98 87       	std	Y+8, r25	; 0x08
    7c7c:	8f 83       	std	Y+7, r24	; 0x07
			help=summ1[recur];
    7c7e:	9e 01       	movw	r18, r28
    7c80:	25 54       	subi	r18, 0x45	; 69
    7c82:	39 4f       	sbci	r19, 0xF9	; 249
    7c84:	8f 81       	ldd	r24, Y+7	; 0x07
    7c86:	98 85       	ldd	r25, Y+8	; 0x08
    7c88:	88 0f       	add	r24, r24
    7c8a:	99 1f       	adc	r25, r25
    7c8c:	82 0f       	add	r24, r18
    7c8e:	93 1f       	adc	r25, r19
    7c90:	fc 01       	movw	r30, r24
    7c92:	80 81       	ld	r24, Z
    7c94:	91 81       	ldd	r25, Z+1	; 0x01
    7c96:	9c 87       	std	Y+12, r25	; 0x0c
    7c98:	8b 87       	std	Y+11, r24	; 0x0b
			goto point1;	
    7c9a:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <main+0x476>
		}
		else
		{
			if(flag1%2==0)
    7c9e:	89 81       	ldd	r24, Y+1	; 0x01
    7ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    7ca2:	81 70       	andi	r24, 0x01	; 1
    7ca4:	90 70       	andi	r25, 0x00	; 0
    7ca6:	00 97       	sbiw	r24, 0x00	; 0
    7ca8:	31 f5       	brne	.+76     	; 0x7cf6 <main+0x49a6>
			{	
				flag4=1;
    7caa:	81 e0       	ldi	r24, 0x01	; 1
    7cac:	90 e0       	ldi	r25, 0x00	; 0
    7cae:	9a 8b       	std	Y+18, r25	; 0x12
    7cb0:	89 8b       	std	Y+17, r24	; 0x11
				if(summ1[recur+1]==3)                     ///////// change
    7cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    7cb4:	98 85       	ldd	r25, Y+8	; 0x08
    7cb6:	01 96       	adiw	r24, 0x01	; 1
    7cb8:	9e 01       	movw	r18, r28
    7cba:	25 54       	subi	r18, 0x45	; 69
    7cbc:	39 4f       	sbci	r19, 0xF9	; 249
    7cbe:	88 0f       	add	r24, r24
    7cc0:	99 1f       	adc	r25, r25
    7cc2:	82 0f       	add	r24, r18
    7cc4:	93 1f       	adc	r25, r19
    7cc6:	fc 01       	movw	r30, r24
    7cc8:	80 81       	ld	r24, Z
    7cca:	91 81       	ldd	r25, Z+1	; 0x01
    7ccc:	83 30       	cpi	r24, 0x03	; 3
    7cce:	91 05       	cpc	r25, r1
    7cd0:	21 f4       	brne	.+8      	; 0x7cda <main+0x498a>
				{
					stop();
    7cd2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <stop>
					goto point2;
    7cd6:	0c 94 c9 62 	jmp	0xc592	; 0xc592 <main+0x9242>
				}
				final[0]=0;
    7cda:	ce 01       	movw	r24, r28
    7cdc:	8d 52       	subi	r24, 0x2D	; 45
    7cde:	99 4f       	sbci	r25, 0xF9	; 249
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	11 82       	std	Z+1, r1	; 0x01
    7ce4:	10 82       	st	Z, r1
				final[1]=0;
    7ce6:	ce 01       	movw	r24, r28
    7ce8:	8d 52       	subi	r24, 0x2D	; 45
    7cea:	99 4f       	sbci	r25, 0xF9	; 249
    7cec:	fc 01       	movw	r30, r24
    7cee:	13 82       	std	Z+3, r1	; 0x03
    7cf0:	12 82       	std	Z+2, r1	; 0x02
				goto point;
    7cf2:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <main+0x7c6>
									
			}
			else
			{
				if(flag1%2!=0)
    7cf6:	89 81       	ldd	r24, Y+1	; 0x01
    7cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    7cfa:	81 70       	andi	r24, 0x01	; 1
    7cfc:	90 70       	andi	r25, 0x00	; 0
    7cfe:	88 23       	and	r24, r24
    7d00:	99 f0       	breq	.+38     	; 0x7d28 <main+0x49d8>
				{
					flag4=1;
    7d02:	81 e0       	ldi	r24, 0x01	; 1
    7d04:	90 e0       	ldi	r25, 0x00	; 0
    7d06:	9a 8b       	std	Y+18, r25	; 0x12
    7d08:	89 8b       	std	Y+17, r24	; 0x11
					final[0]=0;
    7d0a:	ce 01       	movw	r24, r28
    7d0c:	8d 52       	subi	r24, 0x2D	; 45
    7d0e:	99 4f       	sbci	r25, 0xF9	; 249
    7d10:	fc 01       	movw	r30, r24
    7d12:	11 82       	std	Z+1, r1	; 0x01
    7d14:	10 82       	st	Z, r1
					final[1]=0;
    7d16:	ce 01       	movw	r24, r28
    7d18:	8d 52       	subi	r24, 0x2D	; 45
    7d1a:	99 4f       	sbci	r25, 0xF9	; 249
    7d1c:	fc 01       	movw	r30, r24
    7d1e:	13 82       	std	Z+3, r1	; 0x03
    7d20:	12 82       	std	Z+2, r1	; 0x02
					goto point;
    7d22:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <main+0x7c6>
				break;
			}
			else
			{
				if(flag1%2!=0)
					goto ppt;
    7d26:	00 00       	nop
					
				}
			}
		}
	}	
	ppt: if(compass==6)     //////////////////////////////////////////////////////////////////////////////////////////////////////
    7d28:	8b 81       	ldd	r24, Y+3	; 0x03
    7d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    7d2c:	86 30       	cpi	r24, 0x06	; 6
    7d2e:	91 05       	cpc	r25, r1
    7d30:	09 f0       	breq	.+2      	; 0x7d34 <main+0x49e4>
    7d32:	e7 c0       	rjmp	.+462    	; 0x7f02 <main+0x4bb2>
	{
		lcd_print(2,1,help,1);
    7d34:	2b 85       	ldd	r18, Y+11	; 0x0b
    7d36:	3c 85       	ldd	r19, Y+12	; 0x0c
    7d38:	82 e0       	ldi	r24, 0x02	; 2
    7d3a:	61 e0       	ldi	r22, 0x01	; 1
    7d3c:	a9 01       	movw	r20, r18
    7d3e:	21 e0       	ldi	r18, 0x01	; 1
    7d40:	30 e0       	ldi	r19, 0x00	; 0
    7d42:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
		left_degrees(41);
    7d46:	89 e2       	ldi	r24, 0x29	; 41
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
		matrix1();
    7d4e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <matrix1>
    7d52:	9e 01       	movw	r18, r28
    7d54:	23 5c       	subi	r18, 0xC3	; 195
    7d56:	3d 4f       	sbci	r19, 0xFD	; 253
    7d58:	80 e0       	ldi	r24, 0x00	; 0
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	aa ef       	ldi	r26, 0xFA	; 250
    7d5e:	b3 e4       	ldi	r27, 0x43	; 67
    7d60:	f9 01       	movw	r30, r18
    7d62:	80 83       	st	Z, r24
    7d64:	91 83       	std	Z+1, r25	; 0x01
    7d66:	a2 83       	std	Z+2, r26	; 0x02
    7d68:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7d6a:	8e 01       	movw	r16, r28
    7d6c:	0f 5b       	subi	r16, 0xBF	; 191
    7d6e:	1d 4f       	sbci	r17, 0xFD	; 253
    7d70:	ce 01       	movw	r24, r28
    7d72:	83 5c       	subi	r24, 0xC3	; 195
    7d74:	9d 4f       	sbci	r25, 0xFD	; 253
    7d76:	fc 01       	movw	r30, r24
    7d78:	60 81       	ld	r22, Z
    7d7a:	71 81       	ldd	r23, Z+1	; 0x01
    7d7c:	82 81       	ldd	r24, Z+2	; 0x02
    7d7e:	93 81       	ldd	r25, Z+3	; 0x03
    7d80:	26 e6       	ldi	r18, 0x66	; 102
    7d82:	36 e6       	ldi	r19, 0x66	; 102
    7d84:	46 e6       	ldi	r20, 0x66	; 102
    7d86:	55 e4       	ldi	r21, 0x45	; 69
    7d88:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7d8c:	dc 01       	movw	r26, r24
    7d8e:	cb 01       	movw	r24, r22
    7d90:	f8 01       	movw	r30, r16
    7d92:	80 83       	st	Z, r24
    7d94:	91 83       	std	Z+1, r25	; 0x01
    7d96:	a2 83       	std	Z+2, r26	; 0x02
    7d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7d9a:	ce 01       	movw	r24, r28
    7d9c:	8f 5b       	subi	r24, 0xBF	; 191
    7d9e:	9d 4f       	sbci	r25, 0xFD	; 253
    7da0:	11 e0       	ldi	r17, 0x01	; 1
    7da2:	fc 01       	movw	r30, r24
    7da4:	60 81       	ld	r22, Z
    7da6:	71 81       	ldd	r23, Z+1	; 0x01
    7da8:	82 81       	ldd	r24, Z+2	; 0x02
    7daa:	93 81       	ldd	r25, Z+3	; 0x03
    7dac:	20 e0       	ldi	r18, 0x00	; 0
    7dae:	30 e0       	ldi	r19, 0x00	; 0
    7db0:	40 e8       	ldi	r20, 0x80	; 128
    7db2:	5f e3       	ldi	r21, 0x3F	; 63
    7db4:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7db8:	88 23       	and	r24, r24
    7dba:	0c f0       	brlt	.+2      	; 0x7dbe <main+0x4a6e>
    7dbc:	10 e0       	ldi	r17, 0x00	; 0
    7dbe:	11 23       	and	r17, r17
    7dc0:	49 f0       	breq	.+18     	; 0x7dd4 <main+0x4a84>
		__ticks = 1;
    7dc2:	ce 01       	movw	r24, r28
    7dc4:	8b 5b       	subi	r24, 0xBB	; 187
    7dc6:	9d 4f       	sbci	r25, 0xFD	; 253
    7dc8:	21 e0       	ldi	r18, 0x01	; 1
    7dca:	30 e0       	ldi	r19, 0x00	; 0
    7dcc:	fc 01       	movw	r30, r24
    7dce:	31 83       	std	Z+1, r19	; 0x01
    7dd0:	20 83       	st	Z, r18
    7dd2:	74 c0       	rjmp	.+232    	; 0x7ebc <main+0x4b6c>
	else if (__tmp > 65535)
    7dd4:	ce 01       	movw	r24, r28
    7dd6:	8f 5b       	subi	r24, 0xBF	; 191
    7dd8:	9d 4f       	sbci	r25, 0xFD	; 253
    7dda:	11 e0       	ldi	r17, 0x01	; 1
    7ddc:	fc 01       	movw	r30, r24
    7dde:	60 81       	ld	r22, Z
    7de0:	71 81       	ldd	r23, Z+1	; 0x01
    7de2:	82 81       	ldd	r24, Z+2	; 0x02
    7de4:	93 81       	ldd	r25, Z+3	; 0x03
    7de6:	20 e0       	ldi	r18, 0x00	; 0
    7de8:	3f ef       	ldi	r19, 0xFF	; 255
    7dea:	4f e7       	ldi	r20, 0x7F	; 127
    7dec:	57 e4       	ldi	r21, 0x47	; 71
    7dee:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    7df2:	18 16       	cp	r1, r24
    7df4:	0c f0       	brlt	.+2      	; 0x7df8 <main+0x4aa8>
    7df6:	10 e0       	ldi	r17, 0x00	; 0
    7df8:	11 23       	and	r17, r17
    7dfa:	09 f4       	brne	.+2      	; 0x7dfe <main+0x4aae>
    7dfc:	4d c0       	rjmp	.+154    	; 0x7e98 <main+0x4b48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7dfe:	ce 01       	movw	r24, r28
    7e00:	83 5c       	subi	r24, 0xC3	; 195
    7e02:	9d 4f       	sbci	r25, 0xFD	; 253
    7e04:	fc 01       	movw	r30, r24
    7e06:	60 81       	ld	r22, Z
    7e08:	71 81       	ldd	r23, Z+1	; 0x01
    7e0a:	82 81       	ldd	r24, Z+2	; 0x02
    7e0c:	93 81       	ldd	r25, Z+3	; 0x03
    7e0e:	20 e0       	ldi	r18, 0x00	; 0
    7e10:	30 e0       	ldi	r19, 0x00	; 0
    7e12:	40 e2       	ldi	r20, 0x20	; 32
    7e14:	51 e4       	ldi	r21, 0x41	; 65
    7e16:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7e1a:	dc 01       	movw	r26, r24
    7e1c:	cb 01       	movw	r24, r22
    7e1e:	8e 01       	movw	r16, r28
    7e20:	0b 5b       	subi	r16, 0xBB	; 187
    7e22:	1d 4f       	sbci	r17, 0xFD	; 253
    7e24:	bc 01       	movw	r22, r24
    7e26:	cd 01       	movw	r24, r26
    7e28:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7e2c:	dc 01       	movw	r26, r24
    7e2e:	cb 01       	movw	r24, r22
    7e30:	f8 01       	movw	r30, r16
    7e32:	91 83       	std	Z+1, r25	; 0x01
    7e34:	80 83       	st	Z, r24
    7e36:	27 c0       	rjmp	.+78     	; 0x7e86 <main+0x4b36>
    7e38:	ce 01       	movw	r24, r28
    7e3a:	89 5b       	subi	r24, 0xB9	; 185
    7e3c:	9d 4f       	sbci	r25, 0xFD	; 253
    7e3e:	20 e7       	ldi	r18, 0x70	; 112
    7e40:	31 e0       	ldi	r19, 0x01	; 1
    7e42:	fc 01       	movw	r30, r24
    7e44:	31 83       	std	Z+1, r19	; 0x01
    7e46:	20 83       	st	Z, r18
    7e48:	ce 01       	movw	r24, r28
    7e4a:	89 5b       	subi	r24, 0xB9	; 185
    7e4c:	9d 4f       	sbci	r25, 0xFD	; 253
    7e4e:	fc 01       	movw	r30, r24
    7e50:	80 81       	ld	r24, Z
    7e52:	91 81       	ldd	r25, Z+1	; 0x01
    7e54:	8c 01       	movw	r16, r24
    7e56:	c8 01       	movw	r24, r16
    7e58:	01 97       	sbiw	r24, 0x01	; 1
    7e5a:	f1 f7       	brne	.-4      	; 0x7e58 <main+0x4b08>
    7e5c:	8c 01       	movw	r16, r24
    7e5e:	ce 01       	movw	r24, r28
    7e60:	89 5b       	subi	r24, 0xB9	; 185
    7e62:	9d 4f       	sbci	r25, 0xFD	; 253
    7e64:	fc 01       	movw	r30, r24
    7e66:	11 83       	std	Z+1, r17	; 0x01
    7e68:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e6a:	ce 01       	movw	r24, r28
    7e6c:	8b 5b       	subi	r24, 0xBB	; 187
    7e6e:	9d 4f       	sbci	r25, 0xFD	; 253
    7e70:	9e 01       	movw	r18, r28
    7e72:	2b 5b       	subi	r18, 0xBB	; 187
    7e74:	3d 4f       	sbci	r19, 0xFD	; 253
    7e76:	f9 01       	movw	r30, r18
    7e78:	20 81       	ld	r18, Z
    7e7a:	31 81       	ldd	r19, Z+1	; 0x01
    7e7c:	21 50       	subi	r18, 0x01	; 1
    7e7e:	30 40       	sbci	r19, 0x00	; 0
    7e80:	fc 01       	movw	r30, r24
    7e82:	31 83       	std	Z+1, r19	; 0x01
    7e84:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e86:	ce 01       	movw	r24, r28
    7e88:	8b 5b       	subi	r24, 0xBB	; 187
    7e8a:	9d 4f       	sbci	r25, 0xFD	; 253
    7e8c:	fc 01       	movw	r30, r24
    7e8e:	80 81       	ld	r24, Z
    7e90:	91 81       	ldd	r25, Z+1	; 0x01
    7e92:	00 97       	sbiw	r24, 0x00	; 0
    7e94:	89 f6       	brne	.-94     	; 0x7e38 <main+0x4ae8>
    7e96:	2f c0       	rjmp	.+94     	; 0x7ef6 <main+0x4ba6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e98:	8e 01       	movw	r16, r28
    7e9a:	0b 5b       	subi	r16, 0xBB	; 187
    7e9c:	1d 4f       	sbci	r17, 0xFD	; 253
    7e9e:	ce 01       	movw	r24, r28
    7ea0:	8f 5b       	subi	r24, 0xBF	; 191
    7ea2:	9d 4f       	sbci	r25, 0xFD	; 253
    7ea4:	fc 01       	movw	r30, r24
    7ea6:	60 81       	ld	r22, Z
    7ea8:	71 81       	ldd	r23, Z+1	; 0x01
    7eaa:	82 81       	ldd	r24, Z+2	; 0x02
    7eac:	93 81       	ldd	r25, Z+3	; 0x03
    7eae:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    7eb2:	dc 01       	movw	r26, r24
    7eb4:	cb 01       	movw	r24, r22
    7eb6:	f8 01       	movw	r30, r16
    7eb8:	91 83       	std	Z+1, r25	; 0x01
    7eba:	80 83       	st	Z, r24
    7ebc:	ce 01       	movw	r24, r28
    7ebe:	87 5b       	subi	r24, 0xB7	; 183
    7ec0:	9d 4f       	sbci	r25, 0xFD	; 253
    7ec2:	9e 01       	movw	r18, r28
    7ec4:	2b 5b       	subi	r18, 0xBB	; 187
    7ec6:	3d 4f       	sbci	r19, 0xFD	; 253
    7ec8:	f9 01       	movw	r30, r18
    7eca:	20 81       	ld	r18, Z
    7ecc:	31 81       	ldd	r19, Z+1	; 0x01
    7ece:	fc 01       	movw	r30, r24
    7ed0:	31 83       	std	Z+1, r19	; 0x01
    7ed2:	20 83       	st	Z, r18
    7ed4:	ce 01       	movw	r24, r28
    7ed6:	87 5b       	subi	r24, 0xB7	; 183
    7ed8:	9d 4f       	sbci	r25, 0xFD	; 253
    7eda:	fc 01       	movw	r30, r24
    7edc:	80 81       	ld	r24, Z
    7ede:	91 81       	ldd	r25, Z+1	; 0x01
    7ee0:	8c 01       	movw	r16, r24
    7ee2:	c8 01       	movw	r24, r16
    7ee4:	01 97       	sbiw	r24, 0x01	; 1
    7ee6:	f1 f7       	brne	.-4      	; 0x7ee4 <main+0x4b94>
    7ee8:	8c 01       	movw	r16, r24
    7eea:	ce 01       	movw	r24, r28
    7eec:	87 5b       	subi	r24, 0xB7	; 183
    7eee:	9d 4f       	sbci	r25, 0xFD	; 253
    7ef0:	fc 01       	movw	r30, r24
    7ef2:	11 83       	std	Z+1, r17	; 0x01
    7ef4:	00 83       	st	Z, r16
		_delay_ms(500);
		right_degrees(43);
    7ef6:	8b e2       	ldi	r24, 0x2B	; 43
    7ef8:	90 e0       	ldi	r25, 0x00	; 0
    7efa:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
				}
			}
		}
		
	}
	goto hotspot;
    7efe:	0c 94 99 36 	jmp	0x6d32	; 0x6d32 <main+0x39e2>
		right_degrees(43);
		
	}
	else
	{
		if(compass==7)
    7f02:	8b 81       	ldd	r24, Y+3	; 0x03
    7f04:	9c 81       	ldd	r25, Y+4	; 0x04
    7f06:	87 30       	cpi	r24, 0x07	; 7
    7f08:	91 05       	cpc	r25, r1
    7f0a:	09 f0       	breq	.+2      	; 0x7f0e <main+0x4bbe>
    7f0c:	e7 c0       	rjmp	.+462    	; 0x80dc <main+0x4d8c>
		{
			lcd_print(2,1,help,1);
    7f0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7f10:	3c 85       	ldd	r19, Y+12	; 0x0c
    7f12:	82 e0       	ldi	r24, 0x02	; 2
    7f14:	61 e0       	ldi	r22, 0x01	; 1
    7f16:	a9 01       	movw	r20, r18
    7f18:	21 e0       	ldi	r18, 0x01	; 1
    7f1a:	30 e0       	ldi	r19, 0x00	; 0
    7f1c:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
			right_degrees(41);
    7f20:	89 e2       	ldi	r24, 0x29	; 41
    7f22:	90 e0       	ldi	r25, 0x00	; 0
    7f24:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
			matrix1();
    7f28:	0e 94 7d 15 	call	0x2afa	; 0x2afa <matrix1>
    7f2c:	9e 01       	movw	r18, r28
    7f2e:	25 5b       	subi	r18, 0xB5	; 181
    7f30:	3d 4f       	sbci	r19, 0xFD	; 253
    7f32:	80 e0       	ldi	r24, 0x00	; 0
    7f34:	90 e0       	ldi	r25, 0x00	; 0
    7f36:	aa ef       	ldi	r26, 0xFA	; 250
    7f38:	b3 e4       	ldi	r27, 0x43	; 67
    7f3a:	f9 01       	movw	r30, r18
    7f3c:	80 83       	st	Z, r24
    7f3e:	91 83       	std	Z+1, r25	; 0x01
    7f40:	a2 83       	std	Z+2, r26	; 0x02
    7f42:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7f44:	8e 01       	movw	r16, r28
    7f46:	01 5b       	subi	r16, 0xB1	; 177
    7f48:	1d 4f       	sbci	r17, 0xFD	; 253
    7f4a:	ce 01       	movw	r24, r28
    7f4c:	85 5b       	subi	r24, 0xB5	; 181
    7f4e:	9d 4f       	sbci	r25, 0xFD	; 253
    7f50:	fc 01       	movw	r30, r24
    7f52:	60 81       	ld	r22, Z
    7f54:	71 81       	ldd	r23, Z+1	; 0x01
    7f56:	82 81       	ldd	r24, Z+2	; 0x02
    7f58:	93 81       	ldd	r25, Z+3	; 0x03
    7f5a:	26 e6       	ldi	r18, 0x66	; 102
    7f5c:	36 e6       	ldi	r19, 0x66	; 102
    7f5e:	46 e6       	ldi	r20, 0x66	; 102
    7f60:	55 e4       	ldi	r21, 0x45	; 69
    7f62:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7f66:	dc 01       	movw	r26, r24
    7f68:	cb 01       	movw	r24, r22
    7f6a:	f8 01       	movw	r30, r16
    7f6c:	80 83       	st	Z, r24
    7f6e:	91 83       	std	Z+1, r25	; 0x01
    7f70:	a2 83       	std	Z+2, r26	; 0x02
    7f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7f74:	ce 01       	movw	r24, r28
    7f76:	81 5b       	subi	r24, 0xB1	; 177
    7f78:	9d 4f       	sbci	r25, 0xFD	; 253
    7f7a:	11 e0       	ldi	r17, 0x01	; 1
    7f7c:	fc 01       	movw	r30, r24
    7f7e:	60 81       	ld	r22, Z
    7f80:	71 81       	ldd	r23, Z+1	; 0x01
    7f82:	82 81       	ldd	r24, Z+2	; 0x02
    7f84:	93 81       	ldd	r25, Z+3	; 0x03
    7f86:	20 e0       	ldi	r18, 0x00	; 0
    7f88:	30 e0       	ldi	r19, 0x00	; 0
    7f8a:	40 e8       	ldi	r20, 0x80	; 128
    7f8c:	5f e3       	ldi	r21, 0x3F	; 63
    7f8e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    7f92:	88 23       	and	r24, r24
    7f94:	0c f0       	brlt	.+2      	; 0x7f98 <main+0x4c48>
    7f96:	10 e0       	ldi	r17, 0x00	; 0
    7f98:	11 23       	and	r17, r17
    7f9a:	49 f0       	breq	.+18     	; 0x7fae <main+0x4c5e>
		__ticks = 1;
    7f9c:	ce 01       	movw	r24, r28
    7f9e:	8d 5a       	subi	r24, 0xAD	; 173
    7fa0:	9d 4f       	sbci	r25, 0xFD	; 253
    7fa2:	21 e0       	ldi	r18, 0x01	; 1
    7fa4:	30 e0       	ldi	r19, 0x00	; 0
    7fa6:	fc 01       	movw	r30, r24
    7fa8:	31 83       	std	Z+1, r19	; 0x01
    7faa:	20 83       	st	Z, r18
    7fac:	74 c0       	rjmp	.+232    	; 0x8096 <main+0x4d46>
	else if (__tmp > 65535)
    7fae:	ce 01       	movw	r24, r28
    7fb0:	81 5b       	subi	r24, 0xB1	; 177
    7fb2:	9d 4f       	sbci	r25, 0xFD	; 253
    7fb4:	11 e0       	ldi	r17, 0x01	; 1
    7fb6:	fc 01       	movw	r30, r24
    7fb8:	60 81       	ld	r22, Z
    7fba:	71 81       	ldd	r23, Z+1	; 0x01
    7fbc:	82 81       	ldd	r24, Z+2	; 0x02
    7fbe:	93 81       	ldd	r25, Z+3	; 0x03
    7fc0:	20 e0       	ldi	r18, 0x00	; 0
    7fc2:	3f ef       	ldi	r19, 0xFF	; 255
    7fc4:	4f e7       	ldi	r20, 0x7F	; 127
    7fc6:	57 e4       	ldi	r21, 0x47	; 71
    7fc8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    7fcc:	18 16       	cp	r1, r24
    7fce:	0c f0       	brlt	.+2      	; 0x7fd2 <main+0x4c82>
    7fd0:	10 e0       	ldi	r17, 0x00	; 0
    7fd2:	11 23       	and	r17, r17
    7fd4:	09 f4       	brne	.+2      	; 0x7fd8 <main+0x4c88>
    7fd6:	4d c0       	rjmp	.+154    	; 0x8072 <main+0x4d22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7fd8:	ce 01       	movw	r24, r28
    7fda:	85 5b       	subi	r24, 0xB5	; 181
    7fdc:	9d 4f       	sbci	r25, 0xFD	; 253
    7fde:	fc 01       	movw	r30, r24
    7fe0:	60 81       	ld	r22, Z
    7fe2:	71 81       	ldd	r23, Z+1	; 0x01
    7fe4:	82 81       	ldd	r24, Z+2	; 0x02
    7fe6:	93 81       	ldd	r25, Z+3	; 0x03
    7fe8:	20 e0       	ldi	r18, 0x00	; 0
    7fea:	30 e0       	ldi	r19, 0x00	; 0
    7fec:	40 e2       	ldi	r20, 0x20	; 32
    7fee:	51 e4       	ldi	r21, 0x41	; 65
    7ff0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    7ff4:	dc 01       	movw	r26, r24
    7ff6:	cb 01       	movw	r24, r22
    7ff8:	8e 01       	movw	r16, r28
    7ffa:	0d 5a       	subi	r16, 0xAD	; 173
    7ffc:	1d 4f       	sbci	r17, 0xFD	; 253
    7ffe:	bc 01       	movw	r22, r24
    8000:	cd 01       	movw	r24, r26
    8002:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8006:	dc 01       	movw	r26, r24
    8008:	cb 01       	movw	r24, r22
    800a:	f8 01       	movw	r30, r16
    800c:	91 83       	std	Z+1, r25	; 0x01
    800e:	80 83       	st	Z, r24
    8010:	27 c0       	rjmp	.+78     	; 0x8060 <main+0x4d10>
    8012:	ce 01       	movw	r24, r28
    8014:	8b 5a       	subi	r24, 0xAB	; 171
    8016:	9d 4f       	sbci	r25, 0xFD	; 253
    8018:	20 e7       	ldi	r18, 0x70	; 112
    801a:	31 e0       	ldi	r19, 0x01	; 1
    801c:	fc 01       	movw	r30, r24
    801e:	31 83       	std	Z+1, r19	; 0x01
    8020:	20 83       	st	Z, r18
    8022:	ce 01       	movw	r24, r28
    8024:	8b 5a       	subi	r24, 0xAB	; 171
    8026:	9d 4f       	sbci	r25, 0xFD	; 253
    8028:	fc 01       	movw	r30, r24
    802a:	80 81       	ld	r24, Z
    802c:	91 81       	ldd	r25, Z+1	; 0x01
    802e:	8c 01       	movw	r16, r24
    8030:	c8 01       	movw	r24, r16
    8032:	01 97       	sbiw	r24, 0x01	; 1
    8034:	f1 f7       	brne	.-4      	; 0x8032 <main+0x4ce2>
    8036:	8c 01       	movw	r16, r24
    8038:	ce 01       	movw	r24, r28
    803a:	8b 5a       	subi	r24, 0xAB	; 171
    803c:	9d 4f       	sbci	r25, 0xFD	; 253
    803e:	fc 01       	movw	r30, r24
    8040:	11 83       	std	Z+1, r17	; 0x01
    8042:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8044:	ce 01       	movw	r24, r28
    8046:	8d 5a       	subi	r24, 0xAD	; 173
    8048:	9d 4f       	sbci	r25, 0xFD	; 253
    804a:	9e 01       	movw	r18, r28
    804c:	2d 5a       	subi	r18, 0xAD	; 173
    804e:	3d 4f       	sbci	r19, 0xFD	; 253
    8050:	f9 01       	movw	r30, r18
    8052:	20 81       	ld	r18, Z
    8054:	31 81       	ldd	r19, Z+1	; 0x01
    8056:	21 50       	subi	r18, 0x01	; 1
    8058:	30 40       	sbci	r19, 0x00	; 0
    805a:	fc 01       	movw	r30, r24
    805c:	31 83       	std	Z+1, r19	; 0x01
    805e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8060:	ce 01       	movw	r24, r28
    8062:	8d 5a       	subi	r24, 0xAD	; 173
    8064:	9d 4f       	sbci	r25, 0xFD	; 253
    8066:	fc 01       	movw	r30, r24
    8068:	80 81       	ld	r24, Z
    806a:	91 81       	ldd	r25, Z+1	; 0x01
    806c:	00 97       	sbiw	r24, 0x00	; 0
    806e:	89 f6       	brne	.-94     	; 0x8012 <main+0x4cc2>
    8070:	2f c0       	rjmp	.+94     	; 0x80d0 <main+0x4d80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8072:	8e 01       	movw	r16, r28
    8074:	0d 5a       	subi	r16, 0xAD	; 173
    8076:	1d 4f       	sbci	r17, 0xFD	; 253
    8078:	ce 01       	movw	r24, r28
    807a:	81 5b       	subi	r24, 0xB1	; 177
    807c:	9d 4f       	sbci	r25, 0xFD	; 253
    807e:	fc 01       	movw	r30, r24
    8080:	60 81       	ld	r22, Z
    8082:	71 81       	ldd	r23, Z+1	; 0x01
    8084:	82 81       	ldd	r24, Z+2	; 0x02
    8086:	93 81       	ldd	r25, Z+3	; 0x03
    8088:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    808c:	dc 01       	movw	r26, r24
    808e:	cb 01       	movw	r24, r22
    8090:	f8 01       	movw	r30, r16
    8092:	91 83       	std	Z+1, r25	; 0x01
    8094:	80 83       	st	Z, r24
    8096:	ce 01       	movw	r24, r28
    8098:	89 5a       	subi	r24, 0xA9	; 169
    809a:	9d 4f       	sbci	r25, 0xFD	; 253
    809c:	9e 01       	movw	r18, r28
    809e:	2d 5a       	subi	r18, 0xAD	; 173
    80a0:	3d 4f       	sbci	r19, 0xFD	; 253
    80a2:	f9 01       	movw	r30, r18
    80a4:	20 81       	ld	r18, Z
    80a6:	31 81       	ldd	r19, Z+1	; 0x01
    80a8:	fc 01       	movw	r30, r24
    80aa:	31 83       	std	Z+1, r19	; 0x01
    80ac:	20 83       	st	Z, r18
    80ae:	ce 01       	movw	r24, r28
    80b0:	89 5a       	subi	r24, 0xA9	; 169
    80b2:	9d 4f       	sbci	r25, 0xFD	; 253
    80b4:	fc 01       	movw	r30, r24
    80b6:	80 81       	ld	r24, Z
    80b8:	91 81       	ldd	r25, Z+1	; 0x01
    80ba:	8c 01       	movw	r16, r24
    80bc:	c8 01       	movw	r24, r16
    80be:	01 97       	sbiw	r24, 0x01	; 1
    80c0:	f1 f7       	brne	.-4      	; 0x80be <main+0x4d6e>
    80c2:	8c 01       	movw	r16, r24
    80c4:	ce 01       	movw	r24, r28
    80c6:	89 5a       	subi	r24, 0xA9	; 169
    80c8:	9d 4f       	sbci	r25, 0xFD	; 253
    80ca:	fc 01       	movw	r30, r24
    80cc:	11 83       	std	Z+1, r17	; 0x01
    80ce:	00 83       	st	Z, r16
			_delay_ms(500);
			left_degrees(43);
    80d0:	8b e2       	ldi	r24, 0x2B	; 43
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
				}
			}
		}
		
	}
	goto hotspot;
    80d8:	0c 94 99 36 	jmp	0x6d32	; 0x6d32 <main+0x39e2>
			left_degrees(43);
			
		}
		else
		{
			if(compass==4)
    80dc:	8b 81       	ldd	r24, Y+3	; 0x03
    80de:	9c 81       	ldd	r25, Y+4	; 0x04
    80e0:	84 30       	cpi	r24, 0x04	; 4
    80e2:	91 05       	cpc	r25, r1
    80e4:	11 f0       	breq	.+4      	; 0x80ea <main+0x4d9a>
    80e6:	0c 94 99 36 	jmp	0x6d32	; 0x6d32 <main+0x39e2>
			{
				lcd_print(2,1,help,1);
    80ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    80ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    80ee:	82 e0       	ldi	r24, 0x02	; 2
    80f0:	61 e0       	ldi	r22, 0x01	; 1
    80f2:	a9 01       	movw	r20, r18
    80f4:	21 e0       	ldi	r18, 0x01	; 1
    80f6:	30 e0       	ldi	r19, 0x00	; 0
    80f8:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
				for(int i=0;i<4;i++)
    80fc:	1a a2       	lds	r17, 0x9a
    80fe:	19 a2       	lds	r17, 0x99
    8100:	05 c2       	rjmp	.+1034   	; 0x850c <main+0x51bc>
				{
					if(coor[0]<origin1[boxnumber][i][0])
    8102:	20 91 a6 04 	lds	r18, 0x04A6
    8106:	30 91 a7 04 	lds	r19, 0x04A7
    810a:	ae 01       	movw	r20, r28
    810c:	4d 5b       	subi	r20, 0xBD	; 189
    810e:	5b 4f       	sbci	r21, 0xFB	; 251
    8110:	8d 81       	ldd	r24, Y+5	; 0x05
    8112:	9e 81       	ldd	r25, Y+6	; 0x06
    8114:	bc 01       	movw	r22, r24
    8116:	66 0f       	add	r22, r22
    8118:	77 1f       	adc	r23, r23
    811a:	66 0f       	add	r22, r22
    811c:	77 1f       	adc	r23, r23
    811e:	89 a1       	lds	r24, 0x49
    8120:	9a a1       	lds	r25, 0x4a
    8122:	86 0f       	add	r24, r22
    8124:	97 1f       	adc	r25, r23
    8126:	88 0f       	add	r24, r24
    8128:	99 1f       	adc	r25, r25
    812a:	88 0f       	add	r24, r24
    812c:	99 1f       	adc	r25, r25
    812e:	84 0f       	add	r24, r20
    8130:	95 1f       	adc	r25, r21
    8132:	fc 01       	movw	r30, r24
    8134:	80 81       	ld	r24, Z
    8136:	91 81       	ldd	r25, Z+1	; 0x01
    8138:	28 17       	cp	r18, r24
    813a:	39 07       	cpc	r19, r25
    813c:	0c f0       	brlt	.+2      	; 0x8140 <main+0x4df0>
    813e:	e1 c0       	rjmp	.+450    	; 0x8302 <main+0x4fb2>
					{
						right_degrees(41);								//// calibrate
    8140:	89 e2       	ldi	r24, 0x29	; 41
    8142:	90 e0       	ldi	r25, 0x00	; 0
    8144:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
    8148:	9e 01       	movw	r18, r28
    814a:	27 5a       	subi	r18, 0xA7	; 167
    814c:	3d 4f       	sbci	r19, 0xFD	; 253
    814e:	80 e0       	ldi	r24, 0x00	; 0
    8150:	90 e0       	ldi	r25, 0x00	; 0
    8152:	aa ef       	ldi	r26, 0xFA	; 250
    8154:	b3 e4       	ldi	r27, 0x43	; 67
    8156:	f9 01       	movw	r30, r18
    8158:	80 83       	st	Z, r24
    815a:	91 83       	std	Z+1, r25	; 0x01
    815c:	a2 83       	std	Z+2, r26	; 0x02
    815e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8160:	8e 01       	movw	r16, r28
    8162:	03 5a       	subi	r16, 0xA3	; 163
    8164:	1d 4f       	sbci	r17, 0xFD	; 253
    8166:	ce 01       	movw	r24, r28
    8168:	87 5a       	subi	r24, 0xA7	; 167
    816a:	9d 4f       	sbci	r25, 0xFD	; 253
    816c:	fc 01       	movw	r30, r24
    816e:	60 81       	ld	r22, Z
    8170:	71 81       	ldd	r23, Z+1	; 0x01
    8172:	82 81       	ldd	r24, Z+2	; 0x02
    8174:	93 81       	ldd	r25, Z+3	; 0x03
    8176:	26 e6       	ldi	r18, 0x66	; 102
    8178:	36 e6       	ldi	r19, 0x66	; 102
    817a:	46 e6       	ldi	r20, 0x66	; 102
    817c:	55 e4       	ldi	r21, 0x45	; 69
    817e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8182:	dc 01       	movw	r26, r24
    8184:	cb 01       	movw	r24, r22
    8186:	f8 01       	movw	r30, r16
    8188:	80 83       	st	Z, r24
    818a:	91 83       	std	Z+1, r25	; 0x01
    818c:	a2 83       	std	Z+2, r26	; 0x02
    818e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8190:	ce 01       	movw	r24, r28
    8192:	83 5a       	subi	r24, 0xA3	; 163
    8194:	9d 4f       	sbci	r25, 0xFD	; 253
    8196:	11 e0       	ldi	r17, 0x01	; 1
    8198:	fc 01       	movw	r30, r24
    819a:	60 81       	ld	r22, Z
    819c:	71 81       	ldd	r23, Z+1	; 0x01
    819e:	82 81       	ldd	r24, Z+2	; 0x02
    81a0:	93 81       	ldd	r25, Z+3	; 0x03
    81a2:	20 e0       	ldi	r18, 0x00	; 0
    81a4:	30 e0       	ldi	r19, 0x00	; 0
    81a6:	40 e8       	ldi	r20, 0x80	; 128
    81a8:	5f e3       	ldi	r21, 0x3F	; 63
    81aa:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    81ae:	88 23       	and	r24, r24
    81b0:	0c f0       	brlt	.+2      	; 0x81b4 <main+0x4e64>
    81b2:	10 e0       	ldi	r17, 0x00	; 0
    81b4:	11 23       	and	r17, r17
    81b6:	49 f0       	breq	.+18     	; 0x81ca <main+0x4e7a>
		__ticks = 1;
    81b8:	ce 01       	movw	r24, r28
    81ba:	8f 59       	subi	r24, 0x9F	; 159
    81bc:	9d 4f       	sbci	r25, 0xFD	; 253
    81be:	21 e0       	ldi	r18, 0x01	; 1
    81c0:	30 e0       	ldi	r19, 0x00	; 0
    81c2:	fc 01       	movw	r30, r24
    81c4:	31 83       	std	Z+1, r19	; 0x01
    81c6:	20 83       	st	Z, r18
    81c8:	74 c0       	rjmp	.+232    	; 0x82b2 <main+0x4f62>
	else if (__tmp > 65535)
    81ca:	ce 01       	movw	r24, r28
    81cc:	83 5a       	subi	r24, 0xA3	; 163
    81ce:	9d 4f       	sbci	r25, 0xFD	; 253
    81d0:	11 e0       	ldi	r17, 0x01	; 1
    81d2:	fc 01       	movw	r30, r24
    81d4:	60 81       	ld	r22, Z
    81d6:	71 81       	ldd	r23, Z+1	; 0x01
    81d8:	82 81       	ldd	r24, Z+2	; 0x02
    81da:	93 81       	ldd	r25, Z+3	; 0x03
    81dc:	20 e0       	ldi	r18, 0x00	; 0
    81de:	3f ef       	ldi	r19, 0xFF	; 255
    81e0:	4f e7       	ldi	r20, 0x7F	; 127
    81e2:	57 e4       	ldi	r21, 0x47	; 71
    81e4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    81e8:	18 16       	cp	r1, r24
    81ea:	0c f0       	brlt	.+2      	; 0x81ee <main+0x4e9e>
    81ec:	10 e0       	ldi	r17, 0x00	; 0
    81ee:	11 23       	and	r17, r17
    81f0:	09 f4       	brne	.+2      	; 0x81f4 <main+0x4ea4>
    81f2:	4d c0       	rjmp	.+154    	; 0x828e <main+0x4f3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81f4:	ce 01       	movw	r24, r28
    81f6:	87 5a       	subi	r24, 0xA7	; 167
    81f8:	9d 4f       	sbci	r25, 0xFD	; 253
    81fa:	fc 01       	movw	r30, r24
    81fc:	60 81       	ld	r22, Z
    81fe:	71 81       	ldd	r23, Z+1	; 0x01
    8200:	82 81       	ldd	r24, Z+2	; 0x02
    8202:	93 81       	ldd	r25, Z+3	; 0x03
    8204:	20 e0       	ldi	r18, 0x00	; 0
    8206:	30 e0       	ldi	r19, 0x00	; 0
    8208:	40 e2       	ldi	r20, 0x20	; 32
    820a:	51 e4       	ldi	r21, 0x41	; 65
    820c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8210:	dc 01       	movw	r26, r24
    8212:	cb 01       	movw	r24, r22
    8214:	8e 01       	movw	r16, r28
    8216:	0f 59       	subi	r16, 0x9F	; 159
    8218:	1d 4f       	sbci	r17, 0xFD	; 253
    821a:	bc 01       	movw	r22, r24
    821c:	cd 01       	movw	r24, r26
    821e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8222:	dc 01       	movw	r26, r24
    8224:	cb 01       	movw	r24, r22
    8226:	f8 01       	movw	r30, r16
    8228:	91 83       	std	Z+1, r25	; 0x01
    822a:	80 83       	st	Z, r24
    822c:	27 c0       	rjmp	.+78     	; 0x827c <main+0x4f2c>
    822e:	ce 01       	movw	r24, r28
    8230:	8d 59       	subi	r24, 0x9D	; 157
    8232:	9d 4f       	sbci	r25, 0xFD	; 253
    8234:	20 e7       	ldi	r18, 0x70	; 112
    8236:	31 e0       	ldi	r19, 0x01	; 1
    8238:	fc 01       	movw	r30, r24
    823a:	31 83       	std	Z+1, r19	; 0x01
    823c:	20 83       	st	Z, r18
    823e:	ce 01       	movw	r24, r28
    8240:	8d 59       	subi	r24, 0x9D	; 157
    8242:	9d 4f       	sbci	r25, 0xFD	; 253
    8244:	fc 01       	movw	r30, r24
    8246:	80 81       	ld	r24, Z
    8248:	91 81       	ldd	r25, Z+1	; 0x01
    824a:	8c 01       	movw	r16, r24
    824c:	c8 01       	movw	r24, r16
    824e:	01 97       	sbiw	r24, 0x01	; 1
    8250:	f1 f7       	brne	.-4      	; 0x824e <main+0x4efe>
    8252:	8c 01       	movw	r16, r24
    8254:	ce 01       	movw	r24, r28
    8256:	8d 59       	subi	r24, 0x9D	; 157
    8258:	9d 4f       	sbci	r25, 0xFD	; 253
    825a:	fc 01       	movw	r30, r24
    825c:	11 83       	std	Z+1, r17	; 0x01
    825e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8260:	ce 01       	movw	r24, r28
    8262:	8f 59       	subi	r24, 0x9F	; 159
    8264:	9d 4f       	sbci	r25, 0xFD	; 253
    8266:	9e 01       	movw	r18, r28
    8268:	2f 59       	subi	r18, 0x9F	; 159
    826a:	3d 4f       	sbci	r19, 0xFD	; 253
    826c:	f9 01       	movw	r30, r18
    826e:	20 81       	ld	r18, Z
    8270:	31 81       	ldd	r19, Z+1	; 0x01
    8272:	21 50       	subi	r18, 0x01	; 1
    8274:	30 40       	sbci	r19, 0x00	; 0
    8276:	fc 01       	movw	r30, r24
    8278:	31 83       	std	Z+1, r19	; 0x01
    827a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    827c:	ce 01       	movw	r24, r28
    827e:	8f 59       	subi	r24, 0x9F	; 159
    8280:	9d 4f       	sbci	r25, 0xFD	; 253
    8282:	fc 01       	movw	r30, r24
    8284:	80 81       	ld	r24, Z
    8286:	91 81       	ldd	r25, Z+1	; 0x01
    8288:	00 97       	sbiw	r24, 0x00	; 0
    828a:	89 f6       	brne	.-94     	; 0x822e <main+0x4ede>
    828c:	2f c0       	rjmp	.+94     	; 0x82ec <main+0x4f9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    828e:	8e 01       	movw	r16, r28
    8290:	0f 59       	subi	r16, 0x9F	; 159
    8292:	1d 4f       	sbci	r17, 0xFD	; 253
    8294:	ce 01       	movw	r24, r28
    8296:	83 5a       	subi	r24, 0xA3	; 163
    8298:	9d 4f       	sbci	r25, 0xFD	; 253
    829a:	fc 01       	movw	r30, r24
    829c:	60 81       	ld	r22, Z
    829e:	71 81       	ldd	r23, Z+1	; 0x01
    82a0:	82 81       	ldd	r24, Z+2	; 0x02
    82a2:	93 81       	ldd	r25, Z+3	; 0x03
    82a4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    82a8:	dc 01       	movw	r26, r24
    82aa:	cb 01       	movw	r24, r22
    82ac:	f8 01       	movw	r30, r16
    82ae:	91 83       	std	Z+1, r25	; 0x01
    82b0:	80 83       	st	Z, r24
    82b2:	ce 01       	movw	r24, r28
    82b4:	8b 59       	subi	r24, 0x9B	; 155
    82b6:	9d 4f       	sbci	r25, 0xFD	; 253
    82b8:	9e 01       	movw	r18, r28
    82ba:	2f 59       	subi	r18, 0x9F	; 159
    82bc:	3d 4f       	sbci	r19, 0xFD	; 253
    82be:	f9 01       	movw	r30, r18
    82c0:	20 81       	ld	r18, Z
    82c2:	31 81       	ldd	r19, Z+1	; 0x01
    82c4:	fc 01       	movw	r30, r24
    82c6:	31 83       	std	Z+1, r19	; 0x01
    82c8:	20 83       	st	Z, r18
    82ca:	ce 01       	movw	r24, r28
    82cc:	8b 59       	subi	r24, 0x9B	; 155
    82ce:	9d 4f       	sbci	r25, 0xFD	; 253
    82d0:	fc 01       	movw	r30, r24
    82d2:	80 81       	ld	r24, Z
    82d4:	91 81       	ldd	r25, Z+1	; 0x01
    82d6:	8c 01       	movw	r16, r24
    82d8:	c8 01       	movw	r24, r16
    82da:	01 97       	sbiw	r24, 0x01	; 1
    82dc:	f1 f7       	brne	.-4      	; 0x82da <main+0x4f8a>
    82de:	8c 01       	movw	r16, r24
    82e0:	ce 01       	movw	r24, r28
    82e2:	8b 59       	subi	r24, 0x9B	; 155
    82e4:	9d 4f       	sbci	r25, 0xFD	; 253
    82e6:	fc 01       	movw	r30, r24
    82e8:	11 83       	std	Z+1, r17	; 0x01
    82ea:	00 83       	st	Z, r16
						_delay_ms(500);
						matrix1();
    82ec:	0e 94 7d 15 	call	0x2afa	; 0x2afa <matrix1>
						right_degrees(145);
    82f0:	81 e9       	ldi	r24, 0x91	; 145
    82f2:	90 e0       	ldi	r25, 0x00	; 0
    82f4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						compass=5;
    82f8:	85 e0       	ldi	r24, 0x05	; 5
    82fa:	90 e0       	ldi	r25, 0x00	; 0
    82fc:	9c 83       	std	Y+4, r25	; 0x04
    82fe:	8b 83       	std	Y+3, r24	; 0x03
						break;
    8300:	0d c1       	rjmp	.+538    	; 0x851c <main+0x51cc>
						
					}
					if(coor[0]>origin1[boxnumber][i][0])
    8302:	20 91 a6 04 	lds	r18, 0x04A6
    8306:	30 91 a7 04 	lds	r19, 0x04A7
    830a:	ae 01       	movw	r20, r28
    830c:	4d 5b       	subi	r20, 0xBD	; 189
    830e:	5b 4f       	sbci	r21, 0xFB	; 251
    8310:	8d 81       	ldd	r24, Y+5	; 0x05
    8312:	9e 81       	ldd	r25, Y+6	; 0x06
    8314:	bc 01       	movw	r22, r24
    8316:	66 0f       	add	r22, r22
    8318:	77 1f       	adc	r23, r23
    831a:	66 0f       	add	r22, r22
    831c:	77 1f       	adc	r23, r23
    831e:	89 a1       	lds	r24, 0x49
    8320:	9a a1       	lds	r25, 0x4a
    8322:	86 0f       	add	r24, r22
    8324:	97 1f       	adc	r25, r23
    8326:	88 0f       	add	r24, r24
    8328:	99 1f       	adc	r25, r25
    832a:	88 0f       	add	r24, r24
    832c:	99 1f       	adc	r25, r25
    832e:	84 0f       	add	r24, r20
    8330:	95 1f       	adc	r25, r21
    8332:	fc 01       	movw	r30, r24
    8334:	80 81       	ld	r24, Z
    8336:	91 81       	ldd	r25, Z+1	; 0x01
    8338:	82 17       	cp	r24, r18
    833a:	93 07       	cpc	r25, r19
    833c:	0c f0       	brlt	.+2      	; 0x8340 <main+0x4ff0>
    833e:	e1 c0       	rjmp	.+450    	; 0x8502 <main+0x51b2>
					{
						left_degrees(41);
    8340:	89 e2       	ldi	r24, 0x29	; 41
    8342:	90 e0       	ldi	r25, 0x00	; 0
    8344:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
    8348:	9e 01       	movw	r18, r28
    834a:	29 59       	subi	r18, 0x99	; 153
    834c:	3d 4f       	sbci	r19, 0xFD	; 253
    834e:	80 e0       	ldi	r24, 0x00	; 0
    8350:	90 e0       	ldi	r25, 0x00	; 0
    8352:	aa ef       	ldi	r26, 0xFA	; 250
    8354:	b3 e4       	ldi	r27, 0x43	; 67
    8356:	f9 01       	movw	r30, r18
    8358:	80 83       	st	Z, r24
    835a:	91 83       	std	Z+1, r25	; 0x01
    835c:	a2 83       	std	Z+2, r26	; 0x02
    835e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8360:	8e 01       	movw	r16, r28
    8362:	05 59       	subi	r16, 0x95	; 149
    8364:	1d 4f       	sbci	r17, 0xFD	; 253
    8366:	ce 01       	movw	r24, r28
    8368:	89 59       	subi	r24, 0x99	; 153
    836a:	9d 4f       	sbci	r25, 0xFD	; 253
    836c:	fc 01       	movw	r30, r24
    836e:	60 81       	ld	r22, Z
    8370:	71 81       	ldd	r23, Z+1	; 0x01
    8372:	82 81       	ldd	r24, Z+2	; 0x02
    8374:	93 81       	ldd	r25, Z+3	; 0x03
    8376:	26 e6       	ldi	r18, 0x66	; 102
    8378:	36 e6       	ldi	r19, 0x66	; 102
    837a:	46 e6       	ldi	r20, 0x66	; 102
    837c:	55 e4       	ldi	r21, 0x45	; 69
    837e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8382:	dc 01       	movw	r26, r24
    8384:	cb 01       	movw	r24, r22
    8386:	f8 01       	movw	r30, r16
    8388:	80 83       	st	Z, r24
    838a:	91 83       	std	Z+1, r25	; 0x01
    838c:	a2 83       	std	Z+2, r26	; 0x02
    838e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8390:	ce 01       	movw	r24, r28
    8392:	85 59       	subi	r24, 0x95	; 149
    8394:	9d 4f       	sbci	r25, 0xFD	; 253
    8396:	11 e0       	ldi	r17, 0x01	; 1
    8398:	fc 01       	movw	r30, r24
    839a:	60 81       	ld	r22, Z
    839c:	71 81       	ldd	r23, Z+1	; 0x01
    839e:	82 81       	ldd	r24, Z+2	; 0x02
    83a0:	93 81       	ldd	r25, Z+3	; 0x03
    83a2:	20 e0       	ldi	r18, 0x00	; 0
    83a4:	30 e0       	ldi	r19, 0x00	; 0
    83a6:	40 e8       	ldi	r20, 0x80	; 128
    83a8:	5f e3       	ldi	r21, 0x3F	; 63
    83aa:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    83ae:	88 23       	and	r24, r24
    83b0:	0c f0       	brlt	.+2      	; 0x83b4 <main+0x5064>
    83b2:	10 e0       	ldi	r17, 0x00	; 0
    83b4:	11 23       	and	r17, r17
    83b6:	49 f0       	breq	.+18     	; 0x83ca <main+0x507a>
		__ticks = 1;
    83b8:	ce 01       	movw	r24, r28
    83ba:	81 59       	subi	r24, 0x91	; 145
    83bc:	9d 4f       	sbci	r25, 0xFD	; 253
    83be:	21 e0       	ldi	r18, 0x01	; 1
    83c0:	30 e0       	ldi	r19, 0x00	; 0
    83c2:	fc 01       	movw	r30, r24
    83c4:	31 83       	std	Z+1, r19	; 0x01
    83c6:	20 83       	st	Z, r18
    83c8:	74 c0       	rjmp	.+232    	; 0x84b2 <main+0x5162>
	else if (__tmp > 65535)
    83ca:	ce 01       	movw	r24, r28
    83cc:	85 59       	subi	r24, 0x95	; 149
    83ce:	9d 4f       	sbci	r25, 0xFD	; 253
    83d0:	11 e0       	ldi	r17, 0x01	; 1
    83d2:	fc 01       	movw	r30, r24
    83d4:	60 81       	ld	r22, Z
    83d6:	71 81       	ldd	r23, Z+1	; 0x01
    83d8:	82 81       	ldd	r24, Z+2	; 0x02
    83da:	93 81       	ldd	r25, Z+3	; 0x03
    83dc:	20 e0       	ldi	r18, 0x00	; 0
    83de:	3f ef       	ldi	r19, 0xFF	; 255
    83e0:	4f e7       	ldi	r20, 0x7F	; 127
    83e2:	57 e4       	ldi	r21, 0x47	; 71
    83e4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    83e8:	18 16       	cp	r1, r24
    83ea:	0c f0       	brlt	.+2      	; 0x83ee <main+0x509e>
    83ec:	10 e0       	ldi	r17, 0x00	; 0
    83ee:	11 23       	and	r17, r17
    83f0:	09 f4       	brne	.+2      	; 0x83f4 <main+0x50a4>
    83f2:	4d c0       	rjmp	.+154    	; 0x848e <main+0x513e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83f4:	ce 01       	movw	r24, r28
    83f6:	89 59       	subi	r24, 0x99	; 153
    83f8:	9d 4f       	sbci	r25, 0xFD	; 253
    83fa:	fc 01       	movw	r30, r24
    83fc:	60 81       	ld	r22, Z
    83fe:	71 81       	ldd	r23, Z+1	; 0x01
    8400:	82 81       	ldd	r24, Z+2	; 0x02
    8402:	93 81       	ldd	r25, Z+3	; 0x03
    8404:	20 e0       	ldi	r18, 0x00	; 0
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	40 e2       	ldi	r20, 0x20	; 32
    840a:	51 e4       	ldi	r21, 0x41	; 65
    840c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8410:	dc 01       	movw	r26, r24
    8412:	cb 01       	movw	r24, r22
    8414:	8e 01       	movw	r16, r28
    8416:	01 59       	subi	r16, 0x91	; 145
    8418:	1d 4f       	sbci	r17, 0xFD	; 253
    841a:	bc 01       	movw	r22, r24
    841c:	cd 01       	movw	r24, r26
    841e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8422:	dc 01       	movw	r26, r24
    8424:	cb 01       	movw	r24, r22
    8426:	f8 01       	movw	r30, r16
    8428:	91 83       	std	Z+1, r25	; 0x01
    842a:	80 83       	st	Z, r24
    842c:	27 c0       	rjmp	.+78     	; 0x847c <main+0x512c>
    842e:	ce 01       	movw	r24, r28
    8430:	8f 58       	subi	r24, 0x8F	; 143
    8432:	9d 4f       	sbci	r25, 0xFD	; 253
    8434:	20 e7       	ldi	r18, 0x70	; 112
    8436:	31 e0       	ldi	r19, 0x01	; 1
    8438:	fc 01       	movw	r30, r24
    843a:	31 83       	std	Z+1, r19	; 0x01
    843c:	20 83       	st	Z, r18
    843e:	ce 01       	movw	r24, r28
    8440:	8f 58       	subi	r24, 0x8F	; 143
    8442:	9d 4f       	sbci	r25, 0xFD	; 253
    8444:	fc 01       	movw	r30, r24
    8446:	80 81       	ld	r24, Z
    8448:	91 81       	ldd	r25, Z+1	; 0x01
    844a:	8c 01       	movw	r16, r24
    844c:	c8 01       	movw	r24, r16
    844e:	01 97       	sbiw	r24, 0x01	; 1
    8450:	f1 f7       	brne	.-4      	; 0x844e <main+0x50fe>
    8452:	8c 01       	movw	r16, r24
    8454:	ce 01       	movw	r24, r28
    8456:	8f 58       	subi	r24, 0x8F	; 143
    8458:	9d 4f       	sbci	r25, 0xFD	; 253
    845a:	fc 01       	movw	r30, r24
    845c:	11 83       	std	Z+1, r17	; 0x01
    845e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8460:	ce 01       	movw	r24, r28
    8462:	81 59       	subi	r24, 0x91	; 145
    8464:	9d 4f       	sbci	r25, 0xFD	; 253
    8466:	9e 01       	movw	r18, r28
    8468:	21 59       	subi	r18, 0x91	; 145
    846a:	3d 4f       	sbci	r19, 0xFD	; 253
    846c:	f9 01       	movw	r30, r18
    846e:	20 81       	ld	r18, Z
    8470:	31 81       	ldd	r19, Z+1	; 0x01
    8472:	21 50       	subi	r18, 0x01	; 1
    8474:	30 40       	sbci	r19, 0x00	; 0
    8476:	fc 01       	movw	r30, r24
    8478:	31 83       	std	Z+1, r19	; 0x01
    847a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    847c:	ce 01       	movw	r24, r28
    847e:	81 59       	subi	r24, 0x91	; 145
    8480:	9d 4f       	sbci	r25, 0xFD	; 253
    8482:	fc 01       	movw	r30, r24
    8484:	80 81       	ld	r24, Z
    8486:	91 81       	ldd	r25, Z+1	; 0x01
    8488:	00 97       	sbiw	r24, 0x00	; 0
    848a:	89 f6       	brne	.-94     	; 0x842e <main+0x50de>
    848c:	2f c0       	rjmp	.+94     	; 0x84ec <main+0x519c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    848e:	8e 01       	movw	r16, r28
    8490:	01 59       	subi	r16, 0x91	; 145
    8492:	1d 4f       	sbci	r17, 0xFD	; 253
    8494:	ce 01       	movw	r24, r28
    8496:	85 59       	subi	r24, 0x95	; 149
    8498:	9d 4f       	sbci	r25, 0xFD	; 253
    849a:	fc 01       	movw	r30, r24
    849c:	60 81       	ld	r22, Z
    849e:	71 81       	ldd	r23, Z+1	; 0x01
    84a0:	82 81       	ldd	r24, Z+2	; 0x02
    84a2:	93 81       	ldd	r25, Z+3	; 0x03
    84a4:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    84a8:	dc 01       	movw	r26, r24
    84aa:	cb 01       	movw	r24, r22
    84ac:	f8 01       	movw	r30, r16
    84ae:	91 83       	std	Z+1, r25	; 0x01
    84b0:	80 83       	st	Z, r24
    84b2:	ce 01       	movw	r24, r28
    84b4:	8d 58       	subi	r24, 0x8D	; 141
    84b6:	9d 4f       	sbci	r25, 0xFD	; 253
    84b8:	9e 01       	movw	r18, r28
    84ba:	21 59       	subi	r18, 0x91	; 145
    84bc:	3d 4f       	sbci	r19, 0xFD	; 253
    84be:	f9 01       	movw	r30, r18
    84c0:	20 81       	ld	r18, Z
    84c2:	31 81       	ldd	r19, Z+1	; 0x01
    84c4:	fc 01       	movw	r30, r24
    84c6:	31 83       	std	Z+1, r19	; 0x01
    84c8:	20 83       	st	Z, r18
    84ca:	ce 01       	movw	r24, r28
    84cc:	8d 58       	subi	r24, 0x8D	; 141
    84ce:	9d 4f       	sbci	r25, 0xFD	; 253
    84d0:	fc 01       	movw	r30, r24
    84d2:	80 81       	ld	r24, Z
    84d4:	91 81       	ldd	r25, Z+1	; 0x01
    84d6:	8c 01       	movw	r16, r24
    84d8:	c8 01       	movw	r24, r16
    84da:	01 97       	sbiw	r24, 0x01	; 1
    84dc:	f1 f7       	brne	.-4      	; 0x84da <main+0x518a>
    84de:	8c 01       	movw	r16, r24
    84e0:	ce 01       	movw	r24, r28
    84e2:	8d 58       	subi	r24, 0x8D	; 141
    84e4:	9d 4f       	sbci	r25, 0xFD	; 253
    84e6:	fc 01       	movw	r30, r24
    84e8:	11 83       	std	Z+1, r17	; 0x01
    84ea:	00 83       	st	Z, r16
						_delay_ms(500);
						matrix1();
    84ec:	0e 94 7d 15 	call	0x2afa	; 0x2afa <matrix1>
						left_degrees(145);
    84f0:	81 e9       	ldi	r24, 0x91	; 145
    84f2:	90 e0       	ldi	r25, 0x00	; 0
    84f4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						compass=5;
    84f8:	85 e0       	ldi	r24, 0x05	; 5
    84fa:	90 e0       	ldi	r25, 0x00	; 0
    84fc:	9c 83       	std	Y+4, r25	; 0x04
    84fe:	8b 83       	std	Y+3, r24	; 0x03
						break;
    8500:	0d c0       	rjmp	.+26     	; 0x851c <main+0x51cc>
		else
		{
			if(compass==4)
			{
				lcd_print(2,1,help,1);
				for(int i=0;i<4;i++)
    8502:	89 a1       	lds	r24, 0x49
    8504:	9a a1       	lds	r25, 0x4a
    8506:	01 96       	adiw	r24, 0x01	; 1
    8508:	9a a3       	lds	r25, 0x5a
    850a:	89 a3       	lds	r24, 0x59
    850c:	89 a1       	lds	r24, 0x49
    850e:	9a a1       	lds	r25, 0x4a
    8510:	84 30       	cpi	r24, 0x04	; 4
    8512:	91 05       	cpc	r25, r1
    8514:	0c f4       	brge	.+2      	; 0x8518 <main+0x51c8>
    8516:	f5 cd       	rjmp	.-1046   	; 0x8102 <main+0x4db2>
				}
			}
		}
		
	}
	goto hotspot;
    8518:	0c 94 99 36 	jmp	0x6d32	; 0x6d32 <main+0x39e2>
    851c:	0c 94 99 36 	jmp	0x6d32	; 0x6d32 <main+0x39e2>
				if(flag1%2!=0)
					goto ppt;
				else
				{
					if(flag1%2==0)
					    goto ppt1;
    8520:	00 00       	nop
			}
		}
		
	}
	goto hotspot;
	ppt1: if(compass==4)
    8522:	8b 81       	ldd	r24, Y+3	; 0x03
    8524:	9c 81       	ldd	r25, Y+4	; 0x04
    8526:	84 30       	cpi	r24, 0x04	; 4
    8528:	91 05       	cpc	r25, r1
    852a:	11 f0       	breq	.+4      	; 0x8530 <main+0x51e0>
    852c:	0c 94 47 4e 	jmp	0x9c8e	; 0x9c8e <main+0x693e>
	{
		for(int i=0;i<4;i++)
    8530:	1c a2       	lds	r17, 0x9c
    8532:	1b a2       	lds	r17, 0x9b
    8534:	0c 94 3c 4e 	jmp	0x9c78	; 0x9c78 <main+0x6928>
		{
			if(coor[0]>origin2[boxnumber][i][0] && coor[1]<origin2[boxnumber][i][1])
    8538:	20 91 a6 04 	lds	r18, 0x04A6
    853c:	30 91 a7 04 	lds	r19, 0x04A7
    8540:	ae 01       	movw	r20, r28
    8542:	4d 5f       	subi	r20, 0xFD	; 253
    8544:	5a 4f       	sbci	r21, 0xFA	; 250
    8546:	8d 81       	ldd	r24, Y+5	; 0x05
    8548:	9e 81       	ldd	r25, Y+6	; 0x06
    854a:	bc 01       	movw	r22, r24
    854c:	66 0f       	add	r22, r22
    854e:	77 1f       	adc	r23, r23
    8550:	66 0f       	add	r22, r22
    8552:	77 1f       	adc	r23, r23
    8554:	8b a1       	lds	r24, 0x4b
    8556:	9c a1       	lds	r25, 0x4c
    8558:	86 0f       	add	r24, r22
    855a:	97 1f       	adc	r25, r23
    855c:	88 0f       	add	r24, r24
    855e:	99 1f       	adc	r25, r25
    8560:	88 0f       	add	r24, r24
    8562:	99 1f       	adc	r25, r25
    8564:	84 0f       	add	r24, r20
    8566:	95 1f       	adc	r25, r21
    8568:	fc 01       	movw	r30, r24
    856a:	80 81       	ld	r24, Z
    856c:	91 81       	ldd	r25, Z+1	; 0x01
    856e:	82 17       	cp	r24, r18
    8570:	93 07       	cpc	r25, r19
    8572:	0c f0       	brlt	.+2      	; 0x8576 <main+0x5226>
    8574:	c9 c2       	rjmp	.+1426   	; 0x8b08 <main+0x57b8>
    8576:	20 91 a8 04 	lds	r18, 0x04A8
    857a:	30 91 a9 04 	lds	r19, 0x04A9
    857e:	ae 01       	movw	r20, r28
    8580:	4d 5f       	subi	r20, 0xFD	; 253
    8582:	5a 4f       	sbci	r21, 0xFA	; 250
    8584:	8d 81       	ldd	r24, Y+5	; 0x05
    8586:	9e 81       	ldd	r25, Y+6	; 0x06
    8588:	bc 01       	movw	r22, r24
    858a:	66 0f       	add	r22, r22
    858c:	77 1f       	adc	r23, r23
    858e:	66 0f       	add	r22, r22
    8590:	77 1f       	adc	r23, r23
    8592:	8b a1       	lds	r24, 0x4b
    8594:	9c a1       	lds	r25, 0x4c
    8596:	86 0f       	add	r24, r22
    8598:	97 1f       	adc	r25, r23
    859a:	88 0f       	add	r24, r24
    859c:	99 1f       	adc	r25, r25
    859e:	88 0f       	add	r24, r24
    85a0:	99 1f       	adc	r25, r25
    85a2:	84 0f       	add	r24, r20
    85a4:	95 1f       	adc	r25, r21
    85a6:	02 96       	adiw	r24, 0x02	; 2
    85a8:	fc 01       	movw	r30, r24
    85aa:	80 81       	ld	r24, Z
    85ac:	91 81       	ldd	r25, Z+1	; 0x01
    85ae:	28 17       	cp	r18, r24
    85b0:	39 07       	cpc	r19, r25
    85b2:	0c f0       	brlt	.+2      	; 0x85b6 <main+0x5266>
    85b4:	a9 c2       	rjmp	.+1362   	; 0x8b08 <main+0x57b8>
			{
					left_degrees(45);
    85b6:	8d e2       	ldi	r24, 0x2D	; 45
    85b8:	90 e0       	ldi	r25, 0x00	; 0
    85ba:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
					back_mm(65);
    85be:	81 e4       	ldi	r24, 0x41	; 65
    85c0:	90 e0       	ldi	r25, 0x00	; 0
    85c2:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
					matrix2();
    85c6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
						if(summ1[recur+1]>10)
    85ca:	8f 81       	ldd	r24, Y+7	; 0x07
    85cc:	98 85       	ldd	r25, Y+8	; 0x08
    85ce:	01 96       	adiw	r24, 0x01	; 1
    85d0:	9e 01       	movw	r18, r28
    85d2:	25 54       	subi	r18, 0x45	; 69
    85d4:	39 4f       	sbci	r19, 0xF9	; 249
    85d6:	88 0f       	add	r24, r24
    85d8:	99 1f       	adc	r25, r25
    85da:	82 0f       	add	r24, r18
    85dc:	93 1f       	adc	r25, r19
    85de:	fc 01       	movw	r30, r24
    85e0:	80 81       	ld	r24, Z
    85e2:	91 81       	ldd	r25, Z+1	; 0x01
    85e4:	8b 30       	cpi	r24, 0x0B	; 11
    85e6:	91 05       	cpc	r25, r1
    85e8:	0c f4       	brge	.+2      	; 0x85ec <main+0x529c>
    85ea:	d6 c0       	rjmp	.+428    	; 0x8798 <main+0x5448>
						{
							buzzer_on();
    85ec:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    85f0:	9e 01       	movw	r18, r28
    85f2:	2b 58       	subi	r18, 0x8B	; 139
    85f4:	3d 4f       	sbci	r19, 0xFD	; 253
    85f6:	80 e0       	ldi	r24, 0x00	; 0
    85f8:	90 e0       	ldi	r25, 0x00	; 0
    85fa:	aa e7       	ldi	r26, 0x7A	; 122
    85fc:	b4 e4       	ldi	r27, 0x44	; 68
    85fe:	f9 01       	movw	r30, r18
    8600:	80 83       	st	Z, r24
    8602:	91 83       	std	Z+1, r25	; 0x01
    8604:	a2 83       	std	Z+2, r26	; 0x02
    8606:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8608:	8e 01       	movw	r16, r28
    860a:	07 58       	subi	r16, 0x87	; 135
    860c:	1d 4f       	sbci	r17, 0xFD	; 253
    860e:	ce 01       	movw	r24, r28
    8610:	8b 58       	subi	r24, 0x8B	; 139
    8612:	9d 4f       	sbci	r25, 0xFD	; 253
    8614:	fc 01       	movw	r30, r24
    8616:	60 81       	ld	r22, Z
    8618:	71 81       	ldd	r23, Z+1	; 0x01
    861a:	82 81       	ldd	r24, Z+2	; 0x02
    861c:	93 81       	ldd	r25, Z+3	; 0x03
    861e:	26 e6       	ldi	r18, 0x66	; 102
    8620:	36 e6       	ldi	r19, 0x66	; 102
    8622:	46 e6       	ldi	r20, 0x66	; 102
    8624:	55 e4       	ldi	r21, 0x45	; 69
    8626:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    862a:	dc 01       	movw	r26, r24
    862c:	cb 01       	movw	r24, r22
    862e:	f8 01       	movw	r30, r16
    8630:	80 83       	st	Z, r24
    8632:	91 83       	std	Z+1, r25	; 0x01
    8634:	a2 83       	std	Z+2, r26	; 0x02
    8636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8638:	ce 01       	movw	r24, r28
    863a:	87 58       	subi	r24, 0x87	; 135
    863c:	9d 4f       	sbci	r25, 0xFD	; 253
    863e:	11 e0       	ldi	r17, 0x01	; 1
    8640:	fc 01       	movw	r30, r24
    8642:	60 81       	ld	r22, Z
    8644:	71 81       	ldd	r23, Z+1	; 0x01
    8646:	82 81       	ldd	r24, Z+2	; 0x02
    8648:	93 81       	ldd	r25, Z+3	; 0x03
    864a:	20 e0       	ldi	r18, 0x00	; 0
    864c:	30 e0       	ldi	r19, 0x00	; 0
    864e:	40 e8       	ldi	r20, 0x80	; 128
    8650:	5f e3       	ldi	r21, 0x3F	; 63
    8652:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    8656:	88 23       	and	r24, r24
    8658:	0c f0       	brlt	.+2      	; 0x865c <main+0x530c>
    865a:	10 e0       	ldi	r17, 0x00	; 0
    865c:	11 23       	and	r17, r17
    865e:	49 f0       	breq	.+18     	; 0x8672 <main+0x5322>
		__ticks = 1;
    8660:	ce 01       	movw	r24, r28
    8662:	83 58       	subi	r24, 0x83	; 131
    8664:	9d 4f       	sbci	r25, 0xFD	; 253
    8666:	21 e0       	ldi	r18, 0x01	; 1
    8668:	30 e0       	ldi	r19, 0x00	; 0
    866a:	fc 01       	movw	r30, r24
    866c:	31 83       	std	Z+1, r19	; 0x01
    866e:	20 83       	st	Z, r18
    8670:	74 c0       	rjmp	.+232    	; 0x875a <main+0x540a>
	else if (__tmp > 65535)
    8672:	ce 01       	movw	r24, r28
    8674:	87 58       	subi	r24, 0x87	; 135
    8676:	9d 4f       	sbci	r25, 0xFD	; 253
    8678:	11 e0       	ldi	r17, 0x01	; 1
    867a:	fc 01       	movw	r30, r24
    867c:	60 81       	ld	r22, Z
    867e:	71 81       	ldd	r23, Z+1	; 0x01
    8680:	82 81       	ldd	r24, Z+2	; 0x02
    8682:	93 81       	ldd	r25, Z+3	; 0x03
    8684:	20 e0       	ldi	r18, 0x00	; 0
    8686:	3f ef       	ldi	r19, 0xFF	; 255
    8688:	4f e7       	ldi	r20, 0x7F	; 127
    868a:	57 e4       	ldi	r21, 0x47	; 71
    868c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    8690:	18 16       	cp	r1, r24
    8692:	0c f0       	brlt	.+2      	; 0x8696 <main+0x5346>
    8694:	10 e0       	ldi	r17, 0x00	; 0
    8696:	11 23       	and	r17, r17
    8698:	09 f4       	brne	.+2      	; 0x869c <main+0x534c>
    869a:	4d c0       	rjmp	.+154    	; 0x8736 <main+0x53e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    869c:	ce 01       	movw	r24, r28
    869e:	8b 58       	subi	r24, 0x8B	; 139
    86a0:	9d 4f       	sbci	r25, 0xFD	; 253
    86a2:	fc 01       	movw	r30, r24
    86a4:	60 81       	ld	r22, Z
    86a6:	71 81       	ldd	r23, Z+1	; 0x01
    86a8:	82 81       	ldd	r24, Z+2	; 0x02
    86aa:	93 81       	ldd	r25, Z+3	; 0x03
    86ac:	20 e0       	ldi	r18, 0x00	; 0
    86ae:	30 e0       	ldi	r19, 0x00	; 0
    86b0:	40 e2       	ldi	r20, 0x20	; 32
    86b2:	51 e4       	ldi	r21, 0x41	; 65
    86b4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    86b8:	dc 01       	movw	r26, r24
    86ba:	cb 01       	movw	r24, r22
    86bc:	8e 01       	movw	r16, r28
    86be:	03 58       	subi	r16, 0x83	; 131
    86c0:	1d 4f       	sbci	r17, 0xFD	; 253
    86c2:	bc 01       	movw	r22, r24
    86c4:	cd 01       	movw	r24, r26
    86c6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    86ca:	dc 01       	movw	r26, r24
    86cc:	cb 01       	movw	r24, r22
    86ce:	f8 01       	movw	r30, r16
    86d0:	91 83       	std	Z+1, r25	; 0x01
    86d2:	80 83       	st	Z, r24
    86d4:	27 c0       	rjmp	.+78     	; 0x8724 <main+0x53d4>
    86d6:	ce 01       	movw	r24, r28
    86d8:	81 58       	subi	r24, 0x81	; 129
    86da:	9d 4f       	sbci	r25, 0xFD	; 253
    86dc:	20 e7       	ldi	r18, 0x70	; 112
    86de:	31 e0       	ldi	r19, 0x01	; 1
    86e0:	fc 01       	movw	r30, r24
    86e2:	31 83       	std	Z+1, r19	; 0x01
    86e4:	20 83       	st	Z, r18
    86e6:	ce 01       	movw	r24, r28
    86e8:	81 58       	subi	r24, 0x81	; 129
    86ea:	9d 4f       	sbci	r25, 0xFD	; 253
    86ec:	fc 01       	movw	r30, r24
    86ee:	80 81       	ld	r24, Z
    86f0:	91 81       	ldd	r25, Z+1	; 0x01
    86f2:	8c 01       	movw	r16, r24
    86f4:	c8 01       	movw	r24, r16
    86f6:	01 97       	sbiw	r24, 0x01	; 1
    86f8:	f1 f7       	brne	.-4      	; 0x86f6 <main+0x53a6>
    86fa:	8c 01       	movw	r16, r24
    86fc:	ce 01       	movw	r24, r28
    86fe:	81 58       	subi	r24, 0x81	; 129
    8700:	9d 4f       	sbci	r25, 0xFD	; 253
    8702:	fc 01       	movw	r30, r24
    8704:	11 83       	std	Z+1, r17	; 0x01
    8706:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8708:	ce 01       	movw	r24, r28
    870a:	83 58       	subi	r24, 0x83	; 131
    870c:	9d 4f       	sbci	r25, 0xFD	; 253
    870e:	9e 01       	movw	r18, r28
    8710:	23 58       	subi	r18, 0x83	; 131
    8712:	3d 4f       	sbci	r19, 0xFD	; 253
    8714:	f9 01       	movw	r30, r18
    8716:	20 81       	ld	r18, Z
    8718:	31 81       	ldd	r19, Z+1	; 0x01
    871a:	21 50       	subi	r18, 0x01	; 1
    871c:	30 40       	sbci	r19, 0x00	; 0
    871e:	fc 01       	movw	r30, r24
    8720:	31 83       	std	Z+1, r19	; 0x01
    8722:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8724:	ce 01       	movw	r24, r28
    8726:	83 58       	subi	r24, 0x83	; 131
    8728:	9d 4f       	sbci	r25, 0xFD	; 253
    872a:	fc 01       	movw	r30, r24
    872c:	80 81       	ld	r24, Z
    872e:	91 81       	ldd	r25, Z+1	; 0x01
    8730:	00 97       	sbiw	r24, 0x00	; 0
    8732:	89 f6       	brne	.-94     	; 0x86d6 <main+0x5386>
    8734:	2f c0       	rjmp	.+94     	; 0x8794 <main+0x5444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8736:	8e 01       	movw	r16, r28
    8738:	03 58       	subi	r16, 0x83	; 131
    873a:	1d 4f       	sbci	r17, 0xFD	; 253
    873c:	ce 01       	movw	r24, r28
    873e:	87 58       	subi	r24, 0x87	; 135
    8740:	9d 4f       	sbci	r25, 0xFD	; 253
    8742:	fc 01       	movw	r30, r24
    8744:	60 81       	ld	r22, Z
    8746:	71 81       	ldd	r23, Z+1	; 0x01
    8748:	82 81       	ldd	r24, Z+2	; 0x02
    874a:	93 81       	ldd	r25, Z+3	; 0x03
    874c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8750:	dc 01       	movw	r26, r24
    8752:	cb 01       	movw	r24, r22
    8754:	f8 01       	movw	r30, r16
    8756:	91 83       	std	Z+1, r25	; 0x01
    8758:	80 83       	st	Z, r24
    875a:	ce 01       	movw	r24, r28
    875c:	8f 57       	subi	r24, 0x7F	; 127
    875e:	9d 4f       	sbci	r25, 0xFD	; 253
    8760:	9e 01       	movw	r18, r28
    8762:	23 58       	subi	r18, 0x83	; 131
    8764:	3d 4f       	sbci	r19, 0xFD	; 253
    8766:	f9 01       	movw	r30, r18
    8768:	20 81       	ld	r18, Z
    876a:	31 81       	ldd	r19, Z+1	; 0x01
    876c:	fc 01       	movw	r30, r24
    876e:	31 83       	std	Z+1, r19	; 0x01
    8770:	20 83       	st	Z, r18
    8772:	ce 01       	movw	r24, r28
    8774:	8f 57       	subi	r24, 0x7F	; 127
    8776:	9d 4f       	sbci	r25, 0xFD	; 253
    8778:	fc 01       	movw	r30, r24
    877a:	80 81       	ld	r24, Z
    877c:	91 81       	ldd	r25, Z+1	; 0x01
    877e:	8c 01       	movw	r16, r24
    8780:	c8 01       	movw	r24, r16
    8782:	01 97       	sbiw	r24, 0x01	; 1
    8784:	f1 f7       	brne	.-4      	; 0x8782 <main+0x5432>
    8786:	8c 01       	movw	r16, r24
    8788:	ce 01       	movw	r24, r28
    878a:	8f 57       	subi	r24, 0x7F	; 127
    878c:	9d 4f       	sbci	r25, 0xFD	; 253
    878e:	fc 01       	movw	r30, r24
    8790:	11 83       	std	Z+1, r17	; 0x01
    8792:	00 83       	st	Z, r16
							_delay_ms(1000);
							buzzer_off();
    8794:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
						}
					forward_mm(75);
    8798:	8b e4       	ldi	r24, 0x4B	; 75
    879a:	90 e0       	ldi	r25, 0x00	; 0
    879c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    87a0:	9e 01       	movw	r18, r28
    87a2:	2d 57       	subi	r18, 0x7D	; 125
    87a4:	3d 4f       	sbci	r19, 0xFD	; 253
    87a6:	80 e0       	ldi	r24, 0x00	; 0
    87a8:	90 e0       	ldi	r25, 0x00	; 0
    87aa:	a0 ef       	ldi	r26, 0xF0	; 240
    87ac:	b1 e4       	ldi	r27, 0x41	; 65
    87ae:	f9 01       	movw	r30, r18
    87b0:	80 83       	st	Z, r24
    87b2:	91 83       	std	Z+1, r25	; 0x01
    87b4:	a2 83       	std	Z+2, r26	; 0x02
    87b6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    87b8:	8e 01       	movw	r16, r28
    87ba:	09 57       	subi	r16, 0x79	; 121
    87bc:	1d 4f       	sbci	r17, 0xFD	; 253
    87be:	ce 01       	movw	r24, r28
    87c0:	8d 57       	subi	r24, 0x7D	; 125
    87c2:	9d 4f       	sbci	r25, 0xFD	; 253
    87c4:	fc 01       	movw	r30, r24
    87c6:	60 81       	ld	r22, Z
    87c8:	71 81       	ldd	r23, Z+1	; 0x01
    87ca:	82 81       	ldd	r24, Z+2	; 0x02
    87cc:	93 81       	ldd	r25, Z+3	; 0x03
    87ce:	26 e6       	ldi	r18, 0x66	; 102
    87d0:	36 e6       	ldi	r19, 0x66	; 102
    87d2:	46 e6       	ldi	r20, 0x66	; 102
    87d4:	55 e4       	ldi	r21, 0x45	; 69
    87d6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    87da:	dc 01       	movw	r26, r24
    87dc:	cb 01       	movw	r24, r22
    87de:	f8 01       	movw	r30, r16
    87e0:	80 83       	st	Z, r24
    87e2:	91 83       	std	Z+1, r25	; 0x01
    87e4:	a2 83       	std	Z+2, r26	; 0x02
    87e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    87e8:	ce 01       	movw	r24, r28
    87ea:	89 57       	subi	r24, 0x79	; 121
    87ec:	9d 4f       	sbci	r25, 0xFD	; 253
    87ee:	11 e0       	ldi	r17, 0x01	; 1
    87f0:	fc 01       	movw	r30, r24
    87f2:	60 81       	ld	r22, Z
    87f4:	71 81       	ldd	r23, Z+1	; 0x01
    87f6:	82 81       	ldd	r24, Z+2	; 0x02
    87f8:	93 81       	ldd	r25, Z+3	; 0x03
    87fa:	20 e0       	ldi	r18, 0x00	; 0
    87fc:	30 e0       	ldi	r19, 0x00	; 0
    87fe:	40 e8       	ldi	r20, 0x80	; 128
    8800:	5f e3       	ldi	r21, 0x3F	; 63
    8802:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    8806:	88 23       	and	r24, r24
    8808:	0c f0       	brlt	.+2      	; 0x880c <main+0x54bc>
    880a:	10 e0       	ldi	r17, 0x00	; 0
    880c:	11 23       	and	r17, r17
    880e:	49 f0       	breq	.+18     	; 0x8822 <main+0x54d2>
		__ticks = 1;
    8810:	ce 01       	movw	r24, r28
    8812:	85 57       	subi	r24, 0x75	; 117
    8814:	9d 4f       	sbci	r25, 0xFD	; 253
    8816:	21 e0       	ldi	r18, 0x01	; 1
    8818:	30 e0       	ldi	r19, 0x00	; 0
    881a:	fc 01       	movw	r30, r24
    881c:	31 83       	std	Z+1, r19	; 0x01
    881e:	20 83       	st	Z, r18
    8820:	74 c0       	rjmp	.+232    	; 0x890a <main+0x55ba>
	else if (__tmp > 65535)
    8822:	ce 01       	movw	r24, r28
    8824:	89 57       	subi	r24, 0x79	; 121
    8826:	9d 4f       	sbci	r25, 0xFD	; 253
    8828:	11 e0       	ldi	r17, 0x01	; 1
    882a:	fc 01       	movw	r30, r24
    882c:	60 81       	ld	r22, Z
    882e:	71 81       	ldd	r23, Z+1	; 0x01
    8830:	82 81       	ldd	r24, Z+2	; 0x02
    8832:	93 81       	ldd	r25, Z+3	; 0x03
    8834:	20 e0       	ldi	r18, 0x00	; 0
    8836:	3f ef       	ldi	r19, 0xFF	; 255
    8838:	4f e7       	ldi	r20, 0x7F	; 127
    883a:	57 e4       	ldi	r21, 0x47	; 71
    883c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    8840:	18 16       	cp	r1, r24
    8842:	0c f0       	brlt	.+2      	; 0x8846 <main+0x54f6>
    8844:	10 e0       	ldi	r17, 0x00	; 0
    8846:	11 23       	and	r17, r17
    8848:	09 f4       	brne	.+2      	; 0x884c <main+0x54fc>
    884a:	4d c0       	rjmp	.+154    	; 0x88e6 <main+0x5596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    884c:	ce 01       	movw	r24, r28
    884e:	8d 57       	subi	r24, 0x7D	; 125
    8850:	9d 4f       	sbci	r25, 0xFD	; 253
    8852:	fc 01       	movw	r30, r24
    8854:	60 81       	ld	r22, Z
    8856:	71 81       	ldd	r23, Z+1	; 0x01
    8858:	82 81       	ldd	r24, Z+2	; 0x02
    885a:	93 81       	ldd	r25, Z+3	; 0x03
    885c:	20 e0       	ldi	r18, 0x00	; 0
    885e:	30 e0       	ldi	r19, 0x00	; 0
    8860:	40 e2       	ldi	r20, 0x20	; 32
    8862:	51 e4       	ldi	r21, 0x41	; 65
    8864:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8868:	dc 01       	movw	r26, r24
    886a:	cb 01       	movw	r24, r22
    886c:	8e 01       	movw	r16, r28
    886e:	05 57       	subi	r16, 0x75	; 117
    8870:	1d 4f       	sbci	r17, 0xFD	; 253
    8872:	bc 01       	movw	r22, r24
    8874:	cd 01       	movw	r24, r26
    8876:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    887a:	dc 01       	movw	r26, r24
    887c:	cb 01       	movw	r24, r22
    887e:	f8 01       	movw	r30, r16
    8880:	91 83       	std	Z+1, r25	; 0x01
    8882:	80 83       	st	Z, r24
    8884:	27 c0       	rjmp	.+78     	; 0x88d4 <main+0x5584>
    8886:	ce 01       	movw	r24, r28
    8888:	83 57       	subi	r24, 0x73	; 115
    888a:	9d 4f       	sbci	r25, 0xFD	; 253
    888c:	20 e7       	ldi	r18, 0x70	; 112
    888e:	31 e0       	ldi	r19, 0x01	; 1
    8890:	fc 01       	movw	r30, r24
    8892:	31 83       	std	Z+1, r19	; 0x01
    8894:	20 83       	st	Z, r18
    8896:	ce 01       	movw	r24, r28
    8898:	83 57       	subi	r24, 0x73	; 115
    889a:	9d 4f       	sbci	r25, 0xFD	; 253
    889c:	fc 01       	movw	r30, r24
    889e:	80 81       	ld	r24, Z
    88a0:	91 81       	ldd	r25, Z+1	; 0x01
    88a2:	8c 01       	movw	r16, r24
    88a4:	c8 01       	movw	r24, r16
    88a6:	01 97       	sbiw	r24, 0x01	; 1
    88a8:	f1 f7       	brne	.-4      	; 0x88a6 <main+0x5556>
    88aa:	8c 01       	movw	r16, r24
    88ac:	ce 01       	movw	r24, r28
    88ae:	83 57       	subi	r24, 0x73	; 115
    88b0:	9d 4f       	sbci	r25, 0xFD	; 253
    88b2:	fc 01       	movw	r30, r24
    88b4:	11 83       	std	Z+1, r17	; 0x01
    88b6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    88b8:	ce 01       	movw	r24, r28
    88ba:	85 57       	subi	r24, 0x75	; 117
    88bc:	9d 4f       	sbci	r25, 0xFD	; 253
    88be:	9e 01       	movw	r18, r28
    88c0:	25 57       	subi	r18, 0x75	; 117
    88c2:	3d 4f       	sbci	r19, 0xFD	; 253
    88c4:	f9 01       	movw	r30, r18
    88c6:	20 81       	ld	r18, Z
    88c8:	31 81       	ldd	r19, Z+1	; 0x01
    88ca:	21 50       	subi	r18, 0x01	; 1
    88cc:	30 40       	sbci	r19, 0x00	; 0
    88ce:	fc 01       	movw	r30, r24
    88d0:	31 83       	std	Z+1, r19	; 0x01
    88d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    88d4:	ce 01       	movw	r24, r28
    88d6:	85 57       	subi	r24, 0x75	; 117
    88d8:	9d 4f       	sbci	r25, 0xFD	; 253
    88da:	fc 01       	movw	r30, r24
    88dc:	80 81       	ld	r24, Z
    88de:	91 81       	ldd	r25, Z+1	; 0x01
    88e0:	00 97       	sbiw	r24, 0x00	; 0
    88e2:	89 f6       	brne	.-94     	; 0x8886 <main+0x5536>
    88e4:	2f c0       	rjmp	.+94     	; 0x8944 <main+0x55f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    88e6:	8e 01       	movw	r16, r28
    88e8:	05 57       	subi	r16, 0x75	; 117
    88ea:	1d 4f       	sbci	r17, 0xFD	; 253
    88ec:	ce 01       	movw	r24, r28
    88ee:	89 57       	subi	r24, 0x79	; 121
    88f0:	9d 4f       	sbci	r25, 0xFD	; 253
    88f2:	fc 01       	movw	r30, r24
    88f4:	60 81       	ld	r22, Z
    88f6:	71 81       	ldd	r23, Z+1	; 0x01
    88f8:	82 81       	ldd	r24, Z+2	; 0x02
    88fa:	93 81       	ldd	r25, Z+3	; 0x03
    88fc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8900:	dc 01       	movw	r26, r24
    8902:	cb 01       	movw	r24, r22
    8904:	f8 01       	movw	r30, r16
    8906:	91 83       	std	Z+1, r25	; 0x01
    8908:	80 83       	st	Z, r24
    890a:	ce 01       	movw	r24, r28
    890c:	81 57       	subi	r24, 0x71	; 113
    890e:	9d 4f       	sbci	r25, 0xFD	; 253
    8910:	9e 01       	movw	r18, r28
    8912:	25 57       	subi	r18, 0x75	; 117
    8914:	3d 4f       	sbci	r19, 0xFD	; 253
    8916:	f9 01       	movw	r30, r18
    8918:	20 81       	ld	r18, Z
    891a:	31 81       	ldd	r19, Z+1	; 0x01
    891c:	fc 01       	movw	r30, r24
    891e:	31 83       	std	Z+1, r19	; 0x01
    8920:	20 83       	st	Z, r18
    8922:	ce 01       	movw	r24, r28
    8924:	81 57       	subi	r24, 0x71	; 113
    8926:	9d 4f       	sbci	r25, 0xFD	; 253
    8928:	fc 01       	movw	r30, r24
    892a:	80 81       	ld	r24, Z
    892c:	91 81       	ldd	r25, Z+1	; 0x01
    892e:	8c 01       	movw	r16, r24
    8930:	c8 01       	movw	r24, r16
    8932:	01 97       	sbiw	r24, 0x01	; 1
    8934:	f1 f7       	brne	.-4      	; 0x8932 <main+0x55e2>
    8936:	8c 01       	movw	r16, r24
    8938:	ce 01       	movw	r24, r28
    893a:	81 57       	subi	r24, 0x71	; 113
    893c:	9d 4f       	sbci	r25, 0xFD	; 253
    893e:	fc 01       	movw	r30, r24
    8940:	11 83       	std	Z+1, r17	; 0x01
    8942:	00 83       	st	Z, r16
					_delay_ms(30);
					back_mm(10);
    8944:	8a e0       	ldi	r24, 0x0A	; 10
    8946:	90 e0       	ldi	r25, 0x00	; 0
    8948:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    894c:	9e 01       	movw	r18, r28
    894e:	2f 56       	subi	r18, 0x6F	; 111
    8950:	3d 4f       	sbci	r19, 0xFD	; 253
    8952:	80 e0       	ldi	r24, 0x00	; 0
    8954:	90 e0       	ldi	r25, 0x00	; 0
    8956:	aa ef       	ldi	r26, 0xFA	; 250
    8958:	b3 e4       	ldi	r27, 0x43	; 67
    895a:	f9 01       	movw	r30, r18
    895c:	80 83       	st	Z, r24
    895e:	91 83       	std	Z+1, r25	; 0x01
    8960:	a2 83       	std	Z+2, r26	; 0x02
    8962:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8964:	8e 01       	movw	r16, r28
    8966:	0b 56       	subi	r16, 0x6B	; 107
    8968:	1d 4f       	sbci	r17, 0xFD	; 253
    896a:	ce 01       	movw	r24, r28
    896c:	8f 56       	subi	r24, 0x6F	; 111
    896e:	9d 4f       	sbci	r25, 0xFD	; 253
    8970:	fc 01       	movw	r30, r24
    8972:	60 81       	ld	r22, Z
    8974:	71 81       	ldd	r23, Z+1	; 0x01
    8976:	82 81       	ldd	r24, Z+2	; 0x02
    8978:	93 81       	ldd	r25, Z+3	; 0x03
    897a:	26 e6       	ldi	r18, 0x66	; 102
    897c:	36 e6       	ldi	r19, 0x66	; 102
    897e:	46 e6       	ldi	r20, 0x66	; 102
    8980:	55 e4       	ldi	r21, 0x45	; 69
    8982:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8986:	dc 01       	movw	r26, r24
    8988:	cb 01       	movw	r24, r22
    898a:	f8 01       	movw	r30, r16
    898c:	80 83       	st	Z, r24
    898e:	91 83       	std	Z+1, r25	; 0x01
    8990:	a2 83       	std	Z+2, r26	; 0x02
    8992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8994:	ce 01       	movw	r24, r28
    8996:	8b 56       	subi	r24, 0x6B	; 107
    8998:	9d 4f       	sbci	r25, 0xFD	; 253
    899a:	11 e0       	ldi	r17, 0x01	; 1
    899c:	fc 01       	movw	r30, r24
    899e:	60 81       	ld	r22, Z
    89a0:	71 81       	ldd	r23, Z+1	; 0x01
    89a2:	82 81       	ldd	r24, Z+2	; 0x02
    89a4:	93 81       	ldd	r25, Z+3	; 0x03
    89a6:	20 e0       	ldi	r18, 0x00	; 0
    89a8:	30 e0       	ldi	r19, 0x00	; 0
    89aa:	40 e8       	ldi	r20, 0x80	; 128
    89ac:	5f e3       	ldi	r21, 0x3F	; 63
    89ae:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    89b2:	88 23       	and	r24, r24
    89b4:	0c f0       	brlt	.+2      	; 0x89b8 <main+0x5668>
    89b6:	10 e0       	ldi	r17, 0x00	; 0
    89b8:	11 23       	and	r17, r17
    89ba:	49 f0       	breq	.+18     	; 0x89ce <main+0x567e>
		__ticks = 1;
    89bc:	ce 01       	movw	r24, r28
    89be:	87 56       	subi	r24, 0x67	; 103
    89c0:	9d 4f       	sbci	r25, 0xFD	; 253
    89c2:	21 e0       	ldi	r18, 0x01	; 1
    89c4:	30 e0       	ldi	r19, 0x00	; 0
    89c6:	fc 01       	movw	r30, r24
    89c8:	31 83       	std	Z+1, r19	; 0x01
    89ca:	20 83       	st	Z, r18
    89cc:	74 c0       	rjmp	.+232    	; 0x8ab6 <main+0x5766>
	else if (__tmp > 65535)
    89ce:	ce 01       	movw	r24, r28
    89d0:	8b 56       	subi	r24, 0x6B	; 107
    89d2:	9d 4f       	sbci	r25, 0xFD	; 253
    89d4:	11 e0       	ldi	r17, 0x01	; 1
    89d6:	fc 01       	movw	r30, r24
    89d8:	60 81       	ld	r22, Z
    89da:	71 81       	ldd	r23, Z+1	; 0x01
    89dc:	82 81       	ldd	r24, Z+2	; 0x02
    89de:	93 81       	ldd	r25, Z+3	; 0x03
    89e0:	20 e0       	ldi	r18, 0x00	; 0
    89e2:	3f ef       	ldi	r19, 0xFF	; 255
    89e4:	4f e7       	ldi	r20, 0x7F	; 127
    89e6:	57 e4       	ldi	r21, 0x47	; 71
    89e8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    89ec:	18 16       	cp	r1, r24
    89ee:	0c f0       	brlt	.+2      	; 0x89f2 <main+0x56a2>
    89f0:	10 e0       	ldi	r17, 0x00	; 0
    89f2:	11 23       	and	r17, r17
    89f4:	09 f4       	brne	.+2      	; 0x89f8 <main+0x56a8>
    89f6:	4d c0       	rjmp	.+154    	; 0x8a92 <main+0x5742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    89f8:	ce 01       	movw	r24, r28
    89fa:	8f 56       	subi	r24, 0x6F	; 111
    89fc:	9d 4f       	sbci	r25, 0xFD	; 253
    89fe:	fc 01       	movw	r30, r24
    8a00:	60 81       	ld	r22, Z
    8a02:	71 81       	ldd	r23, Z+1	; 0x01
    8a04:	82 81       	ldd	r24, Z+2	; 0x02
    8a06:	93 81       	ldd	r25, Z+3	; 0x03
    8a08:	20 e0       	ldi	r18, 0x00	; 0
    8a0a:	30 e0       	ldi	r19, 0x00	; 0
    8a0c:	40 e2       	ldi	r20, 0x20	; 32
    8a0e:	51 e4       	ldi	r21, 0x41	; 65
    8a10:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8a14:	dc 01       	movw	r26, r24
    8a16:	cb 01       	movw	r24, r22
    8a18:	8e 01       	movw	r16, r28
    8a1a:	07 56       	subi	r16, 0x67	; 103
    8a1c:	1d 4f       	sbci	r17, 0xFD	; 253
    8a1e:	bc 01       	movw	r22, r24
    8a20:	cd 01       	movw	r24, r26
    8a22:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8a26:	dc 01       	movw	r26, r24
    8a28:	cb 01       	movw	r24, r22
    8a2a:	f8 01       	movw	r30, r16
    8a2c:	91 83       	std	Z+1, r25	; 0x01
    8a2e:	80 83       	st	Z, r24
    8a30:	27 c0       	rjmp	.+78     	; 0x8a80 <main+0x5730>
    8a32:	ce 01       	movw	r24, r28
    8a34:	85 56       	subi	r24, 0x65	; 101
    8a36:	9d 4f       	sbci	r25, 0xFD	; 253
    8a38:	20 e7       	ldi	r18, 0x70	; 112
    8a3a:	31 e0       	ldi	r19, 0x01	; 1
    8a3c:	fc 01       	movw	r30, r24
    8a3e:	31 83       	std	Z+1, r19	; 0x01
    8a40:	20 83       	st	Z, r18
    8a42:	ce 01       	movw	r24, r28
    8a44:	85 56       	subi	r24, 0x65	; 101
    8a46:	9d 4f       	sbci	r25, 0xFD	; 253
    8a48:	fc 01       	movw	r30, r24
    8a4a:	80 81       	ld	r24, Z
    8a4c:	91 81       	ldd	r25, Z+1	; 0x01
    8a4e:	8c 01       	movw	r16, r24
    8a50:	c8 01       	movw	r24, r16
    8a52:	01 97       	sbiw	r24, 0x01	; 1
    8a54:	f1 f7       	brne	.-4      	; 0x8a52 <main+0x5702>
    8a56:	8c 01       	movw	r16, r24
    8a58:	ce 01       	movw	r24, r28
    8a5a:	85 56       	subi	r24, 0x65	; 101
    8a5c:	9d 4f       	sbci	r25, 0xFD	; 253
    8a5e:	fc 01       	movw	r30, r24
    8a60:	11 83       	std	Z+1, r17	; 0x01
    8a62:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a64:	ce 01       	movw	r24, r28
    8a66:	87 56       	subi	r24, 0x67	; 103
    8a68:	9d 4f       	sbci	r25, 0xFD	; 253
    8a6a:	9e 01       	movw	r18, r28
    8a6c:	27 56       	subi	r18, 0x67	; 103
    8a6e:	3d 4f       	sbci	r19, 0xFD	; 253
    8a70:	f9 01       	movw	r30, r18
    8a72:	20 81       	ld	r18, Z
    8a74:	31 81       	ldd	r19, Z+1	; 0x01
    8a76:	21 50       	subi	r18, 0x01	; 1
    8a78:	30 40       	sbci	r19, 0x00	; 0
    8a7a:	fc 01       	movw	r30, r24
    8a7c:	31 83       	std	Z+1, r19	; 0x01
    8a7e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8a80:	ce 01       	movw	r24, r28
    8a82:	87 56       	subi	r24, 0x67	; 103
    8a84:	9d 4f       	sbci	r25, 0xFD	; 253
    8a86:	fc 01       	movw	r30, r24
    8a88:	80 81       	ld	r24, Z
    8a8a:	91 81       	ldd	r25, Z+1	; 0x01
    8a8c:	00 97       	sbiw	r24, 0x00	; 0
    8a8e:	89 f6       	brne	.-94     	; 0x8a32 <main+0x56e2>
    8a90:	2f c0       	rjmp	.+94     	; 0x8af0 <main+0x57a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8a92:	8e 01       	movw	r16, r28
    8a94:	07 56       	subi	r16, 0x67	; 103
    8a96:	1d 4f       	sbci	r17, 0xFD	; 253
    8a98:	ce 01       	movw	r24, r28
    8a9a:	8b 56       	subi	r24, 0x6B	; 107
    8a9c:	9d 4f       	sbci	r25, 0xFD	; 253
    8a9e:	fc 01       	movw	r30, r24
    8aa0:	60 81       	ld	r22, Z
    8aa2:	71 81       	ldd	r23, Z+1	; 0x01
    8aa4:	82 81       	ldd	r24, Z+2	; 0x02
    8aa6:	93 81       	ldd	r25, Z+3	; 0x03
    8aa8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8aac:	dc 01       	movw	r26, r24
    8aae:	cb 01       	movw	r24, r22
    8ab0:	f8 01       	movw	r30, r16
    8ab2:	91 83       	std	Z+1, r25	; 0x01
    8ab4:	80 83       	st	Z, r24
    8ab6:	ce 01       	movw	r24, r28
    8ab8:	83 56       	subi	r24, 0x63	; 99
    8aba:	9d 4f       	sbci	r25, 0xFD	; 253
    8abc:	9e 01       	movw	r18, r28
    8abe:	27 56       	subi	r18, 0x67	; 103
    8ac0:	3d 4f       	sbci	r19, 0xFD	; 253
    8ac2:	f9 01       	movw	r30, r18
    8ac4:	20 81       	ld	r18, Z
    8ac6:	31 81       	ldd	r19, Z+1	; 0x01
    8ac8:	fc 01       	movw	r30, r24
    8aca:	31 83       	std	Z+1, r19	; 0x01
    8acc:	20 83       	st	Z, r18
    8ace:	ce 01       	movw	r24, r28
    8ad0:	83 56       	subi	r24, 0x63	; 99
    8ad2:	9d 4f       	sbci	r25, 0xFD	; 253
    8ad4:	fc 01       	movw	r30, r24
    8ad6:	80 81       	ld	r24, Z
    8ad8:	91 81       	ldd	r25, Z+1	; 0x01
    8ada:	8c 01       	movw	r16, r24
    8adc:	c8 01       	movw	r24, r16
    8ade:	01 97       	sbiw	r24, 0x01	; 1
    8ae0:	f1 f7       	brne	.-4      	; 0x8ade <main+0x578e>
    8ae2:	8c 01       	movw	r16, r24
    8ae4:	ce 01       	movw	r24, r28
    8ae6:	83 56       	subi	r24, 0x63	; 99
    8ae8:	9d 4f       	sbci	r25, 0xFD	; 253
    8aea:	fc 01       	movw	r30, r24
    8aec:	11 83       	std	Z+1, r17	; 0x01
    8aee:	00 83       	st	Z, r16
					_delay_ms(500);
					right_degrees(45);
    8af0:	8d e2       	ldi	r24, 0x2D	; 45
    8af2:	90 e0       	ldi	r25, 0x00	; 0
    8af4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
					left_degrees(180);        /// change
    8af8:	84 eb       	ldi	r24, 0xB4	; 180
    8afa:	90 e0       	ldi	r25, 0x00	; 0
    8afc:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
					compass=5;
    8b00:	85 e0       	ldi	r24, 0x05	; 5
    8b02:	90 e0       	ldi	r25, 0x00	; 0
    8b04:	9c 83       	std	Y+4, r25	; 0x04
    8b06:	8b 83       	std	Y+3, r24	; 0x03
					
			}
			if(coor[0]>origin2[boxnumber][i][0] && coor[1]>origin2[boxnumber][i][1])
    8b08:	20 91 a6 04 	lds	r18, 0x04A6
    8b0c:	30 91 a7 04 	lds	r19, 0x04A7
    8b10:	ae 01       	movw	r20, r28
    8b12:	4d 5f       	subi	r20, 0xFD	; 253
    8b14:	5a 4f       	sbci	r21, 0xFA	; 250
    8b16:	8d 81       	ldd	r24, Y+5	; 0x05
    8b18:	9e 81       	ldd	r25, Y+6	; 0x06
    8b1a:	bc 01       	movw	r22, r24
    8b1c:	66 0f       	add	r22, r22
    8b1e:	77 1f       	adc	r23, r23
    8b20:	66 0f       	add	r22, r22
    8b22:	77 1f       	adc	r23, r23
    8b24:	8b a1       	lds	r24, 0x4b
    8b26:	9c a1       	lds	r25, 0x4c
    8b28:	86 0f       	add	r24, r22
    8b2a:	97 1f       	adc	r25, r23
    8b2c:	88 0f       	add	r24, r24
    8b2e:	99 1f       	adc	r25, r25
    8b30:	88 0f       	add	r24, r24
    8b32:	99 1f       	adc	r25, r25
    8b34:	84 0f       	add	r24, r20
    8b36:	95 1f       	adc	r25, r21
    8b38:	fc 01       	movw	r30, r24
    8b3a:	80 81       	ld	r24, Z
    8b3c:	91 81       	ldd	r25, Z+1	; 0x01
    8b3e:	82 17       	cp	r24, r18
    8b40:	93 07       	cpc	r25, r19
    8b42:	0c f0       	brlt	.+2      	; 0x8b46 <main+0x57f6>
    8b44:	c6 c2       	rjmp	.+1420   	; 0x90d2 <main+0x5d82>
    8b46:	20 91 a8 04 	lds	r18, 0x04A8
    8b4a:	30 91 a9 04 	lds	r19, 0x04A9
    8b4e:	ae 01       	movw	r20, r28
    8b50:	4d 5f       	subi	r20, 0xFD	; 253
    8b52:	5a 4f       	sbci	r21, 0xFA	; 250
    8b54:	8d 81       	ldd	r24, Y+5	; 0x05
    8b56:	9e 81       	ldd	r25, Y+6	; 0x06
    8b58:	bc 01       	movw	r22, r24
    8b5a:	66 0f       	add	r22, r22
    8b5c:	77 1f       	adc	r23, r23
    8b5e:	66 0f       	add	r22, r22
    8b60:	77 1f       	adc	r23, r23
    8b62:	8b a1       	lds	r24, 0x4b
    8b64:	9c a1       	lds	r25, 0x4c
    8b66:	86 0f       	add	r24, r22
    8b68:	97 1f       	adc	r25, r23
    8b6a:	88 0f       	add	r24, r24
    8b6c:	99 1f       	adc	r25, r25
    8b6e:	88 0f       	add	r24, r24
    8b70:	99 1f       	adc	r25, r25
    8b72:	84 0f       	add	r24, r20
    8b74:	95 1f       	adc	r25, r21
    8b76:	02 96       	adiw	r24, 0x02	; 2
    8b78:	fc 01       	movw	r30, r24
    8b7a:	80 81       	ld	r24, Z
    8b7c:	91 81       	ldd	r25, Z+1	; 0x01
    8b7e:	82 17       	cp	r24, r18
    8b80:	93 07       	cpc	r25, r19
    8b82:	0c f0       	brlt	.+2      	; 0x8b86 <main+0x5836>
    8b84:	a6 c2       	rjmp	.+1356   	; 0x90d2 <main+0x5d82>
			{
				left_degrees(135);
    8b86:	87 e8       	ldi	r24, 0x87	; 135
    8b88:	90 e0       	ldi	r25, 0x00	; 0
    8b8a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
				back_mm(65);
    8b8e:	81 e4       	ldi	r24, 0x41	; 65
    8b90:	90 e0       	ldi	r25, 0x00	; 0
    8b92:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
				matrix2();
    8b96:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
					if(summ1[recur+1]>10)
    8b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    8b9c:	98 85       	ldd	r25, Y+8	; 0x08
    8b9e:	01 96       	adiw	r24, 0x01	; 1
    8ba0:	9e 01       	movw	r18, r28
    8ba2:	25 54       	subi	r18, 0x45	; 69
    8ba4:	39 4f       	sbci	r19, 0xF9	; 249
    8ba6:	88 0f       	add	r24, r24
    8ba8:	99 1f       	adc	r25, r25
    8baa:	82 0f       	add	r24, r18
    8bac:	93 1f       	adc	r25, r19
    8bae:	fc 01       	movw	r30, r24
    8bb0:	80 81       	ld	r24, Z
    8bb2:	91 81       	ldd	r25, Z+1	; 0x01
    8bb4:	8b 30       	cpi	r24, 0x0B	; 11
    8bb6:	91 05       	cpc	r25, r1
    8bb8:	0c f4       	brge	.+2      	; 0x8bbc <main+0x586c>
    8bba:	d6 c0       	rjmp	.+428    	; 0x8d68 <main+0x5a18>
					{
						buzzer_on();
    8bbc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    8bc0:	9e 01       	movw	r18, r28
    8bc2:	21 56       	subi	r18, 0x61	; 97
    8bc4:	3d 4f       	sbci	r19, 0xFD	; 253
    8bc6:	80 e0       	ldi	r24, 0x00	; 0
    8bc8:	90 e0       	ldi	r25, 0x00	; 0
    8bca:	aa e7       	ldi	r26, 0x7A	; 122
    8bcc:	b4 e4       	ldi	r27, 0x44	; 68
    8bce:	f9 01       	movw	r30, r18
    8bd0:	80 83       	st	Z, r24
    8bd2:	91 83       	std	Z+1, r25	; 0x01
    8bd4:	a2 83       	std	Z+2, r26	; 0x02
    8bd6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8bd8:	8e 01       	movw	r16, r28
    8bda:	0d 55       	subi	r16, 0x5D	; 93
    8bdc:	1d 4f       	sbci	r17, 0xFD	; 253
    8bde:	ce 01       	movw	r24, r28
    8be0:	81 56       	subi	r24, 0x61	; 97
    8be2:	9d 4f       	sbci	r25, 0xFD	; 253
    8be4:	fc 01       	movw	r30, r24
    8be6:	60 81       	ld	r22, Z
    8be8:	71 81       	ldd	r23, Z+1	; 0x01
    8bea:	82 81       	ldd	r24, Z+2	; 0x02
    8bec:	93 81       	ldd	r25, Z+3	; 0x03
    8bee:	26 e6       	ldi	r18, 0x66	; 102
    8bf0:	36 e6       	ldi	r19, 0x66	; 102
    8bf2:	46 e6       	ldi	r20, 0x66	; 102
    8bf4:	55 e4       	ldi	r21, 0x45	; 69
    8bf6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8bfa:	dc 01       	movw	r26, r24
    8bfc:	cb 01       	movw	r24, r22
    8bfe:	f8 01       	movw	r30, r16
    8c00:	80 83       	st	Z, r24
    8c02:	91 83       	std	Z+1, r25	; 0x01
    8c04:	a2 83       	std	Z+2, r26	; 0x02
    8c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8c08:	ce 01       	movw	r24, r28
    8c0a:	8d 55       	subi	r24, 0x5D	; 93
    8c0c:	9d 4f       	sbci	r25, 0xFD	; 253
    8c0e:	11 e0       	ldi	r17, 0x01	; 1
    8c10:	fc 01       	movw	r30, r24
    8c12:	60 81       	ld	r22, Z
    8c14:	71 81       	ldd	r23, Z+1	; 0x01
    8c16:	82 81       	ldd	r24, Z+2	; 0x02
    8c18:	93 81       	ldd	r25, Z+3	; 0x03
    8c1a:	20 e0       	ldi	r18, 0x00	; 0
    8c1c:	30 e0       	ldi	r19, 0x00	; 0
    8c1e:	40 e8       	ldi	r20, 0x80	; 128
    8c20:	5f e3       	ldi	r21, 0x3F	; 63
    8c22:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    8c26:	88 23       	and	r24, r24
    8c28:	0c f0       	brlt	.+2      	; 0x8c2c <main+0x58dc>
    8c2a:	10 e0       	ldi	r17, 0x00	; 0
    8c2c:	11 23       	and	r17, r17
    8c2e:	49 f0       	breq	.+18     	; 0x8c42 <main+0x58f2>
		__ticks = 1;
    8c30:	ce 01       	movw	r24, r28
    8c32:	89 55       	subi	r24, 0x59	; 89
    8c34:	9d 4f       	sbci	r25, 0xFD	; 253
    8c36:	21 e0       	ldi	r18, 0x01	; 1
    8c38:	30 e0       	ldi	r19, 0x00	; 0
    8c3a:	fc 01       	movw	r30, r24
    8c3c:	31 83       	std	Z+1, r19	; 0x01
    8c3e:	20 83       	st	Z, r18
    8c40:	74 c0       	rjmp	.+232    	; 0x8d2a <main+0x59da>
	else if (__tmp > 65535)
    8c42:	ce 01       	movw	r24, r28
    8c44:	8d 55       	subi	r24, 0x5D	; 93
    8c46:	9d 4f       	sbci	r25, 0xFD	; 253
    8c48:	11 e0       	ldi	r17, 0x01	; 1
    8c4a:	fc 01       	movw	r30, r24
    8c4c:	60 81       	ld	r22, Z
    8c4e:	71 81       	ldd	r23, Z+1	; 0x01
    8c50:	82 81       	ldd	r24, Z+2	; 0x02
    8c52:	93 81       	ldd	r25, Z+3	; 0x03
    8c54:	20 e0       	ldi	r18, 0x00	; 0
    8c56:	3f ef       	ldi	r19, 0xFF	; 255
    8c58:	4f e7       	ldi	r20, 0x7F	; 127
    8c5a:	57 e4       	ldi	r21, 0x47	; 71
    8c5c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    8c60:	18 16       	cp	r1, r24
    8c62:	0c f0       	brlt	.+2      	; 0x8c66 <main+0x5916>
    8c64:	10 e0       	ldi	r17, 0x00	; 0
    8c66:	11 23       	and	r17, r17
    8c68:	09 f4       	brne	.+2      	; 0x8c6c <main+0x591c>
    8c6a:	4d c0       	rjmp	.+154    	; 0x8d06 <main+0x59b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c6c:	ce 01       	movw	r24, r28
    8c6e:	81 56       	subi	r24, 0x61	; 97
    8c70:	9d 4f       	sbci	r25, 0xFD	; 253
    8c72:	fc 01       	movw	r30, r24
    8c74:	60 81       	ld	r22, Z
    8c76:	71 81       	ldd	r23, Z+1	; 0x01
    8c78:	82 81       	ldd	r24, Z+2	; 0x02
    8c7a:	93 81       	ldd	r25, Z+3	; 0x03
    8c7c:	20 e0       	ldi	r18, 0x00	; 0
    8c7e:	30 e0       	ldi	r19, 0x00	; 0
    8c80:	40 e2       	ldi	r20, 0x20	; 32
    8c82:	51 e4       	ldi	r21, 0x41	; 65
    8c84:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8c88:	dc 01       	movw	r26, r24
    8c8a:	cb 01       	movw	r24, r22
    8c8c:	8e 01       	movw	r16, r28
    8c8e:	09 55       	subi	r16, 0x59	; 89
    8c90:	1d 4f       	sbci	r17, 0xFD	; 253
    8c92:	bc 01       	movw	r22, r24
    8c94:	cd 01       	movw	r24, r26
    8c96:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8c9a:	dc 01       	movw	r26, r24
    8c9c:	cb 01       	movw	r24, r22
    8c9e:	f8 01       	movw	r30, r16
    8ca0:	91 83       	std	Z+1, r25	; 0x01
    8ca2:	80 83       	st	Z, r24
    8ca4:	27 c0       	rjmp	.+78     	; 0x8cf4 <main+0x59a4>
    8ca6:	ce 01       	movw	r24, r28
    8ca8:	87 55       	subi	r24, 0x57	; 87
    8caa:	9d 4f       	sbci	r25, 0xFD	; 253
    8cac:	20 e7       	ldi	r18, 0x70	; 112
    8cae:	31 e0       	ldi	r19, 0x01	; 1
    8cb0:	fc 01       	movw	r30, r24
    8cb2:	31 83       	std	Z+1, r19	; 0x01
    8cb4:	20 83       	st	Z, r18
    8cb6:	ce 01       	movw	r24, r28
    8cb8:	87 55       	subi	r24, 0x57	; 87
    8cba:	9d 4f       	sbci	r25, 0xFD	; 253
    8cbc:	fc 01       	movw	r30, r24
    8cbe:	80 81       	ld	r24, Z
    8cc0:	91 81       	ldd	r25, Z+1	; 0x01
    8cc2:	8c 01       	movw	r16, r24
    8cc4:	c8 01       	movw	r24, r16
    8cc6:	01 97       	sbiw	r24, 0x01	; 1
    8cc8:	f1 f7       	brne	.-4      	; 0x8cc6 <main+0x5976>
    8cca:	8c 01       	movw	r16, r24
    8ccc:	ce 01       	movw	r24, r28
    8cce:	87 55       	subi	r24, 0x57	; 87
    8cd0:	9d 4f       	sbci	r25, 0xFD	; 253
    8cd2:	fc 01       	movw	r30, r24
    8cd4:	11 83       	std	Z+1, r17	; 0x01
    8cd6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8cd8:	ce 01       	movw	r24, r28
    8cda:	89 55       	subi	r24, 0x59	; 89
    8cdc:	9d 4f       	sbci	r25, 0xFD	; 253
    8cde:	9e 01       	movw	r18, r28
    8ce0:	29 55       	subi	r18, 0x59	; 89
    8ce2:	3d 4f       	sbci	r19, 0xFD	; 253
    8ce4:	f9 01       	movw	r30, r18
    8ce6:	20 81       	ld	r18, Z
    8ce8:	31 81       	ldd	r19, Z+1	; 0x01
    8cea:	21 50       	subi	r18, 0x01	; 1
    8cec:	30 40       	sbci	r19, 0x00	; 0
    8cee:	fc 01       	movw	r30, r24
    8cf0:	31 83       	std	Z+1, r19	; 0x01
    8cf2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8cf4:	ce 01       	movw	r24, r28
    8cf6:	89 55       	subi	r24, 0x59	; 89
    8cf8:	9d 4f       	sbci	r25, 0xFD	; 253
    8cfa:	fc 01       	movw	r30, r24
    8cfc:	80 81       	ld	r24, Z
    8cfe:	91 81       	ldd	r25, Z+1	; 0x01
    8d00:	00 97       	sbiw	r24, 0x00	; 0
    8d02:	89 f6       	brne	.-94     	; 0x8ca6 <main+0x5956>
    8d04:	2f c0       	rjmp	.+94     	; 0x8d64 <main+0x5a14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8d06:	8e 01       	movw	r16, r28
    8d08:	09 55       	subi	r16, 0x59	; 89
    8d0a:	1d 4f       	sbci	r17, 0xFD	; 253
    8d0c:	ce 01       	movw	r24, r28
    8d0e:	8d 55       	subi	r24, 0x5D	; 93
    8d10:	9d 4f       	sbci	r25, 0xFD	; 253
    8d12:	fc 01       	movw	r30, r24
    8d14:	60 81       	ld	r22, Z
    8d16:	71 81       	ldd	r23, Z+1	; 0x01
    8d18:	82 81       	ldd	r24, Z+2	; 0x02
    8d1a:	93 81       	ldd	r25, Z+3	; 0x03
    8d1c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8d20:	dc 01       	movw	r26, r24
    8d22:	cb 01       	movw	r24, r22
    8d24:	f8 01       	movw	r30, r16
    8d26:	91 83       	std	Z+1, r25	; 0x01
    8d28:	80 83       	st	Z, r24
    8d2a:	ce 01       	movw	r24, r28
    8d2c:	85 55       	subi	r24, 0x55	; 85
    8d2e:	9d 4f       	sbci	r25, 0xFD	; 253
    8d30:	9e 01       	movw	r18, r28
    8d32:	29 55       	subi	r18, 0x59	; 89
    8d34:	3d 4f       	sbci	r19, 0xFD	; 253
    8d36:	f9 01       	movw	r30, r18
    8d38:	20 81       	ld	r18, Z
    8d3a:	31 81       	ldd	r19, Z+1	; 0x01
    8d3c:	fc 01       	movw	r30, r24
    8d3e:	31 83       	std	Z+1, r19	; 0x01
    8d40:	20 83       	st	Z, r18
    8d42:	ce 01       	movw	r24, r28
    8d44:	85 55       	subi	r24, 0x55	; 85
    8d46:	9d 4f       	sbci	r25, 0xFD	; 253
    8d48:	fc 01       	movw	r30, r24
    8d4a:	80 81       	ld	r24, Z
    8d4c:	91 81       	ldd	r25, Z+1	; 0x01
    8d4e:	8c 01       	movw	r16, r24
    8d50:	c8 01       	movw	r24, r16
    8d52:	01 97       	sbiw	r24, 0x01	; 1
    8d54:	f1 f7       	brne	.-4      	; 0x8d52 <main+0x5a02>
    8d56:	8c 01       	movw	r16, r24
    8d58:	ce 01       	movw	r24, r28
    8d5a:	85 55       	subi	r24, 0x55	; 85
    8d5c:	9d 4f       	sbci	r25, 0xFD	; 253
    8d5e:	fc 01       	movw	r30, r24
    8d60:	11 83       	std	Z+1, r17	; 0x01
    8d62:	00 83       	st	Z, r16
						_delay_ms(1000);
						buzzer_off();
    8d64:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
					}
				forward_mm(75);
    8d68:	8b e4       	ldi	r24, 0x4B	; 75
    8d6a:	90 e0       	ldi	r25, 0x00	; 0
    8d6c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    8d70:	9e 01       	movw	r18, r28
    8d72:	23 55       	subi	r18, 0x53	; 83
    8d74:	3d 4f       	sbci	r19, 0xFD	; 253
    8d76:	80 e0       	ldi	r24, 0x00	; 0
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	a0 ef       	ldi	r26, 0xF0	; 240
    8d7c:	b1 e4       	ldi	r27, 0x41	; 65
    8d7e:	f9 01       	movw	r30, r18
    8d80:	80 83       	st	Z, r24
    8d82:	91 83       	std	Z+1, r25	; 0x01
    8d84:	a2 83       	std	Z+2, r26	; 0x02
    8d86:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8d88:	8e 01       	movw	r16, r28
    8d8a:	0f 54       	subi	r16, 0x4F	; 79
    8d8c:	1d 4f       	sbci	r17, 0xFD	; 253
    8d8e:	ce 01       	movw	r24, r28
    8d90:	83 55       	subi	r24, 0x53	; 83
    8d92:	9d 4f       	sbci	r25, 0xFD	; 253
    8d94:	fc 01       	movw	r30, r24
    8d96:	60 81       	ld	r22, Z
    8d98:	71 81       	ldd	r23, Z+1	; 0x01
    8d9a:	82 81       	ldd	r24, Z+2	; 0x02
    8d9c:	93 81       	ldd	r25, Z+3	; 0x03
    8d9e:	26 e6       	ldi	r18, 0x66	; 102
    8da0:	36 e6       	ldi	r19, 0x66	; 102
    8da2:	46 e6       	ldi	r20, 0x66	; 102
    8da4:	55 e4       	ldi	r21, 0x45	; 69
    8da6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8daa:	dc 01       	movw	r26, r24
    8dac:	cb 01       	movw	r24, r22
    8dae:	f8 01       	movw	r30, r16
    8db0:	80 83       	st	Z, r24
    8db2:	91 83       	std	Z+1, r25	; 0x01
    8db4:	a2 83       	std	Z+2, r26	; 0x02
    8db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8db8:	ce 01       	movw	r24, r28
    8dba:	8f 54       	subi	r24, 0x4F	; 79
    8dbc:	9d 4f       	sbci	r25, 0xFD	; 253
    8dbe:	11 e0       	ldi	r17, 0x01	; 1
    8dc0:	fc 01       	movw	r30, r24
    8dc2:	60 81       	ld	r22, Z
    8dc4:	71 81       	ldd	r23, Z+1	; 0x01
    8dc6:	82 81       	ldd	r24, Z+2	; 0x02
    8dc8:	93 81       	ldd	r25, Z+3	; 0x03
    8dca:	20 e0       	ldi	r18, 0x00	; 0
    8dcc:	30 e0       	ldi	r19, 0x00	; 0
    8dce:	40 e8       	ldi	r20, 0x80	; 128
    8dd0:	5f e3       	ldi	r21, 0x3F	; 63
    8dd2:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    8dd6:	88 23       	and	r24, r24
    8dd8:	0c f0       	brlt	.+2      	; 0x8ddc <main+0x5a8c>
    8dda:	10 e0       	ldi	r17, 0x00	; 0
    8ddc:	11 23       	and	r17, r17
    8dde:	49 f0       	breq	.+18     	; 0x8df2 <main+0x5aa2>
		__ticks = 1;
    8de0:	ce 01       	movw	r24, r28
    8de2:	8b 54       	subi	r24, 0x4B	; 75
    8de4:	9d 4f       	sbci	r25, 0xFD	; 253
    8de6:	21 e0       	ldi	r18, 0x01	; 1
    8de8:	30 e0       	ldi	r19, 0x00	; 0
    8dea:	fc 01       	movw	r30, r24
    8dec:	31 83       	std	Z+1, r19	; 0x01
    8dee:	20 83       	st	Z, r18
    8df0:	74 c0       	rjmp	.+232    	; 0x8eda <main+0x5b8a>
	else if (__tmp > 65535)
    8df2:	ce 01       	movw	r24, r28
    8df4:	8f 54       	subi	r24, 0x4F	; 79
    8df6:	9d 4f       	sbci	r25, 0xFD	; 253
    8df8:	11 e0       	ldi	r17, 0x01	; 1
    8dfa:	fc 01       	movw	r30, r24
    8dfc:	60 81       	ld	r22, Z
    8dfe:	71 81       	ldd	r23, Z+1	; 0x01
    8e00:	82 81       	ldd	r24, Z+2	; 0x02
    8e02:	93 81       	ldd	r25, Z+3	; 0x03
    8e04:	20 e0       	ldi	r18, 0x00	; 0
    8e06:	3f ef       	ldi	r19, 0xFF	; 255
    8e08:	4f e7       	ldi	r20, 0x7F	; 127
    8e0a:	57 e4       	ldi	r21, 0x47	; 71
    8e0c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    8e10:	18 16       	cp	r1, r24
    8e12:	0c f0       	brlt	.+2      	; 0x8e16 <main+0x5ac6>
    8e14:	10 e0       	ldi	r17, 0x00	; 0
    8e16:	11 23       	and	r17, r17
    8e18:	09 f4       	brne	.+2      	; 0x8e1c <main+0x5acc>
    8e1a:	4d c0       	rjmp	.+154    	; 0x8eb6 <main+0x5b66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8e1c:	ce 01       	movw	r24, r28
    8e1e:	83 55       	subi	r24, 0x53	; 83
    8e20:	9d 4f       	sbci	r25, 0xFD	; 253
    8e22:	fc 01       	movw	r30, r24
    8e24:	60 81       	ld	r22, Z
    8e26:	71 81       	ldd	r23, Z+1	; 0x01
    8e28:	82 81       	ldd	r24, Z+2	; 0x02
    8e2a:	93 81       	ldd	r25, Z+3	; 0x03
    8e2c:	20 e0       	ldi	r18, 0x00	; 0
    8e2e:	30 e0       	ldi	r19, 0x00	; 0
    8e30:	40 e2       	ldi	r20, 0x20	; 32
    8e32:	51 e4       	ldi	r21, 0x41	; 65
    8e34:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8e38:	dc 01       	movw	r26, r24
    8e3a:	cb 01       	movw	r24, r22
    8e3c:	8e 01       	movw	r16, r28
    8e3e:	0b 54       	subi	r16, 0x4B	; 75
    8e40:	1d 4f       	sbci	r17, 0xFD	; 253
    8e42:	bc 01       	movw	r22, r24
    8e44:	cd 01       	movw	r24, r26
    8e46:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8e4a:	dc 01       	movw	r26, r24
    8e4c:	cb 01       	movw	r24, r22
    8e4e:	f8 01       	movw	r30, r16
    8e50:	91 83       	std	Z+1, r25	; 0x01
    8e52:	80 83       	st	Z, r24
    8e54:	27 c0       	rjmp	.+78     	; 0x8ea4 <main+0x5b54>
    8e56:	ce 01       	movw	r24, r28
    8e58:	89 54       	subi	r24, 0x49	; 73
    8e5a:	9d 4f       	sbci	r25, 0xFD	; 253
    8e5c:	20 e7       	ldi	r18, 0x70	; 112
    8e5e:	31 e0       	ldi	r19, 0x01	; 1
    8e60:	fc 01       	movw	r30, r24
    8e62:	31 83       	std	Z+1, r19	; 0x01
    8e64:	20 83       	st	Z, r18
    8e66:	ce 01       	movw	r24, r28
    8e68:	89 54       	subi	r24, 0x49	; 73
    8e6a:	9d 4f       	sbci	r25, 0xFD	; 253
    8e6c:	fc 01       	movw	r30, r24
    8e6e:	80 81       	ld	r24, Z
    8e70:	91 81       	ldd	r25, Z+1	; 0x01
    8e72:	8c 01       	movw	r16, r24
    8e74:	c8 01       	movw	r24, r16
    8e76:	01 97       	sbiw	r24, 0x01	; 1
    8e78:	f1 f7       	brne	.-4      	; 0x8e76 <main+0x5b26>
    8e7a:	8c 01       	movw	r16, r24
    8e7c:	ce 01       	movw	r24, r28
    8e7e:	89 54       	subi	r24, 0x49	; 73
    8e80:	9d 4f       	sbci	r25, 0xFD	; 253
    8e82:	fc 01       	movw	r30, r24
    8e84:	11 83       	std	Z+1, r17	; 0x01
    8e86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8e88:	ce 01       	movw	r24, r28
    8e8a:	8b 54       	subi	r24, 0x4B	; 75
    8e8c:	9d 4f       	sbci	r25, 0xFD	; 253
    8e8e:	9e 01       	movw	r18, r28
    8e90:	2b 54       	subi	r18, 0x4B	; 75
    8e92:	3d 4f       	sbci	r19, 0xFD	; 253
    8e94:	f9 01       	movw	r30, r18
    8e96:	20 81       	ld	r18, Z
    8e98:	31 81       	ldd	r19, Z+1	; 0x01
    8e9a:	21 50       	subi	r18, 0x01	; 1
    8e9c:	30 40       	sbci	r19, 0x00	; 0
    8e9e:	fc 01       	movw	r30, r24
    8ea0:	31 83       	std	Z+1, r19	; 0x01
    8ea2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8ea4:	ce 01       	movw	r24, r28
    8ea6:	8b 54       	subi	r24, 0x4B	; 75
    8ea8:	9d 4f       	sbci	r25, 0xFD	; 253
    8eaa:	fc 01       	movw	r30, r24
    8eac:	80 81       	ld	r24, Z
    8eae:	91 81       	ldd	r25, Z+1	; 0x01
    8eb0:	00 97       	sbiw	r24, 0x00	; 0
    8eb2:	89 f6       	brne	.-94     	; 0x8e56 <main+0x5b06>
    8eb4:	2f c0       	rjmp	.+94     	; 0x8f14 <main+0x5bc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8eb6:	8e 01       	movw	r16, r28
    8eb8:	0b 54       	subi	r16, 0x4B	; 75
    8eba:	1d 4f       	sbci	r17, 0xFD	; 253
    8ebc:	ce 01       	movw	r24, r28
    8ebe:	8f 54       	subi	r24, 0x4F	; 79
    8ec0:	9d 4f       	sbci	r25, 0xFD	; 253
    8ec2:	fc 01       	movw	r30, r24
    8ec4:	60 81       	ld	r22, Z
    8ec6:	71 81       	ldd	r23, Z+1	; 0x01
    8ec8:	82 81       	ldd	r24, Z+2	; 0x02
    8eca:	93 81       	ldd	r25, Z+3	; 0x03
    8ecc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8ed0:	dc 01       	movw	r26, r24
    8ed2:	cb 01       	movw	r24, r22
    8ed4:	f8 01       	movw	r30, r16
    8ed6:	91 83       	std	Z+1, r25	; 0x01
    8ed8:	80 83       	st	Z, r24
    8eda:	ce 01       	movw	r24, r28
    8edc:	87 54       	subi	r24, 0x47	; 71
    8ede:	9d 4f       	sbci	r25, 0xFD	; 253
    8ee0:	9e 01       	movw	r18, r28
    8ee2:	2b 54       	subi	r18, 0x4B	; 75
    8ee4:	3d 4f       	sbci	r19, 0xFD	; 253
    8ee6:	f9 01       	movw	r30, r18
    8ee8:	20 81       	ld	r18, Z
    8eea:	31 81       	ldd	r19, Z+1	; 0x01
    8eec:	fc 01       	movw	r30, r24
    8eee:	31 83       	std	Z+1, r19	; 0x01
    8ef0:	20 83       	st	Z, r18
    8ef2:	ce 01       	movw	r24, r28
    8ef4:	87 54       	subi	r24, 0x47	; 71
    8ef6:	9d 4f       	sbci	r25, 0xFD	; 253
    8ef8:	fc 01       	movw	r30, r24
    8efa:	80 81       	ld	r24, Z
    8efc:	91 81       	ldd	r25, Z+1	; 0x01
    8efe:	8c 01       	movw	r16, r24
    8f00:	c8 01       	movw	r24, r16
    8f02:	01 97       	sbiw	r24, 0x01	; 1
    8f04:	f1 f7       	brne	.-4      	; 0x8f02 <main+0x5bb2>
    8f06:	8c 01       	movw	r16, r24
    8f08:	ce 01       	movw	r24, r28
    8f0a:	87 54       	subi	r24, 0x47	; 71
    8f0c:	9d 4f       	sbci	r25, 0xFD	; 253
    8f0e:	fc 01       	movw	r30, r24
    8f10:	11 83       	std	Z+1, r17	; 0x01
    8f12:	00 83       	st	Z, r16
				_delay_ms(30);
				back_mm(10);
    8f14:	8a e0       	ldi	r24, 0x0A	; 10
    8f16:	90 e0       	ldi	r25, 0x00	; 0
    8f18:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    8f1c:	9e 01       	movw	r18, r28
    8f1e:	25 54       	subi	r18, 0x45	; 69
    8f20:	3d 4f       	sbci	r19, 0xFD	; 253
    8f22:	80 e0       	ldi	r24, 0x00	; 0
    8f24:	90 e0       	ldi	r25, 0x00	; 0
    8f26:	aa ef       	ldi	r26, 0xFA	; 250
    8f28:	b3 e4       	ldi	r27, 0x43	; 67
    8f2a:	f9 01       	movw	r30, r18
    8f2c:	80 83       	st	Z, r24
    8f2e:	91 83       	std	Z+1, r25	; 0x01
    8f30:	a2 83       	std	Z+2, r26	; 0x02
    8f32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8f34:	8e 01       	movw	r16, r28
    8f36:	01 54       	subi	r16, 0x41	; 65
    8f38:	1d 4f       	sbci	r17, 0xFD	; 253
    8f3a:	ce 01       	movw	r24, r28
    8f3c:	85 54       	subi	r24, 0x45	; 69
    8f3e:	9d 4f       	sbci	r25, 0xFD	; 253
    8f40:	fc 01       	movw	r30, r24
    8f42:	60 81       	ld	r22, Z
    8f44:	71 81       	ldd	r23, Z+1	; 0x01
    8f46:	82 81       	ldd	r24, Z+2	; 0x02
    8f48:	93 81       	ldd	r25, Z+3	; 0x03
    8f4a:	26 e6       	ldi	r18, 0x66	; 102
    8f4c:	36 e6       	ldi	r19, 0x66	; 102
    8f4e:	46 e6       	ldi	r20, 0x66	; 102
    8f50:	55 e4       	ldi	r21, 0x45	; 69
    8f52:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8f56:	dc 01       	movw	r26, r24
    8f58:	cb 01       	movw	r24, r22
    8f5a:	f8 01       	movw	r30, r16
    8f5c:	80 83       	st	Z, r24
    8f5e:	91 83       	std	Z+1, r25	; 0x01
    8f60:	a2 83       	std	Z+2, r26	; 0x02
    8f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8f64:	ce 01       	movw	r24, r28
    8f66:	81 54       	subi	r24, 0x41	; 65
    8f68:	9d 4f       	sbci	r25, 0xFD	; 253
    8f6a:	11 e0       	ldi	r17, 0x01	; 1
    8f6c:	fc 01       	movw	r30, r24
    8f6e:	60 81       	ld	r22, Z
    8f70:	71 81       	ldd	r23, Z+1	; 0x01
    8f72:	82 81       	ldd	r24, Z+2	; 0x02
    8f74:	93 81       	ldd	r25, Z+3	; 0x03
    8f76:	20 e0       	ldi	r18, 0x00	; 0
    8f78:	30 e0       	ldi	r19, 0x00	; 0
    8f7a:	40 e8       	ldi	r20, 0x80	; 128
    8f7c:	5f e3       	ldi	r21, 0x3F	; 63
    8f7e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    8f82:	88 23       	and	r24, r24
    8f84:	0c f0       	brlt	.+2      	; 0x8f88 <main+0x5c38>
    8f86:	10 e0       	ldi	r17, 0x00	; 0
    8f88:	11 23       	and	r17, r17
    8f8a:	49 f0       	breq	.+18     	; 0x8f9e <main+0x5c4e>
		__ticks = 1;
    8f8c:	ce 01       	movw	r24, r28
    8f8e:	8d 53       	subi	r24, 0x3D	; 61
    8f90:	9d 4f       	sbci	r25, 0xFD	; 253
    8f92:	21 e0       	ldi	r18, 0x01	; 1
    8f94:	30 e0       	ldi	r19, 0x00	; 0
    8f96:	fc 01       	movw	r30, r24
    8f98:	31 83       	std	Z+1, r19	; 0x01
    8f9a:	20 83       	st	Z, r18
    8f9c:	74 c0       	rjmp	.+232    	; 0x9086 <main+0x5d36>
	else if (__tmp > 65535)
    8f9e:	ce 01       	movw	r24, r28
    8fa0:	81 54       	subi	r24, 0x41	; 65
    8fa2:	9d 4f       	sbci	r25, 0xFD	; 253
    8fa4:	11 e0       	ldi	r17, 0x01	; 1
    8fa6:	fc 01       	movw	r30, r24
    8fa8:	60 81       	ld	r22, Z
    8faa:	71 81       	ldd	r23, Z+1	; 0x01
    8fac:	82 81       	ldd	r24, Z+2	; 0x02
    8fae:	93 81       	ldd	r25, Z+3	; 0x03
    8fb0:	20 e0       	ldi	r18, 0x00	; 0
    8fb2:	3f ef       	ldi	r19, 0xFF	; 255
    8fb4:	4f e7       	ldi	r20, 0x7F	; 127
    8fb6:	57 e4       	ldi	r21, 0x47	; 71
    8fb8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    8fbc:	18 16       	cp	r1, r24
    8fbe:	0c f0       	brlt	.+2      	; 0x8fc2 <main+0x5c72>
    8fc0:	10 e0       	ldi	r17, 0x00	; 0
    8fc2:	11 23       	and	r17, r17
    8fc4:	09 f4       	brne	.+2      	; 0x8fc8 <main+0x5c78>
    8fc6:	4d c0       	rjmp	.+154    	; 0x9062 <main+0x5d12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8fc8:	ce 01       	movw	r24, r28
    8fca:	85 54       	subi	r24, 0x45	; 69
    8fcc:	9d 4f       	sbci	r25, 0xFD	; 253
    8fce:	fc 01       	movw	r30, r24
    8fd0:	60 81       	ld	r22, Z
    8fd2:	71 81       	ldd	r23, Z+1	; 0x01
    8fd4:	82 81       	ldd	r24, Z+2	; 0x02
    8fd6:	93 81       	ldd	r25, Z+3	; 0x03
    8fd8:	20 e0       	ldi	r18, 0x00	; 0
    8fda:	30 e0       	ldi	r19, 0x00	; 0
    8fdc:	40 e2       	ldi	r20, 0x20	; 32
    8fde:	51 e4       	ldi	r21, 0x41	; 65
    8fe0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    8fe4:	dc 01       	movw	r26, r24
    8fe6:	cb 01       	movw	r24, r22
    8fe8:	8e 01       	movw	r16, r28
    8fea:	0d 53       	subi	r16, 0x3D	; 61
    8fec:	1d 4f       	sbci	r17, 0xFD	; 253
    8fee:	bc 01       	movw	r22, r24
    8ff0:	cd 01       	movw	r24, r26
    8ff2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    8ff6:	dc 01       	movw	r26, r24
    8ff8:	cb 01       	movw	r24, r22
    8ffa:	f8 01       	movw	r30, r16
    8ffc:	91 83       	std	Z+1, r25	; 0x01
    8ffe:	80 83       	st	Z, r24
    9000:	27 c0       	rjmp	.+78     	; 0x9050 <main+0x5d00>
    9002:	ce 01       	movw	r24, r28
    9004:	8b 53       	subi	r24, 0x3B	; 59
    9006:	9d 4f       	sbci	r25, 0xFD	; 253
    9008:	20 e7       	ldi	r18, 0x70	; 112
    900a:	31 e0       	ldi	r19, 0x01	; 1
    900c:	fc 01       	movw	r30, r24
    900e:	31 83       	std	Z+1, r19	; 0x01
    9010:	20 83       	st	Z, r18
    9012:	ce 01       	movw	r24, r28
    9014:	8b 53       	subi	r24, 0x3B	; 59
    9016:	9d 4f       	sbci	r25, 0xFD	; 253
    9018:	fc 01       	movw	r30, r24
    901a:	80 81       	ld	r24, Z
    901c:	91 81       	ldd	r25, Z+1	; 0x01
    901e:	8c 01       	movw	r16, r24
    9020:	c8 01       	movw	r24, r16
    9022:	01 97       	sbiw	r24, 0x01	; 1
    9024:	f1 f7       	brne	.-4      	; 0x9022 <main+0x5cd2>
    9026:	8c 01       	movw	r16, r24
    9028:	ce 01       	movw	r24, r28
    902a:	8b 53       	subi	r24, 0x3B	; 59
    902c:	9d 4f       	sbci	r25, 0xFD	; 253
    902e:	fc 01       	movw	r30, r24
    9030:	11 83       	std	Z+1, r17	; 0x01
    9032:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9034:	ce 01       	movw	r24, r28
    9036:	8d 53       	subi	r24, 0x3D	; 61
    9038:	9d 4f       	sbci	r25, 0xFD	; 253
    903a:	9e 01       	movw	r18, r28
    903c:	2d 53       	subi	r18, 0x3D	; 61
    903e:	3d 4f       	sbci	r19, 0xFD	; 253
    9040:	f9 01       	movw	r30, r18
    9042:	20 81       	ld	r18, Z
    9044:	31 81       	ldd	r19, Z+1	; 0x01
    9046:	21 50       	subi	r18, 0x01	; 1
    9048:	30 40       	sbci	r19, 0x00	; 0
    904a:	fc 01       	movw	r30, r24
    904c:	31 83       	std	Z+1, r19	; 0x01
    904e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9050:	ce 01       	movw	r24, r28
    9052:	8d 53       	subi	r24, 0x3D	; 61
    9054:	9d 4f       	sbci	r25, 0xFD	; 253
    9056:	fc 01       	movw	r30, r24
    9058:	80 81       	ld	r24, Z
    905a:	91 81       	ldd	r25, Z+1	; 0x01
    905c:	00 97       	sbiw	r24, 0x00	; 0
    905e:	89 f6       	brne	.-94     	; 0x9002 <main+0x5cb2>
    9060:	2f c0       	rjmp	.+94     	; 0x90c0 <main+0x5d70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9062:	8e 01       	movw	r16, r28
    9064:	0d 53       	subi	r16, 0x3D	; 61
    9066:	1d 4f       	sbci	r17, 0xFD	; 253
    9068:	ce 01       	movw	r24, r28
    906a:	81 54       	subi	r24, 0x41	; 65
    906c:	9d 4f       	sbci	r25, 0xFD	; 253
    906e:	fc 01       	movw	r30, r24
    9070:	60 81       	ld	r22, Z
    9072:	71 81       	ldd	r23, Z+1	; 0x01
    9074:	82 81       	ldd	r24, Z+2	; 0x02
    9076:	93 81       	ldd	r25, Z+3	; 0x03
    9078:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    907c:	dc 01       	movw	r26, r24
    907e:	cb 01       	movw	r24, r22
    9080:	f8 01       	movw	r30, r16
    9082:	91 83       	std	Z+1, r25	; 0x01
    9084:	80 83       	st	Z, r24
    9086:	ce 01       	movw	r24, r28
    9088:	89 53       	subi	r24, 0x39	; 57
    908a:	9d 4f       	sbci	r25, 0xFD	; 253
    908c:	9e 01       	movw	r18, r28
    908e:	2d 53       	subi	r18, 0x3D	; 61
    9090:	3d 4f       	sbci	r19, 0xFD	; 253
    9092:	f9 01       	movw	r30, r18
    9094:	20 81       	ld	r18, Z
    9096:	31 81       	ldd	r19, Z+1	; 0x01
    9098:	fc 01       	movw	r30, r24
    909a:	31 83       	std	Z+1, r19	; 0x01
    909c:	20 83       	st	Z, r18
    909e:	ce 01       	movw	r24, r28
    90a0:	89 53       	subi	r24, 0x39	; 57
    90a2:	9d 4f       	sbci	r25, 0xFD	; 253
    90a4:	fc 01       	movw	r30, r24
    90a6:	80 81       	ld	r24, Z
    90a8:	91 81       	ldd	r25, Z+1	; 0x01
    90aa:	8c 01       	movw	r16, r24
    90ac:	c8 01       	movw	r24, r16
    90ae:	01 97       	sbiw	r24, 0x01	; 1
    90b0:	f1 f7       	brne	.-4      	; 0x90ae <main+0x5d5e>
    90b2:	8c 01       	movw	r16, r24
    90b4:	ce 01       	movw	r24, r28
    90b6:	89 53       	subi	r24, 0x39	; 57
    90b8:	9d 4f       	sbci	r25, 0xFD	; 253
    90ba:	fc 01       	movw	r30, r24
    90bc:	11 83       	std	Z+1, r17	; 0x01
    90be:	00 83       	st	Z, r16
				_delay_ms(500);
				left_degrees(40);
    90c0:	88 e2       	ldi	r24, 0x28	; 40
    90c2:	90 e0       	ldi	r25, 0x00	; 0
    90c4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
				compass=5;
    90c8:	85 e0       	ldi	r24, 0x05	; 5
    90ca:	90 e0       	ldi	r25, 0x00	; 0
    90cc:	9c 83       	std	Y+4, r25	; 0x04
    90ce:	8b 83       	std	Y+3, r24	; 0x03
				break;
    90d0:	dc c5       	rjmp	.+3000   	; 0x9c8a <main+0x693a>
			}
			if(coor[0]<origin2[boxnumber][i][0] && coor[1]<origin2[boxnumber][i][1])
    90d2:	20 91 a6 04 	lds	r18, 0x04A6
    90d6:	30 91 a7 04 	lds	r19, 0x04A7
    90da:	ae 01       	movw	r20, r28
    90dc:	4d 5f       	subi	r20, 0xFD	; 253
    90de:	5a 4f       	sbci	r21, 0xFA	; 250
    90e0:	8d 81       	ldd	r24, Y+5	; 0x05
    90e2:	9e 81       	ldd	r25, Y+6	; 0x06
    90e4:	bc 01       	movw	r22, r24
    90e6:	66 0f       	add	r22, r22
    90e8:	77 1f       	adc	r23, r23
    90ea:	66 0f       	add	r22, r22
    90ec:	77 1f       	adc	r23, r23
    90ee:	8b a1       	lds	r24, 0x4b
    90f0:	9c a1       	lds	r25, 0x4c
    90f2:	86 0f       	add	r24, r22
    90f4:	97 1f       	adc	r25, r23
    90f6:	88 0f       	add	r24, r24
    90f8:	99 1f       	adc	r25, r25
    90fa:	88 0f       	add	r24, r24
    90fc:	99 1f       	adc	r25, r25
    90fe:	84 0f       	add	r24, r20
    9100:	95 1f       	adc	r25, r21
    9102:	fc 01       	movw	r30, r24
    9104:	80 81       	ld	r24, Z
    9106:	91 81       	ldd	r25, Z+1	; 0x01
    9108:	28 17       	cp	r18, r24
    910a:	39 07       	cpc	r19, r25
    910c:	0c f0       	brlt	.+2      	; 0x9110 <main+0x5dc0>
    910e:	ca c2       	rjmp	.+1428   	; 0x96a4 <main+0x6354>
    9110:	20 91 a8 04 	lds	r18, 0x04A8
    9114:	30 91 a9 04 	lds	r19, 0x04A9
    9118:	ae 01       	movw	r20, r28
    911a:	4d 5f       	subi	r20, 0xFD	; 253
    911c:	5a 4f       	sbci	r21, 0xFA	; 250
    911e:	8d 81       	ldd	r24, Y+5	; 0x05
    9120:	9e 81       	ldd	r25, Y+6	; 0x06
    9122:	bc 01       	movw	r22, r24
    9124:	66 0f       	add	r22, r22
    9126:	77 1f       	adc	r23, r23
    9128:	66 0f       	add	r22, r22
    912a:	77 1f       	adc	r23, r23
    912c:	8b a1       	lds	r24, 0x4b
    912e:	9c a1       	lds	r25, 0x4c
    9130:	86 0f       	add	r24, r22
    9132:	97 1f       	adc	r25, r23
    9134:	88 0f       	add	r24, r24
    9136:	99 1f       	adc	r25, r25
    9138:	88 0f       	add	r24, r24
    913a:	99 1f       	adc	r25, r25
    913c:	84 0f       	add	r24, r20
    913e:	95 1f       	adc	r25, r21
    9140:	02 96       	adiw	r24, 0x02	; 2
    9142:	fc 01       	movw	r30, r24
    9144:	80 81       	ld	r24, Z
    9146:	91 81       	ldd	r25, Z+1	; 0x01
    9148:	28 17       	cp	r18, r24
    914a:	39 07       	cpc	r19, r25
    914c:	0c f0       	brlt	.+2      	; 0x9150 <main+0x5e00>
    914e:	aa c2       	rjmp	.+1364   	; 0x96a4 <main+0x6354>
			{
				right_degrees(45);
    9150:	8d e2       	ldi	r24, 0x2D	; 45
    9152:	90 e0       	ldi	r25, 0x00	; 0
    9154:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
				back_mm(65);
    9158:	81 e4       	ldi	r24, 0x41	; 65
    915a:	90 e0       	ldi	r25, 0x00	; 0
    915c:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
				matrix2();
    9160:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
					if(summ1[recur+1]>10)
    9164:	8f 81       	ldd	r24, Y+7	; 0x07
    9166:	98 85       	ldd	r25, Y+8	; 0x08
    9168:	01 96       	adiw	r24, 0x01	; 1
    916a:	9e 01       	movw	r18, r28
    916c:	25 54       	subi	r18, 0x45	; 69
    916e:	39 4f       	sbci	r19, 0xF9	; 249
    9170:	88 0f       	add	r24, r24
    9172:	99 1f       	adc	r25, r25
    9174:	82 0f       	add	r24, r18
    9176:	93 1f       	adc	r25, r19
    9178:	fc 01       	movw	r30, r24
    917a:	80 81       	ld	r24, Z
    917c:	91 81       	ldd	r25, Z+1	; 0x01
    917e:	8b 30       	cpi	r24, 0x0B	; 11
    9180:	91 05       	cpc	r25, r1
    9182:	0c f4       	brge	.+2      	; 0x9186 <main+0x5e36>
    9184:	d6 c0       	rjmp	.+428    	; 0x9332 <main+0x5fe2>
					{
						buzzer_on();
    9186:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    918a:	9e 01       	movw	r18, r28
    918c:	27 53       	subi	r18, 0x37	; 55
    918e:	3d 4f       	sbci	r19, 0xFD	; 253
    9190:	80 e0       	ldi	r24, 0x00	; 0
    9192:	90 e0       	ldi	r25, 0x00	; 0
    9194:	aa e7       	ldi	r26, 0x7A	; 122
    9196:	b4 e4       	ldi	r27, 0x44	; 68
    9198:	f9 01       	movw	r30, r18
    919a:	80 83       	st	Z, r24
    919c:	91 83       	std	Z+1, r25	; 0x01
    919e:	a2 83       	std	Z+2, r26	; 0x02
    91a0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    91a2:	8e 01       	movw	r16, r28
    91a4:	03 53       	subi	r16, 0x33	; 51
    91a6:	1d 4f       	sbci	r17, 0xFD	; 253
    91a8:	ce 01       	movw	r24, r28
    91aa:	87 53       	subi	r24, 0x37	; 55
    91ac:	9d 4f       	sbci	r25, 0xFD	; 253
    91ae:	fc 01       	movw	r30, r24
    91b0:	60 81       	ld	r22, Z
    91b2:	71 81       	ldd	r23, Z+1	; 0x01
    91b4:	82 81       	ldd	r24, Z+2	; 0x02
    91b6:	93 81       	ldd	r25, Z+3	; 0x03
    91b8:	26 e6       	ldi	r18, 0x66	; 102
    91ba:	36 e6       	ldi	r19, 0x66	; 102
    91bc:	46 e6       	ldi	r20, 0x66	; 102
    91be:	55 e4       	ldi	r21, 0x45	; 69
    91c0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    91c4:	dc 01       	movw	r26, r24
    91c6:	cb 01       	movw	r24, r22
    91c8:	f8 01       	movw	r30, r16
    91ca:	80 83       	st	Z, r24
    91cc:	91 83       	std	Z+1, r25	; 0x01
    91ce:	a2 83       	std	Z+2, r26	; 0x02
    91d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    91d2:	ce 01       	movw	r24, r28
    91d4:	83 53       	subi	r24, 0x33	; 51
    91d6:	9d 4f       	sbci	r25, 0xFD	; 253
    91d8:	11 e0       	ldi	r17, 0x01	; 1
    91da:	fc 01       	movw	r30, r24
    91dc:	60 81       	ld	r22, Z
    91de:	71 81       	ldd	r23, Z+1	; 0x01
    91e0:	82 81       	ldd	r24, Z+2	; 0x02
    91e2:	93 81       	ldd	r25, Z+3	; 0x03
    91e4:	20 e0       	ldi	r18, 0x00	; 0
    91e6:	30 e0       	ldi	r19, 0x00	; 0
    91e8:	40 e8       	ldi	r20, 0x80	; 128
    91ea:	5f e3       	ldi	r21, 0x3F	; 63
    91ec:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    91f0:	88 23       	and	r24, r24
    91f2:	0c f0       	brlt	.+2      	; 0x91f6 <main+0x5ea6>
    91f4:	10 e0       	ldi	r17, 0x00	; 0
    91f6:	11 23       	and	r17, r17
    91f8:	49 f0       	breq	.+18     	; 0x920c <main+0x5ebc>
		__ticks = 1;
    91fa:	ce 01       	movw	r24, r28
    91fc:	8f 52       	subi	r24, 0x2F	; 47
    91fe:	9d 4f       	sbci	r25, 0xFD	; 253
    9200:	21 e0       	ldi	r18, 0x01	; 1
    9202:	30 e0       	ldi	r19, 0x00	; 0
    9204:	fc 01       	movw	r30, r24
    9206:	31 83       	std	Z+1, r19	; 0x01
    9208:	20 83       	st	Z, r18
    920a:	74 c0       	rjmp	.+232    	; 0x92f4 <main+0x5fa4>
	else if (__tmp > 65535)
    920c:	ce 01       	movw	r24, r28
    920e:	83 53       	subi	r24, 0x33	; 51
    9210:	9d 4f       	sbci	r25, 0xFD	; 253
    9212:	11 e0       	ldi	r17, 0x01	; 1
    9214:	fc 01       	movw	r30, r24
    9216:	60 81       	ld	r22, Z
    9218:	71 81       	ldd	r23, Z+1	; 0x01
    921a:	82 81       	ldd	r24, Z+2	; 0x02
    921c:	93 81       	ldd	r25, Z+3	; 0x03
    921e:	20 e0       	ldi	r18, 0x00	; 0
    9220:	3f ef       	ldi	r19, 0xFF	; 255
    9222:	4f e7       	ldi	r20, 0x7F	; 127
    9224:	57 e4       	ldi	r21, 0x47	; 71
    9226:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    922a:	18 16       	cp	r1, r24
    922c:	0c f0       	brlt	.+2      	; 0x9230 <main+0x5ee0>
    922e:	10 e0       	ldi	r17, 0x00	; 0
    9230:	11 23       	and	r17, r17
    9232:	09 f4       	brne	.+2      	; 0x9236 <main+0x5ee6>
    9234:	4d c0       	rjmp	.+154    	; 0x92d0 <main+0x5f80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9236:	ce 01       	movw	r24, r28
    9238:	87 53       	subi	r24, 0x37	; 55
    923a:	9d 4f       	sbci	r25, 0xFD	; 253
    923c:	fc 01       	movw	r30, r24
    923e:	60 81       	ld	r22, Z
    9240:	71 81       	ldd	r23, Z+1	; 0x01
    9242:	82 81       	ldd	r24, Z+2	; 0x02
    9244:	93 81       	ldd	r25, Z+3	; 0x03
    9246:	20 e0       	ldi	r18, 0x00	; 0
    9248:	30 e0       	ldi	r19, 0x00	; 0
    924a:	40 e2       	ldi	r20, 0x20	; 32
    924c:	51 e4       	ldi	r21, 0x41	; 65
    924e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9252:	dc 01       	movw	r26, r24
    9254:	cb 01       	movw	r24, r22
    9256:	8e 01       	movw	r16, r28
    9258:	0f 52       	subi	r16, 0x2F	; 47
    925a:	1d 4f       	sbci	r17, 0xFD	; 253
    925c:	bc 01       	movw	r22, r24
    925e:	cd 01       	movw	r24, r26
    9260:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9264:	dc 01       	movw	r26, r24
    9266:	cb 01       	movw	r24, r22
    9268:	f8 01       	movw	r30, r16
    926a:	91 83       	std	Z+1, r25	; 0x01
    926c:	80 83       	st	Z, r24
    926e:	27 c0       	rjmp	.+78     	; 0x92be <main+0x5f6e>
    9270:	ce 01       	movw	r24, r28
    9272:	8d 52       	subi	r24, 0x2D	; 45
    9274:	9d 4f       	sbci	r25, 0xFD	; 253
    9276:	20 e7       	ldi	r18, 0x70	; 112
    9278:	31 e0       	ldi	r19, 0x01	; 1
    927a:	fc 01       	movw	r30, r24
    927c:	31 83       	std	Z+1, r19	; 0x01
    927e:	20 83       	st	Z, r18
    9280:	ce 01       	movw	r24, r28
    9282:	8d 52       	subi	r24, 0x2D	; 45
    9284:	9d 4f       	sbci	r25, 0xFD	; 253
    9286:	fc 01       	movw	r30, r24
    9288:	80 81       	ld	r24, Z
    928a:	91 81       	ldd	r25, Z+1	; 0x01
    928c:	8c 01       	movw	r16, r24
    928e:	c8 01       	movw	r24, r16
    9290:	01 97       	sbiw	r24, 0x01	; 1
    9292:	f1 f7       	brne	.-4      	; 0x9290 <main+0x5f40>
    9294:	8c 01       	movw	r16, r24
    9296:	ce 01       	movw	r24, r28
    9298:	8d 52       	subi	r24, 0x2D	; 45
    929a:	9d 4f       	sbci	r25, 0xFD	; 253
    929c:	fc 01       	movw	r30, r24
    929e:	11 83       	std	Z+1, r17	; 0x01
    92a0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    92a2:	ce 01       	movw	r24, r28
    92a4:	8f 52       	subi	r24, 0x2F	; 47
    92a6:	9d 4f       	sbci	r25, 0xFD	; 253
    92a8:	9e 01       	movw	r18, r28
    92aa:	2f 52       	subi	r18, 0x2F	; 47
    92ac:	3d 4f       	sbci	r19, 0xFD	; 253
    92ae:	f9 01       	movw	r30, r18
    92b0:	20 81       	ld	r18, Z
    92b2:	31 81       	ldd	r19, Z+1	; 0x01
    92b4:	21 50       	subi	r18, 0x01	; 1
    92b6:	30 40       	sbci	r19, 0x00	; 0
    92b8:	fc 01       	movw	r30, r24
    92ba:	31 83       	std	Z+1, r19	; 0x01
    92bc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    92be:	ce 01       	movw	r24, r28
    92c0:	8f 52       	subi	r24, 0x2F	; 47
    92c2:	9d 4f       	sbci	r25, 0xFD	; 253
    92c4:	fc 01       	movw	r30, r24
    92c6:	80 81       	ld	r24, Z
    92c8:	91 81       	ldd	r25, Z+1	; 0x01
    92ca:	00 97       	sbiw	r24, 0x00	; 0
    92cc:	89 f6       	brne	.-94     	; 0x9270 <main+0x5f20>
    92ce:	2f c0       	rjmp	.+94     	; 0x932e <main+0x5fde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    92d0:	8e 01       	movw	r16, r28
    92d2:	0f 52       	subi	r16, 0x2F	; 47
    92d4:	1d 4f       	sbci	r17, 0xFD	; 253
    92d6:	ce 01       	movw	r24, r28
    92d8:	83 53       	subi	r24, 0x33	; 51
    92da:	9d 4f       	sbci	r25, 0xFD	; 253
    92dc:	fc 01       	movw	r30, r24
    92de:	60 81       	ld	r22, Z
    92e0:	71 81       	ldd	r23, Z+1	; 0x01
    92e2:	82 81       	ldd	r24, Z+2	; 0x02
    92e4:	93 81       	ldd	r25, Z+3	; 0x03
    92e6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    92ea:	dc 01       	movw	r26, r24
    92ec:	cb 01       	movw	r24, r22
    92ee:	f8 01       	movw	r30, r16
    92f0:	91 83       	std	Z+1, r25	; 0x01
    92f2:	80 83       	st	Z, r24
    92f4:	ce 01       	movw	r24, r28
    92f6:	8b 52       	subi	r24, 0x2B	; 43
    92f8:	9d 4f       	sbci	r25, 0xFD	; 253
    92fa:	9e 01       	movw	r18, r28
    92fc:	2f 52       	subi	r18, 0x2F	; 47
    92fe:	3d 4f       	sbci	r19, 0xFD	; 253
    9300:	f9 01       	movw	r30, r18
    9302:	20 81       	ld	r18, Z
    9304:	31 81       	ldd	r19, Z+1	; 0x01
    9306:	fc 01       	movw	r30, r24
    9308:	31 83       	std	Z+1, r19	; 0x01
    930a:	20 83       	st	Z, r18
    930c:	ce 01       	movw	r24, r28
    930e:	8b 52       	subi	r24, 0x2B	; 43
    9310:	9d 4f       	sbci	r25, 0xFD	; 253
    9312:	fc 01       	movw	r30, r24
    9314:	80 81       	ld	r24, Z
    9316:	91 81       	ldd	r25, Z+1	; 0x01
    9318:	8c 01       	movw	r16, r24
    931a:	c8 01       	movw	r24, r16
    931c:	01 97       	sbiw	r24, 0x01	; 1
    931e:	f1 f7       	brne	.-4      	; 0x931c <main+0x5fcc>
    9320:	8c 01       	movw	r16, r24
    9322:	ce 01       	movw	r24, r28
    9324:	8b 52       	subi	r24, 0x2B	; 43
    9326:	9d 4f       	sbci	r25, 0xFD	; 253
    9328:	fc 01       	movw	r30, r24
    932a:	11 83       	std	Z+1, r17	; 0x01
    932c:	00 83       	st	Z, r16
						_delay_ms(1000);
						buzzer_off();
    932e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
					}
				forward_mm(75);
    9332:	8b e4       	ldi	r24, 0x4B	; 75
    9334:	90 e0       	ldi	r25, 0x00	; 0
    9336:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    933a:	9e 01       	movw	r18, r28
    933c:	29 52       	subi	r18, 0x29	; 41
    933e:	3d 4f       	sbci	r19, 0xFD	; 253
    9340:	80 e0       	ldi	r24, 0x00	; 0
    9342:	90 e0       	ldi	r25, 0x00	; 0
    9344:	a0 ef       	ldi	r26, 0xF0	; 240
    9346:	b1 e4       	ldi	r27, 0x41	; 65
    9348:	f9 01       	movw	r30, r18
    934a:	80 83       	st	Z, r24
    934c:	91 83       	std	Z+1, r25	; 0x01
    934e:	a2 83       	std	Z+2, r26	; 0x02
    9350:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9352:	8e 01       	movw	r16, r28
    9354:	05 52       	subi	r16, 0x25	; 37
    9356:	1d 4f       	sbci	r17, 0xFD	; 253
    9358:	ce 01       	movw	r24, r28
    935a:	89 52       	subi	r24, 0x29	; 41
    935c:	9d 4f       	sbci	r25, 0xFD	; 253
    935e:	fc 01       	movw	r30, r24
    9360:	60 81       	ld	r22, Z
    9362:	71 81       	ldd	r23, Z+1	; 0x01
    9364:	82 81       	ldd	r24, Z+2	; 0x02
    9366:	93 81       	ldd	r25, Z+3	; 0x03
    9368:	26 e6       	ldi	r18, 0x66	; 102
    936a:	36 e6       	ldi	r19, 0x66	; 102
    936c:	46 e6       	ldi	r20, 0x66	; 102
    936e:	55 e4       	ldi	r21, 0x45	; 69
    9370:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9374:	dc 01       	movw	r26, r24
    9376:	cb 01       	movw	r24, r22
    9378:	f8 01       	movw	r30, r16
    937a:	80 83       	st	Z, r24
    937c:	91 83       	std	Z+1, r25	; 0x01
    937e:	a2 83       	std	Z+2, r26	; 0x02
    9380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9382:	ce 01       	movw	r24, r28
    9384:	85 52       	subi	r24, 0x25	; 37
    9386:	9d 4f       	sbci	r25, 0xFD	; 253
    9388:	11 e0       	ldi	r17, 0x01	; 1
    938a:	fc 01       	movw	r30, r24
    938c:	60 81       	ld	r22, Z
    938e:	71 81       	ldd	r23, Z+1	; 0x01
    9390:	82 81       	ldd	r24, Z+2	; 0x02
    9392:	93 81       	ldd	r25, Z+3	; 0x03
    9394:	20 e0       	ldi	r18, 0x00	; 0
    9396:	30 e0       	ldi	r19, 0x00	; 0
    9398:	40 e8       	ldi	r20, 0x80	; 128
    939a:	5f e3       	ldi	r21, 0x3F	; 63
    939c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    93a0:	88 23       	and	r24, r24
    93a2:	0c f0       	brlt	.+2      	; 0x93a6 <main+0x6056>
    93a4:	10 e0       	ldi	r17, 0x00	; 0
    93a6:	11 23       	and	r17, r17
    93a8:	49 f0       	breq	.+18     	; 0x93bc <main+0x606c>
		__ticks = 1;
    93aa:	ce 01       	movw	r24, r28
    93ac:	81 52       	subi	r24, 0x21	; 33
    93ae:	9d 4f       	sbci	r25, 0xFD	; 253
    93b0:	21 e0       	ldi	r18, 0x01	; 1
    93b2:	30 e0       	ldi	r19, 0x00	; 0
    93b4:	fc 01       	movw	r30, r24
    93b6:	31 83       	std	Z+1, r19	; 0x01
    93b8:	20 83       	st	Z, r18
    93ba:	74 c0       	rjmp	.+232    	; 0x94a4 <main+0x6154>
	else if (__tmp > 65535)
    93bc:	ce 01       	movw	r24, r28
    93be:	85 52       	subi	r24, 0x25	; 37
    93c0:	9d 4f       	sbci	r25, 0xFD	; 253
    93c2:	11 e0       	ldi	r17, 0x01	; 1
    93c4:	fc 01       	movw	r30, r24
    93c6:	60 81       	ld	r22, Z
    93c8:	71 81       	ldd	r23, Z+1	; 0x01
    93ca:	82 81       	ldd	r24, Z+2	; 0x02
    93cc:	93 81       	ldd	r25, Z+3	; 0x03
    93ce:	20 e0       	ldi	r18, 0x00	; 0
    93d0:	3f ef       	ldi	r19, 0xFF	; 255
    93d2:	4f e7       	ldi	r20, 0x7F	; 127
    93d4:	57 e4       	ldi	r21, 0x47	; 71
    93d6:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    93da:	18 16       	cp	r1, r24
    93dc:	0c f0       	brlt	.+2      	; 0x93e0 <main+0x6090>
    93de:	10 e0       	ldi	r17, 0x00	; 0
    93e0:	11 23       	and	r17, r17
    93e2:	09 f4       	brne	.+2      	; 0x93e6 <main+0x6096>
    93e4:	4d c0       	rjmp	.+154    	; 0x9480 <main+0x6130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    93e6:	ce 01       	movw	r24, r28
    93e8:	89 52       	subi	r24, 0x29	; 41
    93ea:	9d 4f       	sbci	r25, 0xFD	; 253
    93ec:	fc 01       	movw	r30, r24
    93ee:	60 81       	ld	r22, Z
    93f0:	71 81       	ldd	r23, Z+1	; 0x01
    93f2:	82 81       	ldd	r24, Z+2	; 0x02
    93f4:	93 81       	ldd	r25, Z+3	; 0x03
    93f6:	20 e0       	ldi	r18, 0x00	; 0
    93f8:	30 e0       	ldi	r19, 0x00	; 0
    93fa:	40 e2       	ldi	r20, 0x20	; 32
    93fc:	51 e4       	ldi	r21, 0x41	; 65
    93fe:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9402:	dc 01       	movw	r26, r24
    9404:	cb 01       	movw	r24, r22
    9406:	8e 01       	movw	r16, r28
    9408:	01 52       	subi	r16, 0x21	; 33
    940a:	1d 4f       	sbci	r17, 0xFD	; 253
    940c:	bc 01       	movw	r22, r24
    940e:	cd 01       	movw	r24, r26
    9410:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9414:	dc 01       	movw	r26, r24
    9416:	cb 01       	movw	r24, r22
    9418:	f8 01       	movw	r30, r16
    941a:	91 83       	std	Z+1, r25	; 0x01
    941c:	80 83       	st	Z, r24
    941e:	27 c0       	rjmp	.+78     	; 0x946e <main+0x611e>
    9420:	ce 01       	movw	r24, r28
    9422:	8f 51       	subi	r24, 0x1F	; 31
    9424:	9d 4f       	sbci	r25, 0xFD	; 253
    9426:	20 e7       	ldi	r18, 0x70	; 112
    9428:	31 e0       	ldi	r19, 0x01	; 1
    942a:	fc 01       	movw	r30, r24
    942c:	31 83       	std	Z+1, r19	; 0x01
    942e:	20 83       	st	Z, r18
    9430:	ce 01       	movw	r24, r28
    9432:	8f 51       	subi	r24, 0x1F	; 31
    9434:	9d 4f       	sbci	r25, 0xFD	; 253
    9436:	fc 01       	movw	r30, r24
    9438:	80 81       	ld	r24, Z
    943a:	91 81       	ldd	r25, Z+1	; 0x01
    943c:	8c 01       	movw	r16, r24
    943e:	c8 01       	movw	r24, r16
    9440:	01 97       	sbiw	r24, 0x01	; 1
    9442:	f1 f7       	brne	.-4      	; 0x9440 <main+0x60f0>
    9444:	8c 01       	movw	r16, r24
    9446:	ce 01       	movw	r24, r28
    9448:	8f 51       	subi	r24, 0x1F	; 31
    944a:	9d 4f       	sbci	r25, 0xFD	; 253
    944c:	fc 01       	movw	r30, r24
    944e:	11 83       	std	Z+1, r17	; 0x01
    9450:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9452:	ce 01       	movw	r24, r28
    9454:	81 52       	subi	r24, 0x21	; 33
    9456:	9d 4f       	sbci	r25, 0xFD	; 253
    9458:	9e 01       	movw	r18, r28
    945a:	21 52       	subi	r18, 0x21	; 33
    945c:	3d 4f       	sbci	r19, 0xFD	; 253
    945e:	f9 01       	movw	r30, r18
    9460:	20 81       	ld	r18, Z
    9462:	31 81       	ldd	r19, Z+1	; 0x01
    9464:	21 50       	subi	r18, 0x01	; 1
    9466:	30 40       	sbci	r19, 0x00	; 0
    9468:	fc 01       	movw	r30, r24
    946a:	31 83       	std	Z+1, r19	; 0x01
    946c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    946e:	ce 01       	movw	r24, r28
    9470:	81 52       	subi	r24, 0x21	; 33
    9472:	9d 4f       	sbci	r25, 0xFD	; 253
    9474:	fc 01       	movw	r30, r24
    9476:	80 81       	ld	r24, Z
    9478:	91 81       	ldd	r25, Z+1	; 0x01
    947a:	00 97       	sbiw	r24, 0x00	; 0
    947c:	89 f6       	brne	.-94     	; 0x9420 <main+0x60d0>
    947e:	2f c0       	rjmp	.+94     	; 0x94de <main+0x618e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9480:	8e 01       	movw	r16, r28
    9482:	01 52       	subi	r16, 0x21	; 33
    9484:	1d 4f       	sbci	r17, 0xFD	; 253
    9486:	ce 01       	movw	r24, r28
    9488:	85 52       	subi	r24, 0x25	; 37
    948a:	9d 4f       	sbci	r25, 0xFD	; 253
    948c:	fc 01       	movw	r30, r24
    948e:	60 81       	ld	r22, Z
    9490:	71 81       	ldd	r23, Z+1	; 0x01
    9492:	82 81       	ldd	r24, Z+2	; 0x02
    9494:	93 81       	ldd	r25, Z+3	; 0x03
    9496:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    949a:	dc 01       	movw	r26, r24
    949c:	cb 01       	movw	r24, r22
    949e:	f8 01       	movw	r30, r16
    94a0:	91 83       	std	Z+1, r25	; 0x01
    94a2:	80 83       	st	Z, r24
    94a4:	ce 01       	movw	r24, r28
    94a6:	8d 51       	subi	r24, 0x1D	; 29
    94a8:	9d 4f       	sbci	r25, 0xFD	; 253
    94aa:	9e 01       	movw	r18, r28
    94ac:	21 52       	subi	r18, 0x21	; 33
    94ae:	3d 4f       	sbci	r19, 0xFD	; 253
    94b0:	f9 01       	movw	r30, r18
    94b2:	20 81       	ld	r18, Z
    94b4:	31 81       	ldd	r19, Z+1	; 0x01
    94b6:	fc 01       	movw	r30, r24
    94b8:	31 83       	std	Z+1, r19	; 0x01
    94ba:	20 83       	st	Z, r18
    94bc:	ce 01       	movw	r24, r28
    94be:	8d 51       	subi	r24, 0x1D	; 29
    94c0:	9d 4f       	sbci	r25, 0xFD	; 253
    94c2:	fc 01       	movw	r30, r24
    94c4:	80 81       	ld	r24, Z
    94c6:	91 81       	ldd	r25, Z+1	; 0x01
    94c8:	8c 01       	movw	r16, r24
    94ca:	c8 01       	movw	r24, r16
    94cc:	01 97       	sbiw	r24, 0x01	; 1
    94ce:	f1 f7       	brne	.-4      	; 0x94cc <main+0x617c>
    94d0:	8c 01       	movw	r16, r24
    94d2:	ce 01       	movw	r24, r28
    94d4:	8d 51       	subi	r24, 0x1D	; 29
    94d6:	9d 4f       	sbci	r25, 0xFD	; 253
    94d8:	fc 01       	movw	r30, r24
    94da:	11 83       	std	Z+1, r17	; 0x01
    94dc:	00 83       	st	Z, r16
				_delay_ms(30);
				back_mm(10);
    94de:	8a e0       	ldi	r24, 0x0A	; 10
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    94e6:	9e 01       	movw	r18, r28
    94e8:	2b 51       	subi	r18, 0x1B	; 27
    94ea:	3d 4f       	sbci	r19, 0xFD	; 253
    94ec:	80 e0       	ldi	r24, 0x00	; 0
    94ee:	90 e0       	ldi	r25, 0x00	; 0
    94f0:	aa ef       	ldi	r26, 0xFA	; 250
    94f2:	b3 e4       	ldi	r27, 0x43	; 67
    94f4:	f9 01       	movw	r30, r18
    94f6:	80 83       	st	Z, r24
    94f8:	91 83       	std	Z+1, r25	; 0x01
    94fa:	a2 83       	std	Z+2, r26	; 0x02
    94fc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    94fe:	8e 01       	movw	r16, r28
    9500:	07 51       	subi	r16, 0x17	; 23
    9502:	1d 4f       	sbci	r17, 0xFD	; 253
    9504:	ce 01       	movw	r24, r28
    9506:	8b 51       	subi	r24, 0x1B	; 27
    9508:	9d 4f       	sbci	r25, 0xFD	; 253
    950a:	fc 01       	movw	r30, r24
    950c:	60 81       	ld	r22, Z
    950e:	71 81       	ldd	r23, Z+1	; 0x01
    9510:	82 81       	ldd	r24, Z+2	; 0x02
    9512:	93 81       	ldd	r25, Z+3	; 0x03
    9514:	26 e6       	ldi	r18, 0x66	; 102
    9516:	36 e6       	ldi	r19, 0x66	; 102
    9518:	46 e6       	ldi	r20, 0x66	; 102
    951a:	55 e4       	ldi	r21, 0x45	; 69
    951c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9520:	dc 01       	movw	r26, r24
    9522:	cb 01       	movw	r24, r22
    9524:	f8 01       	movw	r30, r16
    9526:	80 83       	st	Z, r24
    9528:	91 83       	std	Z+1, r25	; 0x01
    952a:	a2 83       	std	Z+2, r26	; 0x02
    952c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    952e:	ce 01       	movw	r24, r28
    9530:	87 51       	subi	r24, 0x17	; 23
    9532:	9d 4f       	sbci	r25, 0xFD	; 253
    9534:	11 e0       	ldi	r17, 0x01	; 1
    9536:	fc 01       	movw	r30, r24
    9538:	60 81       	ld	r22, Z
    953a:	71 81       	ldd	r23, Z+1	; 0x01
    953c:	82 81       	ldd	r24, Z+2	; 0x02
    953e:	93 81       	ldd	r25, Z+3	; 0x03
    9540:	20 e0       	ldi	r18, 0x00	; 0
    9542:	30 e0       	ldi	r19, 0x00	; 0
    9544:	40 e8       	ldi	r20, 0x80	; 128
    9546:	5f e3       	ldi	r21, 0x3F	; 63
    9548:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    954c:	88 23       	and	r24, r24
    954e:	0c f0       	brlt	.+2      	; 0x9552 <main+0x6202>
    9550:	10 e0       	ldi	r17, 0x00	; 0
    9552:	11 23       	and	r17, r17
    9554:	49 f0       	breq	.+18     	; 0x9568 <main+0x6218>
		__ticks = 1;
    9556:	ce 01       	movw	r24, r28
    9558:	83 51       	subi	r24, 0x13	; 19
    955a:	9d 4f       	sbci	r25, 0xFD	; 253
    955c:	21 e0       	ldi	r18, 0x01	; 1
    955e:	30 e0       	ldi	r19, 0x00	; 0
    9560:	fc 01       	movw	r30, r24
    9562:	31 83       	std	Z+1, r19	; 0x01
    9564:	20 83       	st	Z, r18
    9566:	74 c0       	rjmp	.+232    	; 0x9650 <main+0x6300>
	else if (__tmp > 65535)
    9568:	ce 01       	movw	r24, r28
    956a:	87 51       	subi	r24, 0x17	; 23
    956c:	9d 4f       	sbci	r25, 0xFD	; 253
    956e:	11 e0       	ldi	r17, 0x01	; 1
    9570:	fc 01       	movw	r30, r24
    9572:	60 81       	ld	r22, Z
    9574:	71 81       	ldd	r23, Z+1	; 0x01
    9576:	82 81       	ldd	r24, Z+2	; 0x02
    9578:	93 81       	ldd	r25, Z+3	; 0x03
    957a:	20 e0       	ldi	r18, 0x00	; 0
    957c:	3f ef       	ldi	r19, 0xFF	; 255
    957e:	4f e7       	ldi	r20, 0x7F	; 127
    9580:	57 e4       	ldi	r21, 0x47	; 71
    9582:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    9586:	18 16       	cp	r1, r24
    9588:	0c f0       	brlt	.+2      	; 0x958c <main+0x623c>
    958a:	10 e0       	ldi	r17, 0x00	; 0
    958c:	11 23       	and	r17, r17
    958e:	09 f4       	brne	.+2      	; 0x9592 <main+0x6242>
    9590:	4d c0       	rjmp	.+154    	; 0x962c <main+0x62dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9592:	ce 01       	movw	r24, r28
    9594:	8b 51       	subi	r24, 0x1B	; 27
    9596:	9d 4f       	sbci	r25, 0xFD	; 253
    9598:	fc 01       	movw	r30, r24
    959a:	60 81       	ld	r22, Z
    959c:	71 81       	ldd	r23, Z+1	; 0x01
    959e:	82 81       	ldd	r24, Z+2	; 0x02
    95a0:	93 81       	ldd	r25, Z+3	; 0x03
    95a2:	20 e0       	ldi	r18, 0x00	; 0
    95a4:	30 e0       	ldi	r19, 0x00	; 0
    95a6:	40 e2       	ldi	r20, 0x20	; 32
    95a8:	51 e4       	ldi	r21, 0x41	; 65
    95aa:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    95ae:	dc 01       	movw	r26, r24
    95b0:	cb 01       	movw	r24, r22
    95b2:	8e 01       	movw	r16, r28
    95b4:	03 51       	subi	r16, 0x13	; 19
    95b6:	1d 4f       	sbci	r17, 0xFD	; 253
    95b8:	bc 01       	movw	r22, r24
    95ba:	cd 01       	movw	r24, r26
    95bc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    95c0:	dc 01       	movw	r26, r24
    95c2:	cb 01       	movw	r24, r22
    95c4:	f8 01       	movw	r30, r16
    95c6:	91 83       	std	Z+1, r25	; 0x01
    95c8:	80 83       	st	Z, r24
    95ca:	27 c0       	rjmp	.+78     	; 0x961a <main+0x62ca>
    95cc:	ce 01       	movw	r24, r28
    95ce:	81 51       	subi	r24, 0x11	; 17
    95d0:	9d 4f       	sbci	r25, 0xFD	; 253
    95d2:	20 e7       	ldi	r18, 0x70	; 112
    95d4:	31 e0       	ldi	r19, 0x01	; 1
    95d6:	fc 01       	movw	r30, r24
    95d8:	31 83       	std	Z+1, r19	; 0x01
    95da:	20 83       	st	Z, r18
    95dc:	ce 01       	movw	r24, r28
    95de:	81 51       	subi	r24, 0x11	; 17
    95e0:	9d 4f       	sbci	r25, 0xFD	; 253
    95e2:	fc 01       	movw	r30, r24
    95e4:	80 81       	ld	r24, Z
    95e6:	91 81       	ldd	r25, Z+1	; 0x01
    95e8:	8c 01       	movw	r16, r24
    95ea:	c8 01       	movw	r24, r16
    95ec:	01 97       	sbiw	r24, 0x01	; 1
    95ee:	f1 f7       	brne	.-4      	; 0x95ec <main+0x629c>
    95f0:	8c 01       	movw	r16, r24
    95f2:	ce 01       	movw	r24, r28
    95f4:	81 51       	subi	r24, 0x11	; 17
    95f6:	9d 4f       	sbci	r25, 0xFD	; 253
    95f8:	fc 01       	movw	r30, r24
    95fa:	11 83       	std	Z+1, r17	; 0x01
    95fc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    95fe:	ce 01       	movw	r24, r28
    9600:	83 51       	subi	r24, 0x13	; 19
    9602:	9d 4f       	sbci	r25, 0xFD	; 253
    9604:	9e 01       	movw	r18, r28
    9606:	23 51       	subi	r18, 0x13	; 19
    9608:	3d 4f       	sbci	r19, 0xFD	; 253
    960a:	f9 01       	movw	r30, r18
    960c:	20 81       	ld	r18, Z
    960e:	31 81       	ldd	r19, Z+1	; 0x01
    9610:	21 50       	subi	r18, 0x01	; 1
    9612:	30 40       	sbci	r19, 0x00	; 0
    9614:	fc 01       	movw	r30, r24
    9616:	31 83       	std	Z+1, r19	; 0x01
    9618:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    961a:	ce 01       	movw	r24, r28
    961c:	83 51       	subi	r24, 0x13	; 19
    961e:	9d 4f       	sbci	r25, 0xFD	; 253
    9620:	fc 01       	movw	r30, r24
    9622:	80 81       	ld	r24, Z
    9624:	91 81       	ldd	r25, Z+1	; 0x01
    9626:	00 97       	sbiw	r24, 0x00	; 0
    9628:	89 f6       	brne	.-94     	; 0x95cc <main+0x627c>
    962a:	2f c0       	rjmp	.+94     	; 0x968a <main+0x633a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    962c:	8e 01       	movw	r16, r28
    962e:	03 51       	subi	r16, 0x13	; 19
    9630:	1d 4f       	sbci	r17, 0xFD	; 253
    9632:	ce 01       	movw	r24, r28
    9634:	87 51       	subi	r24, 0x17	; 23
    9636:	9d 4f       	sbci	r25, 0xFD	; 253
    9638:	fc 01       	movw	r30, r24
    963a:	60 81       	ld	r22, Z
    963c:	71 81       	ldd	r23, Z+1	; 0x01
    963e:	82 81       	ldd	r24, Z+2	; 0x02
    9640:	93 81       	ldd	r25, Z+3	; 0x03
    9642:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9646:	dc 01       	movw	r26, r24
    9648:	cb 01       	movw	r24, r22
    964a:	f8 01       	movw	r30, r16
    964c:	91 83       	std	Z+1, r25	; 0x01
    964e:	80 83       	st	Z, r24
    9650:	ce 01       	movw	r24, r28
    9652:	8f 50       	subi	r24, 0x0F	; 15
    9654:	9d 4f       	sbci	r25, 0xFD	; 253
    9656:	9e 01       	movw	r18, r28
    9658:	23 51       	subi	r18, 0x13	; 19
    965a:	3d 4f       	sbci	r19, 0xFD	; 253
    965c:	f9 01       	movw	r30, r18
    965e:	20 81       	ld	r18, Z
    9660:	31 81       	ldd	r19, Z+1	; 0x01
    9662:	fc 01       	movw	r30, r24
    9664:	31 83       	std	Z+1, r19	; 0x01
    9666:	20 83       	st	Z, r18
    9668:	ce 01       	movw	r24, r28
    966a:	8f 50       	subi	r24, 0x0F	; 15
    966c:	9d 4f       	sbci	r25, 0xFD	; 253
    966e:	fc 01       	movw	r30, r24
    9670:	80 81       	ld	r24, Z
    9672:	91 81       	ldd	r25, Z+1	; 0x01
    9674:	8c 01       	movw	r16, r24
    9676:	c8 01       	movw	r24, r16
    9678:	01 97       	sbiw	r24, 0x01	; 1
    967a:	f1 f7       	brne	.-4      	; 0x9678 <main+0x6328>
    967c:	8c 01       	movw	r16, r24
    967e:	ce 01       	movw	r24, r28
    9680:	8f 50       	subi	r24, 0x0F	; 15
    9682:	9d 4f       	sbci	r25, 0xFD	; 253
    9684:	fc 01       	movw	r30, r24
    9686:	11 83       	std	Z+1, r17	; 0x01
    9688:	00 83       	st	Z, r16
				_delay_ms(500);
				left_degrees(45);
    968a:	8d e2       	ldi	r24, 0x2D	; 45
    968c:	90 e0       	ldi	r25, 0x00	; 0
    968e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
				right_degrees(180);
    9692:	84 eb       	ldi	r24, 0xB4	; 180
    9694:	90 e0       	ldi	r25, 0x00	; 0
    9696:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
				compass=5;
    969a:	85 e0       	ldi	r24, 0x05	; 5
    969c:	90 e0       	ldi	r25, 0x00	; 0
    969e:	9c 83       	std	Y+4, r25	; 0x04
    96a0:	8b 83       	std	Y+3, r24	; 0x03
				break;
    96a2:	f3 c2       	rjmp	.+1510   	; 0x9c8a <main+0x693a>
			}
			if(coor[0]<origin2[boxnumber][i][0] && coor[1]>origin2[boxnumber][i][1])
    96a4:	20 91 a6 04 	lds	r18, 0x04A6
    96a8:	30 91 a7 04 	lds	r19, 0x04A7
    96ac:	ae 01       	movw	r20, r28
    96ae:	4d 5f       	subi	r20, 0xFD	; 253
    96b0:	5a 4f       	sbci	r21, 0xFA	; 250
    96b2:	8d 81       	ldd	r24, Y+5	; 0x05
    96b4:	9e 81       	ldd	r25, Y+6	; 0x06
    96b6:	bc 01       	movw	r22, r24
    96b8:	66 0f       	add	r22, r22
    96ba:	77 1f       	adc	r23, r23
    96bc:	66 0f       	add	r22, r22
    96be:	77 1f       	adc	r23, r23
    96c0:	8b a1       	lds	r24, 0x4b
    96c2:	9c a1       	lds	r25, 0x4c
    96c4:	86 0f       	add	r24, r22
    96c6:	97 1f       	adc	r25, r23
    96c8:	88 0f       	add	r24, r24
    96ca:	99 1f       	adc	r25, r25
    96cc:	88 0f       	add	r24, r24
    96ce:	99 1f       	adc	r25, r25
    96d0:	84 0f       	add	r24, r20
    96d2:	95 1f       	adc	r25, r21
    96d4:	fc 01       	movw	r30, r24
    96d6:	80 81       	ld	r24, Z
    96d8:	91 81       	ldd	r25, Z+1	; 0x01
    96da:	28 17       	cp	r18, r24
    96dc:	39 07       	cpc	r19, r25
    96de:	0c f0       	brlt	.+2      	; 0x96e2 <main+0x6392>
    96e0:	c6 c2       	rjmp	.+1420   	; 0x9c6e <main+0x691e>
    96e2:	20 91 a8 04 	lds	r18, 0x04A8
    96e6:	30 91 a9 04 	lds	r19, 0x04A9
    96ea:	ae 01       	movw	r20, r28
    96ec:	4d 5f       	subi	r20, 0xFD	; 253
    96ee:	5a 4f       	sbci	r21, 0xFA	; 250
    96f0:	8d 81       	ldd	r24, Y+5	; 0x05
    96f2:	9e 81       	ldd	r25, Y+6	; 0x06
    96f4:	bc 01       	movw	r22, r24
    96f6:	66 0f       	add	r22, r22
    96f8:	77 1f       	adc	r23, r23
    96fa:	66 0f       	add	r22, r22
    96fc:	77 1f       	adc	r23, r23
    96fe:	8b a1       	lds	r24, 0x4b
    9700:	9c a1       	lds	r25, 0x4c
    9702:	86 0f       	add	r24, r22
    9704:	97 1f       	adc	r25, r23
    9706:	88 0f       	add	r24, r24
    9708:	99 1f       	adc	r25, r25
    970a:	88 0f       	add	r24, r24
    970c:	99 1f       	adc	r25, r25
    970e:	84 0f       	add	r24, r20
    9710:	95 1f       	adc	r25, r21
    9712:	02 96       	adiw	r24, 0x02	; 2
    9714:	fc 01       	movw	r30, r24
    9716:	80 81       	ld	r24, Z
    9718:	91 81       	ldd	r25, Z+1	; 0x01
    971a:	82 17       	cp	r24, r18
    971c:	93 07       	cpc	r25, r19
    971e:	0c f0       	brlt	.+2      	; 0x9722 <main+0x63d2>
    9720:	a6 c2       	rjmp	.+1356   	; 0x9c6e <main+0x691e>
			{
				right_degrees(135);
    9722:	87 e8       	ldi	r24, 0x87	; 135
    9724:	90 e0       	ldi	r25, 0x00	; 0
    9726:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
				back_mm(65);
    972a:	81 e4       	ldi	r24, 0x41	; 65
    972c:	90 e0       	ldi	r25, 0x00	; 0
    972e:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
				matrix2();
    9732:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
					if(summ1[recur+1]>10)
    9736:	8f 81       	ldd	r24, Y+7	; 0x07
    9738:	98 85       	ldd	r25, Y+8	; 0x08
    973a:	01 96       	adiw	r24, 0x01	; 1
    973c:	9e 01       	movw	r18, r28
    973e:	25 54       	subi	r18, 0x45	; 69
    9740:	39 4f       	sbci	r19, 0xF9	; 249
    9742:	88 0f       	add	r24, r24
    9744:	99 1f       	adc	r25, r25
    9746:	82 0f       	add	r24, r18
    9748:	93 1f       	adc	r25, r19
    974a:	fc 01       	movw	r30, r24
    974c:	80 81       	ld	r24, Z
    974e:	91 81       	ldd	r25, Z+1	; 0x01
    9750:	8b 30       	cpi	r24, 0x0B	; 11
    9752:	91 05       	cpc	r25, r1
    9754:	0c f4       	brge	.+2      	; 0x9758 <main+0x6408>
    9756:	d6 c0       	rjmp	.+428    	; 0x9904 <main+0x65b4>
					{
						buzzer_on();
    9758:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    975c:	9e 01       	movw	r18, r28
    975e:	2d 50       	subi	r18, 0x0D	; 13
    9760:	3d 4f       	sbci	r19, 0xFD	; 253
    9762:	80 e0       	ldi	r24, 0x00	; 0
    9764:	90 e0       	ldi	r25, 0x00	; 0
    9766:	aa e7       	ldi	r26, 0x7A	; 122
    9768:	b4 e4       	ldi	r27, 0x44	; 68
    976a:	f9 01       	movw	r30, r18
    976c:	80 83       	st	Z, r24
    976e:	91 83       	std	Z+1, r25	; 0x01
    9770:	a2 83       	std	Z+2, r26	; 0x02
    9772:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9774:	8e 01       	movw	r16, r28
    9776:	09 50       	subi	r16, 0x09	; 9
    9778:	1d 4f       	sbci	r17, 0xFD	; 253
    977a:	ce 01       	movw	r24, r28
    977c:	8d 50       	subi	r24, 0x0D	; 13
    977e:	9d 4f       	sbci	r25, 0xFD	; 253
    9780:	fc 01       	movw	r30, r24
    9782:	60 81       	ld	r22, Z
    9784:	71 81       	ldd	r23, Z+1	; 0x01
    9786:	82 81       	ldd	r24, Z+2	; 0x02
    9788:	93 81       	ldd	r25, Z+3	; 0x03
    978a:	26 e6       	ldi	r18, 0x66	; 102
    978c:	36 e6       	ldi	r19, 0x66	; 102
    978e:	46 e6       	ldi	r20, 0x66	; 102
    9790:	55 e4       	ldi	r21, 0x45	; 69
    9792:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9796:	dc 01       	movw	r26, r24
    9798:	cb 01       	movw	r24, r22
    979a:	f8 01       	movw	r30, r16
    979c:	80 83       	st	Z, r24
    979e:	91 83       	std	Z+1, r25	; 0x01
    97a0:	a2 83       	std	Z+2, r26	; 0x02
    97a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    97a4:	ce 01       	movw	r24, r28
    97a6:	89 50       	subi	r24, 0x09	; 9
    97a8:	9d 4f       	sbci	r25, 0xFD	; 253
    97aa:	11 e0       	ldi	r17, 0x01	; 1
    97ac:	fc 01       	movw	r30, r24
    97ae:	60 81       	ld	r22, Z
    97b0:	71 81       	ldd	r23, Z+1	; 0x01
    97b2:	82 81       	ldd	r24, Z+2	; 0x02
    97b4:	93 81       	ldd	r25, Z+3	; 0x03
    97b6:	20 e0       	ldi	r18, 0x00	; 0
    97b8:	30 e0       	ldi	r19, 0x00	; 0
    97ba:	40 e8       	ldi	r20, 0x80	; 128
    97bc:	5f e3       	ldi	r21, 0x3F	; 63
    97be:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    97c2:	88 23       	and	r24, r24
    97c4:	0c f0       	brlt	.+2      	; 0x97c8 <main+0x6478>
    97c6:	10 e0       	ldi	r17, 0x00	; 0
    97c8:	11 23       	and	r17, r17
    97ca:	49 f0       	breq	.+18     	; 0x97de <main+0x648e>
		__ticks = 1;
    97cc:	ce 01       	movw	r24, r28
    97ce:	85 50       	subi	r24, 0x05	; 5
    97d0:	9d 4f       	sbci	r25, 0xFD	; 253
    97d2:	21 e0       	ldi	r18, 0x01	; 1
    97d4:	30 e0       	ldi	r19, 0x00	; 0
    97d6:	fc 01       	movw	r30, r24
    97d8:	31 83       	std	Z+1, r19	; 0x01
    97da:	20 83       	st	Z, r18
    97dc:	74 c0       	rjmp	.+232    	; 0x98c6 <main+0x6576>
	else if (__tmp > 65535)
    97de:	ce 01       	movw	r24, r28
    97e0:	89 50       	subi	r24, 0x09	; 9
    97e2:	9d 4f       	sbci	r25, 0xFD	; 253
    97e4:	11 e0       	ldi	r17, 0x01	; 1
    97e6:	fc 01       	movw	r30, r24
    97e8:	60 81       	ld	r22, Z
    97ea:	71 81       	ldd	r23, Z+1	; 0x01
    97ec:	82 81       	ldd	r24, Z+2	; 0x02
    97ee:	93 81       	ldd	r25, Z+3	; 0x03
    97f0:	20 e0       	ldi	r18, 0x00	; 0
    97f2:	3f ef       	ldi	r19, 0xFF	; 255
    97f4:	4f e7       	ldi	r20, 0x7F	; 127
    97f6:	57 e4       	ldi	r21, 0x47	; 71
    97f8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    97fc:	18 16       	cp	r1, r24
    97fe:	0c f0       	brlt	.+2      	; 0x9802 <main+0x64b2>
    9800:	10 e0       	ldi	r17, 0x00	; 0
    9802:	11 23       	and	r17, r17
    9804:	09 f4       	brne	.+2      	; 0x9808 <main+0x64b8>
    9806:	4d c0       	rjmp	.+154    	; 0x98a2 <main+0x6552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9808:	ce 01       	movw	r24, r28
    980a:	8d 50       	subi	r24, 0x0D	; 13
    980c:	9d 4f       	sbci	r25, 0xFD	; 253
    980e:	fc 01       	movw	r30, r24
    9810:	60 81       	ld	r22, Z
    9812:	71 81       	ldd	r23, Z+1	; 0x01
    9814:	82 81       	ldd	r24, Z+2	; 0x02
    9816:	93 81       	ldd	r25, Z+3	; 0x03
    9818:	20 e0       	ldi	r18, 0x00	; 0
    981a:	30 e0       	ldi	r19, 0x00	; 0
    981c:	40 e2       	ldi	r20, 0x20	; 32
    981e:	51 e4       	ldi	r21, 0x41	; 65
    9820:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9824:	dc 01       	movw	r26, r24
    9826:	cb 01       	movw	r24, r22
    9828:	8e 01       	movw	r16, r28
    982a:	05 50       	subi	r16, 0x05	; 5
    982c:	1d 4f       	sbci	r17, 0xFD	; 253
    982e:	bc 01       	movw	r22, r24
    9830:	cd 01       	movw	r24, r26
    9832:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9836:	dc 01       	movw	r26, r24
    9838:	cb 01       	movw	r24, r22
    983a:	f8 01       	movw	r30, r16
    983c:	91 83       	std	Z+1, r25	; 0x01
    983e:	80 83       	st	Z, r24
    9840:	27 c0       	rjmp	.+78     	; 0x9890 <main+0x6540>
    9842:	ce 01       	movw	r24, r28
    9844:	83 50       	subi	r24, 0x03	; 3
    9846:	9d 4f       	sbci	r25, 0xFD	; 253
    9848:	20 e7       	ldi	r18, 0x70	; 112
    984a:	31 e0       	ldi	r19, 0x01	; 1
    984c:	fc 01       	movw	r30, r24
    984e:	31 83       	std	Z+1, r19	; 0x01
    9850:	20 83       	st	Z, r18
    9852:	ce 01       	movw	r24, r28
    9854:	83 50       	subi	r24, 0x03	; 3
    9856:	9d 4f       	sbci	r25, 0xFD	; 253
    9858:	fc 01       	movw	r30, r24
    985a:	80 81       	ld	r24, Z
    985c:	91 81       	ldd	r25, Z+1	; 0x01
    985e:	8c 01       	movw	r16, r24
    9860:	c8 01       	movw	r24, r16
    9862:	01 97       	sbiw	r24, 0x01	; 1
    9864:	f1 f7       	brne	.-4      	; 0x9862 <main+0x6512>
    9866:	8c 01       	movw	r16, r24
    9868:	ce 01       	movw	r24, r28
    986a:	83 50       	subi	r24, 0x03	; 3
    986c:	9d 4f       	sbci	r25, 0xFD	; 253
    986e:	fc 01       	movw	r30, r24
    9870:	11 83       	std	Z+1, r17	; 0x01
    9872:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9874:	ce 01       	movw	r24, r28
    9876:	85 50       	subi	r24, 0x05	; 5
    9878:	9d 4f       	sbci	r25, 0xFD	; 253
    987a:	9e 01       	movw	r18, r28
    987c:	25 50       	subi	r18, 0x05	; 5
    987e:	3d 4f       	sbci	r19, 0xFD	; 253
    9880:	f9 01       	movw	r30, r18
    9882:	20 81       	ld	r18, Z
    9884:	31 81       	ldd	r19, Z+1	; 0x01
    9886:	21 50       	subi	r18, 0x01	; 1
    9888:	30 40       	sbci	r19, 0x00	; 0
    988a:	fc 01       	movw	r30, r24
    988c:	31 83       	std	Z+1, r19	; 0x01
    988e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9890:	ce 01       	movw	r24, r28
    9892:	85 50       	subi	r24, 0x05	; 5
    9894:	9d 4f       	sbci	r25, 0xFD	; 253
    9896:	fc 01       	movw	r30, r24
    9898:	80 81       	ld	r24, Z
    989a:	91 81       	ldd	r25, Z+1	; 0x01
    989c:	00 97       	sbiw	r24, 0x00	; 0
    989e:	89 f6       	brne	.-94     	; 0x9842 <main+0x64f2>
    98a0:	2f c0       	rjmp	.+94     	; 0x9900 <main+0x65b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    98a2:	8e 01       	movw	r16, r28
    98a4:	05 50       	subi	r16, 0x05	; 5
    98a6:	1d 4f       	sbci	r17, 0xFD	; 253
    98a8:	ce 01       	movw	r24, r28
    98aa:	89 50       	subi	r24, 0x09	; 9
    98ac:	9d 4f       	sbci	r25, 0xFD	; 253
    98ae:	fc 01       	movw	r30, r24
    98b0:	60 81       	ld	r22, Z
    98b2:	71 81       	ldd	r23, Z+1	; 0x01
    98b4:	82 81       	ldd	r24, Z+2	; 0x02
    98b6:	93 81       	ldd	r25, Z+3	; 0x03
    98b8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    98bc:	dc 01       	movw	r26, r24
    98be:	cb 01       	movw	r24, r22
    98c0:	f8 01       	movw	r30, r16
    98c2:	91 83       	std	Z+1, r25	; 0x01
    98c4:	80 83       	st	Z, r24
    98c6:	ce 01       	movw	r24, r28
    98c8:	81 50       	subi	r24, 0x01	; 1
    98ca:	9d 4f       	sbci	r25, 0xFD	; 253
    98cc:	9e 01       	movw	r18, r28
    98ce:	25 50       	subi	r18, 0x05	; 5
    98d0:	3d 4f       	sbci	r19, 0xFD	; 253
    98d2:	f9 01       	movw	r30, r18
    98d4:	20 81       	ld	r18, Z
    98d6:	31 81       	ldd	r19, Z+1	; 0x01
    98d8:	fc 01       	movw	r30, r24
    98da:	31 83       	std	Z+1, r19	; 0x01
    98dc:	20 83       	st	Z, r18
    98de:	ce 01       	movw	r24, r28
    98e0:	81 50       	subi	r24, 0x01	; 1
    98e2:	9d 4f       	sbci	r25, 0xFD	; 253
    98e4:	fc 01       	movw	r30, r24
    98e6:	80 81       	ld	r24, Z
    98e8:	91 81       	ldd	r25, Z+1	; 0x01
    98ea:	8c 01       	movw	r16, r24
    98ec:	c8 01       	movw	r24, r16
    98ee:	01 97       	sbiw	r24, 0x01	; 1
    98f0:	f1 f7       	brne	.-4      	; 0x98ee <main+0x659e>
    98f2:	8c 01       	movw	r16, r24
    98f4:	ce 01       	movw	r24, r28
    98f6:	81 50       	subi	r24, 0x01	; 1
    98f8:	9d 4f       	sbci	r25, 0xFD	; 253
    98fa:	fc 01       	movw	r30, r24
    98fc:	11 83       	std	Z+1, r17	; 0x01
    98fe:	00 83       	st	Z, r16
						_delay_ms(1000);
						buzzer_off();
    9900:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
					}
				forward_mm(75);
    9904:	8b e4       	ldi	r24, 0x4B	; 75
    9906:	90 e0       	ldi	r25, 0x00	; 0
    9908:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    990c:	9e 01       	movw	r18, r28
    990e:	2f 5f       	subi	r18, 0xFF	; 255
    9910:	3c 4f       	sbci	r19, 0xFC	; 252
    9912:	80 e0       	ldi	r24, 0x00	; 0
    9914:	90 e0       	ldi	r25, 0x00	; 0
    9916:	a0 ef       	ldi	r26, 0xF0	; 240
    9918:	b1 e4       	ldi	r27, 0x41	; 65
    991a:	f9 01       	movw	r30, r18
    991c:	80 83       	st	Z, r24
    991e:	91 83       	std	Z+1, r25	; 0x01
    9920:	a2 83       	std	Z+2, r26	; 0x02
    9922:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9924:	8e 01       	movw	r16, r28
    9926:	0b 5f       	subi	r16, 0xFB	; 251
    9928:	1c 4f       	sbci	r17, 0xFC	; 252
    992a:	ce 01       	movw	r24, r28
    992c:	8f 5f       	subi	r24, 0xFF	; 255
    992e:	9c 4f       	sbci	r25, 0xFC	; 252
    9930:	fc 01       	movw	r30, r24
    9932:	60 81       	ld	r22, Z
    9934:	71 81       	ldd	r23, Z+1	; 0x01
    9936:	82 81       	ldd	r24, Z+2	; 0x02
    9938:	93 81       	ldd	r25, Z+3	; 0x03
    993a:	26 e6       	ldi	r18, 0x66	; 102
    993c:	36 e6       	ldi	r19, 0x66	; 102
    993e:	46 e6       	ldi	r20, 0x66	; 102
    9940:	55 e4       	ldi	r21, 0x45	; 69
    9942:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9946:	dc 01       	movw	r26, r24
    9948:	cb 01       	movw	r24, r22
    994a:	f8 01       	movw	r30, r16
    994c:	80 83       	st	Z, r24
    994e:	91 83       	std	Z+1, r25	; 0x01
    9950:	a2 83       	std	Z+2, r26	; 0x02
    9952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9954:	ce 01       	movw	r24, r28
    9956:	8b 5f       	subi	r24, 0xFB	; 251
    9958:	9c 4f       	sbci	r25, 0xFC	; 252
    995a:	11 e0       	ldi	r17, 0x01	; 1
    995c:	fc 01       	movw	r30, r24
    995e:	60 81       	ld	r22, Z
    9960:	71 81       	ldd	r23, Z+1	; 0x01
    9962:	82 81       	ldd	r24, Z+2	; 0x02
    9964:	93 81       	ldd	r25, Z+3	; 0x03
    9966:	20 e0       	ldi	r18, 0x00	; 0
    9968:	30 e0       	ldi	r19, 0x00	; 0
    996a:	40 e8       	ldi	r20, 0x80	; 128
    996c:	5f e3       	ldi	r21, 0x3F	; 63
    996e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    9972:	88 23       	and	r24, r24
    9974:	0c f0       	brlt	.+2      	; 0x9978 <main+0x6628>
    9976:	10 e0       	ldi	r17, 0x00	; 0
    9978:	11 23       	and	r17, r17
    997a:	49 f0       	breq	.+18     	; 0x998e <main+0x663e>
		__ticks = 1;
    997c:	ce 01       	movw	r24, r28
    997e:	87 5f       	subi	r24, 0xF7	; 247
    9980:	9c 4f       	sbci	r25, 0xFC	; 252
    9982:	21 e0       	ldi	r18, 0x01	; 1
    9984:	30 e0       	ldi	r19, 0x00	; 0
    9986:	fc 01       	movw	r30, r24
    9988:	31 83       	std	Z+1, r19	; 0x01
    998a:	20 83       	st	Z, r18
    998c:	74 c0       	rjmp	.+232    	; 0x9a76 <main+0x6726>
	else if (__tmp > 65535)
    998e:	ce 01       	movw	r24, r28
    9990:	8b 5f       	subi	r24, 0xFB	; 251
    9992:	9c 4f       	sbci	r25, 0xFC	; 252
    9994:	11 e0       	ldi	r17, 0x01	; 1
    9996:	fc 01       	movw	r30, r24
    9998:	60 81       	ld	r22, Z
    999a:	71 81       	ldd	r23, Z+1	; 0x01
    999c:	82 81       	ldd	r24, Z+2	; 0x02
    999e:	93 81       	ldd	r25, Z+3	; 0x03
    99a0:	20 e0       	ldi	r18, 0x00	; 0
    99a2:	3f ef       	ldi	r19, 0xFF	; 255
    99a4:	4f e7       	ldi	r20, 0x7F	; 127
    99a6:	57 e4       	ldi	r21, 0x47	; 71
    99a8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    99ac:	18 16       	cp	r1, r24
    99ae:	0c f0       	brlt	.+2      	; 0x99b2 <main+0x6662>
    99b0:	10 e0       	ldi	r17, 0x00	; 0
    99b2:	11 23       	and	r17, r17
    99b4:	09 f4       	brne	.+2      	; 0x99b8 <main+0x6668>
    99b6:	4d c0       	rjmp	.+154    	; 0x9a52 <main+0x6702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    99b8:	ce 01       	movw	r24, r28
    99ba:	8f 5f       	subi	r24, 0xFF	; 255
    99bc:	9c 4f       	sbci	r25, 0xFC	; 252
    99be:	fc 01       	movw	r30, r24
    99c0:	60 81       	ld	r22, Z
    99c2:	71 81       	ldd	r23, Z+1	; 0x01
    99c4:	82 81       	ldd	r24, Z+2	; 0x02
    99c6:	93 81       	ldd	r25, Z+3	; 0x03
    99c8:	20 e0       	ldi	r18, 0x00	; 0
    99ca:	30 e0       	ldi	r19, 0x00	; 0
    99cc:	40 e2       	ldi	r20, 0x20	; 32
    99ce:	51 e4       	ldi	r21, 0x41	; 65
    99d0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    99d4:	dc 01       	movw	r26, r24
    99d6:	cb 01       	movw	r24, r22
    99d8:	8e 01       	movw	r16, r28
    99da:	07 5f       	subi	r16, 0xF7	; 247
    99dc:	1c 4f       	sbci	r17, 0xFC	; 252
    99de:	bc 01       	movw	r22, r24
    99e0:	cd 01       	movw	r24, r26
    99e2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    99e6:	dc 01       	movw	r26, r24
    99e8:	cb 01       	movw	r24, r22
    99ea:	f8 01       	movw	r30, r16
    99ec:	91 83       	std	Z+1, r25	; 0x01
    99ee:	80 83       	st	Z, r24
    99f0:	27 c0       	rjmp	.+78     	; 0x9a40 <main+0x66f0>
    99f2:	ce 01       	movw	r24, r28
    99f4:	85 5f       	subi	r24, 0xF5	; 245
    99f6:	9c 4f       	sbci	r25, 0xFC	; 252
    99f8:	20 e7       	ldi	r18, 0x70	; 112
    99fa:	31 e0       	ldi	r19, 0x01	; 1
    99fc:	fc 01       	movw	r30, r24
    99fe:	31 83       	std	Z+1, r19	; 0x01
    9a00:	20 83       	st	Z, r18
    9a02:	ce 01       	movw	r24, r28
    9a04:	85 5f       	subi	r24, 0xF5	; 245
    9a06:	9c 4f       	sbci	r25, 0xFC	; 252
    9a08:	fc 01       	movw	r30, r24
    9a0a:	80 81       	ld	r24, Z
    9a0c:	91 81       	ldd	r25, Z+1	; 0x01
    9a0e:	8c 01       	movw	r16, r24
    9a10:	c8 01       	movw	r24, r16
    9a12:	01 97       	sbiw	r24, 0x01	; 1
    9a14:	f1 f7       	brne	.-4      	; 0x9a12 <main+0x66c2>
    9a16:	8c 01       	movw	r16, r24
    9a18:	ce 01       	movw	r24, r28
    9a1a:	85 5f       	subi	r24, 0xF5	; 245
    9a1c:	9c 4f       	sbci	r25, 0xFC	; 252
    9a1e:	fc 01       	movw	r30, r24
    9a20:	11 83       	std	Z+1, r17	; 0x01
    9a22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a24:	ce 01       	movw	r24, r28
    9a26:	87 5f       	subi	r24, 0xF7	; 247
    9a28:	9c 4f       	sbci	r25, 0xFC	; 252
    9a2a:	9e 01       	movw	r18, r28
    9a2c:	27 5f       	subi	r18, 0xF7	; 247
    9a2e:	3c 4f       	sbci	r19, 0xFC	; 252
    9a30:	f9 01       	movw	r30, r18
    9a32:	20 81       	ld	r18, Z
    9a34:	31 81       	ldd	r19, Z+1	; 0x01
    9a36:	21 50       	subi	r18, 0x01	; 1
    9a38:	30 40       	sbci	r19, 0x00	; 0
    9a3a:	fc 01       	movw	r30, r24
    9a3c:	31 83       	std	Z+1, r19	; 0x01
    9a3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a40:	ce 01       	movw	r24, r28
    9a42:	87 5f       	subi	r24, 0xF7	; 247
    9a44:	9c 4f       	sbci	r25, 0xFC	; 252
    9a46:	fc 01       	movw	r30, r24
    9a48:	80 81       	ld	r24, Z
    9a4a:	91 81       	ldd	r25, Z+1	; 0x01
    9a4c:	00 97       	sbiw	r24, 0x00	; 0
    9a4e:	89 f6       	brne	.-94     	; 0x99f2 <main+0x66a2>
    9a50:	2f c0       	rjmp	.+94     	; 0x9ab0 <main+0x6760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a52:	8e 01       	movw	r16, r28
    9a54:	07 5f       	subi	r16, 0xF7	; 247
    9a56:	1c 4f       	sbci	r17, 0xFC	; 252
    9a58:	ce 01       	movw	r24, r28
    9a5a:	8b 5f       	subi	r24, 0xFB	; 251
    9a5c:	9c 4f       	sbci	r25, 0xFC	; 252
    9a5e:	fc 01       	movw	r30, r24
    9a60:	60 81       	ld	r22, Z
    9a62:	71 81       	ldd	r23, Z+1	; 0x01
    9a64:	82 81       	ldd	r24, Z+2	; 0x02
    9a66:	93 81       	ldd	r25, Z+3	; 0x03
    9a68:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9a6c:	dc 01       	movw	r26, r24
    9a6e:	cb 01       	movw	r24, r22
    9a70:	f8 01       	movw	r30, r16
    9a72:	91 83       	std	Z+1, r25	; 0x01
    9a74:	80 83       	st	Z, r24
    9a76:	ce 01       	movw	r24, r28
    9a78:	83 5f       	subi	r24, 0xF3	; 243
    9a7a:	9c 4f       	sbci	r25, 0xFC	; 252
    9a7c:	9e 01       	movw	r18, r28
    9a7e:	27 5f       	subi	r18, 0xF7	; 247
    9a80:	3c 4f       	sbci	r19, 0xFC	; 252
    9a82:	f9 01       	movw	r30, r18
    9a84:	20 81       	ld	r18, Z
    9a86:	31 81       	ldd	r19, Z+1	; 0x01
    9a88:	fc 01       	movw	r30, r24
    9a8a:	31 83       	std	Z+1, r19	; 0x01
    9a8c:	20 83       	st	Z, r18
    9a8e:	ce 01       	movw	r24, r28
    9a90:	83 5f       	subi	r24, 0xF3	; 243
    9a92:	9c 4f       	sbci	r25, 0xFC	; 252
    9a94:	fc 01       	movw	r30, r24
    9a96:	80 81       	ld	r24, Z
    9a98:	91 81       	ldd	r25, Z+1	; 0x01
    9a9a:	8c 01       	movw	r16, r24
    9a9c:	c8 01       	movw	r24, r16
    9a9e:	01 97       	sbiw	r24, 0x01	; 1
    9aa0:	f1 f7       	brne	.-4      	; 0x9a9e <main+0x674e>
    9aa2:	8c 01       	movw	r16, r24
    9aa4:	ce 01       	movw	r24, r28
    9aa6:	83 5f       	subi	r24, 0xF3	; 243
    9aa8:	9c 4f       	sbci	r25, 0xFC	; 252
    9aaa:	fc 01       	movw	r30, r24
    9aac:	11 83       	std	Z+1, r17	; 0x01
    9aae:	00 83       	st	Z, r16
				_delay_ms(30);
				back_mm(10);
    9ab0:	8a e0       	ldi	r24, 0x0A	; 10
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    9ab8:	9e 01       	movw	r18, r28
    9aba:	21 5f       	subi	r18, 0xF1	; 241
    9abc:	3c 4f       	sbci	r19, 0xFC	; 252
    9abe:	80 e0       	ldi	r24, 0x00	; 0
    9ac0:	90 e0       	ldi	r25, 0x00	; 0
    9ac2:	aa ef       	ldi	r26, 0xFA	; 250
    9ac4:	b3 e4       	ldi	r27, 0x43	; 67
    9ac6:	f9 01       	movw	r30, r18
    9ac8:	80 83       	st	Z, r24
    9aca:	91 83       	std	Z+1, r25	; 0x01
    9acc:	a2 83       	std	Z+2, r26	; 0x02
    9ace:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9ad0:	8e 01       	movw	r16, r28
    9ad2:	0d 5e       	subi	r16, 0xED	; 237
    9ad4:	1c 4f       	sbci	r17, 0xFC	; 252
    9ad6:	ce 01       	movw	r24, r28
    9ad8:	81 5f       	subi	r24, 0xF1	; 241
    9ada:	9c 4f       	sbci	r25, 0xFC	; 252
    9adc:	fc 01       	movw	r30, r24
    9ade:	60 81       	ld	r22, Z
    9ae0:	71 81       	ldd	r23, Z+1	; 0x01
    9ae2:	82 81       	ldd	r24, Z+2	; 0x02
    9ae4:	93 81       	ldd	r25, Z+3	; 0x03
    9ae6:	26 e6       	ldi	r18, 0x66	; 102
    9ae8:	36 e6       	ldi	r19, 0x66	; 102
    9aea:	46 e6       	ldi	r20, 0x66	; 102
    9aec:	55 e4       	ldi	r21, 0x45	; 69
    9aee:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9af2:	dc 01       	movw	r26, r24
    9af4:	cb 01       	movw	r24, r22
    9af6:	f8 01       	movw	r30, r16
    9af8:	80 83       	st	Z, r24
    9afa:	91 83       	std	Z+1, r25	; 0x01
    9afc:	a2 83       	std	Z+2, r26	; 0x02
    9afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9b00:	ce 01       	movw	r24, r28
    9b02:	8d 5e       	subi	r24, 0xED	; 237
    9b04:	9c 4f       	sbci	r25, 0xFC	; 252
    9b06:	11 e0       	ldi	r17, 0x01	; 1
    9b08:	fc 01       	movw	r30, r24
    9b0a:	60 81       	ld	r22, Z
    9b0c:	71 81       	ldd	r23, Z+1	; 0x01
    9b0e:	82 81       	ldd	r24, Z+2	; 0x02
    9b10:	93 81       	ldd	r25, Z+3	; 0x03
    9b12:	20 e0       	ldi	r18, 0x00	; 0
    9b14:	30 e0       	ldi	r19, 0x00	; 0
    9b16:	40 e8       	ldi	r20, 0x80	; 128
    9b18:	5f e3       	ldi	r21, 0x3F	; 63
    9b1a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    9b1e:	88 23       	and	r24, r24
    9b20:	0c f0       	brlt	.+2      	; 0x9b24 <main+0x67d4>
    9b22:	10 e0       	ldi	r17, 0x00	; 0
    9b24:	11 23       	and	r17, r17
    9b26:	49 f0       	breq	.+18     	; 0x9b3a <main+0x67ea>
		__ticks = 1;
    9b28:	ce 01       	movw	r24, r28
    9b2a:	89 5e       	subi	r24, 0xE9	; 233
    9b2c:	9c 4f       	sbci	r25, 0xFC	; 252
    9b2e:	21 e0       	ldi	r18, 0x01	; 1
    9b30:	30 e0       	ldi	r19, 0x00	; 0
    9b32:	fc 01       	movw	r30, r24
    9b34:	31 83       	std	Z+1, r19	; 0x01
    9b36:	20 83       	st	Z, r18
    9b38:	74 c0       	rjmp	.+232    	; 0x9c22 <main+0x68d2>
	else if (__tmp > 65535)
    9b3a:	ce 01       	movw	r24, r28
    9b3c:	8d 5e       	subi	r24, 0xED	; 237
    9b3e:	9c 4f       	sbci	r25, 0xFC	; 252
    9b40:	11 e0       	ldi	r17, 0x01	; 1
    9b42:	fc 01       	movw	r30, r24
    9b44:	60 81       	ld	r22, Z
    9b46:	71 81       	ldd	r23, Z+1	; 0x01
    9b48:	82 81       	ldd	r24, Z+2	; 0x02
    9b4a:	93 81       	ldd	r25, Z+3	; 0x03
    9b4c:	20 e0       	ldi	r18, 0x00	; 0
    9b4e:	3f ef       	ldi	r19, 0xFF	; 255
    9b50:	4f e7       	ldi	r20, 0x7F	; 127
    9b52:	57 e4       	ldi	r21, 0x47	; 71
    9b54:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    9b58:	18 16       	cp	r1, r24
    9b5a:	0c f0       	brlt	.+2      	; 0x9b5e <main+0x680e>
    9b5c:	10 e0       	ldi	r17, 0x00	; 0
    9b5e:	11 23       	and	r17, r17
    9b60:	09 f4       	brne	.+2      	; 0x9b64 <main+0x6814>
    9b62:	4d c0       	rjmp	.+154    	; 0x9bfe <main+0x68ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b64:	ce 01       	movw	r24, r28
    9b66:	81 5f       	subi	r24, 0xF1	; 241
    9b68:	9c 4f       	sbci	r25, 0xFC	; 252
    9b6a:	fc 01       	movw	r30, r24
    9b6c:	60 81       	ld	r22, Z
    9b6e:	71 81       	ldd	r23, Z+1	; 0x01
    9b70:	82 81       	ldd	r24, Z+2	; 0x02
    9b72:	93 81       	ldd	r25, Z+3	; 0x03
    9b74:	20 e0       	ldi	r18, 0x00	; 0
    9b76:	30 e0       	ldi	r19, 0x00	; 0
    9b78:	40 e2       	ldi	r20, 0x20	; 32
    9b7a:	51 e4       	ldi	r21, 0x41	; 65
    9b7c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9b80:	dc 01       	movw	r26, r24
    9b82:	cb 01       	movw	r24, r22
    9b84:	8e 01       	movw	r16, r28
    9b86:	09 5e       	subi	r16, 0xE9	; 233
    9b88:	1c 4f       	sbci	r17, 0xFC	; 252
    9b8a:	bc 01       	movw	r22, r24
    9b8c:	cd 01       	movw	r24, r26
    9b8e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9b92:	dc 01       	movw	r26, r24
    9b94:	cb 01       	movw	r24, r22
    9b96:	f8 01       	movw	r30, r16
    9b98:	91 83       	std	Z+1, r25	; 0x01
    9b9a:	80 83       	st	Z, r24
    9b9c:	27 c0       	rjmp	.+78     	; 0x9bec <main+0x689c>
    9b9e:	ce 01       	movw	r24, r28
    9ba0:	87 5e       	subi	r24, 0xE7	; 231
    9ba2:	9c 4f       	sbci	r25, 0xFC	; 252
    9ba4:	20 e7       	ldi	r18, 0x70	; 112
    9ba6:	31 e0       	ldi	r19, 0x01	; 1
    9ba8:	fc 01       	movw	r30, r24
    9baa:	31 83       	std	Z+1, r19	; 0x01
    9bac:	20 83       	st	Z, r18
    9bae:	ce 01       	movw	r24, r28
    9bb0:	87 5e       	subi	r24, 0xE7	; 231
    9bb2:	9c 4f       	sbci	r25, 0xFC	; 252
    9bb4:	fc 01       	movw	r30, r24
    9bb6:	80 81       	ld	r24, Z
    9bb8:	91 81       	ldd	r25, Z+1	; 0x01
    9bba:	8c 01       	movw	r16, r24
    9bbc:	c8 01       	movw	r24, r16
    9bbe:	01 97       	sbiw	r24, 0x01	; 1
    9bc0:	f1 f7       	brne	.-4      	; 0x9bbe <main+0x686e>
    9bc2:	8c 01       	movw	r16, r24
    9bc4:	ce 01       	movw	r24, r28
    9bc6:	87 5e       	subi	r24, 0xE7	; 231
    9bc8:	9c 4f       	sbci	r25, 0xFC	; 252
    9bca:	fc 01       	movw	r30, r24
    9bcc:	11 83       	std	Z+1, r17	; 0x01
    9bce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9bd0:	ce 01       	movw	r24, r28
    9bd2:	89 5e       	subi	r24, 0xE9	; 233
    9bd4:	9c 4f       	sbci	r25, 0xFC	; 252
    9bd6:	9e 01       	movw	r18, r28
    9bd8:	29 5e       	subi	r18, 0xE9	; 233
    9bda:	3c 4f       	sbci	r19, 0xFC	; 252
    9bdc:	f9 01       	movw	r30, r18
    9bde:	20 81       	ld	r18, Z
    9be0:	31 81       	ldd	r19, Z+1	; 0x01
    9be2:	21 50       	subi	r18, 0x01	; 1
    9be4:	30 40       	sbci	r19, 0x00	; 0
    9be6:	fc 01       	movw	r30, r24
    9be8:	31 83       	std	Z+1, r19	; 0x01
    9bea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9bec:	ce 01       	movw	r24, r28
    9bee:	89 5e       	subi	r24, 0xE9	; 233
    9bf0:	9c 4f       	sbci	r25, 0xFC	; 252
    9bf2:	fc 01       	movw	r30, r24
    9bf4:	80 81       	ld	r24, Z
    9bf6:	91 81       	ldd	r25, Z+1	; 0x01
    9bf8:	00 97       	sbiw	r24, 0x00	; 0
    9bfa:	89 f6       	brne	.-94     	; 0x9b9e <main+0x684e>
    9bfc:	2f c0       	rjmp	.+94     	; 0x9c5c <main+0x690c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9bfe:	8e 01       	movw	r16, r28
    9c00:	09 5e       	subi	r16, 0xE9	; 233
    9c02:	1c 4f       	sbci	r17, 0xFC	; 252
    9c04:	ce 01       	movw	r24, r28
    9c06:	8d 5e       	subi	r24, 0xED	; 237
    9c08:	9c 4f       	sbci	r25, 0xFC	; 252
    9c0a:	fc 01       	movw	r30, r24
    9c0c:	60 81       	ld	r22, Z
    9c0e:	71 81       	ldd	r23, Z+1	; 0x01
    9c10:	82 81       	ldd	r24, Z+2	; 0x02
    9c12:	93 81       	ldd	r25, Z+3	; 0x03
    9c14:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9c18:	dc 01       	movw	r26, r24
    9c1a:	cb 01       	movw	r24, r22
    9c1c:	f8 01       	movw	r30, r16
    9c1e:	91 83       	std	Z+1, r25	; 0x01
    9c20:	80 83       	st	Z, r24
    9c22:	ce 01       	movw	r24, r28
    9c24:	85 5e       	subi	r24, 0xE5	; 229
    9c26:	9c 4f       	sbci	r25, 0xFC	; 252
    9c28:	9e 01       	movw	r18, r28
    9c2a:	29 5e       	subi	r18, 0xE9	; 233
    9c2c:	3c 4f       	sbci	r19, 0xFC	; 252
    9c2e:	f9 01       	movw	r30, r18
    9c30:	20 81       	ld	r18, Z
    9c32:	31 81       	ldd	r19, Z+1	; 0x01
    9c34:	fc 01       	movw	r30, r24
    9c36:	31 83       	std	Z+1, r19	; 0x01
    9c38:	20 83       	st	Z, r18
    9c3a:	ce 01       	movw	r24, r28
    9c3c:	85 5e       	subi	r24, 0xE5	; 229
    9c3e:	9c 4f       	sbci	r25, 0xFC	; 252
    9c40:	fc 01       	movw	r30, r24
    9c42:	80 81       	ld	r24, Z
    9c44:	91 81       	ldd	r25, Z+1	; 0x01
    9c46:	8c 01       	movw	r16, r24
    9c48:	c8 01       	movw	r24, r16
    9c4a:	01 97       	sbiw	r24, 0x01	; 1
    9c4c:	f1 f7       	brne	.-4      	; 0x9c4a <main+0x68fa>
    9c4e:	8c 01       	movw	r16, r24
    9c50:	ce 01       	movw	r24, r28
    9c52:	85 5e       	subi	r24, 0xE5	; 229
    9c54:	9c 4f       	sbci	r25, 0xFC	; 252
    9c56:	fc 01       	movw	r30, r24
    9c58:	11 83       	std	Z+1, r17	; 0x01
    9c5a:	00 83       	st	Z, r16
				_delay_ms(500);
				right_degrees(40);
    9c5c:	88 e2       	ldi	r24, 0x28	; 40
    9c5e:	90 e0       	ldi	r25, 0x00	; 0
    9c60:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
				compass=5;
    9c64:	85 e0       	ldi	r24, 0x05	; 5
    9c66:	90 e0       	ldi	r25, 0x00	; 0
    9c68:	9c 83       	std	Y+4, r25	; 0x04
    9c6a:	8b 83       	std	Y+3, r24	; 0x03
				break;
    9c6c:	0e c0       	rjmp	.+28     	; 0x9c8a <main+0x693a>
		
	}
	goto hotspot;
	ppt1: if(compass==4)
	{
		for(int i=0;i<4;i++)
    9c6e:	8b a1       	lds	r24, 0x4b
    9c70:	9c a1       	lds	r25, 0x4c
    9c72:	01 96       	adiw	r24, 0x01	; 1
    9c74:	9c a3       	lds	r25, 0x5c
    9c76:	8b a3       	lds	r24, 0x5b
    9c78:	8b a1       	lds	r24, 0x4b
    9c7a:	9c a1       	lds	r25, 0x4c
    9c7c:	84 30       	cpi	r24, 0x04	; 4
    9c7e:	91 05       	cpc	r25, r1
    9c80:	14 f4       	brge	.+4      	; 0x9c86 <main+0x6936>
    9c82:	0c 94 9c 42 	jmp	0x8538	; 0x8538 <main+0x51e8>
    9c86:	0c 94 c7 62 	jmp	0xc58e	; 0xc58e <main+0x923e>
					}
				}					
			}
		}
	}
	goto hotspot;
    9c8a:	0c 94 9b 36 	jmp	0x6d36	; 0x6d36 <main+0x39e6>
			}
		}
	}
	else
	{
		if(compass==6)
    9c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    9c90:	9c 81       	ldd	r25, Y+4	; 0x04
    9c92:	86 30       	cpi	r24, 0x06	; 6
    9c94:	91 05       	cpc	r25, r1
    9c96:	11 f0       	breq	.+4      	; 0x9c9c <main+0x694c>
    9c98:	0c 94 15 57 	jmp	0xae2a	; 0xae2a <main+0x7ada>
		{
			for(int i=0;i<4;i++)
    9c9c:	1e a2       	lds	r17, 0x9e
    9c9e:	1d a2       	lds	r17, 0x9d
    9ca0:	0c 94 0a 57 	jmp	0xae14	; 0xae14 <main+0x7ac4>
			{
				if(coor[1]<origin2[boxnumber][i][1] && coor[0]>origin2[boxnumber][i][0])
    9ca4:	20 91 a8 04 	lds	r18, 0x04A8
    9ca8:	30 91 a9 04 	lds	r19, 0x04A9
    9cac:	ae 01       	movw	r20, r28
    9cae:	4d 5f       	subi	r20, 0xFD	; 253
    9cb0:	5a 4f       	sbci	r21, 0xFA	; 250
    9cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    9cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    9cb6:	bc 01       	movw	r22, r24
    9cb8:	66 0f       	add	r22, r22
    9cba:	77 1f       	adc	r23, r23
    9cbc:	66 0f       	add	r22, r22
    9cbe:	77 1f       	adc	r23, r23
    9cc0:	8d a1       	lds	r24, 0x4d
    9cc2:	9e a1       	lds	r25, 0x4e
    9cc4:	86 0f       	add	r24, r22
    9cc6:	97 1f       	adc	r25, r23
    9cc8:	88 0f       	add	r24, r24
    9cca:	99 1f       	adc	r25, r25
    9ccc:	88 0f       	add	r24, r24
    9cce:	99 1f       	adc	r25, r25
    9cd0:	84 0f       	add	r24, r20
    9cd2:	95 1f       	adc	r25, r21
    9cd4:	02 96       	adiw	r24, 0x02	; 2
    9cd6:	fc 01       	movw	r30, r24
    9cd8:	80 81       	ld	r24, Z
    9cda:	91 81       	ldd	r25, Z+1	; 0x01
    9cdc:	28 17       	cp	r18, r24
    9cde:	39 07       	cpc	r19, r25
    9ce0:	0c f0       	brlt	.+2      	; 0x9ce4 <main+0x6994>
    9ce2:	c5 c2       	rjmp	.+1418   	; 0xa26e <main+0x6f1e>
    9ce4:	20 91 a6 04 	lds	r18, 0x04A6
    9ce8:	30 91 a7 04 	lds	r19, 0x04A7
    9cec:	ae 01       	movw	r20, r28
    9cee:	4d 5f       	subi	r20, 0xFD	; 253
    9cf0:	5a 4f       	sbci	r21, 0xFA	; 250
    9cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    9cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    9cf6:	bc 01       	movw	r22, r24
    9cf8:	66 0f       	add	r22, r22
    9cfa:	77 1f       	adc	r23, r23
    9cfc:	66 0f       	add	r22, r22
    9cfe:	77 1f       	adc	r23, r23
    9d00:	8d a1       	lds	r24, 0x4d
    9d02:	9e a1       	lds	r25, 0x4e
    9d04:	86 0f       	add	r24, r22
    9d06:	97 1f       	adc	r25, r23
    9d08:	88 0f       	add	r24, r24
    9d0a:	99 1f       	adc	r25, r25
    9d0c:	88 0f       	add	r24, r24
    9d0e:	99 1f       	adc	r25, r25
    9d10:	84 0f       	add	r24, r20
    9d12:	95 1f       	adc	r25, r21
    9d14:	fc 01       	movw	r30, r24
    9d16:	80 81       	ld	r24, Z
    9d18:	91 81       	ldd	r25, Z+1	; 0x01
    9d1a:	82 17       	cp	r24, r18
    9d1c:	93 07       	cpc	r25, r19
    9d1e:	0c f0       	brlt	.+2      	; 0x9d22 <main+0x69d2>
    9d20:	a6 c2       	rjmp	.+1356   	; 0xa26e <main+0x6f1e>
				{
					left_degrees(135);
    9d22:	87 e8       	ldi	r24, 0x87	; 135
    9d24:	90 e0       	ldi	r25, 0x00	; 0
    9d26:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
					back_mm(65);
    9d2a:	81 e4       	ldi	r24, 0x41	; 65
    9d2c:	90 e0       	ldi	r25, 0x00	; 0
    9d2e:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
					matrix2();
    9d32:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
						if(summ1[recur+1]>10)
    9d36:	8f 81       	ldd	r24, Y+7	; 0x07
    9d38:	98 85       	ldd	r25, Y+8	; 0x08
    9d3a:	01 96       	adiw	r24, 0x01	; 1
    9d3c:	9e 01       	movw	r18, r28
    9d3e:	25 54       	subi	r18, 0x45	; 69
    9d40:	39 4f       	sbci	r19, 0xF9	; 249
    9d42:	88 0f       	add	r24, r24
    9d44:	99 1f       	adc	r25, r25
    9d46:	82 0f       	add	r24, r18
    9d48:	93 1f       	adc	r25, r19
    9d4a:	fc 01       	movw	r30, r24
    9d4c:	80 81       	ld	r24, Z
    9d4e:	91 81       	ldd	r25, Z+1	; 0x01
    9d50:	8b 30       	cpi	r24, 0x0B	; 11
    9d52:	91 05       	cpc	r25, r1
    9d54:	0c f4       	brge	.+2      	; 0x9d58 <main+0x6a08>
    9d56:	d6 c0       	rjmp	.+428    	; 0x9f04 <main+0x6bb4>
						{
							buzzer_on();
    9d58:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    9d5c:	9e 01       	movw	r18, r28
    9d5e:	23 5e       	subi	r18, 0xE3	; 227
    9d60:	3c 4f       	sbci	r19, 0xFC	; 252
    9d62:	80 e0       	ldi	r24, 0x00	; 0
    9d64:	90 e0       	ldi	r25, 0x00	; 0
    9d66:	aa e7       	ldi	r26, 0x7A	; 122
    9d68:	b4 e4       	ldi	r27, 0x44	; 68
    9d6a:	f9 01       	movw	r30, r18
    9d6c:	80 83       	st	Z, r24
    9d6e:	91 83       	std	Z+1, r25	; 0x01
    9d70:	a2 83       	std	Z+2, r26	; 0x02
    9d72:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9d74:	8e 01       	movw	r16, r28
    9d76:	0f 5d       	subi	r16, 0xDF	; 223
    9d78:	1c 4f       	sbci	r17, 0xFC	; 252
    9d7a:	ce 01       	movw	r24, r28
    9d7c:	83 5e       	subi	r24, 0xE3	; 227
    9d7e:	9c 4f       	sbci	r25, 0xFC	; 252
    9d80:	fc 01       	movw	r30, r24
    9d82:	60 81       	ld	r22, Z
    9d84:	71 81       	ldd	r23, Z+1	; 0x01
    9d86:	82 81       	ldd	r24, Z+2	; 0x02
    9d88:	93 81       	ldd	r25, Z+3	; 0x03
    9d8a:	26 e6       	ldi	r18, 0x66	; 102
    9d8c:	36 e6       	ldi	r19, 0x66	; 102
    9d8e:	46 e6       	ldi	r20, 0x66	; 102
    9d90:	55 e4       	ldi	r21, 0x45	; 69
    9d92:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9d96:	dc 01       	movw	r26, r24
    9d98:	cb 01       	movw	r24, r22
    9d9a:	f8 01       	movw	r30, r16
    9d9c:	80 83       	st	Z, r24
    9d9e:	91 83       	std	Z+1, r25	; 0x01
    9da0:	a2 83       	std	Z+2, r26	; 0x02
    9da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9da4:	ce 01       	movw	r24, r28
    9da6:	8f 5d       	subi	r24, 0xDF	; 223
    9da8:	9c 4f       	sbci	r25, 0xFC	; 252
    9daa:	11 e0       	ldi	r17, 0x01	; 1
    9dac:	fc 01       	movw	r30, r24
    9dae:	60 81       	ld	r22, Z
    9db0:	71 81       	ldd	r23, Z+1	; 0x01
    9db2:	82 81       	ldd	r24, Z+2	; 0x02
    9db4:	93 81       	ldd	r25, Z+3	; 0x03
    9db6:	20 e0       	ldi	r18, 0x00	; 0
    9db8:	30 e0       	ldi	r19, 0x00	; 0
    9dba:	40 e8       	ldi	r20, 0x80	; 128
    9dbc:	5f e3       	ldi	r21, 0x3F	; 63
    9dbe:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    9dc2:	88 23       	and	r24, r24
    9dc4:	0c f0       	brlt	.+2      	; 0x9dc8 <main+0x6a78>
    9dc6:	10 e0       	ldi	r17, 0x00	; 0
    9dc8:	11 23       	and	r17, r17
    9dca:	49 f0       	breq	.+18     	; 0x9dde <main+0x6a8e>
		__ticks = 1;
    9dcc:	ce 01       	movw	r24, r28
    9dce:	8b 5d       	subi	r24, 0xDB	; 219
    9dd0:	9c 4f       	sbci	r25, 0xFC	; 252
    9dd2:	21 e0       	ldi	r18, 0x01	; 1
    9dd4:	30 e0       	ldi	r19, 0x00	; 0
    9dd6:	fc 01       	movw	r30, r24
    9dd8:	31 83       	std	Z+1, r19	; 0x01
    9dda:	20 83       	st	Z, r18
    9ddc:	74 c0       	rjmp	.+232    	; 0x9ec6 <main+0x6b76>
	else if (__tmp > 65535)
    9dde:	ce 01       	movw	r24, r28
    9de0:	8f 5d       	subi	r24, 0xDF	; 223
    9de2:	9c 4f       	sbci	r25, 0xFC	; 252
    9de4:	11 e0       	ldi	r17, 0x01	; 1
    9de6:	fc 01       	movw	r30, r24
    9de8:	60 81       	ld	r22, Z
    9dea:	71 81       	ldd	r23, Z+1	; 0x01
    9dec:	82 81       	ldd	r24, Z+2	; 0x02
    9dee:	93 81       	ldd	r25, Z+3	; 0x03
    9df0:	20 e0       	ldi	r18, 0x00	; 0
    9df2:	3f ef       	ldi	r19, 0xFF	; 255
    9df4:	4f e7       	ldi	r20, 0x7F	; 127
    9df6:	57 e4       	ldi	r21, 0x47	; 71
    9df8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    9dfc:	18 16       	cp	r1, r24
    9dfe:	0c f0       	brlt	.+2      	; 0x9e02 <main+0x6ab2>
    9e00:	10 e0       	ldi	r17, 0x00	; 0
    9e02:	11 23       	and	r17, r17
    9e04:	09 f4       	brne	.+2      	; 0x9e08 <main+0x6ab8>
    9e06:	4d c0       	rjmp	.+154    	; 0x9ea2 <main+0x6b52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9e08:	ce 01       	movw	r24, r28
    9e0a:	83 5e       	subi	r24, 0xE3	; 227
    9e0c:	9c 4f       	sbci	r25, 0xFC	; 252
    9e0e:	fc 01       	movw	r30, r24
    9e10:	60 81       	ld	r22, Z
    9e12:	71 81       	ldd	r23, Z+1	; 0x01
    9e14:	82 81       	ldd	r24, Z+2	; 0x02
    9e16:	93 81       	ldd	r25, Z+3	; 0x03
    9e18:	20 e0       	ldi	r18, 0x00	; 0
    9e1a:	30 e0       	ldi	r19, 0x00	; 0
    9e1c:	40 e2       	ldi	r20, 0x20	; 32
    9e1e:	51 e4       	ldi	r21, 0x41	; 65
    9e20:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9e24:	dc 01       	movw	r26, r24
    9e26:	cb 01       	movw	r24, r22
    9e28:	8e 01       	movw	r16, r28
    9e2a:	0b 5d       	subi	r16, 0xDB	; 219
    9e2c:	1c 4f       	sbci	r17, 0xFC	; 252
    9e2e:	bc 01       	movw	r22, r24
    9e30:	cd 01       	movw	r24, r26
    9e32:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9e36:	dc 01       	movw	r26, r24
    9e38:	cb 01       	movw	r24, r22
    9e3a:	f8 01       	movw	r30, r16
    9e3c:	91 83       	std	Z+1, r25	; 0x01
    9e3e:	80 83       	st	Z, r24
    9e40:	27 c0       	rjmp	.+78     	; 0x9e90 <main+0x6b40>
    9e42:	ce 01       	movw	r24, r28
    9e44:	89 5d       	subi	r24, 0xD9	; 217
    9e46:	9c 4f       	sbci	r25, 0xFC	; 252
    9e48:	20 e7       	ldi	r18, 0x70	; 112
    9e4a:	31 e0       	ldi	r19, 0x01	; 1
    9e4c:	fc 01       	movw	r30, r24
    9e4e:	31 83       	std	Z+1, r19	; 0x01
    9e50:	20 83       	st	Z, r18
    9e52:	ce 01       	movw	r24, r28
    9e54:	89 5d       	subi	r24, 0xD9	; 217
    9e56:	9c 4f       	sbci	r25, 0xFC	; 252
    9e58:	fc 01       	movw	r30, r24
    9e5a:	80 81       	ld	r24, Z
    9e5c:	91 81       	ldd	r25, Z+1	; 0x01
    9e5e:	8c 01       	movw	r16, r24
    9e60:	c8 01       	movw	r24, r16
    9e62:	01 97       	sbiw	r24, 0x01	; 1
    9e64:	f1 f7       	brne	.-4      	; 0x9e62 <main+0x6b12>
    9e66:	8c 01       	movw	r16, r24
    9e68:	ce 01       	movw	r24, r28
    9e6a:	89 5d       	subi	r24, 0xD9	; 217
    9e6c:	9c 4f       	sbci	r25, 0xFC	; 252
    9e6e:	fc 01       	movw	r30, r24
    9e70:	11 83       	std	Z+1, r17	; 0x01
    9e72:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9e74:	ce 01       	movw	r24, r28
    9e76:	8b 5d       	subi	r24, 0xDB	; 219
    9e78:	9c 4f       	sbci	r25, 0xFC	; 252
    9e7a:	9e 01       	movw	r18, r28
    9e7c:	2b 5d       	subi	r18, 0xDB	; 219
    9e7e:	3c 4f       	sbci	r19, 0xFC	; 252
    9e80:	f9 01       	movw	r30, r18
    9e82:	20 81       	ld	r18, Z
    9e84:	31 81       	ldd	r19, Z+1	; 0x01
    9e86:	21 50       	subi	r18, 0x01	; 1
    9e88:	30 40       	sbci	r19, 0x00	; 0
    9e8a:	fc 01       	movw	r30, r24
    9e8c:	31 83       	std	Z+1, r19	; 0x01
    9e8e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9e90:	ce 01       	movw	r24, r28
    9e92:	8b 5d       	subi	r24, 0xDB	; 219
    9e94:	9c 4f       	sbci	r25, 0xFC	; 252
    9e96:	fc 01       	movw	r30, r24
    9e98:	80 81       	ld	r24, Z
    9e9a:	91 81       	ldd	r25, Z+1	; 0x01
    9e9c:	00 97       	sbiw	r24, 0x00	; 0
    9e9e:	89 f6       	brne	.-94     	; 0x9e42 <main+0x6af2>
    9ea0:	2f c0       	rjmp	.+94     	; 0x9f00 <main+0x6bb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9ea2:	8e 01       	movw	r16, r28
    9ea4:	0b 5d       	subi	r16, 0xDB	; 219
    9ea6:	1c 4f       	sbci	r17, 0xFC	; 252
    9ea8:	ce 01       	movw	r24, r28
    9eaa:	8f 5d       	subi	r24, 0xDF	; 223
    9eac:	9c 4f       	sbci	r25, 0xFC	; 252
    9eae:	fc 01       	movw	r30, r24
    9eb0:	60 81       	ld	r22, Z
    9eb2:	71 81       	ldd	r23, Z+1	; 0x01
    9eb4:	82 81       	ldd	r24, Z+2	; 0x02
    9eb6:	93 81       	ldd	r25, Z+3	; 0x03
    9eb8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9ebc:	dc 01       	movw	r26, r24
    9ebe:	cb 01       	movw	r24, r22
    9ec0:	f8 01       	movw	r30, r16
    9ec2:	91 83       	std	Z+1, r25	; 0x01
    9ec4:	80 83       	st	Z, r24
    9ec6:	ce 01       	movw	r24, r28
    9ec8:	87 5d       	subi	r24, 0xD7	; 215
    9eca:	9c 4f       	sbci	r25, 0xFC	; 252
    9ecc:	9e 01       	movw	r18, r28
    9ece:	2b 5d       	subi	r18, 0xDB	; 219
    9ed0:	3c 4f       	sbci	r19, 0xFC	; 252
    9ed2:	f9 01       	movw	r30, r18
    9ed4:	20 81       	ld	r18, Z
    9ed6:	31 81       	ldd	r19, Z+1	; 0x01
    9ed8:	fc 01       	movw	r30, r24
    9eda:	31 83       	std	Z+1, r19	; 0x01
    9edc:	20 83       	st	Z, r18
    9ede:	ce 01       	movw	r24, r28
    9ee0:	87 5d       	subi	r24, 0xD7	; 215
    9ee2:	9c 4f       	sbci	r25, 0xFC	; 252
    9ee4:	fc 01       	movw	r30, r24
    9ee6:	80 81       	ld	r24, Z
    9ee8:	91 81       	ldd	r25, Z+1	; 0x01
    9eea:	8c 01       	movw	r16, r24
    9eec:	c8 01       	movw	r24, r16
    9eee:	01 97       	sbiw	r24, 0x01	; 1
    9ef0:	f1 f7       	brne	.-4      	; 0x9eee <main+0x6b9e>
    9ef2:	8c 01       	movw	r16, r24
    9ef4:	ce 01       	movw	r24, r28
    9ef6:	87 5d       	subi	r24, 0xD7	; 215
    9ef8:	9c 4f       	sbci	r25, 0xFC	; 252
    9efa:	fc 01       	movw	r30, r24
    9efc:	11 83       	std	Z+1, r17	; 0x01
    9efe:	00 83       	st	Z, r16
							_delay_ms(1000);
							buzzer_off();
    9f00:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
						}
					forward_mm(75);
    9f04:	8b e4       	ldi	r24, 0x4B	; 75
    9f06:	90 e0       	ldi	r25, 0x00	; 0
    9f08:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    9f0c:	9e 01       	movw	r18, r28
    9f0e:	25 5d       	subi	r18, 0xD5	; 213
    9f10:	3c 4f       	sbci	r19, 0xFC	; 252
    9f12:	80 e0       	ldi	r24, 0x00	; 0
    9f14:	90 e0       	ldi	r25, 0x00	; 0
    9f16:	a0 ef       	ldi	r26, 0xF0	; 240
    9f18:	b1 e4       	ldi	r27, 0x41	; 65
    9f1a:	f9 01       	movw	r30, r18
    9f1c:	80 83       	st	Z, r24
    9f1e:	91 83       	std	Z+1, r25	; 0x01
    9f20:	a2 83       	std	Z+2, r26	; 0x02
    9f22:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9f24:	8e 01       	movw	r16, r28
    9f26:	01 5d       	subi	r16, 0xD1	; 209
    9f28:	1c 4f       	sbci	r17, 0xFC	; 252
    9f2a:	ce 01       	movw	r24, r28
    9f2c:	85 5d       	subi	r24, 0xD5	; 213
    9f2e:	9c 4f       	sbci	r25, 0xFC	; 252
    9f30:	fc 01       	movw	r30, r24
    9f32:	60 81       	ld	r22, Z
    9f34:	71 81       	ldd	r23, Z+1	; 0x01
    9f36:	82 81       	ldd	r24, Z+2	; 0x02
    9f38:	93 81       	ldd	r25, Z+3	; 0x03
    9f3a:	26 e6       	ldi	r18, 0x66	; 102
    9f3c:	36 e6       	ldi	r19, 0x66	; 102
    9f3e:	46 e6       	ldi	r20, 0x66	; 102
    9f40:	55 e4       	ldi	r21, 0x45	; 69
    9f42:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9f46:	dc 01       	movw	r26, r24
    9f48:	cb 01       	movw	r24, r22
    9f4a:	f8 01       	movw	r30, r16
    9f4c:	80 83       	st	Z, r24
    9f4e:	91 83       	std	Z+1, r25	; 0x01
    9f50:	a2 83       	std	Z+2, r26	; 0x02
    9f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9f54:	ce 01       	movw	r24, r28
    9f56:	81 5d       	subi	r24, 0xD1	; 209
    9f58:	9c 4f       	sbci	r25, 0xFC	; 252
    9f5a:	11 e0       	ldi	r17, 0x01	; 1
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	60 81       	ld	r22, Z
    9f60:	71 81       	ldd	r23, Z+1	; 0x01
    9f62:	82 81       	ldd	r24, Z+2	; 0x02
    9f64:	93 81       	ldd	r25, Z+3	; 0x03
    9f66:	20 e0       	ldi	r18, 0x00	; 0
    9f68:	30 e0       	ldi	r19, 0x00	; 0
    9f6a:	40 e8       	ldi	r20, 0x80	; 128
    9f6c:	5f e3       	ldi	r21, 0x3F	; 63
    9f6e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    9f72:	88 23       	and	r24, r24
    9f74:	0c f0       	brlt	.+2      	; 0x9f78 <main+0x6c28>
    9f76:	10 e0       	ldi	r17, 0x00	; 0
    9f78:	11 23       	and	r17, r17
    9f7a:	49 f0       	breq	.+18     	; 0x9f8e <main+0x6c3e>
		__ticks = 1;
    9f7c:	ce 01       	movw	r24, r28
    9f7e:	8d 5c       	subi	r24, 0xCD	; 205
    9f80:	9c 4f       	sbci	r25, 0xFC	; 252
    9f82:	21 e0       	ldi	r18, 0x01	; 1
    9f84:	30 e0       	ldi	r19, 0x00	; 0
    9f86:	fc 01       	movw	r30, r24
    9f88:	31 83       	std	Z+1, r19	; 0x01
    9f8a:	20 83       	st	Z, r18
    9f8c:	74 c0       	rjmp	.+232    	; 0xa076 <main+0x6d26>
	else if (__tmp > 65535)
    9f8e:	ce 01       	movw	r24, r28
    9f90:	81 5d       	subi	r24, 0xD1	; 209
    9f92:	9c 4f       	sbci	r25, 0xFC	; 252
    9f94:	11 e0       	ldi	r17, 0x01	; 1
    9f96:	fc 01       	movw	r30, r24
    9f98:	60 81       	ld	r22, Z
    9f9a:	71 81       	ldd	r23, Z+1	; 0x01
    9f9c:	82 81       	ldd	r24, Z+2	; 0x02
    9f9e:	93 81       	ldd	r25, Z+3	; 0x03
    9fa0:	20 e0       	ldi	r18, 0x00	; 0
    9fa2:	3f ef       	ldi	r19, 0xFF	; 255
    9fa4:	4f e7       	ldi	r20, 0x7F	; 127
    9fa6:	57 e4       	ldi	r21, 0x47	; 71
    9fa8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    9fac:	18 16       	cp	r1, r24
    9fae:	0c f0       	brlt	.+2      	; 0x9fb2 <main+0x6c62>
    9fb0:	10 e0       	ldi	r17, 0x00	; 0
    9fb2:	11 23       	and	r17, r17
    9fb4:	09 f4       	brne	.+2      	; 0x9fb8 <main+0x6c68>
    9fb6:	4d c0       	rjmp	.+154    	; 0xa052 <main+0x6d02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9fb8:	ce 01       	movw	r24, r28
    9fba:	85 5d       	subi	r24, 0xD5	; 213
    9fbc:	9c 4f       	sbci	r25, 0xFC	; 252
    9fbe:	fc 01       	movw	r30, r24
    9fc0:	60 81       	ld	r22, Z
    9fc2:	71 81       	ldd	r23, Z+1	; 0x01
    9fc4:	82 81       	ldd	r24, Z+2	; 0x02
    9fc6:	93 81       	ldd	r25, Z+3	; 0x03
    9fc8:	20 e0       	ldi	r18, 0x00	; 0
    9fca:	30 e0       	ldi	r19, 0x00	; 0
    9fcc:	40 e2       	ldi	r20, 0x20	; 32
    9fce:	51 e4       	ldi	r21, 0x41	; 65
    9fd0:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    9fd4:	dc 01       	movw	r26, r24
    9fd6:	cb 01       	movw	r24, r22
    9fd8:	8e 01       	movw	r16, r28
    9fda:	0d 5c       	subi	r16, 0xCD	; 205
    9fdc:	1c 4f       	sbci	r17, 0xFC	; 252
    9fde:	bc 01       	movw	r22, r24
    9fe0:	cd 01       	movw	r24, r26
    9fe2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    9fe6:	dc 01       	movw	r26, r24
    9fe8:	cb 01       	movw	r24, r22
    9fea:	f8 01       	movw	r30, r16
    9fec:	91 83       	std	Z+1, r25	; 0x01
    9fee:	80 83       	st	Z, r24
    9ff0:	27 c0       	rjmp	.+78     	; 0xa040 <main+0x6cf0>
    9ff2:	ce 01       	movw	r24, r28
    9ff4:	8b 5c       	subi	r24, 0xCB	; 203
    9ff6:	9c 4f       	sbci	r25, 0xFC	; 252
    9ff8:	20 e7       	ldi	r18, 0x70	; 112
    9ffa:	31 e0       	ldi	r19, 0x01	; 1
    9ffc:	fc 01       	movw	r30, r24
    9ffe:	31 83       	std	Z+1, r19	; 0x01
    a000:	20 83       	st	Z, r18
    a002:	ce 01       	movw	r24, r28
    a004:	8b 5c       	subi	r24, 0xCB	; 203
    a006:	9c 4f       	sbci	r25, 0xFC	; 252
    a008:	fc 01       	movw	r30, r24
    a00a:	80 81       	ld	r24, Z
    a00c:	91 81       	ldd	r25, Z+1	; 0x01
    a00e:	8c 01       	movw	r16, r24
    a010:	c8 01       	movw	r24, r16
    a012:	01 97       	sbiw	r24, 0x01	; 1
    a014:	f1 f7       	brne	.-4      	; 0xa012 <main+0x6cc2>
    a016:	8c 01       	movw	r16, r24
    a018:	ce 01       	movw	r24, r28
    a01a:	8b 5c       	subi	r24, 0xCB	; 203
    a01c:	9c 4f       	sbci	r25, 0xFC	; 252
    a01e:	fc 01       	movw	r30, r24
    a020:	11 83       	std	Z+1, r17	; 0x01
    a022:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a024:	ce 01       	movw	r24, r28
    a026:	8d 5c       	subi	r24, 0xCD	; 205
    a028:	9c 4f       	sbci	r25, 0xFC	; 252
    a02a:	9e 01       	movw	r18, r28
    a02c:	2d 5c       	subi	r18, 0xCD	; 205
    a02e:	3c 4f       	sbci	r19, 0xFC	; 252
    a030:	f9 01       	movw	r30, r18
    a032:	20 81       	ld	r18, Z
    a034:	31 81       	ldd	r19, Z+1	; 0x01
    a036:	21 50       	subi	r18, 0x01	; 1
    a038:	30 40       	sbci	r19, 0x00	; 0
    a03a:	fc 01       	movw	r30, r24
    a03c:	31 83       	std	Z+1, r19	; 0x01
    a03e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a040:	ce 01       	movw	r24, r28
    a042:	8d 5c       	subi	r24, 0xCD	; 205
    a044:	9c 4f       	sbci	r25, 0xFC	; 252
    a046:	fc 01       	movw	r30, r24
    a048:	80 81       	ld	r24, Z
    a04a:	91 81       	ldd	r25, Z+1	; 0x01
    a04c:	00 97       	sbiw	r24, 0x00	; 0
    a04e:	89 f6       	brne	.-94     	; 0x9ff2 <main+0x6ca2>
    a050:	2f c0       	rjmp	.+94     	; 0xa0b0 <main+0x6d60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a052:	8e 01       	movw	r16, r28
    a054:	0d 5c       	subi	r16, 0xCD	; 205
    a056:	1c 4f       	sbci	r17, 0xFC	; 252
    a058:	ce 01       	movw	r24, r28
    a05a:	81 5d       	subi	r24, 0xD1	; 209
    a05c:	9c 4f       	sbci	r25, 0xFC	; 252
    a05e:	fc 01       	movw	r30, r24
    a060:	60 81       	ld	r22, Z
    a062:	71 81       	ldd	r23, Z+1	; 0x01
    a064:	82 81       	ldd	r24, Z+2	; 0x02
    a066:	93 81       	ldd	r25, Z+3	; 0x03
    a068:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a06c:	dc 01       	movw	r26, r24
    a06e:	cb 01       	movw	r24, r22
    a070:	f8 01       	movw	r30, r16
    a072:	91 83       	std	Z+1, r25	; 0x01
    a074:	80 83       	st	Z, r24
    a076:	ce 01       	movw	r24, r28
    a078:	89 5c       	subi	r24, 0xC9	; 201
    a07a:	9c 4f       	sbci	r25, 0xFC	; 252
    a07c:	9e 01       	movw	r18, r28
    a07e:	2d 5c       	subi	r18, 0xCD	; 205
    a080:	3c 4f       	sbci	r19, 0xFC	; 252
    a082:	f9 01       	movw	r30, r18
    a084:	20 81       	ld	r18, Z
    a086:	31 81       	ldd	r19, Z+1	; 0x01
    a088:	fc 01       	movw	r30, r24
    a08a:	31 83       	std	Z+1, r19	; 0x01
    a08c:	20 83       	st	Z, r18
    a08e:	ce 01       	movw	r24, r28
    a090:	89 5c       	subi	r24, 0xC9	; 201
    a092:	9c 4f       	sbci	r25, 0xFC	; 252
    a094:	fc 01       	movw	r30, r24
    a096:	80 81       	ld	r24, Z
    a098:	91 81       	ldd	r25, Z+1	; 0x01
    a09a:	8c 01       	movw	r16, r24
    a09c:	c8 01       	movw	r24, r16
    a09e:	01 97       	sbiw	r24, 0x01	; 1
    a0a0:	f1 f7       	brne	.-4      	; 0xa09e <main+0x6d4e>
    a0a2:	8c 01       	movw	r16, r24
    a0a4:	ce 01       	movw	r24, r28
    a0a6:	89 5c       	subi	r24, 0xC9	; 201
    a0a8:	9c 4f       	sbci	r25, 0xFC	; 252
    a0aa:	fc 01       	movw	r30, r24
    a0ac:	11 83       	std	Z+1, r17	; 0x01
    a0ae:	00 83       	st	Z, r16
					_delay_ms(30);
					back_mm(10);
    a0b0:	8a e0       	ldi	r24, 0x0A	; 10
    a0b2:	90 e0       	ldi	r25, 0x00	; 0
    a0b4:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    a0b8:	9e 01       	movw	r18, r28
    a0ba:	27 5c       	subi	r18, 0xC7	; 199
    a0bc:	3c 4f       	sbci	r19, 0xFC	; 252
    a0be:	80 e0       	ldi	r24, 0x00	; 0
    a0c0:	90 e0       	ldi	r25, 0x00	; 0
    a0c2:	aa ef       	ldi	r26, 0xFA	; 250
    a0c4:	b3 e4       	ldi	r27, 0x43	; 67
    a0c6:	f9 01       	movw	r30, r18
    a0c8:	80 83       	st	Z, r24
    a0ca:	91 83       	std	Z+1, r25	; 0x01
    a0cc:	a2 83       	std	Z+2, r26	; 0x02
    a0ce:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a0d0:	8e 01       	movw	r16, r28
    a0d2:	03 5c       	subi	r16, 0xC3	; 195
    a0d4:	1c 4f       	sbci	r17, 0xFC	; 252
    a0d6:	ce 01       	movw	r24, r28
    a0d8:	87 5c       	subi	r24, 0xC7	; 199
    a0da:	9c 4f       	sbci	r25, 0xFC	; 252
    a0dc:	fc 01       	movw	r30, r24
    a0de:	60 81       	ld	r22, Z
    a0e0:	71 81       	ldd	r23, Z+1	; 0x01
    a0e2:	82 81       	ldd	r24, Z+2	; 0x02
    a0e4:	93 81       	ldd	r25, Z+3	; 0x03
    a0e6:	26 e6       	ldi	r18, 0x66	; 102
    a0e8:	36 e6       	ldi	r19, 0x66	; 102
    a0ea:	46 e6       	ldi	r20, 0x66	; 102
    a0ec:	55 e4       	ldi	r21, 0x45	; 69
    a0ee:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a0f2:	dc 01       	movw	r26, r24
    a0f4:	cb 01       	movw	r24, r22
    a0f6:	f8 01       	movw	r30, r16
    a0f8:	80 83       	st	Z, r24
    a0fa:	91 83       	std	Z+1, r25	; 0x01
    a0fc:	a2 83       	std	Z+2, r26	; 0x02
    a0fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a100:	ce 01       	movw	r24, r28
    a102:	83 5c       	subi	r24, 0xC3	; 195
    a104:	9c 4f       	sbci	r25, 0xFC	; 252
    a106:	11 e0       	ldi	r17, 0x01	; 1
    a108:	fc 01       	movw	r30, r24
    a10a:	60 81       	ld	r22, Z
    a10c:	71 81       	ldd	r23, Z+1	; 0x01
    a10e:	82 81       	ldd	r24, Z+2	; 0x02
    a110:	93 81       	ldd	r25, Z+3	; 0x03
    a112:	20 e0       	ldi	r18, 0x00	; 0
    a114:	30 e0       	ldi	r19, 0x00	; 0
    a116:	40 e8       	ldi	r20, 0x80	; 128
    a118:	5f e3       	ldi	r21, 0x3F	; 63
    a11a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    a11e:	88 23       	and	r24, r24
    a120:	0c f0       	brlt	.+2      	; 0xa124 <main+0x6dd4>
    a122:	10 e0       	ldi	r17, 0x00	; 0
    a124:	11 23       	and	r17, r17
    a126:	49 f0       	breq	.+18     	; 0xa13a <main+0x6dea>
		__ticks = 1;
    a128:	ce 01       	movw	r24, r28
    a12a:	8f 5b       	subi	r24, 0xBF	; 191
    a12c:	9c 4f       	sbci	r25, 0xFC	; 252
    a12e:	21 e0       	ldi	r18, 0x01	; 1
    a130:	30 e0       	ldi	r19, 0x00	; 0
    a132:	fc 01       	movw	r30, r24
    a134:	31 83       	std	Z+1, r19	; 0x01
    a136:	20 83       	st	Z, r18
    a138:	74 c0       	rjmp	.+232    	; 0xa222 <main+0x6ed2>
	else if (__tmp > 65535)
    a13a:	ce 01       	movw	r24, r28
    a13c:	83 5c       	subi	r24, 0xC3	; 195
    a13e:	9c 4f       	sbci	r25, 0xFC	; 252
    a140:	11 e0       	ldi	r17, 0x01	; 1
    a142:	fc 01       	movw	r30, r24
    a144:	60 81       	ld	r22, Z
    a146:	71 81       	ldd	r23, Z+1	; 0x01
    a148:	82 81       	ldd	r24, Z+2	; 0x02
    a14a:	93 81       	ldd	r25, Z+3	; 0x03
    a14c:	20 e0       	ldi	r18, 0x00	; 0
    a14e:	3f ef       	ldi	r19, 0xFF	; 255
    a150:	4f e7       	ldi	r20, 0x7F	; 127
    a152:	57 e4       	ldi	r21, 0x47	; 71
    a154:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    a158:	18 16       	cp	r1, r24
    a15a:	0c f0       	brlt	.+2      	; 0xa15e <main+0x6e0e>
    a15c:	10 e0       	ldi	r17, 0x00	; 0
    a15e:	11 23       	and	r17, r17
    a160:	09 f4       	brne	.+2      	; 0xa164 <main+0x6e14>
    a162:	4d c0       	rjmp	.+154    	; 0xa1fe <main+0x6eae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a164:	ce 01       	movw	r24, r28
    a166:	87 5c       	subi	r24, 0xC7	; 199
    a168:	9c 4f       	sbci	r25, 0xFC	; 252
    a16a:	fc 01       	movw	r30, r24
    a16c:	60 81       	ld	r22, Z
    a16e:	71 81       	ldd	r23, Z+1	; 0x01
    a170:	82 81       	ldd	r24, Z+2	; 0x02
    a172:	93 81       	ldd	r25, Z+3	; 0x03
    a174:	20 e0       	ldi	r18, 0x00	; 0
    a176:	30 e0       	ldi	r19, 0x00	; 0
    a178:	40 e2       	ldi	r20, 0x20	; 32
    a17a:	51 e4       	ldi	r21, 0x41	; 65
    a17c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a180:	dc 01       	movw	r26, r24
    a182:	cb 01       	movw	r24, r22
    a184:	8e 01       	movw	r16, r28
    a186:	0f 5b       	subi	r16, 0xBF	; 191
    a188:	1c 4f       	sbci	r17, 0xFC	; 252
    a18a:	bc 01       	movw	r22, r24
    a18c:	cd 01       	movw	r24, r26
    a18e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a192:	dc 01       	movw	r26, r24
    a194:	cb 01       	movw	r24, r22
    a196:	f8 01       	movw	r30, r16
    a198:	91 83       	std	Z+1, r25	; 0x01
    a19a:	80 83       	st	Z, r24
    a19c:	27 c0       	rjmp	.+78     	; 0xa1ec <main+0x6e9c>
    a19e:	ce 01       	movw	r24, r28
    a1a0:	8d 5b       	subi	r24, 0xBD	; 189
    a1a2:	9c 4f       	sbci	r25, 0xFC	; 252
    a1a4:	20 e7       	ldi	r18, 0x70	; 112
    a1a6:	31 e0       	ldi	r19, 0x01	; 1
    a1a8:	fc 01       	movw	r30, r24
    a1aa:	31 83       	std	Z+1, r19	; 0x01
    a1ac:	20 83       	st	Z, r18
    a1ae:	ce 01       	movw	r24, r28
    a1b0:	8d 5b       	subi	r24, 0xBD	; 189
    a1b2:	9c 4f       	sbci	r25, 0xFC	; 252
    a1b4:	fc 01       	movw	r30, r24
    a1b6:	80 81       	ld	r24, Z
    a1b8:	91 81       	ldd	r25, Z+1	; 0x01
    a1ba:	8c 01       	movw	r16, r24
    a1bc:	c8 01       	movw	r24, r16
    a1be:	01 97       	sbiw	r24, 0x01	; 1
    a1c0:	f1 f7       	brne	.-4      	; 0xa1be <main+0x6e6e>
    a1c2:	8c 01       	movw	r16, r24
    a1c4:	ce 01       	movw	r24, r28
    a1c6:	8d 5b       	subi	r24, 0xBD	; 189
    a1c8:	9c 4f       	sbci	r25, 0xFC	; 252
    a1ca:	fc 01       	movw	r30, r24
    a1cc:	11 83       	std	Z+1, r17	; 0x01
    a1ce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a1d0:	ce 01       	movw	r24, r28
    a1d2:	8f 5b       	subi	r24, 0xBF	; 191
    a1d4:	9c 4f       	sbci	r25, 0xFC	; 252
    a1d6:	9e 01       	movw	r18, r28
    a1d8:	2f 5b       	subi	r18, 0xBF	; 191
    a1da:	3c 4f       	sbci	r19, 0xFC	; 252
    a1dc:	f9 01       	movw	r30, r18
    a1de:	20 81       	ld	r18, Z
    a1e0:	31 81       	ldd	r19, Z+1	; 0x01
    a1e2:	21 50       	subi	r18, 0x01	; 1
    a1e4:	30 40       	sbci	r19, 0x00	; 0
    a1e6:	fc 01       	movw	r30, r24
    a1e8:	31 83       	std	Z+1, r19	; 0x01
    a1ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a1ec:	ce 01       	movw	r24, r28
    a1ee:	8f 5b       	subi	r24, 0xBF	; 191
    a1f0:	9c 4f       	sbci	r25, 0xFC	; 252
    a1f2:	fc 01       	movw	r30, r24
    a1f4:	80 81       	ld	r24, Z
    a1f6:	91 81       	ldd	r25, Z+1	; 0x01
    a1f8:	00 97       	sbiw	r24, 0x00	; 0
    a1fa:	89 f6       	brne	.-94     	; 0xa19e <main+0x6e4e>
    a1fc:	2f c0       	rjmp	.+94     	; 0xa25c <main+0x6f0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a1fe:	8e 01       	movw	r16, r28
    a200:	0f 5b       	subi	r16, 0xBF	; 191
    a202:	1c 4f       	sbci	r17, 0xFC	; 252
    a204:	ce 01       	movw	r24, r28
    a206:	83 5c       	subi	r24, 0xC3	; 195
    a208:	9c 4f       	sbci	r25, 0xFC	; 252
    a20a:	fc 01       	movw	r30, r24
    a20c:	60 81       	ld	r22, Z
    a20e:	71 81       	ldd	r23, Z+1	; 0x01
    a210:	82 81       	ldd	r24, Z+2	; 0x02
    a212:	93 81       	ldd	r25, Z+3	; 0x03
    a214:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a218:	dc 01       	movw	r26, r24
    a21a:	cb 01       	movw	r24, r22
    a21c:	f8 01       	movw	r30, r16
    a21e:	91 83       	std	Z+1, r25	; 0x01
    a220:	80 83       	st	Z, r24
    a222:	ce 01       	movw	r24, r28
    a224:	8b 5b       	subi	r24, 0xBB	; 187
    a226:	9c 4f       	sbci	r25, 0xFC	; 252
    a228:	9e 01       	movw	r18, r28
    a22a:	2f 5b       	subi	r18, 0xBF	; 191
    a22c:	3c 4f       	sbci	r19, 0xFC	; 252
    a22e:	f9 01       	movw	r30, r18
    a230:	20 81       	ld	r18, Z
    a232:	31 81       	ldd	r19, Z+1	; 0x01
    a234:	fc 01       	movw	r30, r24
    a236:	31 83       	std	Z+1, r19	; 0x01
    a238:	20 83       	st	Z, r18
    a23a:	ce 01       	movw	r24, r28
    a23c:	8b 5b       	subi	r24, 0xBB	; 187
    a23e:	9c 4f       	sbci	r25, 0xFC	; 252
    a240:	fc 01       	movw	r30, r24
    a242:	80 81       	ld	r24, Z
    a244:	91 81       	ldd	r25, Z+1	; 0x01
    a246:	8c 01       	movw	r16, r24
    a248:	c8 01       	movw	r24, r16
    a24a:	01 97       	sbiw	r24, 0x01	; 1
    a24c:	f1 f7       	brne	.-4      	; 0xa24a <main+0x6efa>
    a24e:	8c 01       	movw	r16, r24
    a250:	ce 01       	movw	r24, r28
    a252:	8b 5b       	subi	r24, 0xBB	; 187
    a254:	9c 4f       	sbci	r25, 0xFC	; 252
    a256:	fc 01       	movw	r30, r24
    a258:	11 83       	std	Z+1, r17	; 0x01
    a25a:	00 83       	st	Z, r16
					_delay_ms(500);
					left_degrees(40);
    a25c:	88 e2       	ldi	r24, 0x28	; 40
    a25e:	90 e0       	ldi	r25, 0x00	; 0
    a260:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
					compass=7;
    a264:	87 e0       	ldi	r24, 0x07	; 7
    a266:	90 e0       	ldi	r25, 0x00	; 0
    a268:	9c 83       	std	Y+4, r25	; 0x04
    a26a:	8b 83       	std	Y+3, r24	; 0x03
					break;
    a26c:	dc c5       	rjmp	.+3000   	; 0xae26 <main+0x7ad6>
				}
				if(coor[1]>origin2[boxnumber][i][1] && coor[0]>origin2[boxnumber][i][0])
    a26e:	20 91 a8 04 	lds	r18, 0x04A8
    a272:	30 91 a9 04 	lds	r19, 0x04A9
    a276:	ae 01       	movw	r20, r28
    a278:	4d 5f       	subi	r20, 0xFD	; 253
    a27a:	5a 4f       	sbci	r21, 0xFA	; 250
    a27c:	8d 81       	ldd	r24, Y+5	; 0x05
    a27e:	9e 81       	ldd	r25, Y+6	; 0x06
    a280:	bc 01       	movw	r22, r24
    a282:	66 0f       	add	r22, r22
    a284:	77 1f       	adc	r23, r23
    a286:	66 0f       	add	r22, r22
    a288:	77 1f       	adc	r23, r23
    a28a:	8d a1       	lds	r24, 0x4d
    a28c:	9e a1       	lds	r25, 0x4e
    a28e:	86 0f       	add	r24, r22
    a290:	97 1f       	adc	r25, r23
    a292:	88 0f       	add	r24, r24
    a294:	99 1f       	adc	r25, r25
    a296:	88 0f       	add	r24, r24
    a298:	99 1f       	adc	r25, r25
    a29a:	84 0f       	add	r24, r20
    a29c:	95 1f       	adc	r25, r21
    a29e:	02 96       	adiw	r24, 0x02	; 2
    a2a0:	fc 01       	movw	r30, r24
    a2a2:	80 81       	ld	r24, Z
    a2a4:	91 81       	ldd	r25, Z+1	; 0x01
    a2a6:	82 17       	cp	r24, r18
    a2a8:	93 07       	cpc	r25, r19
    a2aa:	0c f0       	brlt	.+2      	; 0xa2ae <main+0x6f5e>
    a2ac:	c5 c2       	rjmp	.+1418   	; 0xa838 <main+0x74e8>
    a2ae:	20 91 a6 04 	lds	r18, 0x04A6
    a2b2:	30 91 a7 04 	lds	r19, 0x04A7
    a2b6:	ae 01       	movw	r20, r28
    a2b8:	4d 5f       	subi	r20, 0xFD	; 253
    a2ba:	5a 4f       	sbci	r21, 0xFA	; 250
    a2bc:	8d 81       	ldd	r24, Y+5	; 0x05
    a2be:	9e 81       	ldd	r25, Y+6	; 0x06
    a2c0:	bc 01       	movw	r22, r24
    a2c2:	66 0f       	add	r22, r22
    a2c4:	77 1f       	adc	r23, r23
    a2c6:	66 0f       	add	r22, r22
    a2c8:	77 1f       	adc	r23, r23
    a2ca:	8d a1       	lds	r24, 0x4d
    a2cc:	9e a1       	lds	r25, 0x4e
    a2ce:	86 0f       	add	r24, r22
    a2d0:	97 1f       	adc	r25, r23
    a2d2:	88 0f       	add	r24, r24
    a2d4:	99 1f       	adc	r25, r25
    a2d6:	88 0f       	add	r24, r24
    a2d8:	99 1f       	adc	r25, r25
    a2da:	84 0f       	add	r24, r20
    a2dc:	95 1f       	adc	r25, r21
    a2de:	fc 01       	movw	r30, r24
    a2e0:	80 81       	ld	r24, Z
    a2e2:	91 81       	ldd	r25, Z+1	; 0x01
    a2e4:	82 17       	cp	r24, r18
    a2e6:	93 07       	cpc	r25, r19
    a2e8:	0c f0       	brlt	.+2      	; 0xa2ec <main+0x6f9c>
    a2ea:	a6 c2       	rjmp	.+1356   	; 0xa838 <main+0x74e8>
				{
					right_degrees(135);
    a2ec:	87 e8       	ldi	r24, 0x87	; 135
    a2ee:	90 e0       	ldi	r25, 0x00	; 0
    a2f0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
					back_mm(65);
    a2f4:	81 e4       	ldi	r24, 0x41	; 65
    a2f6:	90 e0       	ldi	r25, 0x00	; 0
    a2f8:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
					matrix2();
    a2fc:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
						if(summ1[recur+1]>10)
    a300:	8f 81       	ldd	r24, Y+7	; 0x07
    a302:	98 85       	ldd	r25, Y+8	; 0x08
    a304:	01 96       	adiw	r24, 0x01	; 1
    a306:	9e 01       	movw	r18, r28
    a308:	25 54       	subi	r18, 0x45	; 69
    a30a:	39 4f       	sbci	r19, 0xF9	; 249
    a30c:	88 0f       	add	r24, r24
    a30e:	99 1f       	adc	r25, r25
    a310:	82 0f       	add	r24, r18
    a312:	93 1f       	adc	r25, r19
    a314:	fc 01       	movw	r30, r24
    a316:	80 81       	ld	r24, Z
    a318:	91 81       	ldd	r25, Z+1	; 0x01
    a31a:	8b 30       	cpi	r24, 0x0B	; 11
    a31c:	91 05       	cpc	r25, r1
    a31e:	0c f4       	brge	.+2      	; 0xa322 <main+0x6fd2>
    a320:	d6 c0       	rjmp	.+428    	; 0xa4ce <main+0x717e>
						{
							buzzer_on();
    a322:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    a326:	9e 01       	movw	r18, r28
    a328:	29 5b       	subi	r18, 0xB9	; 185
    a32a:	3c 4f       	sbci	r19, 0xFC	; 252
    a32c:	80 e0       	ldi	r24, 0x00	; 0
    a32e:	90 e0       	ldi	r25, 0x00	; 0
    a330:	aa e7       	ldi	r26, 0x7A	; 122
    a332:	b4 e4       	ldi	r27, 0x44	; 68
    a334:	f9 01       	movw	r30, r18
    a336:	80 83       	st	Z, r24
    a338:	91 83       	std	Z+1, r25	; 0x01
    a33a:	a2 83       	std	Z+2, r26	; 0x02
    a33c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a33e:	8e 01       	movw	r16, r28
    a340:	05 5b       	subi	r16, 0xB5	; 181
    a342:	1c 4f       	sbci	r17, 0xFC	; 252
    a344:	ce 01       	movw	r24, r28
    a346:	89 5b       	subi	r24, 0xB9	; 185
    a348:	9c 4f       	sbci	r25, 0xFC	; 252
    a34a:	fc 01       	movw	r30, r24
    a34c:	60 81       	ld	r22, Z
    a34e:	71 81       	ldd	r23, Z+1	; 0x01
    a350:	82 81       	ldd	r24, Z+2	; 0x02
    a352:	93 81       	ldd	r25, Z+3	; 0x03
    a354:	26 e6       	ldi	r18, 0x66	; 102
    a356:	36 e6       	ldi	r19, 0x66	; 102
    a358:	46 e6       	ldi	r20, 0x66	; 102
    a35a:	55 e4       	ldi	r21, 0x45	; 69
    a35c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a360:	dc 01       	movw	r26, r24
    a362:	cb 01       	movw	r24, r22
    a364:	f8 01       	movw	r30, r16
    a366:	80 83       	st	Z, r24
    a368:	91 83       	std	Z+1, r25	; 0x01
    a36a:	a2 83       	std	Z+2, r26	; 0x02
    a36c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a36e:	ce 01       	movw	r24, r28
    a370:	85 5b       	subi	r24, 0xB5	; 181
    a372:	9c 4f       	sbci	r25, 0xFC	; 252
    a374:	11 e0       	ldi	r17, 0x01	; 1
    a376:	fc 01       	movw	r30, r24
    a378:	60 81       	ld	r22, Z
    a37a:	71 81       	ldd	r23, Z+1	; 0x01
    a37c:	82 81       	ldd	r24, Z+2	; 0x02
    a37e:	93 81       	ldd	r25, Z+3	; 0x03
    a380:	20 e0       	ldi	r18, 0x00	; 0
    a382:	30 e0       	ldi	r19, 0x00	; 0
    a384:	40 e8       	ldi	r20, 0x80	; 128
    a386:	5f e3       	ldi	r21, 0x3F	; 63
    a388:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    a38c:	88 23       	and	r24, r24
    a38e:	0c f0       	brlt	.+2      	; 0xa392 <main+0x7042>
    a390:	10 e0       	ldi	r17, 0x00	; 0
    a392:	11 23       	and	r17, r17
    a394:	49 f0       	breq	.+18     	; 0xa3a8 <main+0x7058>
		__ticks = 1;
    a396:	ce 01       	movw	r24, r28
    a398:	81 5b       	subi	r24, 0xB1	; 177
    a39a:	9c 4f       	sbci	r25, 0xFC	; 252
    a39c:	21 e0       	ldi	r18, 0x01	; 1
    a39e:	30 e0       	ldi	r19, 0x00	; 0
    a3a0:	fc 01       	movw	r30, r24
    a3a2:	31 83       	std	Z+1, r19	; 0x01
    a3a4:	20 83       	st	Z, r18
    a3a6:	74 c0       	rjmp	.+232    	; 0xa490 <main+0x7140>
	else if (__tmp > 65535)
    a3a8:	ce 01       	movw	r24, r28
    a3aa:	85 5b       	subi	r24, 0xB5	; 181
    a3ac:	9c 4f       	sbci	r25, 0xFC	; 252
    a3ae:	11 e0       	ldi	r17, 0x01	; 1
    a3b0:	fc 01       	movw	r30, r24
    a3b2:	60 81       	ld	r22, Z
    a3b4:	71 81       	ldd	r23, Z+1	; 0x01
    a3b6:	82 81       	ldd	r24, Z+2	; 0x02
    a3b8:	93 81       	ldd	r25, Z+3	; 0x03
    a3ba:	20 e0       	ldi	r18, 0x00	; 0
    a3bc:	3f ef       	ldi	r19, 0xFF	; 255
    a3be:	4f e7       	ldi	r20, 0x7F	; 127
    a3c0:	57 e4       	ldi	r21, 0x47	; 71
    a3c2:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    a3c6:	18 16       	cp	r1, r24
    a3c8:	0c f0       	brlt	.+2      	; 0xa3cc <main+0x707c>
    a3ca:	10 e0       	ldi	r17, 0x00	; 0
    a3cc:	11 23       	and	r17, r17
    a3ce:	09 f4       	brne	.+2      	; 0xa3d2 <main+0x7082>
    a3d0:	4d c0       	rjmp	.+154    	; 0xa46c <main+0x711c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a3d2:	ce 01       	movw	r24, r28
    a3d4:	89 5b       	subi	r24, 0xB9	; 185
    a3d6:	9c 4f       	sbci	r25, 0xFC	; 252
    a3d8:	fc 01       	movw	r30, r24
    a3da:	60 81       	ld	r22, Z
    a3dc:	71 81       	ldd	r23, Z+1	; 0x01
    a3de:	82 81       	ldd	r24, Z+2	; 0x02
    a3e0:	93 81       	ldd	r25, Z+3	; 0x03
    a3e2:	20 e0       	ldi	r18, 0x00	; 0
    a3e4:	30 e0       	ldi	r19, 0x00	; 0
    a3e6:	40 e2       	ldi	r20, 0x20	; 32
    a3e8:	51 e4       	ldi	r21, 0x41	; 65
    a3ea:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a3ee:	dc 01       	movw	r26, r24
    a3f0:	cb 01       	movw	r24, r22
    a3f2:	8e 01       	movw	r16, r28
    a3f4:	01 5b       	subi	r16, 0xB1	; 177
    a3f6:	1c 4f       	sbci	r17, 0xFC	; 252
    a3f8:	bc 01       	movw	r22, r24
    a3fa:	cd 01       	movw	r24, r26
    a3fc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a400:	dc 01       	movw	r26, r24
    a402:	cb 01       	movw	r24, r22
    a404:	f8 01       	movw	r30, r16
    a406:	91 83       	std	Z+1, r25	; 0x01
    a408:	80 83       	st	Z, r24
    a40a:	27 c0       	rjmp	.+78     	; 0xa45a <main+0x710a>
    a40c:	ce 01       	movw	r24, r28
    a40e:	8f 5a       	subi	r24, 0xAF	; 175
    a410:	9c 4f       	sbci	r25, 0xFC	; 252
    a412:	20 e7       	ldi	r18, 0x70	; 112
    a414:	31 e0       	ldi	r19, 0x01	; 1
    a416:	fc 01       	movw	r30, r24
    a418:	31 83       	std	Z+1, r19	; 0x01
    a41a:	20 83       	st	Z, r18
    a41c:	ce 01       	movw	r24, r28
    a41e:	8f 5a       	subi	r24, 0xAF	; 175
    a420:	9c 4f       	sbci	r25, 0xFC	; 252
    a422:	fc 01       	movw	r30, r24
    a424:	80 81       	ld	r24, Z
    a426:	91 81       	ldd	r25, Z+1	; 0x01
    a428:	8c 01       	movw	r16, r24
    a42a:	c8 01       	movw	r24, r16
    a42c:	01 97       	sbiw	r24, 0x01	; 1
    a42e:	f1 f7       	brne	.-4      	; 0xa42c <main+0x70dc>
    a430:	8c 01       	movw	r16, r24
    a432:	ce 01       	movw	r24, r28
    a434:	8f 5a       	subi	r24, 0xAF	; 175
    a436:	9c 4f       	sbci	r25, 0xFC	; 252
    a438:	fc 01       	movw	r30, r24
    a43a:	11 83       	std	Z+1, r17	; 0x01
    a43c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a43e:	ce 01       	movw	r24, r28
    a440:	81 5b       	subi	r24, 0xB1	; 177
    a442:	9c 4f       	sbci	r25, 0xFC	; 252
    a444:	9e 01       	movw	r18, r28
    a446:	21 5b       	subi	r18, 0xB1	; 177
    a448:	3c 4f       	sbci	r19, 0xFC	; 252
    a44a:	f9 01       	movw	r30, r18
    a44c:	20 81       	ld	r18, Z
    a44e:	31 81       	ldd	r19, Z+1	; 0x01
    a450:	21 50       	subi	r18, 0x01	; 1
    a452:	30 40       	sbci	r19, 0x00	; 0
    a454:	fc 01       	movw	r30, r24
    a456:	31 83       	std	Z+1, r19	; 0x01
    a458:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a45a:	ce 01       	movw	r24, r28
    a45c:	81 5b       	subi	r24, 0xB1	; 177
    a45e:	9c 4f       	sbci	r25, 0xFC	; 252
    a460:	fc 01       	movw	r30, r24
    a462:	80 81       	ld	r24, Z
    a464:	91 81       	ldd	r25, Z+1	; 0x01
    a466:	00 97       	sbiw	r24, 0x00	; 0
    a468:	89 f6       	brne	.-94     	; 0xa40c <main+0x70bc>
    a46a:	2f c0       	rjmp	.+94     	; 0xa4ca <main+0x717a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a46c:	8e 01       	movw	r16, r28
    a46e:	01 5b       	subi	r16, 0xB1	; 177
    a470:	1c 4f       	sbci	r17, 0xFC	; 252
    a472:	ce 01       	movw	r24, r28
    a474:	85 5b       	subi	r24, 0xB5	; 181
    a476:	9c 4f       	sbci	r25, 0xFC	; 252
    a478:	fc 01       	movw	r30, r24
    a47a:	60 81       	ld	r22, Z
    a47c:	71 81       	ldd	r23, Z+1	; 0x01
    a47e:	82 81       	ldd	r24, Z+2	; 0x02
    a480:	93 81       	ldd	r25, Z+3	; 0x03
    a482:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a486:	dc 01       	movw	r26, r24
    a488:	cb 01       	movw	r24, r22
    a48a:	f8 01       	movw	r30, r16
    a48c:	91 83       	std	Z+1, r25	; 0x01
    a48e:	80 83       	st	Z, r24
    a490:	ce 01       	movw	r24, r28
    a492:	8d 5a       	subi	r24, 0xAD	; 173
    a494:	9c 4f       	sbci	r25, 0xFC	; 252
    a496:	9e 01       	movw	r18, r28
    a498:	21 5b       	subi	r18, 0xB1	; 177
    a49a:	3c 4f       	sbci	r19, 0xFC	; 252
    a49c:	f9 01       	movw	r30, r18
    a49e:	20 81       	ld	r18, Z
    a4a0:	31 81       	ldd	r19, Z+1	; 0x01
    a4a2:	fc 01       	movw	r30, r24
    a4a4:	31 83       	std	Z+1, r19	; 0x01
    a4a6:	20 83       	st	Z, r18
    a4a8:	ce 01       	movw	r24, r28
    a4aa:	8d 5a       	subi	r24, 0xAD	; 173
    a4ac:	9c 4f       	sbci	r25, 0xFC	; 252
    a4ae:	fc 01       	movw	r30, r24
    a4b0:	80 81       	ld	r24, Z
    a4b2:	91 81       	ldd	r25, Z+1	; 0x01
    a4b4:	8c 01       	movw	r16, r24
    a4b6:	c8 01       	movw	r24, r16
    a4b8:	01 97       	sbiw	r24, 0x01	; 1
    a4ba:	f1 f7       	brne	.-4      	; 0xa4b8 <main+0x7168>
    a4bc:	8c 01       	movw	r16, r24
    a4be:	ce 01       	movw	r24, r28
    a4c0:	8d 5a       	subi	r24, 0xAD	; 173
    a4c2:	9c 4f       	sbci	r25, 0xFC	; 252
    a4c4:	fc 01       	movw	r30, r24
    a4c6:	11 83       	std	Z+1, r17	; 0x01
    a4c8:	00 83       	st	Z, r16
							_delay_ms(1000);
							buzzer_off();
    a4ca:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
						}
					forward_mm(75);
    a4ce:	8b e4       	ldi	r24, 0x4B	; 75
    a4d0:	90 e0       	ldi	r25, 0x00	; 0
    a4d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    a4d6:	9e 01       	movw	r18, r28
    a4d8:	2b 5a       	subi	r18, 0xAB	; 171
    a4da:	3c 4f       	sbci	r19, 0xFC	; 252
    a4dc:	80 e0       	ldi	r24, 0x00	; 0
    a4de:	90 e0       	ldi	r25, 0x00	; 0
    a4e0:	a0 ef       	ldi	r26, 0xF0	; 240
    a4e2:	b1 e4       	ldi	r27, 0x41	; 65
    a4e4:	f9 01       	movw	r30, r18
    a4e6:	80 83       	st	Z, r24
    a4e8:	91 83       	std	Z+1, r25	; 0x01
    a4ea:	a2 83       	std	Z+2, r26	; 0x02
    a4ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a4ee:	8e 01       	movw	r16, r28
    a4f0:	07 5a       	subi	r16, 0xA7	; 167
    a4f2:	1c 4f       	sbci	r17, 0xFC	; 252
    a4f4:	ce 01       	movw	r24, r28
    a4f6:	8b 5a       	subi	r24, 0xAB	; 171
    a4f8:	9c 4f       	sbci	r25, 0xFC	; 252
    a4fa:	fc 01       	movw	r30, r24
    a4fc:	60 81       	ld	r22, Z
    a4fe:	71 81       	ldd	r23, Z+1	; 0x01
    a500:	82 81       	ldd	r24, Z+2	; 0x02
    a502:	93 81       	ldd	r25, Z+3	; 0x03
    a504:	26 e6       	ldi	r18, 0x66	; 102
    a506:	36 e6       	ldi	r19, 0x66	; 102
    a508:	46 e6       	ldi	r20, 0x66	; 102
    a50a:	55 e4       	ldi	r21, 0x45	; 69
    a50c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a510:	dc 01       	movw	r26, r24
    a512:	cb 01       	movw	r24, r22
    a514:	f8 01       	movw	r30, r16
    a516:	80 83       	st	Z, r24
    a518:	91 83       	std	Z+1, r25	; 0x01
    a51a:	a2 83       	std	Z+2, r26	; 0x02
    a51c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a51e:	ce 01       	movw	r24, r28
    a520:	87 5a       	subi	r24, 0xA7	; 167
    a522:	9c 4f       	sbci	r25, 0xFC	; 252
    a524:	11 e0       	ldi	r17, 0x01	; 1
    a526:	fc 01       	movw	r30, r24
    a528:	60 81       	ld	r22, Z
    a52a:	71 81       	ldd	r23, Z+1	; 0x01
    a52c:	82 81       	ldd	r24, Z+2	; 0x02
    a52e:	93 81       	ldd	r25, Z+3	; 0x03
    a530:	20 e0       	ldi	r18, 0x00	; 0
    a532:	30 e0       	ldi	r19, 0x00	; 0
    a534:	40 e8       	ldi	r20, 0x80	; 128
    a536:	5f e3       	ldi	r21, 0x3F	; 63
    a538:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    a53c:	88 23       	and	r24, r24
    a53e:	0c f0       	brlt	.+2      	; 0xa542 <main+0x71f2>
    a540:	10 e0       	ldi	r17, 0x00	; 0
    a542:	11 23       	and	r17, r17
    a544:	49 f0       	breq	.+18     	; 0xa558 <main+0x7208>
		__ticks = 1;
    a546:	ce 01       	movw	r24, r28
    a548:	83 5a       	subi	r24, 0xA3	; 163
    a54a:	9c 4f       	sbci	r25, 0xFC	; 252
    a54c:	21 e0       	ldi	r18, 0x01	; 1
    a54e:	30 e0       	ldi	r19, 0x00	; 0
    a550:	fc 01       	movw	r30, r24
    a552:	31 83       	std	Z+1, r19	; 0x01
    a554:	20 83       	st	Z, r18
    a556:	74 c0       	rjmp	.+232    	; 0xa640 <main+0x72f0>
	else if (__tmp > 65535)
    a558:	ce 01       	movw	r24, r28
    a55a:	87 5a       	subi	r24, 0xA7	; 167
    a55c:	9c 4f       	sbci	r25, 0xFC	; 252
    a55e:	11 e0       	ldi	r17, 0x01	; 1
    a560:	fc 01       	movw	r30, r24
    a562:	60 81       	ld	r22, Z
    a564:	71 81       	ldd	r23, Z+1	; 0x01
    a566:	82 81       	ldd	r24, Z+2	; 0x02
    a568:	93 81       	ldd	r25, Z+3	; 0x03
    a56a:	20 e0       	ldi	r18, 0x00	; 0
    a56c:	3f ef       	ldi	r19, 0xFF	; 255
    a56e:	4f e7       	ldi	r20, 0x7F	; 127
    a570:	57 e4       	ldi	r21, 0x47	; 71
    a572:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    a576:	18 16       	cp	r1, r24
    a578:	0c f0       	brlt	.+2      	; 0xa57c <main+0x722c>
    a57a:	10 e0       	ldi	r17, 0x00	; 0
    a57c:	11 23       	and	r17, r17
    a57e:	09 f4       	brne	.+2      	; 0xa582 <main+0x7232>
    a580:	4d c0       	rjmp	.+154    	; 0xa61c <main+0x72cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a582:	ce 01       	movw	r24, r28
    a584:	8b 5a       	subi	r24, 0xAB	; 171
    a586:	9c 4f       	sbci	r25, 0xFC	; 252
    a588:	fc 01       	movw	r30, r24
    a58a:	60 81       	ld	r22, Z
    a58c:	71 81       	ldd	r23, Z+1	; 0x01
    a58e:	82 81       	ldd	r24, Z+2	; 0x02
    a590:	93 81       	ldd	r25, Z+3	; 0x03
    a592:	20 e0       	ldi	r18, 0x00	; 0
    a594:	30 e0       	ldi	r19, 0x00	; 0
    a596:	40 e2       	ldi	r20, 0x20	; 32
    a598:	51 e4       	ldi	r21, 0x41	; 65
    a59a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a59e:	dc 01       	movw	r26, r24
    a5a0:	cb 01       	movw	r24, r22
    a5a2:	8e 01       	movw	r16, r28
    a5a4:	03 5a       	subi	r16, 0xA3	; 163
    a5a6:	1c 4f       	sbci	r17, 0xFC	; 252
    a5a8:	bc 01       	movw	r22, r24
    a5aa:	cd 01       	movw	r24, r26
    a5ac:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a5b0:	dc 01       	movw	r26, r24
    a5b2:	cb 01       	movw	r24, r22
    a5b4:	f8 01       	movw	r30, r16
    a5b6:	91 83       	std	Z+1, r25	; 0x01
    a5b8:	80 83       	st	Z, r24
    a5ba:	27 c0       	rjmp	.+78     	; 0xa60a <main+0x72ba>
    a5bc:	ce 01       	movw	r24, r28
    a5be:	81 5a       	subi	r24, 0xA1	; 161
    a5c0:	9c 4f       	sbci	r25, 0xFC	; 252
    a5c2:	20 e7       	ldi	r18, 0x70	; 112
    a5c4:	31 e0       	ldi	r19, 0x01	; 1
    a5c6:	fc 01       	movw	r30, r24
    a5c8:	31 83       	std	Z+1, r19	; 0x01
    a5ca:	20 83       	st	Z, r18
    a5cc:	ce 01       	movw	r24, r28
    a5ce:	81 5a       	subi	r24, 0xA1	; 161
    a5d0:	9c 4f       	sbci	r25, 0xFC	; 252
    a5d2:	fc 01       	movw	r30, r24
    a5d4:	80 81       	ld	r24, Z
    a5d6:	91 81       	ldd	r25, Z+1	; 0x01
    a5d8:	8c 01       	movw	r16, r24
    a5da:	c8 01       	movw	r24, r16
    a5dc:	01 97       	sbiw	r24, 0x01	; 1
    a5de:	f1 f7       	brne	.-4      	; 0xa5dc <main+0x728c>
    a5e0:	8c 01       	movw	r16, r24
    a5e2:	ce 01       	movw	r24, r28
    a5e4:	81 5a       	subi	r24, 0xA1	; 161
    a5e6:	9c 4f       	sbci	r25, 0xFC	; 252
    a5e8:	fc 01       	movw	r30, r24
    a5ea:	11 83       	std	Z+1, r17	; 0x01
    a5ec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5ee:	ce 01       	movw	r24, r28
    a5f0:	83 5a       	subi	r24, 0xA3	; 163
    a5f2:	9c 4f       	sbci	r25, 0xFC	; 252
    a5f4:	9e 01       	movw	r18, r28
    a5f6:	23 5a       	subi	r18, 0xA3	; 163
    a5f8:	3c 4f       	sbci	r19, 0xFC	; 252
    a5fa:	f9 01       	movw	r30, r18
    a5fc:	20 81       	ld	r18, Z
    a5fe:	31 81       	ldd	r19, Z+1	; 0x01
    a600:	21 50       	subi	r18, 0x01	; 1
    a602:	30 40       	sbci	r19, 0x00	; 0
    a604:	fc 01       	movw	r30, r24
    a606:	31 83       	std	Z+1, r19	; 0x01
    a608:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a60a:	ce 01       	movw	r24, r28
    a60c:	83 5a       	subi	r24, 0xA3	; 163
    a60e:	9c 4f       	sbci	r25, 0xFC	; 252
    a610:	fc 01       	movw	r30, r24
    a612:	80 81       	ld	r24, Z
    a614:	91 81       	ldd	r25, Z+1	; 0x01
    a616:	00 97       	sbiw	r24, 0x00	; 0
    a618:	89 f6       	brne	.-94     	; 0xa5bc <main+0x726c>
    a61a:	2f c0       	rjmp	.+94     	; 0xa67a <main+0x732a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a61c:	8e 01       	movw	r16, r28
    a61e:	03 5a       	subi	r16, 0xA3	; 163
    a620:	1c 4f       	sbci	r17, 0xFC	; 252
    a622:	ce 01       	movw	r24, r28
    a624:	87 5a       	subi	r24, 0xA7	; 167
    a626:	9c 4f       	sbci	r25, 0xFC	; 252
    a628:	fc 01       	movw	r30, r24
    a62a:	60 81       	ld	r22, Z
    a62c:	71 81       	ldd	r23, Z+1	; 0x01
    a62e:	82 81       	ldd	r24, Z+2	; 0x02
    a630:	93 81       	ldd	r25, Z+3	; 0x03
    a632:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a636:	dc 01       	movw	r26, r24
    a638:	cb 01       	movw	r24, r22
    a63a:	f8 01       	movw	r30, r16
    a63c:	91 83       	std	Z+1, r25	; 0x01
    a63e:	80 83       	st	Z, r24
    a640:	ce 01       	movw	r24, r28
    a642:	8f 59       	subi	r24, 0x9F	; 159
    a644:	9c 4f       	sbci	r25, 0xFC	; 252
    a646:	9e 01       	movw	r18, r28
    a648:	23 5a       	subi	r18, 0xA3	; 163
    a64a:	3c 4f       	sbci	r19, 0xFC	; 252
    a64c:	f9 01       	movw	r30, r18
    a64e:	20 81       	ld	r18, Z
    a650:	31 81       	ldd	r19, Z+1	; 0x01
    a652:	fc 01       	movw	r30, r24
    a654:	31 83       	std	Z+1, r19	; 0x01
    a656:	20 83       	st	Z, r18
    a658:	ce 01       	movw	r24, r28
    a65a:	8f 59       	subi	r24, 0x9F	; 159
    a65c:	9c 4f       	sbci	r25, 0xFC	; 252
    a65e:	fc 01       	movw	r30, r24
    a660:	80 81       	ld	r24, Z
    a662:	91 81       	ldd	r25, Z+1	; 0x01
    a664:	8c 01       	movw	r16, r24
    a666:	c8 01       	movw	r24, r16
    a668:	01 97       	sbiw	r24, 0x01	; 1
    a66a:	f1 f7       	brne	.-4      	; 0xa668 <main+0x7318>
    a66c:	8c 01       	movw	r16, r24
    a66e:	ce 01       	movw	r24, r28
    a670:	8f 59       	subi	r24, 0x9F	; 159
    a672:	9c 4f       	sbci	r25, 0xFC	; 252
    a674:	fc 01       	movw	r30, r24
    a676:	11 83       	std	Z+1, r17	; 0x01
    a678:	00 83       	st	Z, r16
					_delay_ms(30);
					back_mm(10);
    a67a:	8a e0       	ldi	r24, 0x0A	; 10
    a67c:	90 e0       	ldi	r25, 0x00	; 0
    a67e:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    a682:	9e 01       	movw	r18, r28
    a684:	2d 59       	subi	r18, 0x9D	; 157
    a686:	3c 4f       	sbci	r19, 0xFC	; 252
    a688:	80 e0       	ldi	r24, 0x00	; 0
    a68a:	90 e0       	ldi	r25, 0x00	; 0
    a68c:	aa ef       	ldi	r26, 0xFA	; 250
    a68e:	b3 e4       	ldi	r27, 0x43	; 67
    a690:	f9 01       	movw	r30, r18
    a692:	80 83       	st	Z, r24
    a694:	91 83       	std	Z+1, r25	; 0x01
    a696:	a2 83       	std	Z+2, r26	; 0x02
    a698:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a69a:	8e 01       	movw	r16, r28
    a69c:	09 59       	subi	r16, 0x99	; 153
    a69e:	1c 4f       	sbci	r17, 0xFC	; 252
    a6a0:	ce 01       	movw	r24, r28
    a6a2:	8d 59       	subi	r24, 0x9D	; 157
    a6a4:	9c 4f       	sbci	r25, 0xFC	; 252
    a6a6:	fc 01       	movw	r30, r24
    a6a8:	60 81       	ld	r22, Z
    a6aa:	71 81       	ldd	r23, Z+1	; 0x01
    a6ac:	82 81       	ldd	r24, Z+2	; 0x02
    a6ae:	93 81       	ldd	r25, Z+3	; 0x03
    a6b0:	26 e6       	ldi	r18, 0x66	; 102
    a6b2:	36 e6       	ldi	r19, 0x66	; 102
    a6b4:	46 e6       	ldi	r20, 0x66	; 102
    a6b6:	55 e4       	ldi	r21, 0x45	; 69
    a6b8:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a6bc:	dc 01       	movw	r26, r24
    a6be:	cb 01       	movw	r24, r22
    a6c0:	f8 01       	movw	r30, r16
    a6c2:	80 83       	st	Z, r24
    a6c4:	91 83       	std	Z+1, r25	; 0x01
    a6c6:	a2 83       	std	Z+2, r26	; 0x02
    a6c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a6ca:	ce 01       	movw	r24, r28
    a6cc:	89 59       	subi	r24, 0x99	; 153
    a6ce:	9c 4f       	sbci	r25, 0xFC	; 252
    a6d0:	11 e0       	ldi	r17, 0x01	; 1
    a6d2:	fc 01       	movw	r30, r24
    a6d4:	60 81       	ld	r22, Z
    a6d6:	71 81       	ldd	r23, Z+1	; 0x01
    a6d8:	82 81       	ldd	r24, Z+2	; 0x02
    a6da:	93 81       	ldd	r25, Z+3	; 0x03
    a6dc:	20 e0       	ldi	r18, 0x00	; 0
    a6de:	30 e0       	ldi	r19, 0x00	; 0
    a6e0:	40 e8       	ldi	r20, 0x80	; 128
    a6e2:	5f e3       	ldi	r21, 0x3F	; 63
    a6e4:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    a6e8:	88 23       	and	r24, r24
    a6ea:	0c f0       	brlt	.+2      	; 0xa6ee <main+0x739e>
    a6ec:	10 e0       	ldi	r17, 0x00	; 0
    a6ee:	11 23       	and	r17, r17
    a6f0:	49 f0       	breq	.+18     	; 0xa704 <main+0x73b4>
		__ticks = 1;
    a6f2:	ce 01       	movw	r24, r28
    a6f4:	85 59       	subi	r24, 0x95	; 149
    a6f6:	9c 4f       	sbci	r25, 0xFC	; 252
    a6f8:	21 e0       	ldi	r18, 0x01	; 1
    a6fa:	30 e0       	ldi	r19, 0x00	; 0
    a6fc:	fc 01       	movw	r30, r24
    a6fe:	31 83       	std	Z+1, r19	; 0x01
    a700:	20 83       	st	Z, r18
    a702:	74 c0       	rjmp	.+232    	; 0xa7ec <main+0x749c>
	else if (__tmp > 65535)
    a704:	ce 01       	movw	r24, r28
    a706:	89 59       	subi	r24, 0x99	; 153
    a708:	9c 4f       	sbci	r25, 0xFC	; 252
    a70a:	11 e0       	ldi	r17, 0x01	; 1
    a70c:	fc 01       	movw	r30, r24
    a70e:	60 81       	ld	r22, Z
    a710:	71 81       	ldd	r23, Z+1	; 0x01
    a712:	82 81       	ldd	r24, Z+2	; 0x02
    a714:	93 81       	ldd	r25, Z+3	; 0x03
    a716:	20 e0       	ldi	r18, 0x00	; 0
    a718:	3f ef       	ldi	r19, 0xFF	; 255
    a71a:	4f e7       	ldi	r20, 0x7F	; 127
    a71c:	57 e4       	ldi	r21, 0x47	; 71
    a71e:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    a722:	18 16       	cp	r1, r24
    a724:	0c f0       	brlt	.+2      	; 0xa728 <main+0x73d8>
    a726:	10 e0       	ldi	r17, 0x00	; 0
    a728:	11 23       	and	r17, r17
    a72a:	09 f4       	brne	.+2      	; 0xa72e <main+0x73de>
    a72c:	4d c0       	rjmp	.+154    	; 0xa7c8 <main+0x7478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a72e:	ce 01       	movw	r24, r28
    a730:	8d 59       	subi	r24, 0x9D	; 157
    a732:	9c 4f       	sbci	r25, 0xFC	; 252
    a734:	fc 01       	movw	r30, r24
    a736:	60 81       	ld	r22, Z
    a738:	71 81       	ldd	r23, Z+1	; 0x01
    a73a:	82 81       	ldd	r24, Z+2	; 0x02
    a73c:	93 81       	ldd	r25, Z+3	; 0x03
    a73e:	20 e0       	ldi	r18, 0x00	; 0
    a740:	30 e0       	ldi	r19, 0x00	; 0
    a742:	40 e2       	ldi	r20, 0x20	; 32
    a744:	51 e4       	ldi	r21, 0x41	; 65
    a746:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a74a:	dc 01       	movw	r26, r24
    a74c:	cb 01       	movw	r24, r22
    a74e:	8e 01       	movw	r16, r28
    a750:	05 59       	subi	r16, 0x95	; 149
    a752:	1c 4f       	sbci	r17, 0xFC	; 252
    a754:	bc 01       	movw	r22, r24
    a756:	cd 01       	movw	r24, r26
    a758:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a75c:	dc 01       	movw	r26, r24
    a75e:	cb 01       	movw	r24, r22
    a760:	f8 01       	movw	r30, r16
    a762:	91 83       	std	Z+1, r25	; 0x01
    a764:	80 83       	st	Z, r24
    a766:	27 c0       	rjmp	.+78     	; 0xa7b6 <main+0x7466>
    a768:	ce 01       	movw	r24, r28
    a76a:	83 59       	subi	r24, 0x93	; 147
    a76c:	9c 4f       	sbci	r25, 0xFC	; 252
    a76e:	20 e7       	ldi	r18, 0x70	; 112
    a770:	31 e0       	ldi	r19, 0x01	; 1
    a772:	fc 01       	movw	r30, r24
    a774:	31 83       	std	Z+1, r19	; 0x01
    a776:	20 83       	st	Z, r18
    a778:	ce 01       	movw	r24, r28
    a77a:	83 59       	subi	r24, 0x93	; 147
    a77c:	9c 4f       	sbci	r25, 0xFC	; 252
    a77e:	fc 01       	movw	r30, r24
    a780:	80 81       	ld	r24, Z
    a782:	91 81       	ldd	r25, Z+1	; 0x01
    a784:	8c 01       	movw	r16, r24
    a786:	c8 01       	movw	r24, r16
    a788:	01 97       	sbiw	r24, 0x01	; 1
    a78a:	f1 f7       	brne	.-4      	; 0xa788 <main+0x7438>
    a78c:	8c 01       	movw	r16, r24
    a78e:	ce 01       	movw	r24, r28
    a790:	83 59       	subi	r24, 0x93	; 147
    a792:	9c 4f       	sbci	r25, 0xFC	; 252
    a794:	fc 01       	movw	r30, r24
    a796:	11 83       	std	Z+1, r17	; 0x01
    a798:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a79a:	ce 01       	movw	r24, r28
    a79c:	85 59       	subi	r24, 0x95	; 149
    a79e:	9c 4f       	sbci	r25, 0xFC	; 252
    a7a0:	9e 01       	movw	r18, r28
    a7a2:	25 59       	subi	r18, 0x95	; 149
    a7a4:	3c 4f       	sbci	r19, 0xFC	; 252
    a7a6:	f9 01       	movw	r30, r18
    a7a8:	20 81       	ld	r18, Z
    a7aa:	31 81       	ldd	r19, Z+1	; 0x01
    a7ac:	21 50       	subi	r18, 0x01	; 1
    a7ae:	30 40       	sbci	r19, 0x00	; 0
    a7b0:	fc 01       	movw	r30, r24
    a7b2:	31 83       	std	Z+1, r19	; 0x01
    a7b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7b6:	ce 01       	movw	r24, r28
    a7b8:	85 59       	subi	r24, 0x95	; 149
    a7ba:	9c 4f       	sbci	r25, 0xFC	; 252
    a7bc:	fc 01       	movw	r30, r24
    a7be:	80 81       	ld	r24, Z
    a7c0:	91 81       	ldd	r25, Z+1	; 0x01
    a7c2:	00 97       	sbiw	r24, 0x00	; 0
    a7c4:	89 f6       	brne	.-94     	; 0xa768 <main+0x7418>
    a7c6:	2f c0       	rjmp	.+94     	; 0xa826 <main+0x74d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a7c8:	8e 01       	movw	r16, r28
    a7ca:	05 59       	subi	r16, 0x95	; 149
    a7cc:	1c 4f       	sbci	r17, 0xFC	; 252
    a7ce:	ce 01       	movw	r24, r28
    a7d0:	89 59       	subi	r24, 0x99	; 153
    a7d2:	9c 4f       	sbci	r25, 0xFC	; 252
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	60 81       	ld	r22, Z
    a7d8:	71 81       	ldd	r23, Z+1	; 0x01
    a7da:	82 81       	ldd	r24, Z+2	; 0x02
    a7dc:	93 81       	ldd	r25, Z+3	; 0x03
    a7de:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a7e2:	dc 01       	movw	r26, r24
    a7e4:	cb 01       	movw	r24, r22
    a7e6:	f8 01       	movw	r30, r16
    a7e8:	91 83       	std	Z+1, r25	; 0x01
    a7ea:	80 83       	st	Z, r24
    a7ec:	ce 01       	movw	r24, r28
    a7ee:	81 59       	subi	r24, 0x91	; 145
    a7f0:	9c 4f       	sbci	r25, 0xFC	; 252
    a7f2:	9e 01       	movw	r18, r28
    a7f4:	25 59       	subi	r18, 0x95	; 149
    a7f6:	3c 4f       	sbci	r19, 0xFC	; 252
    a7f8:	f9 01       	movw	r30, r18
    a7fa:	20 81       	ld	r18, Z
    a7fc:	31 81       	ldd	r19, Z+1	; 0x01
    a7fe:	fc 01       	movw	r30, r24
    a800:	31 83       	std	Z+1, r19	; 0x01
    a802:	20 83       	st	Z, r18
    a804:	ce 01       	movw	r24, r28
    a806:	81 59       	subi	r24, 0x91	; 145
    a808:	9c 4f       	sbci	r25, 0xFC	; 252
    a80a:	fc 01       	movw	r30, r24
    a80c:	80 81       	ld	r24, Z
    a80e:	91 81       	ldd	r25, Z+1	; 0x01
    a810:	8c 01       	movw	r16, r24
    a812:	c8 01       	movw	r24, r16
    a814:	01 97       	sbiw	r24, 0x01	; 1
    a816:	f1 f7       	brne	.-4      	; 0xa814 <main+0x74c4>
    a818:	8c 01       	movw	r16, r24
    a81a:	ce 01       	movw	r24, r28
    a81c:	81 59       	subi	r24, 0x91	; 145
    a81e:	9c 4f       	sbci	r25, 0xFC	; 252
    a820:	fc 01       	movw	r30, r24
    a822:	11 83       	std	Z+1, r17	; 0x01
    a824:	00 83       	st	Z, r16
					_delay_ms(500);
					right_degrees(40);
    a826:	88 e2       	ldi	r24, 0x28	; 40
    a828:	90 e0       	ldi	r25, 0x00	; 0
    a82a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
					compass=7;
    a82e:	87 e0       	ldi	r24, 0x07	; 7
    a830:	90 e0       	ldi	r25, 0x00	; 0
    a832:	9c 83       	std	Y+4, r25	; 0x04
    a834:	8b 83       	std	Y+3, r24	; 0x03
					break;
    a836:	f7 c2       	rjmp	.+1518   	; 0xae26 <main+0x7ad6>
				}
				if(coor[1]>origin2[boxnumber][i][1] && coor[0]<origin2[boxnumber][i][0])
    a838:	20 91 a8 04 	lds	r18, 0x04A8
    a83c:	30 91 a9 04 	lds	r19, 0x04A9
    a840:	ae 01       	movw	r20, r28
    a842:	4d 5f       	subi	r20, 0xFD	; 253
    a844:	5a 4f       	sbci	r21, 0xFA	; 250
    a846:	8d 81       	ldd	r24, Y+5	; 0x05
    a848:	9e 81       	ldd	r25, Y+6	; 0x06
    a84a:	bc 01       	movw	r22, r24
    a84c:	66 0f       	add	r22, r22
    a84e:	77 1f       	adc	r23, r23
    a850:	66 0f       	add	r22, r22
    a852:	77 1f       	adc	r23, r23
    a854:	8d a1       	lds	r24, 0x4d
    a856:	9e a1       	lds	r25, 0x4e
    a858:	86 0f       	add	r24, r22
    a85a:	97 1f       	adc	r25, r23
    a85c:	88 0f       	add	r24, r24
    a85e:	99 1f       	adc	r25, r25
    a860:	88 0f       	add	r24, r24
    a862:	99 1f       	adc	r25, r25
    a864:	84 0f       	add	r24, r20
    a866:	95 1f       	adc	r25, r21
    a868:	02 96       	adiw	r24, 0x02	; 2
    a86a:	fc 01       	movw	r30, r24
    a86c:	80 81       	ld	r24, Z
    a86e:	91 81       	ldd	r25, Z+1	; 0x01
    a870:	82 17       	cp	r24, r18
    a872:	93 07       	cpc	r25, r19
    a874:	0c f0       	brlt	.+2      	; 0xa878 <main+0x7528>
    a876:	c9 c2       	rjmp	.+1426   	; 0xae0a <main+0x7aba>
    a878:	20 91 a6 04 	lds	r18, 0x04A6
    a87c:	30 91 a7 04 	lds	r19, 0x04A7
    a880:	ae 01       	movw	r20, r28
    a882:	4d 5f       	subi	r20, 0xFD	; 253
    a884:	5a 4f       	sbci	r21, 0xFA	; 250
    a886:	8d 81       	ldd	r24, Y+5	; 0x05
    a888:	9e 81       	ldd	r25, Y+6	; 0x06
    a88a:	bc 01       	movw	r22, r24
    a88c:	66 0f       	add	r22, r22
    a88e:	77 1f       	adc	r23, r23
    a890:	66 0f       	add	r22, r22
    a892:	77 1f       	adc	r23, r23
    a894:	8d a1       	lds	r24, 0x4d
    a896:	9e a1       	lds	r25, 0x4e
    a898:	86 0f       	add	r24, r22
    a89a:	97 1f       	adc	r25, r23
    a89c:	88 0f       	add	r24, r24
    a89e:	99 1f       	adc	r25, r25
    a8a0:	88 0f       	add	r24, r24
    a8a2:	99 1f       	adc	r25, r25
    a8a4:	84 0f       	add	r24, r20
    a8a6:	95 1f       	adc	r25, r21
    a8a8:	fc 01       	movw	r30, r24
    a8aa:	80 81       	ld	r24, Z
    a8ac:	91 81       	ldd	r25, Z+1	; 0x01
    a8ae:	28 17       	cp	r18, r24
    a8b0:	39 07       	cpc	r19, r25
    a8b2:	0c f0       	brlt	.+2      	; 0xa8b6 <main+0x7566>
    a8b4:	aa c2       	rjmp	.+1364   	; 0xae0a <main+0x7aba>
				{
					right_degrees(45);
    a8b6:	8d e2       	ldi	r24, 0x2D	; 45
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
					back_mm(65);
    a8be:	81 e4       	ldi	r24, 0x41	; 65
    a8c0:	90 e0       	ldi	r25, 0x00	; 0
    a8c2:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
					matrix2();
    a8c6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
						if(summ1[recur+1]>10)
    a8ca:	8f 81       	ldd	r24, Y+7	; 0x07
    a8cc:	98 85       	ldd	r25, Y+8	; 0x08
    a8ce:	01 96       	adiw	r24, 0x01	; 1
    a8d0:	9e 01       	movw	r18, r28
    a8d2:	25 54       	subi	r18, 0x45	; 69
    a8d4:	39 4f       	sbci	r19, 0xF9	; 249
    a8d6:	88 0f       	add	r24, r24
    a8d8:	99 1f       	adc	r25, r25
    a8da:	82 0f       	add	r24, r18
    a8dc:	93 1f       	adc	r25, r19
    a8de:	fc 01       	movw	r30, r24
    a8e0:	80 81       	ld	r24, Z
    a8e2:	91 81       	ldd	r25, Z+1	; 0x01
    a8e4:	8b 30       	cpi	r24, 0x0B	; 11
    a8e6:	91 05       	cpc	r25, r1
    a8e8:	0c f4       	brge	.+2      	; 0xa8ec <main+0x759c>
    a8ea:	d6 c0       	rjmp	.+428    	; 0xaa98 <main+0x7748>
						{
							buzzer_on();
    a8ec:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    a8f0:	9e 01       	movw	r18, r28
    a8f2:	2f 58       	subi	r18, 0x8F	; 143
    a8f4:	3c 4f       	sbci	r19, 0xFC	; 252
    a8f6:	80 e0       	ldi	r24, 0x00	; 0
    a8f8:	90 e0       	ldi	r25, 0x00	; 0
    a8fa:	aa e7       	ldi	r26, 0x7A	; 122
    a8fc:	b4 e4       	ldi	r27, 0x44	; 68
    a8fe:	f9 01       	movw	r30, r18
    a900:	80 83       	st	Z, r24
    a902:	91 83       	std	Z+1, r25	; 0x01
    a904:	a2 83       	std	Z+2, r26	; 0x02
    a906:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a908:	8e 01       	movw	r16, r28
    a90a:	0b 58       	subi	r16, 0x8B	; 139
    a90c:	1c 4f       	sbci	r17, 0xFC	; 252
    a90e:	ce 01       	movw	r24, r28
    a910:	8f 58       	subi	r24, 0x8F	; 143
    a912:	9c 4f       	sbci	r25, 0xFC	; 252
    a914:	fc 01       	movw	r30, r24
    a916:	60 81       	ld	r22, Z
    a918:	71 81       	ldd	r23, Z+1	; 0x01
    a91a:	82 81       	ldd	r24, Z+2	; 0x02
    a91c:	93 81       	ldd	r25, Z+3	; 0x03
    a91e:	26 e6       	ldi	r18, 0x66	; 102
    a920:	36 e6       	ldi	r19, 0x66	; 102
    a922:	46 e6       	ldi	r20, 0x66	; 102
    a924:	55 e4       	ldi	r21, 0x45	; 69
    a926:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a92a:	dc 01       	movw	r26, r24
    a92c:	cb 01       	movw	r24, r22
    a92e:	f8 01       	movw	r30, r16
    a930:	80 83       	st	Z, r24
    a932:	91 83       	std	Z+1, r25	; 0x01
    a934:	a2 83       	std	Z+2, r26	; 0x02
    a936:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a938:	ce 01       	movw	r24, r28
    a93a:	8b 58       	subi	r24, 0x8B	; 139
    a93c:	9c 4f       	sbci	r25, 0xFC	; 252
    a93e:	11 e0       	ldi	r17, 0x01	; 1
    a940:	fc 01       	movw	r30, r24
    a942:	60 81       	ld	r22, Z
    a944:	71 81       	ldd	r23, Z+1	; 0x01
    a946:	82 81       	ldd	r24, Z+2	; 0x02
    a948:	93 81       	ldd	r25, Z+3	; 0x03
    a94a:	20 e0       	ldi	r18, 0x00	; 0
    a94c:	30 e0       	ldi	r19, 0x00	; 0
    a94e:	40 e8       	ldi	r20, 0x80	; 128
    a950:	5f e3       	ldi	r21, 0x3F	; 63
    a952:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    a956:	88 23       	and	r24, r24
    a958:	0c f0       	brlt	.+2      	; 0xa95c <main+0x760c>
    a95a:	10 e0       	ldi	r17, 0x00	; 0
    a95c:	11 23       	and	r17, r17
    a95e:	49 f0       	breq	.+18     	; 0xa972 <main+0x7622>
		__ticks = 1;
    a960:	ce 01       	movw	r24, r28
    a962:	87 58       	subi	r24, 0x87	; 135
    a964:	9c 4f       	sbci	r25, 0xFC	; 252
    a966:	21 e0       	ldi	r18, 0x01	; 1
    a968:	30 e0       	ldi	r19, 0x00	; 0
    a96a:	fc 01       	movw	r30, r24
    a96c:	31 83       	std	Z+1, r19	; 0x01
    a96e:	20 83       	st	Z, r18
    a970:	74 c0       	rjmp	.+232    	; 0xaa5a <main+0x770a>
	else if (__tmp > 65535)
    a972:	ce 01       	movw	r24, r28
    a974:	8b 58       	subi	r24, 0x8B	; 139
    a976:	9c 4f       	sbci	r25, 0xFC	; 252
    a978:	11 e0       	ldi	r17, 0x01	; 1
    a97a:	fc 01       	movw	r30, r24
    a97c:	60 81       	ld	r22, Z
    a97e:	71 81       	ldd	r23, Z+1	; 0x01
    a980:	82 81       	ldd	r24, Z+2	; 0x02
    a982:	93 81       	ldd	r25, Z+3	; 0x03
    a984:	20 e0       	ldi	r18, 0x00	; 0
    a986:	3f ef       	ldi	r19, 0xFF	; 255
    a988:	4f e7       	ldi	r20, 0x7F	; 127
    a98a:	57 e4       	ldi	r21, 0x47	; 71
    a98c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    a990:	18 16       	cp	r1, r24
    a992:	0c f0       	brlt	.+2      	; 0xa996 <main+0x7646>
    a994:	10 e0       	ldi	r17, 0x00	; 0
    a996:	11 23       	and	r17, r17
    a998:	09 f4       	brne	.+2      	; 0xa99c <main+0x764c>
    a99a:	4d c0       	rjmp	.+154    	; 0xaa36 <main+0x76e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a99c:	ce 01       	movw	r24, r28
    a99e:	8f 58       	subi	r24, 0x8F	; 143
    a9a0:	9c 4f       	sbci	r25, 0xFC	; 252
    a9a2:	fc 01       	movw	r30, r24
    a9a4:	60 81       	ld	r22, Z
    a9a6:	71 81       	ldd	r23, Z+1	; 0x01
    a9a8:	82 81       	ldd	r24, Z+2	; 0x02
    a9aa:	93 81       	ldd	r25, Z+3	; 0x03
    a9ac:	20 e0       	ldi	r18, 0x00	; 0
    a9ae:	30 e0       	ldi	r19, 0x00	; 0
    a9b0:	40 e2       	ldi	r20, 0x20	; 32
    a9b2:	51 e4       	ldi	r21, 0x41	; 65
    a9b4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    a9b8:	dc 01       	movw	r26, r24
    a9ba:	cb 01       	movw	r24, r22
    a9bc:	8e 01       	movw	r16, r28
    a9be:	07 58       	subi	r16, 0x87	; 135
    a9c0:	1c 4f       	sbci	r17, 0xFC	; 252
    a9c2:	bc 01       	movw	r22, r24
    a9c4:	cd 01       	movw	r24, r26
    a9c6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    a9ca:	dc 01       	movw	r26, r24
    a9cc:	cb 01       	movw	r24, r22
    a9ce:	f8 01       	movw	r30, r16
    a9d0:	91 83       	std	Z+1, r25	; 0x01
    a9d2:	80 83       	st	Z, r24
    a9d4:	27 c0       	rjmp	.+78     	; 0xaa24 <main+0x76d4>
    a9d6:	ce 01       	movw	r24, r28
    a9d8:	85 58       	subi	r24, 0x85	; 133
    a9da:	9c 4f       	sbci	r25, 0xFC	; 252
    a9dc:	20 e7       	ldi	r18, 0x70	; 112
    a9de:	31 e0       	ldi	r19, 0x01	; 1
    a9e0:	fc 01       	movw	r30, r24
    a9e2:	31 83       	std	Z+1, r19	; 0x01
    a9e4:	20 83       	st	Z, r18
    a9e6:	ce 01       	movw	r24, r28
    a9e8:	85 58       	subi	r24, 0x85	; 133
    a9ea:	9c 4f       	sbci	r25, 0xFC	; 252
    a9ec:	fc 01       	movw	r30, r24
    a9ee:	80 81       	ld	r24, Z
    a9f0:	91 81       	ldd	r25, Z+1	; 0x01
    a9f2:	8c 01       	movw	r16, r24
    a9f4:	c8 01       	movw	r24, r16
    a9f6:	01 97       	sbiw	r24, 0x01	; 1
    a9f8:	f1 f7       	brne	.-4      	; 0xa9f6 <main+0x76a6>
    a9fa:	8c 01       	movw	r16, r24
    a9fc:	ce 01       	movw	r24, r28
    a9fe:	85 58       	subi	r24, 0x85	; 133
    aa00:	9c 4f       	sbci	r25, 0xFC	; 252
    aa02:	fc 01       	movw	r30, r24
    aa04:	11 83       	std	Z+1, r17	; 0x01
    aa06:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa08:	ce 01       	movw	r24, r28
    aa0a:	87 58       	subi	r24, 0x87	; 135
    aa0c:	9c 4f       	sbci	r25, 0xFC	; 252
    aa0e:	9e 01       	movw	r18, r28
    aa10:	27 58       	subi	r18, 0x87	; 135
    aa12:	3c 4f       	sbci	r19, 0xFC	; 252
    aa14:	f9 01       	movw	r30, r18
    aa16:	20 81       	ld	r18, Z
    aa18:	31 81       	ldd	r19, Z+1	; 0x01
    aa1a:	21 50       	subi	r18, 0x01	; 1
    aa1c:	30 40       	sbci	r19, 0x00	; 0
    aa1e:	fc 01       	movw	r30, r24
    aa20:	31 83       	std	Z+1, r19	; 0x01
    aa22:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa24:	ce 01       	movw	r24, r28
    aa26:	87 58       	subi	r24, 0x87	; 135
    aa28:	9c 4f       	sbci	r25, 0xFC	; 252
    aa2a:	fc 01       	movw	r30, r24
    aa2c:	80 81       	ld	r24, Z
    aa2e:	91 81       	ldd	r25, Z+1	; 0x01
    aa30:	00 97       	sbiw	r24, 0x00	; 0
    aa32:	89 f6       	brne	.-94     	; 0xa9d6 <main+0x7686>
    aa34:	2f c0       	rjmp	.+94     	; 0xaa94 <main+0x7744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aa36:	8e 01       	movw	r16, r28
    aa38:	07 58       	subi	r16, 0x87	; 135
    aa3a:	1c 4f       	sbci	r17, 0xFC	; 252
    aa3c:	ce 01       	movw	r24, r28
    aa3e:	8b 58       	subi	r24, 0x8B	; 139
    aa40:	9c 4f       	sbci	r25, 0xFC	; 252
    aa42:	fc 01       	movw	r30, r24
    aa44:	60 81       	ld	r22, Z
    aa46:	71 81       	ldd	r23, Z+1	; 0x01
    aa48:	82 81       	ldd	r24, Z+2	; 0x02
    aa4a:	93 81       	ldd	r25, Z+3	; 0x03
    aa4c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    aa50:	dc 01       	movw	r26, r24
    aa52:	cb 01       	movw	r24, r22
    aa54:	f8 01       	movw	r30, r16
    aa56:	91 83       	std	Z+1, r25	; 0x01
    aa58:	80 83       	st	Z, r24
    aa5a:	ce 01       	movw	r24, r28
    aa5c:	83 58       	subi	r24, 0x83	; 131
    aa5e:	9c 4f       	sbci	r25, 0xFC	; 252
    aa60:	9e 01       	movw	r18, r28
    aa62:	27 58       	subi	r18, 0x87	; 135
    aa64:	3c 4f       	sbci	r19, 0xFC	; 252
    aa66:	f9 01       	movw	r30, r18
    aa68:	20 81       	ld	r18, Z
    aa6a:	31 81       	ldd	r19, Z+1	; 0x01
    aa6c:	fc 01       	movw	r30, r24
    aa6e:	31 83       	std	Z+1, r19	; 0x01
    aa70:	20 83       	st	Z, r18
    aa72:	ce 01       	movw	r24, r28
    aa74:	83 58       	subi	r24, 0x83	; 131
    aa76:	9c 4f       	sbci	r25, 0xFC	; 252
    aa78:	fc 01       	movw	r30, r24
    aa7a:	80 81       	ld	r24, Z
    aa7c:	91 81       	ldd	r25, Z+1	; 0x01
    aa7e:	8c 01       	movw	r16, r24
    aa80:	c8 01       	movw	r24, r16
    aa82:	01 97       	sbiw	r24, 0x01	; 1
    aa84:	f1 f7       	brne	.-4      	; 0xaa82 <main+0x7732>
    aa86:	8c 01       	movw	r16, r24
    aa88:	ce 01       	movw	r24, r28
    aa8a:	83 58       	subi	r24, 0x83	; 131
    aa8c:	9c 4f       	sbci	r25, 0xFC	; 252
    aa8e:	fc 01       	movw	r30, r24
    aa90:	11 83       	std	Z+1, r17	; 0x01
    aa92:	00 83       	st	Z, r16
							_delay_ms(1000);
							buzzer_off();
    aa94:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
						}
					forward_mm(75);
    aa98:	8b e4       	ldi	r24, 0x4B	; 75
    aa9a:	90 e0       	ldi	r25, 0x00	; 0
    aa9c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    aaa0:	9e 01       	movw	r18, r28
    aaa2:	21 58       	subi	r18, 0x81	; 129
    aaa4:	3c 4f       	sbci	r19, 0xFC	; 252
    aaa6:	80 e0       	ldi	r24, 0x00	; 0
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	a0 ef       	ldi	r26, 0xF0	; 240
    aaac:	b1 e4       	ldi	r27, 0x41	; 65
    aaae:	f9 01       	movw	r30, r18
    aab0:	80 83       	st	Z, r24
    aab2:	91 83       	std	Z+1, r25	; 0x01
    aab4:	a2 83       	std	Z+2, r26	; 0x02
    aab6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    aab8:	8e 01       	movw	r16, r28
    aaba:	0d 57       	subi	r16, 0x7D	; 125
    aabc:	1c 4f       	sbci	r17, 0xFC	; 252
    aabe:	ce 01       	movw	r24, r28
    aac0:	81 58       	subi	r24, 0x81	; 129
    aac2:	9c 4f       	sbci	r25, 0xFC	; 252
    aac4:	fc 01       	movw	r30, r24
    aac6:	60 81       	ld	r22, Z
    aac8:	71 81       	ldd	r23, Z+1	; 0x01
    aaca:	82 81       	ldd	r24, Z+2	; 0x02
    aacc:	93 81       	ldd	r25, Z+3	; 0x03
    aace:	26 e6       	ldi	r18, 0x66	; 102
    aad0:	36 e6       	ldi	r19, 0x66	; 102
    aad2:	46 e6       	ldi	r20, 0x66	; 102
    aad4:	55 e4       	ldi	r21, 0x45	; 69
    aad6:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    aada:	dc 01       	movw	r26, r24
    aadc:	cb 01       	movw	r24, r22
    aade:	f8 01       	movw	r30, r16
    aae0:	80 83       	st	Z, r24
    aae2:	91 83       	std	Z+1, r25	; 0x01
    aae4:	a2 83       	std	Z+2, r26	; 0x02
    aae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    aae8:	ce 01       	movw	r24, r28
    aaea:	8d 57       	subi	r24, 0x7D	; 125
    aaec:	9c 4f       	sbci	r25, 0xFC	; 252
    aaee:	11 e0       	ldi	r17, 0x01	; 1
    aaf0:	fc 01       	movw	r30, r24
    aaf2:	60 81       	ld	r22, Z
    aaf4:	71 81       	ldd	r23, Z+1	; 0x01
    aaf6:	82 81       	ldd	r24, Z+2	; 0x02
    aaf8:	93 81       	ldd	r25, Z+3	; 0x03
    aafa:	20 e0       	ldi	r18, 0x00	; 0
    aafc:	30 e0       	ldi	r19, 0x00	; 0
    aafe:	40 e8       	ldi	r20, 0x80	; 128
    ab00:	5f e3       	ldi	r21, 0x3F	; 63
    ab02:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    ab06:	88 23       	and	r24, r24
    ab08:	0c f0       	brlt	.+2      	; 0xab0c <main+0x77bc>
    ab0a:	10 e0       	ldi	r17, 0x00	; 0
    ab0c:	11 23       	and	r17, r17
    ab0e:	49 f0       	breq	.+18     	; 0xab22 <main+0x77d2>
		__ticks = 1;
    ab10:	ce 01       	movw	r24, r28
    ab12:	89 57       	subi	r24, 0x79	; 121
    ab14:	9c 4f       	sbci	r25, 0xFC	; 252
    ab16:	21 e0       	ldi	r18, 0x01	; 1
    ab18:	30 e0       	ldi	r19, 0x00	; 0
    ab1a:	fc 01       	movw	r30, r24
    ab1c:	31 83       	std	Z+1, r19	; 0x01
    ab1e:	20 83       	st	Z, r18
    ab20:	74 c0       	rjmp	.+232    	; 0xac0a <main+0x78ba>
	else if (__tmp > 65535)
    ab22:	ce 01       	movw	r24, r28
    ab24:	8d 57       	subi	r24, 0x7D	; 125
    ab26:	9c 4f       	sbci	r25, 0xFC	; 252
    ab28:	11 e0       	ldi	r17, 0x01	; 1
    ab2a:	fc 01       	movw	r30, r24
    ab2c:	60 81       	ld	r22, Z
    ab2e:	71 81       	ldd	r23, Z+1	; 0x01
    ab30:	82 81       	ldd	r24, Z+2	; 0x02
    ab32:	93 81       	ldd	r25, Z+3	; 0x03
    ab34:	20 e0       	ldi	r18, 0x00	; 0
    ab36:	3f ef       	ldi	r19, 0xFF	; 255
    ab38:	4f e7       	ldi	r20, 0x7F	; 127
    ab3a:	57 e4       	ldi	r21, 0x47	; 71
    ab3c:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    ab40:	18 16       	cp	r1, r24
    ab42:	0c f0       	brlt	.+2      	; 0xab46 <main+0x77f6>
    ab44:	10 e0       	ldi	r17, 0x00	; 0
    ab46:	11 23       	and	r17, r17
    ab48:	09 f4       	brne	.+2      	; 0xab4c <main+0x77fc>
    ab4a:	4d c0       	rjmp	.+154    	; 0xabe6 <main+0x7896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ab4c:	ce 01       	movw	r24, r28
    ab4e:	81 58       	subi	r24, 0x81	; 129
    ab50:	9c 4f       	sbci	r25, 0xFC	; 252
    ab52:	fc 01       	movw	r30, r24
    ab54:	60 81       	ld	r22, Z
    ab56:	71 81       	ldd	r23, Z+1	; 0x01
    ab58:	82 81       	ldd	r24, Z+2	; 0x02
    ab5a:	93 81       	ldd	r25, Z+3	; 0x03
    ab5c:	20 e0       	ldi	r18, 0x00	; 0
    ab5e:	30 e0       	ldi	r19, 0x00	; 0
    ab60:	40 e2       	ldi	r20, 0x20	; 32
    ab62:	51 e4       	ldi	r21, 0x41	; 65
    ab64:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    ab68:	dc 01       	movw	r26, r24
    ab6a:	cb 01       	movw	r24, r22
    ab6c:	8e 01       	movw	r16, r28
    ab6e:	09 57       	subi	r16, 0x79	; 121
    ab70:	1c 4f       	sbci	r17, 0xFC	; 252
    ab72:	bc 01       	movw	r22, r24
    ab74:	cd 01       	movw	r24, r26
    ab76:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    ab7a:	dc 01       	movw	r26, r24
    ab7c:	cb 01       	movw	r24, r22
    ab7e:	f8 01       	movw	r30, r16
    ab80:	91 83       	std	Z+1, r25	; 0x01
    ab82:	80 83       	st	Z, r24
    ab84:	27 c0       	rjmp	.+78     	; 0xabd4 <main+0x7884>
    ab86:	ce 01       	movw	r24, r28
    ab88:	87 57       	subi	r24, 0x77	; 119
    ab8a:	9c 4f       	sbci	r25, 0xFC	; 252
    ab8c:	20 e7       	ldi	r18, 0x70	; 112
    ab8e:	31 e0       	ldi	r19, 0x01	; 1
    ab90:	fc 01       	movw	r30, r24
    ab92:	31 83       	std	Z+1, r19	; 0x01
    ab94:	20 83       	st	Z, r18
    ab96:	ce 01       	movw	r24, r28
    ab98:	87 57       	subi	r24, 0x77	; 119
    ab9a:	9c 4f       	sbci	r25, 0xFC	; 252
    ab9c:	fc 01       	movw	r30, r24
    ab9e:	80 81       	ld	r24, Z
    aba0:	91 81       	ldd	r25, Z+1	; 0x01
    aba2:	8c 01       	movw	r16, r24
    aba4:	c8 01       	movw	r24, r16
    aba6:	01 97       	sbiw	r24, 0x01	; 1
    aba8:	f1 f7       	brne	.-4      	; 0xaba6 <main+0x7856>
    abaa:	8c 01       	movw	r16, r24
    abac:	ce 01       	movw	r24, r28
    abae:	87 57       	subi	r24, 0x77	; 119
    abb0:	9c 4f       	sbci	r25, 0xFC	; 252
    abb2:	fc 01       	movw	r30, r24
    abb4:	11 83       	std	Z+1, r17	; 0x01
    abb6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abb8:	ce 01       	movw	r24, r28
    abba:	89 57       	subi	r24, 0x79	; 121
    abbc:	9c 4f       	sbci	r25, 0xFC	; 252
    abbe:	9e 01       	movw	r18, r28
    abc0:	29 57       	subi	r18, 0x79	; 121
    abc2:	3c 4f       	sbci	r19, 0xFC	; 252
    abc4:	f9 01       	movw	r30, r18
    abc6:	20 81       	ld	r18, Z
    abc8:	31 81       	ldd	r19, Z+1	; 0x01
    abca:	21 50       	subi	r18, 0x01	; 1
    abcc:	30 40       	sbci	r19, 0x00	; 0
    abce:	fc 01       	movw	r30, r24
    abd0:	31 83       	std	Z+1, r19	; 0x01
    abd2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    abd4:	ce 01       	movw	r24, r28
    abd6:	89 57       	subi	r24, 0x79	; 121
    abd8:	9c 4f       	sbci	r25, 0xFC	; 252
    abda:	fc 01       	movw	r30, r24
    abdc:	80 81       	ld	r24, Z
    abde:	91 81       	ldd	r25, Z+1	; 0x01
    abe0:	00 97       	sbiw	r24, 0x00	; 0
    abe2:	89 f6       	brne	.-94     	; 0xab86 <main+0x7836>
    abe4:	2f c0       	rjmp	.+94     	; 0xac44 <main+0x78f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    abe6:	8e 01       	movw	r16, r28
    abe8:	09 57       	subi	r16, 0x79	; 121
    abea:	1c 4f       	sbci	r17, 0xFC	; 252
    abec:	ce 01       	movw	r24, r28
    abee:	8d 57       	subi	r24, 0x7D	; 125
    abf0:	9c 4f       	sbci	r25, 0xFC	; 252
    abf2:	fc 01       	movw	r30, r24
    abf4:	60 81       	ld	r22, Z
    abf6:	71 81       	ldd	r23, Z+1	; 0x01
    abf8:	82 81       	ldd	r24, Z+2	; 0x02
    abfa:	93 81       	ldd	r25, Z+3	; 0x03
    abfc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    ac00:	dc 01       	movw	r26, r24
    ac02:	cb 01       	movw	r24, r22
    ac04:	f8 01       	movw	r30, r16
    ac06:	91 83       	std	Z+1, r25	; 0x01
    ac08:	80 83       	st	Z, r24
    ac0a:	ce 01       	movw	r24, r28
    ac0c:	85 57       	subi	r24, 0x75	; 117
    ac0e:	9c 4f       	sbci	r25, 0xFC	; 252
    ac10:	9e 01       	movw	r18, r28
    ac12:	29 57       	subi	r18, 0x79	; 121
    ac14:	3c 4f       	sbci	r19, 0xFC	; 252
    ac16:	f9 01       	movw	r30, r18
    ac18:	20 81       	ld	r18, Z
    ac1a:	31 81       	ldd	r19, Z+1	; 0x01
    ac1c:	fc 01       	movw	r30, r24
    ac1e:	31 83       	std	Z+1, r19	; 0x01
    ac20:	20 83       	st	Z, r18
    ac22:	ce 01       	movw	r24, r28
    ac24:	85 57       	subi	r24, 0x75	; 117
    ac26:	9c 4f       	sbci	r25, 0xFC	; 252
    ac28:	fc 01       	movw	r30, r24
    ac2a:	80 81       	ld	r24, Z
    ac2c:	91 81       	ldd	r25, Z+1	; 0x01
    ac2e:	8c 01       	movw	r16, r24
    ac30:	c8 01       	movw	r24, r16
    ac32:	01 97       	sbiw	r24, 0x01	; 1
    ac34:	f1 f7       	brne	.-4      	; 0xac32 <main+0x78e2>
    ac36:	8c 01       	movw	r16, r24
    ac38:	ce 01       	movw	r24, r28
    ac3a:	85 57       	subi	r24, 0x75	; 117
    ac3c:	9c 4f       	sbci	r25, 0xFC	; 252
    ac3e:	fc 01       	movw	r30, r24
    ac40:	11 83       	std	Z+1, r17	; 0x01
    ac42:	00 83       	st	Z, r16
					_delay_ms(30);
					back_mm(65);
    ac44:	81 e4       	ldi	r24, 0x41	; 65
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    ac4c:	9e 01       	movw	r18, r28
    ac4e:	23 57       	subi	r18, 0x73	; 115
    ac50:	3c 4f       	sbci	r19, 0xFC	; 252
    ac52:	80 e0       	ldi	r24, 0x00	; 0
    ac54:	90 e0       	ldi	r25, 0x00	; 0
    ac56:	aa ef       	ldi	r26, 0xFA	; 250
    ac58:	b3 e4       	ldi	r27, 0x43	; 67
    ac5a:	f9 01       	movw	r30, r18
    ac5c:	80 83       	st	Z, r24
    ac5e:	91 83       	std	Z+1, r25	; 0x01
    ac60:	a2 83       	std	Z+2, r26	; 0x02
    ac62:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ac64:	8e 01       	movw	r16, r28
    ac66:	0f 56       	subi	r16, 0x6F	; 111
    ac68:	1c 4f       	sbci	r17, 0xFC	; 252
    ac6a:	ce 01       	movw	r24, r28
    ac6c:	83 57       	subi	r24, 0x73	; 115
    ac6e:	9c 4f       	sbci	r25, 0xFC	; 252
    ac70:	fc 01       	movw	r30, r24
    ac72:	60 81       	ld	r22, Z
    ac74:	71 81       	ldd	r23, Z+1	; 0x01
    ac76:	82 81       	ldd	r24, Z+2	; 0x02
    ac78:	93 81       	ldd	r25, Z+3	; 0x03
    ac7a:	26 e6       	ldi	r18, 0x66	; 102
    ac7c:	36 e6       	ldi	r19, 0x66	; 102
    ac7e:	46 e6       	ldi	r20, 0x66	; 102
    ac80:	55 e4       	ldi	r21, 0x45	; 69
    ac82:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    ac86:	dc 01       	movw	r26, r24
    ac88:	cb 01       	movw	r24, r22
    ac8a:	f8 01       	movw	r30, r16
    ac8c:	80 83       	st	Z, r24
    ac8e:	91 83       	std	Z+1, r25	; 0x01
    ac90:	a2 83       	std	Z+2, r26	; 0x02
    ac92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ac94:	ce 01       	movw	r24, r28
    ac96:	8f 56       	subi	r24, 0x6F	; 111
    ac98:	9c 4f       	sbci	r25, 0xFC	; 252
    ac9a:	11 e0       	ldi	r17, 0x01	; 1
    ac9c:	fc 01       	movw	r30, r24
    ac9e:	60 81       	ld	r22, Z
    aca0:	71 81       	ldd	r23, Z+1	; 0x01
    aca2:	82 81       	ldd	r24, Z+2	; 0x02
    aca4:	93 81       	ldd	r25, Z+3	; 0x03
    aca6:	20 e0       	ldi	r18, 0x00	; 0
    aca8:	30 e0       	ldi	r19, 0x00	; 0
    acaa:	40 e8       	ldi	r20, 0x80	; 128
    acac:	5f e3       	ldi	r21, 0x3F	; 63
    acae:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    acb2:	88 23       	and	r24, r24
    acb4:	0c f0       	brlt	.+2      	; 0xacb8 <main+0x7968>
    acb6:	10 e0       	ldi	r17, 0x00	; 0
    acb8:	11 23       	and	r17, r17
    acba:	49 f0       	breq	.+18     	; 0xacce <main+0x797e>
		__ticks = 1;
    acbc:	ce 01       	movw	r24, r28
    acbe:	8b 56       	subi	r24, 0x6B	; 107
    acc0:	9c 4f       	sbci	r25, 0xFC	; 252
    acc2:	21 e0       	ldi	r18, 0x01	; 1
    acc4:	30 e0       	ldi	r19, 0x00	; 0
    acc6:	fc 01       	movw	r30, r24
    acc8:	31 83       	std	Z+1, r19	; 0x01
    acca:	20 83       	st	Z, r18
    accc:	74 c0       	rjmp	.+232    	; 0xadb6 <main+0x7a66>
	else if (__tmp > 65535)
    acce:	ce 01       	movw	r24, r28
    acd0:	8f 56       	subi	r24, 0x6F	; 111
    acd2:	9c 4f       	sbci	r25, 0xFC	; 252
    acd4:	11 e0       	ldi	r17, 0x01	; 1
    acd6:	fc 01       	movw	r30, r24
    acd8:	60 81       	ld	r22, Z
    acda:	71 81       	ldd	r23, Z+1	; 0x01
    acdc:	82 81       	ldd	r24, Z+2	; 0x02
    acde:	93 81       	ldd	r25, Z+3	; 0x03
    ace0:	20 e0       	ldi	r18, 0x00	; 0
    ace2:	3f ef       	ldi	r19, 0xFF	; 255
    ace4:	4f e7       	ldi	r20, 0x7F	; 127
    ace6:	57 e4       	ldi	r21, 0x47	; 71
    ace8:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    acec:	18 16       	cp	r1, r24
    acee:	0c f0       	brlt	.+2      	; 0xacf2 <main+0x79a2>
    acf0:	10 e0       	ldi	r17, 0x00	; 0
    acf2:	11 23       	and	r17, r17
    acf4:	09 f4       	brne	.+2      	; 0xacf8 <main+0x79a8>
    acf6:	4d c0       	rjmp	.+154    	; 0xad92 <main+0x7a42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    acf8:	ce 01       	movw	r24, r28
    acfa:	83 57       	subi	r24, 0x73	; 115
    acfc:	9c 4f       	sbci	r25, 0xFC	; 252
    acfe:	fc 01       	movw	r30, r24
    ad00:	60 81       	ld	r22, Z
    ad02:	71 81       	ldd	r23, Z+1	; 0x01
    ad04:	82 81       	ldd	r24, Z+2	; 0x02
    ad06:	93 81       	ldd	r25, Z+3	; 0x03
    ad08:	20 e0       	ldi	r18, 0x00	; 0
    ad0a:	30 e0       	ldi	r19, 0x00	; 0
    ad0c:	40 e2       	ldi	r20, 0x20	; 32
    ad0e:	51 e4       	ldi	r21, 0x41	; 65
    ad10:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    ad14:	dc 01       	movw	r26, r24
    ad16:	cb 01       	movw	r24, r22
    ad18:	8e 01       	movw	r16, r28
    ad1a:	0b 56       	subi	r16, 0x6B	; 107
    ad1c:	1c 4f       	sbci	r17, 0xFC	; 252
    ad1e:	bc 01       	movw	r22, r24
    ad20:	cd 01       	movw	r24, r26
    ad22:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    ad26:	dc 01       	movw	r26, r24
    ad28:	cb 01       	movw	r24, r22
    ad2a:	f8 01       	movw	r30, r16
    ad2c:	91 83       	std	Z+1, r25	; 0x01
    ad2e:	80 83       	st	Z, r24
    ad30:	27 c0       	rjmp	.+78     	; 0xad80 <main+0x7a30>
    ad32:	ce 01       	movw	r24, r28
    ad34:	89 56       	subi	r24, 0x69	; 105
    ad36:	9c 4f       	sbci	r25, 0xFC	; 252
    ad38:	20 e7       	ldi	r18, 0x70	; 112
    ad3a:	31 e0       	ldi	r19, 0x01	; 1
    ad3c:	fc 01       	movw	r30, r24
    ad3e:	31 83       	std	Z+1, r19	; 0x01
    ad40:	20 83       	st	Z, r18
    ad42:	ce 01       	movw	r24, r28
    ad44:	89 56       	subi	r24, 0x69	; 105
    ad46:	9c 4f       	sbci	r25, 0xFC	; 252
    ad48:	fc 01       	movw	r30, r24
    ad4a:	80 81       	ld	r24, Z
    ad4c:	91 81       	ldd	r25, Z+1	; 0x01
    ad4e:	8c 01       	movw	r16, r24
    ad50:	c8 01       	movw	r24, r16
    ad52:	01 97       	sbiw	r24, 0x01	; 1
    ad54:	f1 f7       	brne	.-4      	; 0xad52 <main+0x7a02>
    ad56:	8c 01       	movw	r16, r24
    ad58:	ce 01       	movw	r24, r28
    ad5a:	89 56       	subi	r24, 0x69	; 105
    ad5c:	9c 4f       	sbci	r25, 0xFC	; 252
    ad5e:	fc 01       	movw	r30, r24
    ad60:	11 83       	std	Z+1, r17	; 0x01
    ad62:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad64:	ce 01       	movw	r24, r28
    ad66:	8b 56       	subi	r24, 0x6B	; 107
    ad68:	9c 4f       	sbci	r25, 0xFC	; 252
    ad6a:	9e 01       	movw	r18, r28
    ad6c:	2b 56       	subi	r18, 0x6B	; 107
    ad6e:	3c 4f       	sbci	r19, 0xFC	; 252
    ad70:	f9 01       	movw	r30, r18
    ad72:	20 81       	ld	r18, Z
    ad74:	31 81       	ldd	r19, Z+1	; 0x01
    ad76:	21 50       	subi	r18, 0x01	; 1
    ad78:	30 40       	sbci	r19, 0x00	; 0
    ad7a:	fc 01       	movw	r30, r24
    ad7c:	31 83       	std	Z+1, r19	; 0x01
    ad7e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad80:	ce 01       	movw	r24, r28
    ad82:	8b 56       	subi	r24, 0x6B	; 107
    ad84:	9c 4f       	sbci	r25, 0xFC	; 252
    ad86:	fc 01       	movw	r30, r24
    ad88:	80 81       	ld	r24, Z
    ad8a:	91 81       	ldd	r25, Z+1	; 0x01
    ad8c:	00 97       	sbiw	r24, 0x00	; 0
    ad8e:	89 f6       	brne	.-94     	; 0xad32 <main+0x79e2>
    ad90:	2f c0       	rjmp	.+94     	; 0xadf0 <main+0x7aa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ad92:	8e 01       	movw	r16, r28
    ad94:	0b 56       	subi	r16, 0x6B	; 107
    ad96:	1c 4f       	sbci	r17, 0xFC	; 252
    ad98:	ce 01       	movw	r24, r28
    ad9a:	8f 56       	subi	r24, 0x6F	; 111
    ad9c:	9c 4f       	sbci	r25, 0xFC	; 252
    ad9e:	fc 01       	movw	r30, r24
    ada0:	60 81       	ld	r22, Z
    ada2:	71 81       	ldd	r23, Z+1	; 0x01
    ada4:	82 81       	ldd	r24, Z+2	; 0x02
    ada6:	93 81       	ldd	r25, Z+3	; 0x03
    ada8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    adac:	dc 01       	movw	r26, r24
    adae:	cb 01       	movw	r24, r22
    adb0:	f8 01       	movw	r30, r16
    adb2:	91 83       	std	Z+1, r25	; 0x01
    adb4:	80 83       	st	Z, r24
    adb6:	ce 01       	movw	r24, r28
    adb8:	87 56       	subi	r24, 0x67	; 103
    adba:	9c 4f       	sbci	r25, 0xFC	; 252
    adbc:	9e 01       	movw	r18, r28
    adbe:	2b 56       	subi	r18, 0x6B	; 107
    adc0:	3c 4f       	sbci	r19, 0xFC	; 252
    adc2:	f9 01       	movw	r30, r18
    adc4:	20 81       	ld	r18, Z
    adc6:	31 81       	ldd	r19, Z+1	; 0x01
    adc8:	fc 01       	movw	r30, r24
    adca:	31 83       	std	Z+1, r19	; 0x01
    adcc:	20 83       	st	Z, r18
    adce:	ce 01       	movw	r24, r28
    add0:	87 56       	subi	r24, 0x67	; 103
    add2:	9c 4f       	sbci	r25, 0xFC	; 252
    add4:	fc 01       	movw	r30, r24
    add6:	80 81       	ld	r24, Z
    add8:	91 81       	ldd	r25, Z+1	; 0x01
    adda:	8c 01       	movw	r16, r24
    addc:	c8 01       	movw	r24, r16
    adde:	01 97       	sbiw	r24, 0x01	; 1
    ade0:	f1 f7       	brne	.-4      	; 0xadde <main+0x7a8e>
    ade2:	8c 01       	movw	r16, r24
    ade4:	ce 01       	movw	r24, r28
    ade6:	87 56       	subi	r24, 0x67	; 103
    ade8:	9c 4f       	sbci	r25, 0xFC	; 252
    adea:	fc 01       	movw	r30, r24
    adec:	11 83       	std	Z+1, r17	; 0x01
    adee:	00 83       	st	Z, r16
					_delay_ms(500);
					left_degrees(45);
    adf0:	8d e2       	ldi	r24, 0x2D	; 45
    adf2:	90 e0       	ldi	r25, 0x00	; 0
    adf4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
					right_degrees(180);
    adf8:	84 eb       	ldi	r24, 0xB4	; 180
    adfa:	90 e0       	ldi	r25, 0x00	; 0
    adfc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
					compass=7;
    ae00:	87 e0       	ldi	r24, 0x07	; 7
    ae02:	90 e0       	ldi	r25, 0x00	; 0
    ae04:	9c 83       	std	Y+4, r25	; 0x04
    ae06:	8b 83       	std	Y+3, r24	; 0x03
					break;
    ae08:	0e c0       	rjmp	.+28     	; 0xae26 <main+0x7ad6>
	}
	else
	{
		if(compass==6)
		{
			for(int i=0;i<4;i++)
    ae0a:	8d a1       	lds	r24, 0x4d
    ae0c:	9e a1       	lds	r25, 0x4e
    ae0e:	01 96       	adiw	r24, 0x01	; 1
    ae10:	9e a3       	lds	r25, 0x5e
    ae12:	8d a3       	lds	r24, 0x5d
    ae14:	8d a1       	lds	r24, 0x4d
    ae16:	9e a1       	lds	r25, 0x4e
    ae18:	84 30       	cpi	r24, 0x04	; 4
    ae1a:	91 05       	cpc	r25, r1
    ae1c:	14 f4       	brge	.+4      	; 0xae22 <main+0x7ad2>
    ae1e:	0c 94 52 4e 	jmp	0x9ca4	; 0x9ca4 <main+0x6954>
    ae22:	0c 94 c7 62 	jmp	0xc58e	; 0xc58e <main+0x923e>
					}
				}					
			}
		}
	}
	goto hotspot;
    ae26:	0c 94 9b 36 	jmp	0x6d36	; 0x6d36 <main+0x39e6>
				}
			}
		}
		else
		{
			if(compass==7)
    ae2a:	8b 81       	ldd	r24, Y+3	; 0x03
    ae2c:	9c 81       	ldd	r25, Y+4	; 0x04
    ae2e:	87 30       	cpi	r24, 0x07	; 7
    ae30:	91 05       	cpc	r25, r1
    ae32:	11 f0       	breq	.+4      	; 0xae38 <main+0x7ae8>
    ae34:	0c 94 9b 36 	jmp	0x6d36	; 0x6d36 <main+0x39e6>
			{
				for(int i=0;i<4;i++)
    ae38:	18 a6       	lds	r17, 0xb8
    ae3a:	1f a2       	lds	r17, 0x9f
    ae3c:	0c 94 be 62 	jmp	0xc57c	; 0xc57c <main+0x922c>
				{
					if(coor[1]<origin2[boxnumber][i][1] && coor[0]>origin2[boxnumber][i][0])
    ae40:	20 91 a8 04 	lds	r18, 0x04A8
    ae44:	30 91 a9 04 	lds	r19, 0x04A9
    ae48:	ae 01       	movw	r20, r28
    ae4a:	4d 5f       	subi	r20, 0xFD	; 253
    ae4c:	5a 4f       	sbci	r21, 0xFA	; 250
    ae4e:	8d 81       	ldd	r24, Y+5	; 0x05
    ae50:	9e 81       	ldd	r25, Y+6	; 0x06
    ae52:	bc 01       	movw	r22, r24
    ae54:	66 0f       	add	r22, r22
    ae56:	77 1f       	adc	r23, r23
    ae58:	66 0f       	add	r22, r22
    ae5a:	77 1f       	adc	r23, r23
    ae5c:	8f a1       	lds	r24, 0x4f
    ae5e:	98 a5       	lds	r25, 0x68
    ae60:	86 0f       	add	r24, r22
    ae62:	97 1f       	adc	r25, r23
    ae64:	88 0f       	add	r24, r24
    ae66:	99 1f       	adc	r25, r25
    ae68:	88 0f       	add	r24, r24
    ae6a:	99 1f       	adc	r25, r25
    ae6c:	84 0f       	add	r24, r20
    ae6e:	95 1f       	adc	r25, r21
    ae70:	02 96       	adiw	r24, 0x02	; 2
    ae72:	fc 01       	movw	r30, r24
    ae74:	80 81       	ld	r24, Z
    ae76:	91 81       	ldd	r25, Z+1	; 0x01
    ae78:	28 17       	cp	r18, r24
    ae7a:	39 07       	cpc	r19, r25
    ae7c:	0c f0       	brlt	.+2      	; 0xae80 <main+0x7b30>
    ae7e:	ca c2       	rjmp	.+1428   	; 0xb414 <main+0x80c4>
    ae80:	20 91 a6 04 	lds	r18, 0x04A6
    ae84:	30 91 a7 04 	lds	r19, 0x04A7
    ae88:	ae 01       	movw	r20, r28
    ae8a:	4d 5f       	subi	r20, 0xFD	; 253
    ae8c:	5a 4f       	sbci	r21, 0xFA	; 250
    ae8e:	8d 81       	ldd	r24, Y+5	; 0x05
    ae90:	9e 81       	ldd	r25, Y+6	; 0x06
    ae92:	bc 01       	movw	r22, r24
    ae94:	66 0f       	add	r22, r22
    ae96:	77 1f       	adc	r23, r23
    ae98:	66 0f       	add	r22, r22
    ae9a:	77 1f       	adc	r23, r23
    ae9c:	8f a1       	lds	r24, 0x4f
    ae9e:	98 a5       	lds	r25, 0x68
    aea0:	86 0f       	add	r24, r22
    aea2:	97 1f       	adc	r25, r23
    aea4:	88 0f       	add	r24, r24
    aea6:	99 1f       	adc	r25, r25
    aea8:	88 0f       	add	r24, r24
    aeaa:	99 1f       	adc	r25, r25
    aeac:	84 0f       	add	r24, r20
    aeae:	95 1f       	adc	r25, r21
    aeb0:	fc 01       	movw	r30, r24
    aeb2:	80 81       	ld	r24, Z
    aeb4:	91 81       	ldd	r25, Z+1	; 0x01
    aeb6:	82 17       	cp	r24, r18
    aeb8:	93 07       	cpc	r25, r19
    aeba:	0c f0       	brlt	.+2      	; 0xaebe <main+0x7b6e>
    aebc:	ab c2       	rjmp	.+1366   	; 0xb414 <main+0x80c4>
					{
						right_degrees(45);
    aebe:	8d e2       	ldi	r24, 0x2D	; 45
    aec0:	90 e0       	ldi	r25, 0x00	; 0
    aec2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						back_mm(65);
    aec6:	81 e4       	ldi	r24, 0x41	; 65
    aec8:	90 e0       	ldi	r25, 0x00	; 0
    aeca:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
						matrix2();
    aece:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
							if(summ1[recur+1]>10)
    aed2:	8f 81       	ldd	r24, Y+7	; 0x07
    aed4:	98 85       	ldd	r25, Y+8	; 0x08
    aed6:	01 96       	adiw	r24, 0x01	; 1
    aed8:	9e 01       	movw	r18, r28
    aeda:	25 54       	subi	r18, 0x45	; 69
    aedc:	39 4f       	sbci	r19, 0xF9	; 249
    aede:	88 0f       	add	r24, r24
    aee0:	99 1f       	adc	r25, r25
    aee2:	82 0f       	add	r24, r18
    aee4:	93 1f       	adc	r25, r19
    aee6:	fc 01       	movw	r30, r24
    aee8:	80 81       	ld	r24, Z
    aeea:	91 81       	ldd	r25, Z+1	; 0x01
    aeec:	8b 30       	cpi	r24, 0x0B	; 11
    aeee:	91 05       	cpc	r25, r1
    aef0:	0c f4       	brge	.+2      	; 0xaef4 <main+0x7ba4>
    aef2:	d6 c0       	rjmp	.+428    	; 0xb0a0 <main+0x7d50>
							{
								buzzer_on();
    aef4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    aef8:	9e 01       	movw	r18, r28
    aefa:	25 56       	subi	r18, 0x65	; 101
    aefc:	3c 4f       	sbci	r19, 0xFC	; 252
    aefe:	80 e0       	ldi	r24, 0x00	; 0
    af00:	90 e0       	ldi	r25, 0x00	; 0
    af02:	aa e7       	ldi	r26, 0x7A	; 122
    af04:	b4 e4       	ldi	r27, 0x44	; 68
    af06:	f9 01       	movw	r30, r18
    af08:	80 83       	st	Z, r24
    af0a:	91 83       	std	Z+1, r25	; 0x01
    af0c:	a2 83       	std	Z+2, r26	; 0x02
    af0e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    af10:	8e 01       	movw	r16, r28
    af12:	01 56       	subi	r16, 0x61	; 97
    af14:	1c 4f       	sbci	r17, 0xFC	; 252
    af16:	ce 01       	movw	r24, r28
    af18:	85 56       	subi	r24, 0x65	; 101
    af1a:	9c 4f       	sbci	r25, 0xFC	; 252
    af1c:	fc 01       	movw	r30, r24
    af1e:	60 81       	ld	r22, Z
    af20:	71 81       	ldd	r23, Z+1	; 0x01
    af22:	82 81       	ldd	r24, Z+2	; 0x02
    af24:	93 81       	ldd	r25, Z+3	; 0x03
    af26:	26 e6       	ldi	r18, 0x66	; 102
    af28:	36 e6       	ldi	r19, 0x66	; 102
    af2a:	46 e6       	ldi	r20, 0x66	; 102
    af2c:	55 e4       	ldi	r21, 0x45	; 69
    af2e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    af32:	dc 01       	movw	r26, r24
    af34:	cb 01       	movw	r24, r22
    af36:	f8 01       	movw	r30, r16
    af38:	80 83       	st	Z, r24
    af3a:	91 83       	std	Z+1, r25	; 0x01
    af3c:	a2 83       	std	Z+2, r26	; 0x02
    af3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    af40:	ce 01       	movw	r24, r28
    af42:	81 56       	subi	r24, 0x61	; 97
    af44:	9c 4f       	sbci	r25, 0xFC	; 252
    af46:	11 e0       	ldi	r17, 0x01	; 1
    af48:	fc 01       	movw	r30, r24
    af4a:	60 81       	ld	r22, Z
    af4c:	71 81       	ldd	r23, Z+1	; 0x01
    af4e:	82 81       	ldd	r24, Z+2	; 0x02
    af50:	93 81       	ldd	r25, Z+3	; 0x03
    af52:	20 e0       	ldi	r18, 0x00	; 0
    af54:	30 e0       	ldi	r19, 0x00	; 0
    af56:	40 e8       	ldi	r20, 0x80	; 128
    af58:	5f e3       	ldi	r21, 0x3F	; 63
    af5a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    af5e:	88 23       	and	r24, r24
    af60:	0c f0       	brlt	.+2      	; 0xaf64 <main+0x7c14>
    af62:	10 e0       	ldi	r17, 0x00	; 0
    af64:	11 23       	and	r17, r17
    af66:	49 f0       	breq	.+18     	; 0xaf7a <main+0x7c2a>
		__ticks = 1;
    af68:	ce 01       	movw	r24, r28
    af6a:	8d 55       	subi	r24, 0x5D	; 93
    af6c:	9c 4f       	sbci	r25, 0xFC	; 252
    af6e:	21 e0       	ldi	r18, 0x01	; 1
    af70:	30 e0       	ldi	r19, 0x00	; 0
    af72:	fc 01       	movw	r30, r24
    af74:	31 83       	std	Z+1, r19	; 0x01
    af76:	20 83       	st	Z, r18
    af78:	74 c0       	rjmp	.+232    	; 0xb062 <main+0x7d12>
	else if (__tmp > 65535)
    af7a:	ce 01       	movw	r24, r28
    af7c:	81 56       	subi	r24, 0x61	; 97
    af7e:	9c 4f       	sbci	r25, 0xFC	; 252
    af80:	11 e0       	ldi	r17, 0x01	; 1
    af82:	fc 01       	movw	r30, r24
    af84:	60 81       	ld	r22, Z
    af86:	71 81       	ldd	r23, Z+1	; 0x01
    af88:	82 81       	ldd	r24, Z+2	; 0x02
    af8a:	93 81       	ldd	r25, Z+3	; 0x03
    af8c:	20 e0       	ldi	r18, 0x00	; 0
    af8e:	3f ef       	ldi	r19, 0xFF	; 255
    af90:	4f e7       	ldi	r20, 0x7F	; 127
    af92:	57 e4       	ldi	r21, 0x47	; 71
    af94:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    af98:	18 16       	cp	r1, r24
    af9a:	0c f0       	brlt	.+2      	; 0xaf9e <main+0x7c4e>
    af9c:	10 e0       	ldi	r17, 0x00	; 0
    af9e:	11 23       	and	r17, r17
    afa0:	09 f4       	brne	.+2      	; 0xafa4 <main+0x7c54>
    afa2:	4d c0       	rjmp	.+154    	; 0xb03e <main+0x7cee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    afa4:	ce 01       	movw	r24, r28
    afa6:	85 56       	subi	r24, 0x65	; 101
    afa8:	9c 4f       	sbci	r25, 0xFC	; 252
    afaa:	fc 01       	movw	r30, r24
    afac:	60 81       	ld	r22, Z
    afae:	71 81       	ldd	r23, Z+1	; 0x01
    afb0:	82 81       	ldd	r24, Z+2	; 0x02
    afb2:	93 81       	ldd	r25, Z+3	; 0x03
    afb4:	20 e0       	ldi	r18, 0x00	; 0
    afb6:	30 e0       	ldi	r19, 0x00	; 0
    afb8:	40 e2       	ldi	r20, 0x20	; 32
    afba:	51 e4       	ldi	r21, 0x41	; 65
    afbc:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    afc0:	dc 01       	movw	r26, r24
    afc2:	cb 01       	movw	r24, r22
    afc4:	8e 01       	movw	r16, r28
    afc6:	0d 55       	subi	r16, 0x5D	; 93
    afc8:	1c 4f       	sbci	r17, 0xFC	; 252
    afca:	bc 01       	movw	r22, r24
    afcc:	cd 01       	movw	r24, r26
    afce:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    afd2:	dc 01       	movw	r26, r24
    afd4:	cb 01       	movw	r24, r22
    afd6:	f8 01       	movw	r30, r16
    afd8:	91 83       	std	Z+1, r25	; 0x01
    afda:	80 83       	st	Z, r24
    afdc:	27 c0       	rjmp	.+78     	; 0xb02c <main+0x7cdc>
    afde:	ce 01       	movw	r24, r28
    afe0:	8b 55       	subi	r24, 0x5B	; 91
    afe2:	9c 4f       	sbci	r25, 0xFC	; 252
    afe4:	20 e7       	ldi	r18, 0x70	; 112
    afe6:	31 e0       	ldi	r19, 0x01	; 1
    afe8:	fc 01       	movw	r30, r24
    afea:	31 83       	std	Z+1, r19	; 0x01
    afec:	20 83       	st	Z, r18
    afee:	ce 01       	movw	r24, r28
    aff0:	8b 55       	subi	r24, 0x5B	; 91
    aff2:	9c 4f       	sbci	r25, 0xFC	; 252
    aff4:	fc 01       	movw	r30, r24
    aff6:	80 81       	ld	r24, Z
    aff8:	91 81       	ldd	r25, Z+1	; 0x01
    affa:	8c 01       	movw	r16, r24
    affc:	c8 01       	movw	r24, r16
    affe:	01 97       	sbiw	r24, 0x01	; 1
    b000:	f1 f7       	brne	.-4      	; 0xaffe <main+0x7cae>
    b002:	8c 01       	movw	r16, r24
    b004:	ce 01       	movw	r24, r28
    b006:	8b 55       	subi	r24, 0x5B	; 91
    b008:	9c 4f       	sbci	r25, 0xFC	; 252
    b00a:	fc 01       	movw	r30, r24
    b00c:	11 83       	std	Z+1, r17	; 0x01
    b00e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b010:	ce 01       	movw	r24, r28
    b012:	8d 55       	subi	r24, 0x5D	; 93
    b014:	9c 4f       	sbci	r25, 0xFC	; 252
    b016:	9e 01       	movw	r18, r28
    b018:	2d 55       	subi	r18, 0x5D	; 93
    b01a:	3c 4f       	sbci	r19, 0xFC	; 252
    b01c:	f9 01       	movw	r30, r18
    b01e:	20 81       	ld	r18, Z
    b020:	31 81       	ldd	r19, Z+1	; 0x01
    b022:	21 50       	subi	r18, 0x01	; 1
    b024:	30 40       	sbci	r19, 0x00	; 0
    b026:	fc 01       	movw	r30, r24
    b028:	31 83       	std	Z+1, r19	; 0x01
    b02a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b02c:	ce 01       	movw	r24, r28
    b02e:	8d 55       	subi	r24, 0x5D	; 93
    b030:	9c 4f       	sbci	r25, 0xFC	; 252
    b032:	fc 01       	movw	r30, r24
    b034:	80 81       	ld	r24, Z
    b036:	91 81       	ldd	r25, Z+1	; 0x01
    b038:	00 97       	sbiw	r24, 0x00	; 0
    b03a:	89 f6       	brne	.-94     	; 0xafde <main+0x7c8e>
    b03c:	2f c0       	rjmp	.+94     	; 0xb09c <main+0x7d4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b03e:	8e 01       	movw	r16, r28
    b040:	0d 55       	subi	r16, 0x5D	; 93
    b042:	1c 4f       	sbci	r17, 0xFC	; 252
    b044:	ce 01       	movw	r24, r28
    b046:	81 56       	subi	r24, 0x61	; 97
    b048:	9c 4f       	sbci	r25, 0xFC	; 252
    b04a:	fc 01       	movw	r30, r24
    b04c:	60 81       	ld	r22, Z
    b04e:	71 81       	ldd	r23, Z+1	; 0x01
    b050:	82 81       	ldd	r24, Z+2	; 0x02
    b052:	93 81       	ldd	r25, Z+3	; 0x03
    b054:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b058:	dc 01       	movw	r26, r24
    b05a:	cb 01       	movw	r24, r22
    b05c:	f8 01       	movw	r30, r16
    b05e:	91 83       	std	Z+1, r25	; 0x01
    b060:	80 83       	st	Z, r24
    b062:	ce 01       	movw	r24, r28
    b064:	89 55       	subi	r24, 0x59	; 89
    b066:	9c 4f       	sbci	r25, 0xFC	; 252
    b068:	9e 01       	movw	r18, r28
    b06a:	2d 55       	subi	r18, 0x5D	; 93
    b06c:	3c 4f       	sbci	r19, 0xFC	; 252
    b06e:	f9 01       	movw	r30, r18
    b070:	20 81       	ld	r18, Z
    b072:	31 81       	ldd	r19, Z+1	; 0x01
    b074:	fc 01       	movw	r30, r24
    b076:	31 83       	std	Z+1, r19	; 0x01
    b078:	20 83       	st	Z, r18
    b07a:	ce 01       	movw	r24, r28
    b07c:	89 55       	subi	r24, 0x59	; 89
    b07e:	9c 4f       	sbci	r25, 0xFC	; 252
    b080:	fc 01       	movw	r30, r24
    b082:	80 81       	ld	r24, Z
    b084:	91 81       	ldd	r25, Z+1	; 0x01
    b086:	8c 01       	movw	r16, r24
    b088:	c8 01       	movw	r24, r16
    b08a:	01 97       	sbiw	r24, 0x01	; 1
    b08c:	f1 f7       	brne	.-4      	; 0xb08a <main+0x7d3a>
    b08e:	8c 01       	movw	r16, r24
    b090:	ce 01       	movw	r24, r28
    b092:	89 55       	subi	r24, 0x59	; 89
    b094:	9c 4f       	sbci	r25, 0xFC	; 252
    b096:	fc 01       	movw	r30, r24
    b098:	11 83       	std	Z+1, r17	; 0x01
    b09a:	00 83       	st	Z, r16
								_delay_ms(1000);
								buzzer_off();
    b09c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
							}
						forward_mm(75);
    b0a0:	8b e4       	ldi	r24, 0x4B	; 75
    b0a2:	90 e0       	ldi	r25, 0x00	; 0
    b0a4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    b0a8:	9e 01       	movw	r18, r28
    b0aa:	27 55       	subi	r18, 0x57	; 87
    b0ac:	3c 4f       	sbci	r19, 0xFC	; 252
    b0ae:	80 e0       	ldi	r24, 0x00	; 0
    b0b0:	90 e0       	ldi	r25, 0x00	; 0
    b0b2:	a0 ef       	ldi	r26, 0xF0	; 240
    b0b4:	b1 e4       	ldi	r27, 0x41	; 65
    b0b6:	f9 01       	movw	r30, r18
    b0b8:	80 83       	st	Z, r24
    b0ba:	91 83       	std	Z+1, r25	; 0x01
    b0bc:	a2 83       	std	Z+2, r26	; 0x02
    b0be:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b0c0:	8e 01       	movw	r16, r28
    b0c2:	03 55       	subi	r16, 0x53	; 83
    b0c4:	1c 4f       	sbci	r17, 0xFC	; 252
    b0c6:	ce 01       	movw	r24, r28
    b0c8:	87 55       	subi	r24, 0x57	; 87
    b0ca:	9c 4f       	sbci	r25, 0xFC	; 252
    b0cc:	fc 01       	movw	r30, r24
    b0ce:	60 81       	ld	r22, Z
    b0d0:	71 81       	ldd	r23, Z+1	; 0x01
    b0d2:	82 81       	ldd	r24, Z+2	; 0x02
    b0d4:	93 81       	ldd	r25, Z+3	; 0x03
    b0d6:	26 e6       	ldi	r18, 0x66	; 102
    b0d8:	36 e6       	ldi	r19, 0x66	; 102
    b0da:	46 e6       	ldi	r20, 0x66	; 102
    b0dc:	55 e4       	ldi	r21, 0x45	; 69
    b0de:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b0e2:	dc 01       	movw	r26, r24
    b0e4:	cb 01       	movw	r24, r22
    b0e6:	f8 01       	movw	r30, r16
    b0e8:	80 83       	st	Z, r24
    b0ea:	91 83       	std	Z+1, r25	; 0x01
    b0ec:	a2 83       	std	Z+2, r26	; 0x02
    b0ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b0f0:	ce 01       	movw	r24, r28
    b0f2:	83 55       	subi	r24, 0x53	; 83
    b0f4:	9c 4f       	sbci	r25, 0xFC	; 252
    b0f6:	11 e0       	ldi	r17, 0x01	; 1
    b0f8:	fc 01       	movw	r30, r24
    b0fa:	60 81       	ld	r22, Z
    b0fc:	71 81       	ldd	r23, Z+1	; 0x01
    b0fe:	82 81       	ldd	r24, Z+2	; 0x02
    b100:	93 81       	ldd	r25, Z+3	; 0x03
    b102:	20 e0       	ldi	r18, 0x00	; 0
    b104:	30 e0       	ldi	r19, 0x00	; 0
    b106:	40 e8       	ldi	r20, 0x80	; 128
    b108:	5f e3       	ldi	r21, 0x3F	; 63
    b10a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    b10e:	88 23       	and	r24, r24
    b110:	0c f0       	brlt	.+2      	; 0xb114 <main+0x7dc4>
    b112:	10 e0       	ldi	r17, 0x00	; 0
    b114:	11 23       	and	r17, r17
    b116:	49 f0       	breq	.+18     	; 0xb12a <main+0x7dda>
		__ticks = 1;
    b118:	ce 01       	movw	r24, r28
    b11a:	8f 54       	subi	r24, 0x4F	; 79
    b11c:	9c 4f       	sbci	r25, 0xFC	; 252
    b11e:	21 e0       	ldi	r18, 0x01	; 1
    b120:	30 e0       	ldi	r19, 0x00	; 0
    b122:	fc 01       	movw	r30, r24
    b124:	31 83       	std	Z+1, r19	; 0x01
    b126:	20 83       	st	Z, r18
    b128:	74 c0       	rjmp	.+232    	; 0xb212 <main+0x7ec2>
	else if (__tmp > 65535)
    b12a:	ce 01       	movw	r24, r28
    b12c:	83 55       	subi	r24, 0x53	; 83
    b12e:	9c 4f       	sbci	r25, 0xFC	; 252
    b130:	11 e0       	ldi	r17, 0x01	; 1
    b132:	fc 01       	movw	r30, r24
    b134:	60 81       	ld	r22, Z
    b136:	71 81       	ldd	r23, Z+1	; 0x01
    b138:	82 81       	ldd	r24, Z+2	; 0x02
    b13a:	93 81       	ldd	r25, Z+3	; 0x03
    b13c:	20 e0       	ldi	r18, 0x00	; 0
    b13e:	3f ef       	ldi	r19, 0xFF	; 255
    b140:	4f e7       	ldi	r20, 0x7F	; 127
    b142:	57 e4       	ldi	r21, 0x47	; 71
    b144:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    b148:	18 16       	cp	r1, r24
    b14a:	0c f0       	brlt	.+2      	; 0xb14e <main+0x7dfe>
    b14c:	10 e0       	ldi	r17, 0x00	; 0
    b14e:	11 23       	and	r17, r17
    b150:	09 f4       	brne	.+2      	; 0xb154 <main+0x7e04>
    b152:	4d c0       	rjmp	.+154    	; 0xb1ee <main+0x7e9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b154:	ce 01       	movw	r24, r28
    b156:	87 55       	subi	r24, 0x57	; 87
    b158:	9c 4f       	sbci	r25, 0xFC	; 252
    b15a:	fc 01       	movw	r30, r24
    b15c:	60 81       	ld	r22, Z
    b15e:	71 81       	ldd	r23, Z+1	; 0x01
    b160:	82 81       	ldd	r24, Z+2	; 0x02
    b162:	93 81       	ldd	r25, Z+3	; 0x03
    b164:	20 e0       	ldi	r18, 0x00	; 0
    b166:	30 e0       	ldi	r19, 0x00	; 0
    b168:	40 e2       	ldi	r20, 0x20	; 32
    b16a:	51 e4       	ldi	r21, 0x41	; 65
    b16c:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b170:	dc 01       	movw	r26, r24
    b172:	cb 01       	movw	r24, r22
    b174:	8e 01       	movw	r16, r28
    b176:	0f 54       	subi	r16, 0x4F	; 79
    b178:	1c 4f       	sbci	r17, 0xFC	; 252
    b17a:	bc 01       	movw	r22, r24
    b17c:	cd 01       	movw	r24, r26
    b17e:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b182:	dc 01       	movw	r26, r24
    b184:	cb 01       	movw	r24, r22
    b186:	f8 01       	movw	r30, r16
    b188:	91 83       	std	Z+1, r25	; 0x01
    b18a:	80 83       	st	Z, r24
    b18c:	27 c0       	rjmp	.+78     	; 0xb1dc <main+0x7e8c>
    b18e:	ce 01       	movw	r24, r28
    b190:	8d 54       	subi	r24, 0x4D	; 77
    b192:	9c 4f       	sbci	r25, 0xFC	; 252
    b194:	20 e7       	ldi	r18, 0x70	; 112
    b196:	31 e0       	ldi	r19, 0x01	; 1
    b198:	fc 01       	movw	r30, r24
    b19a:	31 83       	std	Z+1, r19	; 0x01
    b19c:	20 83       	st	Z, r18
    b19e:	ce 01       	movw	r24, r28
    b1a0:	8d 54       	subi	r24, 0x4D	; 77
    b1a2:	9c 4f       	sbci	r25, 0xFC	; 252
    b1a4:	fc 01       	movw	r30, r24
    b1a6:	80 81       	ld	r24, Z
    b1a8:	91 81       	ldd	r25, Z+1	; 0x01
    b1aa:	8c 01       	movw	r16, r24
    b1ac:	c8 01       	movw	r24, r16
    b1ae:	01 97       	sbiw	r24, 0x01	; 1
    b1b0:	f1 f7       	brne	.-4      	; 0xb1ae <main+0x7e5e>
    b1b2:	8c 01       	movw	r16, r24
    b1b4:	ce 01       	movw	r24, r28
    b1b6:	8d 54       	subi	r24, 0x4D	; 77
    b1b8:	9c 4f       	sbci	r25, 0xFC	; 252
    b1ba:	fc 01       	movw	r30, r24
    b1bc:	11 83       	std	Z+1, r17	; 0x01
    b1be:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1c0:	ce 01       	movw	r24, r28
    b1c2:	8f 54       	subi	r24, 0x4F	; 79
    b1c4:	9c 4f       	sbci	r25, 0xFC	; 252
    b1c6:	9e 01       	movw	r18, r28
    b1c8:	2f 54       	subi	r18, 0x4F	; 79
    b1ca:	3c 4f       	sbci	r19, 0xFC	; 252
    b1cc:	f9 01       	movw	r30, r18
    b1ce:	20 81       	ld	r18, Z
    b1d0:	31 81       	ldd	r19, Z+1	; 0x01
    b1d2:	21 50       	subi	r18, 0x01	; 1
    b1d4:	30 40       	sbci	r19, 0x00	; 0
    b1d6:	fc 01       	movw	r30, r24
    b1d8:	31 83       	std	Z+1, r19	; 0x01
    b1da:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1dc:	ce 01       	movw	r24, r28
    b1de:	8f 54       	subi	r24, 0x4F	; 79
    b1e0:	9c 4f       	sbci	r25, 0xFC	; 252
    b1e2:	fc 01       	movw	r30, r24
    b1e4:	80 81       	ld	r24, Z
    b1e6:	91 81       	ldd	r25, Z+1	; 0x01
    b1e8:	00 97       	sbiw	r24, 0x00	; 0
    b1ea:	89 f6       	brne	.-94     	; 0xb18e <main+0x7e3e>
    b1ec:	2f c0       	rjmp	.+94     	; 0xb24c <main+0x7efc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b1ee:	8e 01       	movw	r16, r28
    b1f0:	0f 54       	subi	r16, 0x4F	; 79
    b1f2:	1c 4f       	sbci	r17, 0xFC	; 252
    b1f4:	ce 01       	movw	r24, r28
    b1f6:	83 55       	subi	r24, 0x53	; 83
    b1f8:	9c 4f       	sbci	r25, 0xFC	; 252
    b1fa:	fc 01       	movw	r30, r24
    b1fc:	60 81       	ld	r22, Z
    b1fe:	71 81       	ldd	r23, Z+1	; 0x01
    b200:	82 81       	ldd	r24, Z+2	; 0x02
    b202:	93 81       	ldd	r25, Z+3	; 0x03
    b204:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b208:	dc 01       	movw	r26, r24
    b20a:	cb 01       	movw	r24, r22
    b20c:	f8 01       	movw	r30, r16
    b20e:	91 83       	std	Z+1, r25	; 0x01
    b210:	80 83       	st	Z, r24
    b212:	ce 01       	movw	r24, r28
    b214:	8b 54       	subi	r24, 0x4B	; 75
    b216:	9c 4f       	sbci	r25, 0xFC	; 252
    b218:	9e 01       	movw	r18, r28
    b21a:	2f 54       	subi	r18, 0x4F	; 79
    b21c:	3c 4f       	sbci	r19, 0xFC	; 252
    b21e:	f9 01       	movw	r30, r18
    b220:	20 81       	ld	r18, Z
    b222:	31 81       	ldd	r19, Z+1	; 0x01
    b224:	fc 01       	movw	r30, r24
    b226:	31 83       	std	Z+1, r19	; 0x01
    b228:	20 83       	st	Z, r18
    b22a:	ce 01       	movw	r24, r28
    b22c:	8b 54       	subi	r24, 0x4B	; 75
    b22e:	9c 4f       	sbci	r25, 0xFC	; 252
    b230:	fc 01       	movw	r30, r24
    b232:	80 81       	ld	r24, Z
    b234:	91 81       	ldd	r25, Z+1	; 0x01
    b236:	8c 01       	movw	r16, r24
    b238:	c8 01       	movw	r24, r16
    b23a:	01 97       	sbiw	r24, 0x01	; 1
    b23c:	f1 f7       	brne	.-4      	; 0xb23a <main+0x7eea>
    b23e:	8c 01       	movw	r16, r24
    b240:	ce 01       	movw	r24, r28
    b242:	8b 54       	subi	r24, 0x4B	; 75
    b244:	9c 4f       	sbci	r25, 0xFC	; 252
    b246:	fc 01       	movw	r30, r24
    b248:	11 83       	std	Z+1, r17	; 0x01
    b24a:	00 83       	st	Z, r16
						_delay_ms(30);
						back_mm(10);
    b24c:	8a e0       	ldi	r24, 0x0A	; 10
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    b254:	9e 01       	movw	r18, r28
    b256:	29 54       	subi	r18, 0x49	; 73
    b258:	3c 4f       	sbci	r19, 0xFC	; 252
    b25a:	80 e0       	ldi	r24, 0x00	; 0
    b25c:	90 e0       	ldi	r25, 0x00	; 0
    b25e:	aa ef       	ldi	r26, 0xFA	; 250
    b260:	b3 e4       	ldi	r27, 0x43	; 67
    b262:	f9 01       	movw	r30, r18
    b264:	80 83       	st	Z, r24
    b266:	91 83       	std	Z+1, r25	; 0x01
    b268:	a2 83       	std	Z+2, r26	; 0x02
    b26a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b26c:	8e 01       	movw	r16, r28
    b26e:	05 54       	subi	r16, 0x45	; 69
    b270:	1c 4f       	sbci	r17, 0xFC	; 252
    b272:	ce 01       	movw	r24, r28
    b274:	89 54       	subi	r24, 0x49	; 73
    b276:	9c 4f       	sbci	r25, 0xFC	; 252
    b278:	fc 01       	movw	r30, r24
    b27a:	60 81       	ld	r22, Z
    b27c:	71 81       	ldd	r23, Z+1	; 0x01
    b27e:	82 81       	ldd	r24, Z+2	; 0x02
    b280:	93 81       	ldd	r25, Z+3	; 0x03
    b282:	26 e6       	ldi	r18, 0x66	; 102
    b284:	36 e6       	ldi	r19, 0x66	; 102
    b286:	46 e6       	ldi	r20, 0x66	; 102
    b288:	55 e4       	ldi	r21, 0x45	; 69
    b28a:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b28e:	dc 01       	movw	r26, r24
    b290:	cb 01       	movw	r24, r22
    b292:	f8 01       	movw	r30, r16
    b294:	80 83       	st	Z, r24
    b296:	91 83       	std	Z+1, r25	; 0x01
    b298:	a2 83       	std	Z+2, r26	; 0x02
    b29a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b29c:	ce 01       	movw	r24, r28
    b29e:	85 54       	subi	r24, 0x45	; 69
    b2a0:	9c 4f       	sbci	r25, 0xFC	; 252
    b2a2:	11 e0       	ldi	r17, 0x01	; 1
    b2a4:	fc 01       	movw	r30, r24
    b2a6:	60 81       	ld	r22, Z
    b2a8:	71 81       	ldd	r23, Z+1	; 0x01
    b2aa:	82 81       	ldd	r24, Z+2	; 0x02
    b2ac:	93 81       	ldd	r25, Z+3	; 0x03
    b2ae:	20 e0       	ldi	r18, 0x00	; 0
    b2b0:	30 e0       	ldi	r19, 0x00	; 0
    b2b2:	40 e8       	ldi	r20, 0x80	; 128
    b2b4:	5f e3       	ldi	r21, 0x3F	; 63
    b2b6:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    b2ba:	88 23       	and	r24, r24
    b2bc:	0c f0       	brlt	.+2      	; 0xb2c0 <main+0x7f70>
    b2be:	10 e0       	ldi	r17, 0x00	; 0
    b2c0:	11 23       	and	r17, r17
    b2c2:	49 f0       	breq	.+18     	; 0xb2d6 <main+0x7f86>
		__ticks = 1;
    b2c4:	ce 01       	movw	r24, r28
    b2c6:	81 54       	subi	r24, 0x41	; 65
    b2c8:	9c 4f       	sbci	r25, 0xFC	; 252
    b2ca:	21 e0       	ldi	r18, 0x01	; 1
    b2cc:	30 e0       	ldi	r19, 0x00	; 0
    b2ce:	fc 01       	movw	r30, r24
    b2d0:	31 83       	std	Z+1, r19	; 0x01
    b2d2:	20 83       	st	Z, r18
    b2d4:	74 c0       	rjmp	.+232    	; 0xb3be <main+0x806e>
	else if (__tmp > 65535)
    b2d6:	ce 01       	movw	r24, r28
    b2d8:	85 54       	subi	r24, 0x45	; 69
    b2da:	9c 4f       	sbci	r25, 0xFC	; 252
    b2dc:	11 e0       	ldi	r17, 0x01	; 1
    b2de:	fc 01       	movw	r30, r24
    b2e0:	60 81       	ld	r22, Z
    b2e2:	71 81       	ldd	r23, Z+1	; 0x01
    b2e4:	82 81       	ldd	r24, Z+2	; 0x02
    b2e6:	93 81       	ldd	r25, Z+3	; 0x03
    b2e8:	20 e0       	ldi	r18, 0x00	; 0
    b2ea:	3f ef       	ldi	r19, 0xFF	; 255
    b2ec:	4f e7       	ldi	r20, 0x7F	; 127
    b2ee:	57 e4       	ldi	r21, 0x47	; 71
    b2f0:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    b2f4:	18 16       	cp	r1, r24
    b2f6:	0c f0       	brlt	.+2      	; 0xb2fa <main+0x7faa>
    b2f8:	10 e0       	ldi	r17, 0x00	; 0
    b2fa:	11 23       	and	r17, r17
    b2fc:	09 f4       	brne	.+2      	; 0xb300 <main+0x7fb0>
    b2fe:	4d c0       	rjmp	.+154    	; 0xb39a <main+0x804a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b300:	ce 01       	movw	r24, r28
    b302:	89 54       	subi	r24, 0x49	; 73
    b304:	9c 4f       	sbci	r25, 0xFC	; 252
    b306:	fc 01       	movw	r30, r24
    b308:	60 81       	ld	r22, Z
    b30a:	71 81       	ldd	r23, Z+1	; 0x01
    b30c:	82 81       	ldd	r24, Z+2	; 0x02
    b30e:	93 81       	ldd	r25, Z+3	; 0x03
    b310:	20 e0       	ldi	r18, 0x00	; 0
    b312:	30 e0       	ldi	r19, 0x00	; 0
    b314:	40 e2       	ldi	r20, 0x20	; 32
    b316:	51 e4       	ldi	r21, 0x41	; 65
    b318:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b31c:	dc 01       	movw	r26, r24
    b31e:	cb 01       	movw	r24, r22
    b320:	8e 01       	movw	r16, r28
    b322:	01 54       	subi	r16, 0x41	; 65
    b324:	1c 4f       	sbci	r17, 0xFC	; 252
    b326:	bc 01       	movw	r22, r24
    b328:	cd 01       	movw	r24, r26
    b32a:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b32e:	dc 01       	movw	r26, r24
    b330:	cb 01       	movw	r24, r22
    b332:	f8 01       	movw	r30, r16
    b334:	91 83       	std	Z+1, r25	; 0x01
    b336:	80 83       	st	Z, r24
    b338:	27 c0       	rjmp	.+78     	; 0xb388 <main+0x8038>
    b33a:	ce 01       	movw	r24, r28
    b33c:	8f 53       	subi	r24, 0x3F	; 63
    b33e:	9c 4f       	sbci	r25, 0xFC	; 252
    b340:	20 e7       	ldi	r18, 0x70	; 112
    b342:	31 e0       	ldi	r19, 0x01	; 1
    b344:	fc 01       	movw	r30, r24
    b346:	31 83       	std	Z+1, r19	; 0x01
    b348:	20 83       	st	Z, r18
    b34a:	ce 01       	movw	r24, r28
    b34c:	8f 53       	subi	r24, 0x3F	; 63
    b34e:	9c 4f       	sbci	r25, 0xFC	; 252
    b350:	fc 01       	movw	r30, r24
    b352:	80 81       	ld	r24, Z
    b354:	91 81       	ldd	r25, Z+1	; 0x01
    b356:	8c 01       	movw	r16, r24
    b358:	c8 01       	movw	r24, r16
    b35a:	01 97       	sbiw	r24, 0x01	; 1
    b35c:	f1 f7       	brne	.-4      	; 0xb35a <main+0x800a>
    b35e:	8c 01       	movw	r16, r24
    b360:	ce 01       	movw	r24, r28
    b362:	8f 53       	subi	r24, 0x3F	; 63
    b364:	9c 4f       	sbci	r25, 0xFC	; 252
    b366:	fc 01       	movw	r30, r24
    b368:	11 83       	std	Z+1, r17	; 0x01
    b36a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b36c:	ce 01       	movw	r24, r28
    b36e:	81 54       	subi	r24, 0x41	; 65
    b370:	9c 4f       	sbci	r25, 0xFC	; 252
    b372:	9e 01       	movw	r18, r28
    b374:	21 54       	subi	r18, 0x41	; 65
    b376:	3c 4f       	sbci	r19, 0xFC	; 252
    b378:	f9 01       	movw	r30, r18
    b37a:	20 81       	ld	r18, Z
    b37c:	31 81       	ldd	r19, Z+1	; 0x01
    b37e:	21 50       	subi	r18, 0x01	; 1
    b380:	30 40       	sbci	r19, 0x00	; 0
    b382:	fc 01       	movw	r30, r24
    b384:	31 83       	std	Z+1, r19	; 0x01
    b386:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b388:	ce 01       	movw	r24, r28
    b38a:	81 54       	subi	r24, 0x41	; 65
    b38c:	9c 4f       	sbci	r25, 0xFC	; 252
    b38e:	fc 01       	movw	r30, r24
    b390:	80 81       	ld	r24, Z
    b392:	91 81       	ldd	r25, Z+1	; 0x01
    b394:	00 97       	sbiw	r24, 0x00	; 0
    b396:	89 f6       	brne	.-94     	; 0xb33a <main+0x7fea>
    b398:	2f c0       	rjmp	.+94     	; 0xb3f8 <main+0x80a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b39a:	8e 01       	movw	r16, r28
    b39c:	01 54       	subi	r16, 0x41	; 65
    b39e:	1c 4f       	sbci	r17, 0xFC	; 252
    b3a0:	ce 01       	movw	r24, r28
    b3a2:	85 54       	subi	r24, 0x45	; 69
    b3a4:	9c 4f       	sbci	r25, 0xFC	; 252
    b3a6:	fc 01       	movw	r30, r24
    b3a8:	60 81       	ld	r22, Z
    b3aa:	71 81       	ldd	r23, Z+1	; 0x01
    b3ac:	82 81       	ldd	r24, Z+2	; 0x02
    b3ae:	93 81       	ldd	r25, Z+3	; 0x03
    b3b0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b3b4:	dc 01       	movw	r26, r24
    b3b6:	cb 01       	movw	r24, r22
    b3b8:	f8 01       	movw	r30, r16
    b3ba:	91 83       	std	Z+1, r25	; 0x01
    b3bc:	80 83       	st	Z, r24
    b3be:	ce 01       	movw	r24, r28
    b3c0:	8d 53       	subi	r24, 0x3D	; 61
    b3c2:	9c 4f       	sbci	r25, 0xFC	; 252
    b3c4:	9e 01       	movw	r18, r28
    b3c6:	21 54       	subi	r18, 0x41	; 65
    b3c8:	3c 4f       	sbci	r19, 0xFC	; 252
    b3ca:	f9 01       	movw	r30, r18
    b3cc:	20 81       	ld	r18, Z
    b3ce:	31 81       	ldd	r19, Z+1	; 0x01
    b3d0:	fc 01       	movw	r30, r24
    b3d2:	31 83       	std	Z+1, r19	; 0x01
    b3d4:	20 83       	st	Z, r18
    b3d6:	ce 01       	movw	r24, r28
    b3d8:	8d 53       	subi	r24, 0x3D	; 61
    b3da:	9c 4f       	sbci	r25, 0xFC	; 252
    b3dc:	fc 01       	movw	r30, r24
    b3de:	80 81       	ld	r24, Z
    b3e0:	91 81       	ldd	r25, Z+1	; 0x01
    b3e2:	8c 01       	movw	r16, r24
    b3e4:	c8 01       	movw	r24, r16
    b3e6:	01 97       	sbiw	r24, 0x01	; 1
    b3e8:	f1 f7       	brne	.-4      	; 0xb3e6 <main+0x8096>
    b3ea:	8c 01       	movw	r16, r24
    b3ec:	ce 01       	movw	r24, r28
    b3ee:	8d 53       	subi	r24, 0x3D	; 61
    b3f0:	9c 4f       	sbci	r25, 0xFC	; 252
    b3f2:	fc 01       	movw	r30, r24
    b3f4:	11 83       	std	Z+1, r17	; 0x01
    b3f6:	00 83       	st	Z, r16
						_delay_ms(500);
						left_degrees(45);
    b3f8:	8d e2       	ldi	r24, 0x2D	; 45
    b3fa:	90 e0       	ldi	r25, 0x00	; 0
    b3fc:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						right_degrees(180);
    b400:	84 eb       	ldi	r24, 0xB4	; 180
    b402:	90 e0       	ldi	r25, 0x00	; 0
    b404:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						compass=6;
    b408:	86 e0       	ldi	r24, 0x06	; 6
    b40a:	90 e0       	ldi	r25, 0x00	; 0
    b40c:	9c 83       	std	Y+4, r25	; 0x04
    b40e:	8b 83       	std	Y+3, r24	; 0x03
						break;                                      /// calibration Required 
    b410:	0c 94 c7 62 	jmp	0xc58e	; 0xc58e <main+0x923e>
						
					}
					if(coor[1]>origin2[boxnumber][i][1] && coor[0]>origin2[boxnumber][i][0])
    b414:	20 91 a8 04 	lds	r18, 0x04A8
    b418:	30 91 a9 04 	lds	r19, 0x04A9
    b41c:	ae 01       	movw	r20, r28
    b41e:	4d 5f       	subi	r20, 0xFD	; 253
    b420:	5a 4f       	sbci	r21, 0xFA	; 250
    b422:	8d 81       	ldd	r24, Y+5	; 0x05
    b424:	9e 81       	ldd	r25, Y+6	; 0x06
    b426:	bc 01       	movw	r22, r24
    b428:	66 0f       	add	r22, r22
    b42a:	77 1f       	adc	r23, r23
    b42c:	66 0f       	add	r22, r22
    b42e:	77 1f       	adc	r23, r23
    b430:	8f a1       	lds	r24, 0x4f
    b432:	98 a5       	lds	r25, 0x68
    b434:	86 0f       	add	r24, r22
    b436:	97 1f       	adc	r25, r23
    b438:	88 0f       	add	r24, r24
    b43a:	99 1f       	adc	r25, r25
    b43c:	88 0f       	add	r24, r24
    b43e:	99 1f       	adc	r25, r25
    b440:	84 0f       	add	r24, r20
    b442:	95 1f       	adc	r25, r21
    b444:	02 96       	adiw	r24, 0x02	; 2
    b446:	fc 01       	movw	r30, r24
    b448:	80 81       	ld	r24, Z
    b44a:	91 81       	ldd	r25, Z+1	; 0x01
    b44c:	82 17       	cp	r24, r18
    b44e:	93 07       	cpc	r25, r19
    b450:	0c f0       	brlt	.+2      	; 0xb454 <main+0x8104>
    b452:	c9 c2       	rjmp	.+1426   	; 0xb9e6 <main+0x8696>
    b454:	20 91 a6 04 	lds	r18, 0x04A6
    b458:	30 91 a7 04 	lds	r19, 0x04A7
    b45c:	ae 01       	movw	r20, r28
    b45e:	4d 5f       	subi	r20, 0xFD	; 253
    b460:	5a 4f       	sbci	r21, 0xFA	; 250
    b462:	8d 81       	ldd	r24, Y+5	; 0x05
    b464:	9e 81       	ldd	r25, Y+6	; 0x06
    b466:	bc 01       	movw	r22, r24
    b468:	66 0f       	add	r22, r22
    b46a:	77 1f       	adc	r23, r23
    b46c:	66 0f       	add	r22, r22
    b46e:	77 1f       	adc	r23, r23
    b470:	8f a1       	lds	r24, 0x4f
    b472:	98 a5       	lds	r25, 0x68
    b474:	86 0f       	add	r24, r22
    b476:	97 1f       	adc	r25, r23
    b478:	88 0f       	add	r24, r24
    b47a:	99 1f       	adc	r25, r25
    b47c:	88 0f       	add	r24, r24
    b47e:	99 1f       	adc	r25, r25
    b480:	84 0f       	add	r24, r20
    b482:	95 1f       	adc	r25, r21
    b484:	fc 01       	movw	r30, r24
    b486:	80 81       	ld	r24, Z
    b488:	91 81       	ldd	r25, Z+1	; 0x01
    b48a:	82 17       	cp	r24, r18
    b48c:	93 07       	cpc	r25, r19
    b48e:	0c f0       	brlt	.+2      	; 0xb492 <main+0x8142>
    b490:	aa c2       	rjmp	.+1364   	; 0xb9e6 <main+0x8696>
					{
						left_degrees(45);
    b492:	8d e2       	ldi	r24, 0x2D	; 45
    b494:	90 e0       	ldi	r25, 0x00	; 0
    b496:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						back_mm(65);
    b49a:	81 e4       	ldi	r24, 0x41	; 65
    b49c:	90 e0       	ldi	r25, 0x00	; 0
    b49e:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
						matrix2();
    b4a2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
						if(summ1[recur+1]>10)
    b4a6:	8f 81       	ldd	r24, Y+7	; 0x07
    b4a8:	98 85       	ldd	r25, Y+8	; 0x08
    b4aa:	01 96       	adiw	r24, 0x01	; 1
    b4ac:	9e 01       	movw	r18, r28
    b4ae:	25 54       	subi	r18, 0x45	; 69
    b4b0:	39 4f       	sbci	r19, 0xF9	; 249
    b4b2:	88 0f       	add	r24, r24
    b4b4:	99 1f       	adc	r25, r25
    b4b6:	82 0f       	add	r24, r18
    b4b8:	93 1f       	adc	r25, r19
    b4ba:	fc 01       	movw	r30, r24
    b4bc:	80 81       	ld	r24, Z
    b4be:	91 81       	ldd	r25, Z+1	; 0x01
    b4c0:	8b 30       	cpi	r24, 0x0B	; 11
    b4c2:	91 05       	cpc	r25, r1
    b4c4:	0c f4       	brge	.+2      	; 0xb4c8 <main+0x8178>
    b4c6:	d6 c0       	rjmp	.+428    	; 0xb674 <main+0x8324>
						{
							buzzer_on();
    b4c8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    b4cc:	9e 01       	movw	r18, r28
    b4ce:	2b 53       	subi	r18, 0x3B	; 59
    b4d0:	3c 4f       	sbci	r19, 0xFC	; 252
    b4d2:	80 e0       	ldi	r24, 0x00	; 0
    b4d4:	90 e0       	ldi	r25, 0x00	; 0
    b4d6:	aa e7       	ldi	r26, 0x7A	; 122
    b4d8:	b4 e4       	ldi	r27, 0x44	; 68
    b4da:	f9 01       	movw	r30, r18
    b4dc:	80 83       	st	Z, r24
    b4de:	91 83       	std	Z+1, r25	; 0x01
    b4e0:	a2 83       	std	Z+2, r26	; 0x02
    b4e2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b4e4:	8e 01       	movw	r16, r28
    b4e6:	07 53       	subi	r16, 0x37	; 55
    b4e8:	1c 4f       	sbci	r17, 0xFC	; 252
    b4ea:	ce 01       	movw	r24, r28
    b4ec:	8b 53       	subi	r24, 0x3B	; 59
    b4ee:	9c 4f       	sbci	r25, 0xFC	; 252
    b4f0:	fc 01       	movw	r30, r24
    b4f2:	60 81       	ld	r22, Z
    b4f4:	71 81       	ldd	r23, Z+1	; 0x01
    b4f6:	82 81       	ldd	r24, Z+2	; 0x02
    b4f8:	93 81       	ldd	r25, Z+3	; 0x03
    b4fa:	26 e6       	ldi	r18, 0x66	; 102
    b4fc:	36 e6       	ldi	r19, 0x66	; 102
    b4fe:	46 e6       	ldi	r20, 0x66	; 102
    b500:	55 e4       	ldi	r21, 0x45	; 69
    b502:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b506:	dc 01       	movw	r26, r24
    b508:	cb 01       	movw	r24, r22
    b50a:	f8 01       	movw	r30, r16
    b50c:	80 83       	st	Z, r24
    b50e:	91 83       	std	Z+1, r25	; 0x01
    b510:	a2 83       	std	Z+2, r26	; 0x02
    b512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b514:	ce 01       	movw	r24, r28
    b516:	87 53       	subi	r24, 0x37	; 55
    b518:	9c 4f       	sbci	r25, 0xFC	; 252
    b51a:	11 e0       	ldi	r17, 0x01	; 1
    b51c:	fc 01       	movw	r30, r24
    b51e:	60 81       	ld	r22, Z
    b520:	71 81       	ldd	r23, Z+1	; 0x01
    b522:	82 81       	ldd	r24, Z+2	; 0x02
    b524:	93 81       	ldd	r25, Z+3	; 0x03
    b526:	20 e0       	ldi	r18, 0x00	; 0
    b528:	30 e0       	ldi	r19, 0x00	; 0
    b52a:	40 e8       	ldi	r20, 0x80	; 128
    b52c:	5f e3       	ldi	r21, 0x3F	; 63
    b52e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    b532:	88 23       	and	r24, r24
    b534:	0c f0       	brlt	.+2      	; 0xb538 <main+0x81e8>
    b536:	10 e0       	ldi	r17, 0x00	; 0
    b538:	11 23       	and	r17, r17
    b53a:	49 f0       	breq	.+18     	; 0xb54e <main+0x81fe>
		__ticks = 1;
    b53c:	ce 01       	movw	r24, r28
    b53e:	83 53       	subi	r24, 0x33	; 51
    b540:	9c 4f       	sbci	r25, 0xFC	; 252
    b542:	21 e0       	ldi	r18, 0x01	; 1
    b544:	30 e0       	ldi	r19, 0x00	; 0
    b546:	fc 01       	movw	r30, r24
    b548:	31 83       	std	Z+1, r19	; 0x01
    b54a:	20 83       	st	Z, r18
    b54c:	74 c0       	rjmp	.+232    	; 0xb636 <main+0x82e6>
	else if (__tmp > 65535)
    b54e:	ce 01       	movw	r24, r28
    b550:	87 53       	subi	r24, 0x37	; 55
    b552:	9c 4f       	sbci	r25, 0xFC	; 252
    b554:	11 e0       	ldi	r17, 0x01	; 1
    b556:	fc 01       	movw	r30, r24
    b558:	60 81       	ld	r22, Z
    b55a:	71 81       	ldd	r23, Z+1	; 0x01
    b55c:	82 81       	ldd	r24, Z+2	; 0x02
    b55e:	93 81       	ldd	r25, Z+3	; 0x03
    b560:	20 e0       	ldi	r18, 0x00	; 0
    b562:	3f ef       	ldi	r19, 0xFF	; 255
    b564:	4f e7       	ldi	r20, 0x7F	; 127
    b566:	57 e4       	ldi	r21, 0x47	; 71
    b568:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    b56c:	18 16       	cp	r1, r24
    b56e:	0c f0       	brlt	.+2      	; 0xb572 <main+0x8222>
    b570:	10 e0       	ldi	r17, 0x00	; 0
    b572:	11 23       	and	r17, r17
    b574:	09 f4       	brne	.+2      	; 0xb578 <main+0x8228>
    b576:	4d c0       	rjmp	.+154    	; 0xb612 <main+0x82c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b578:	ce 01       	movw	r24, r28
    b57a:	8b 53       	subi	r24, 0x3B	; 59
    b57c:	9c 4f       	sbci	r25, 0xFC	; 252
    b57e:	fc 01       	movw	r30, r24
    b580:	60 81       	ld	r22, Z
    b582:	71 81       	ldd	r23, Z+1	; 0x01
    b584:	82 81       	ldd	r24, Z+2	; 0x02
    b586:	93 81       	ldd	r25, Z+3	; 0x03
    b588:	20 e0       	ldi	r18, 0x00	; 0
    b58a:	30 e0       	ldi	r19, 0x00	; 0
    b58c:	40 e2       	ldi	r20, 0x20	; 32
    b58e:	51 e4       	ldi	r21, 0x41	; 65
    b590:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b594:	dc 01       	movw	r26, r24
    b596:	cb 01       	movw	r24, r22
    b598:	8e 01       	movw	r16, r28
    b59a:	03 53       	subi	r16, 0x33	; 51
    b59c:	1c 4f       	sbci	r17, 0xFC	; 252
    b59e:	bc 01       	movw	r22, r24
    b5a0:	cd 01       	movw	r24, r26
    b5a2:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b5a6:	dc 01       	movw	r26, r24
    b5a8:	cb 01       	movw	r24, r22
    b5aa:	f8 01       	movw	r30, r16
    b5ac:	91 83       	std	Z+1, r25	; 0x01
    b5ae:	80 83       	st	Z, r24
    b5b0:	27 c0       	rjmp	.+78     	; 0xb600 <main+0x82b0>
    b5b2:	ce 01       	movw	r24, r28
    b5b4:	81 53       	subi	r24, 0x31	; 49
    b5b6:	9c 4f       	sbci	r25, 0xFC	; 252
    b5b8:	20 e7       	ldi	r18, 0x70	; 112
    b5ba:	31 e0       	ldi	r19, 0x01	; 1
    b5bc:	fc 01       	movw	r30, r24
    b5be:	31 83       	std	Z+1, r19	; 0x01
    b5c0:	20 83       	st	Z, r18
    b5c2:	ce 01       	movw	r24, r28
    b5c4:	81 53       	subi	r24, 0x31	; 49
    b5c6:	9c 4f       	sbci	r25, 0xFC	; 252
    b5c8:	fc 01       	movw	r30, r24
    b5ca:	80 81       	ld	r24, Z
    b5cc:	91 81       	ldd	r25, Z+1	; 0x01
    b5ce:	8c 01       	movw	r16, r24
    b5d0:	c8 01       	movw	r24, r16
    b5d2:	01 97       	sbiw	r24, 0x01	; 1
    b5d4:	f1 f7       	brne	.-4      	; 0xb5d2 <main+0x8282>
    b5d6:	8c 01       	movw	r16, r24
    b5d8:	ce 01       	movw	r24, r28
    b5da:	81 53       	subi	r24, 0x31	; 49
    b5dc:	9c 4f       	sbci	r25, 0xFC	; 252
    b5de:	fc 01       	movw	r30, r24
    b5e0:	11 83       	std	Z+1, r17	; 0x01
    b5e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b5e4:	ce 01       	movw	r24, r28
    b5e6:	83 53       	subi	r24, 0x33	; 51
    b5e8:	9c 4f       	sbci	r25, 0xFC	; 252
    b5ea:	9e 01       	movw	r18, r28
    b5ec:	23 53       	subi	r18, 0x33	; 51
    b5ee:	3c 4f       	sbci	r19, 0xFC	; 252
    b5f0:	f9 01       	movw	r30, r18
    b5f2:	20 81       	ld	r18, Z
    b5f4:	31 81       	ldd	r19, Z+1	; 0x01
    b5f6:	21 50       	subi	r18, 0x01	; 1
    b5f8:	30 40       	sbci	r19, 0x00	; 0
    b5fa:	fc 01       	movw	r30, r24
    b5fc:	31 83       	std	Z+1, r19	; 0x01
    b5fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b600:	ce 01       	movw	r24, r28
    b602:	83 53       	subi	r24, 0x33	; 51
    b604:	9c 4f       	sbci	r25, 0xFC	; 252
    b606:	fc 01       	movw	r30, r24
    b608:	80 81       	ld	r24, Z
    b60a:	91 81       	ldd	r25, Z+1	; 0x01
    b60c:	00 97       	sbiw	r24, 0x00	; 0
    b60e:	89 f6       	brne	.-94     	; 0xb5b2 <main+0x8262>
    b610:	2f c0       	rjmp	.+94     	; 0xb670 <main+0x8320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b612:	8e 01       	movw	r16, r28
    b614:	03 53       	subi	r16, 0x33	; 51
    b616:	1c 4f       	sbci	r17, 0xFC	; 252
    b618:	ce 01       	movw	r24, r28
    b61a:	87 53       	subi	r24, 0x37	; 55
    b61c:	9c 4f       	sbci	r25, 0xFC	; 252
    b61e:	fc 01       	movw	r30, r24
    b620:	60 81       	ld	r22, Z
    b622:	71 81       	ldd	r23, Z+1	; 0x01
    b624:	82 81       	ldd	r24, Z+2	; 0x02
    b626:	93 81       	ldd	r25, Z+3	; 0x03
    b628:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b62c:	dc 01       	movw	r26, r24
    b62e:	cb 01       	movw	r24, r22
    b630:	f8 01       	movw	r30, r16
    b632:	91 83       	std	Z+1, r25	; 0x01
    b634:	80 83       	st	Z, r24
    b636:	ce 01       	movw	r24, r28
    b638:	8f 52       	subi	r24, 0x2F	; 47
    b63a:	9c 4f       	sbci	r25, 0xFC	; 252
    b63c:	9e 01       	movw	r18, r28
    b63e:	23 53       	subi	r18, 0x33	; 51
    b640:	3c 4f       	sbci	r19, 0xFC	; 252
    b642:	f9 01       	movw	r30, r18
    b644:	20 81       	ld	r18, Z
    b646:	31 81       	ldd	r19, Z+1	; 0x01
    b648:	fc 01       	movw	r30, r24
    b64a:	31 83       	std	Z+1, r19	; 0x01
    b64c:	20 83       	st	Z, r18
    b64e:	ce 01       	movw	r24, r28
    b650:	8f 52       	subi	r24, 0x2F	; 47
    b652:	9c 4f       	sbci	r25, 0xFC	; 252
    b654:	fc 01       	movw	r30, r24
    b656:	80 81       	ld	r24, Z
    b658:	91 81       	ldd	r25, Z+1	; 0x01
    b65a:	8c 01       	movw	r16, r24
    b65c:	c8 01       	movw	r24, r16
    b65e:	01 97       	sbiw	r24, 0x01	; 1
    b660:	f1 f7       	brne	.-4      	; 0xb65e <main+0x830e>
    b662:	8c 01       	movw	r16, r24
    b664:	ce 01       	movw	r24, r28
    b666:	8f 52       	subi	r24, 0x2F	; 47
    b668:	9c 4f       	sbci	r25, 0xFC	; 252
    b66a:	fc 01       	movw	r30, r24
    b66c:	11 83       	std	Z+1, r17	; 0x01
    b66e:	00 83       	st	Z, r16
							_delay_ms(1000);
							buzzer_off();
    b670:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
						}
						forward_mm(75);
    b674:	8b e4       	ldi	r24, 0x4B	; 75
    b676:	90 e0       	ldi	r25, 0x00	; 0
    b678:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    b67c:	9e 01       	movw	r18, r28
    b67e:	2d 52       	subi	r18, 0x2D	; 45
    b680:	3c 4f       	sbci	r19, 0xFC	; 252
    b682:	80 e0       	ldi	r24, 0x00	; 0
    b684:	90 e0       	ldi	r25, 0x00	; 0
    b686:	a0 ef       	ldi	r26, 0xF0	; 240
    b688:	b1 e4       	ldi	r27, 0x41	; 65
    b68a:	f9 01       	movw	r30, r18
    b68c:	80 83       	st	Z, r24
    b68e:	91 83       	std	Z+1, r25	; 0x01
    b690:	a2 83       	std	Z+2, r26	; 0x02
    b692:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b694:	8e 01       	movw	r16, r28
    b696:	09 52       	subi	r16, 0x29	; 41
    b698:	1c 4f       	sbci	r17, 0xFC	; 252
    b69a:	ce 01       	movw	r24, r28
    b69c:	8d 52       	subi	r24, 0x2D	; 45
    b69e:	9c 4f       	sbci	r25, 0xFC	; 252
    b6a0:	fc 01       	movw	r30, r24
    b6a2:	60 81       	ld	r22, Z
    b6a4:	71 81       	ldd	r23, Z+1	; 0x01
    b6a6:	82 81       	ldd	r24, Z+2	; 0x02
    b6a8:	93 81       	ldd	r25, Z+3	; 0x03
    b6aa:	26 e6       	ldi	r18, 0x66	; 102
    b6ac:	36 e6       	ldi	r19, 0x66	; 102
    b6ae:	46 e6       	ldi	r20, 0x66	; 102
    b6b0:	55 e4       	ldi	r21, 0x45	; 69
    b6b2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b6b6:	dc 01       	movw	r26, r24
    b6b8:	cb 01       	movw	r24, r22
    b6ba:	f8 01       	movw	r30, r16
    b6bc:	80 83       	st	Z, r24
    b6be:	91 83       	std	Z+1, r25	; 0x01
    b6c0:	a2 83       	std	Z+2, r26	; 0x02
    b6c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b6c4:	ce 01       	movw	r24, r28
    b6c6:	89 52       	subi	r24, 0x29	; 41
    b6c8:	9c 4f       	sbci	r25, 0xFC	; 252
    b6ca:	11 e0       	ldi	r17, 0x01	; 1
    b6cc:	fc 01       	movw	r30, r24
    b6ce:	60 81       	ld	r22, Z
    b6d0:	71 81       	ldd	r23, Z+1	; 0x01
    b6d2:	82 81       	ldd	r24, Z+2	; 0x02
    b6d4:	93 81       	ldd	r25, Z+3	; 0x03
    b6d6:	20 e0       	ldi	r18, 0x00	; 0
    b6d8:	30 e0       	ldi	r19, 0x00	; 0
    b6da:	40 e8       	ldi	r20, 0x80	; 128
    b6dc:	5f e3       	ldi	r21, 0x3F	; 63
    b6de:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    b6e2:	88 23       	and	r24, r24
    b6e4:	0c f0       	brlt	.+2      	; 0xb6e8 <main+0x8398>
    b6e6:	10 e0       	ldi	r17, 0x00	; 0
    b6e8:	11 23       	and	r17, r17
    b6ea:	49 f0       	breq	.+18     	; 0xb6fe <main+0x83ae>
		__ticks = 1;
    b6ec:	ce 01       	movw	r24, r28
    b6ee:	85 52       	subi	r24, 0x25	; 37
    b6f0:	9c 4f       	sbci	r25, 0xFC	; 252
    b6f2:	21 e0       	ldi	r18, 0x01	; 1
    b6f4:	30 e0       	ldi	r19, 0x00	; 0
    b6f6:	fc 01       	movw	r30, r24
    b6f8:	31 83       	std	Z+1, r19	; 0x01
    b6fa:	20 83       	st	Z, r18
    b6fc:	74 c0       	rjmp	.+232    	; 0xb7e6 <main+0x8496>
	else if (__tmp > 65535)
    b6fe:	ce 01       	movw	r24, r28
    b700:	89 52       	subi	r24, 0x29	; 41
    b702:	9c 4f       	sbci	r25, 0xFC	; 252
    b704:	11 e0       	ldi	r17, 0x01	; 1
    b706:	fc 01       	movw	r30, r24
    b708:	60 81       	ld	r22, Z
    b70a:	71 81       	ldd	r23, Z+1	; 0x01
    b70c:	82 81       	ldd	r24, Z+2	; 0x02
    b70e:	93 81       	ldd	r25, Z+3	; 0x03
    b710:	20 e0       	ldi	r18, 0x00	; 0
    b712:	3f ef       	ldi	r19, 0xFF	; 255
    b714:	4f e7       	ldi	r20, 0x7F	; 127
    b716:	57 e4       	ldi	r21, 0x47	; 71
    b718:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    b71c:	18 16       	cp	r1, r24
    b71e:	0c f0       	brlt	.+2      	; 0xb722 <main+0x83d2>
    b720:	10 e0       	ldi	r17, 0x00	; 0
    b722:	11 23       	and	r17, r17
    b724:	09 f4       	brne	.+2      	; 0xb728 <main+0x83d8>
    b726:	4d c0       	rjmp	.+154    	; 0xb7c2 <main+0x8472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b728:	ce 01       	movw	r24, r28
    b72a:	8d 52       	subi	r24, 0x2D	; 45
    b72c:	9c 4f       	sbci	r25, 0xFC	; 252
    b72e:	fc 01       	movw	r30, r24
    b730:	60 81       	ld	r22, Z
    b732:	71 81       	ldd	r23, Z+1	; 0x01
    b734:	82 81       	ldd	r24, Z+2	; 0x02
    b736:	93 81       	ldd	r25, Z+3	; 0x03
    b738:	20 e0       	ldi	r18, 0x00	; 0
    b73a:	30 e0       	ldi	r19, 0x00	; 0
    b73c:	40 e2       	ldi	r20, 0x20	; 32
    b73e:	51 e4       	ldi	r21, 0x41	; 65
    b740:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b744:	dc 01       	movw	r26, r24
    b746:	cb 01       	movw	r24, r22
    b748:	8e 01       	movw	r16, r28
    b74a:	05 52       	subi	r16, 0x25	; 37
    b74c:	1c 4f       	sbci	r17, 0xFC	; 252
    b74e:	bc 01       	movw	r22, r24
    b750:	cd 01       	movw	r24, r26
    b752:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b756:	dc 01       	movw	r26, r24
    b758:	cb 01       	movw	r24, r22
    b75a:	f8 01       	movw	r30, r16
    b75c:	91 83       	std	Z+1, r25	; 0x01
    b75e:	80 83       	st	Z, r24
    b760:	27 c0       	rjmp	.+78     	; 0xb7b0 <main+0x8460>
    b762:	ce 01       	movw	r24, r28
    b764:	83 52       	subi	r24, 0x23	; 35
    b766:	9c 4f       	sbci	r25, 0xFC	; 252
    b768:	20 e7       	ldi	r18, 0x70	; 112
    b76a:	31 e0       	ldi	r19, 0x01	; 1
    b76c:	fc 01       	movw	r30, r24
    b76e:	31 83       	std	Z+1, r19	; 0x01
    b770:	20 83       	st	Z, r18
    b772:	ce 01       	movw	r24, r28
    b774:	83 52       	subi	r24, 0x23	; 35
    b776:	9c 4f       	sbci	r25, 0xFC	; 252
    b778:	fc 01       	movw	r30, r24
    b77a:	80 81       	ld	r24, Z
    b77c:	91 81       	ldd	r25, Z+1	; 0x01
    b77e:	8c 01       	movw	r16, r24
    b780:	c8 01       	movw	r24, r16
    b782:	01 97       	sbiw	r24, 0x01	; 1
    b784:	f1 f7       	brne	.-4      	; 0xb782 <main+0x8432>
    b786:	8c 01       	movw	r16, r24
    b788:	ce 01       	movw	r24, r28
    b78a:	83 52       	subi	r24, 0x23	; 35
    b78c:	9c 4f       	sbci	r25, 0xFC	; 252
    b78e:	fc 01       	movw	r30, r24
    b790:	11 83       	std	Z+1, r17	; 0x01
    b792:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b794:	ce 01       	movw	r24, r28
    b796:	85 52       	subi	r24, 0x25	; 37
    b798:	9c 4f       	sbci	r25, 0xFC	; 252
    b79a:	9e 01       	movw	r18, r28
    b79c:	25 52       	subi	r18, 0x25	; 37
    b79e:	3c 4f       	sbci	r19, 0xFC	; 252
    b7a0:	f9 01       	movw	r30, r18
    b7a2:	20 81       	ld	r18, Z
    b7a4:	31 81       	ldd	r19, Z+1	; 0x01
    b7a6:	21 50       	subi	r18, 0x01	; 1
    b7a8:	30 40       	sbci	r19, 0x00	; 0
    b7aa:	fc 01       	movw	r30, r24
    b7ac:	31 83       	std	Z+1, r19	; 0x01
    b7ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b7b0:	ce 01       	movw	r24, r28
    b7b2:	85 52       	subi	r24, 0x25	; 37
    b7b4:	9c 4f       	sbci	r25, 0xFC	; 252
    b7b6:	fc 01       	movw	r30, r24
    b7b8:	80 81       	ld	r24, Z
    b7ba:	91 81       	ldd	r25, Z+1	; 0x01
    b7bc:	00 97       	sbiw	r24, 0x00	; 0
    b7be:	89 f6       	brne	.-94     	; 0xb762 <main+0x8412>
    b7c0:	2f c0       	rjmp	.+94     	; 0xb820 <main+0x84d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b7c2:	8e 01       	movw	r16, r28
    b7c4:	05 52       	subi	r16, 0x25	; 37
    b7c6:	1c 4f       	sbci	r17, 0xFC	; 252
    b7c8:	ce 01       	movw	r24, r28
    b7ca:	89 52       	subi	r24, 0x29	; 41
    b7cc:	9c 4f       	sbci	r25, 0xFC	; 252
    b7ce:	fc 01       	movw	r30, r24
    b7d0:	60 81       	ld	r22, Z
    b7d2:	71 81       	ldd	r23, Z+1	; 0x01
    b7d4:	82 81       	ldd	r24, Z+2	; 0x02
    b7d6:	93 81       	ldd	r25, Z+3	; 0x03
    b7d8:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b7dc:	dc 01       	movw	r26, r24
    b7de:	cb 01       	movw	r24, r22
    b7e0:	f8 01       	movw	r30, r16
    b7e2:	91 83       	std	Z+1, r25	; 0x01
    b7e4:	80 83       	st	Z, r24
    b7e6:	ce 01       	movw	r24, r28
    b7e8:	81 52       	subi	r24, 0x21	; 33
    b7ea:	9c 4f       	sbci	r25, 0xFC	; 252
    b7ec:	9e 01       	movw	r18, r28
    b7ee:	25 52       	subi	r18, 0x25	; 37
    b7f0:	3c 4f       	sbci	r19, 0xFC	; 252
    b7f2:	f9 01       	movw	r30, r18
    b7f4:	20 81       	ld	r18, Z
    b7f6:	31 81       	ldd	r19, Z+1	; 0x01
    b7f8:	fc 01       	movw	r30, r24
    b7fa:	31 83       	std	Z+1, r19	; 0x01
    b7fc:	20 83       	st	Z, r18
    b7fe:	ce 01       	movw	r24, r28
    b800:	81 52       	subi	r24, 0x21	; 33
    b802:	9c 4f       	sbci	r25, 0xFC	; 252
    b804:	fc 01       	movw	r30, r24
    b806:	80 81       	ld	r24, Z
    b808:	91 81       	ldd	r25, Z+1	; 0x01
    b80a:	8c 01       	movw	r16, r24
    b80c:	c8 01       	movw	r24, r16
    b80e:	01 97       	sbiw	r24, 0x01	; 1
    b810:	f1 f7       	brne	.-4      	; 0xb80e <main+0x84be>
    b812:	8c 01       	movw	r16, r24
    b814:	ce 01       	movw	r24, r28
    b816:	81 52       	subi	r24, 0x21	; 33
    b818:	9c 4f       	sbci	r25, 0xFC	; 252
    b81a:	fc 01       	movw	r30, r24
    b81c:	11 83       	std	Z+1, r17	; 0x01
    b81e:	00 83       	st	Z, r16
						_delay_ms(30);
						back_mm(10);
    b820:	8a e0       	ldi	r24, 0x0A	; 10
    b822:	90 e0       	ldi	r25, 0x00	; 0
    b824:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    b828:	9e 01       	movw	r18, r28
    b82a:	2f 51       	subi	r18, 0x1F	; 31
    b82c:	3c 4f       	sbci	r19, 0xFC	; 252
    b82e:	80 e0       	ldi	r24, 0x00	; 0
    b830:	90 e0       	ldi	r25, 0x00	; 0
    b832:	aa ef       	ldi	r26, 0xFA	; 250
    b834:	b3 e4       	ldi	r27, 0x43	; 67
    b836:	f9 01       	movw	r30, r18
    b838:	80 83       	st	Z, r24
    b83a:	91 83       	std	Z+1, r25	; 0x01
    b83c:	a2 83       	std	Z+2, r26	; 0x02
    b83e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b840:	8e 01       	movw	r16, r28
    b842:	0b 51       	subi	r16, 0x1B	; 27
    b844:	1c 4f       	sbci	r17, 0xFC	; 252
    b846:	ce 01       	movw	r24, r28
    b848:	8f 51       	subi	r24, 0x1F	; 31
    b84a:	9c 4f       	sbci	r25, 0xFC	; 252
    b84c:	fc 01       	movw	r30, r24
    b84e:	60 81       	ld	r22, Z
    b850:	71 81       	ldd	r23, Z+1	; 0x01
    b852:	82 81       	ldd	r24, Z+2	; 0x02
    b854:	93 81       	ldd	r25, Z+3	; 0x03
    b856:	26 e6       	ldi	r18, 0x66	; 102
    b858:	36 e6       	ldi	r19, 0x66	; 102
    b85a:	46 e6       	ldi	r20, 0x66	; 102
    b85c:	55 e4       	ldi	r21, 0x45	; 69
    b85e:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b862:	dc 01       	movw	r26, r24
    b864:	cb 01       	movw	r24, r22
    b866:	f8 01       	movw	r30, r16
    b868:	80 83       	st	Z, r24
    b86a:	91 83       	std	Z+1, r25	; 0x01
    b86c:	a2 83       	std	Z+2, r26	; 0x02
    b86e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b870:	ce 01       	movw	r24, r28
    b872:	8b 51       	subi	r24, 0x1B	; 27
    b874:	9c 4f       	sbci	r25, 0xFC	; 252
    b876:	11 e0       	ldi	r17, 0x01	; 1
    b878:	fc 01       	movw	r30, r24
    b87a:	60 81       	ld	r22, Z
    b87c:	71 81       	ldd	r23, Z+1	; 0x01
    b87e:	82 81       	ldd	r24, Z+2	; 0x02
    b880:	93 81       	ldd	r25, Z+3	; 0x03
    b882:	20 e0       	ldi	r18, 0x00	; 0
    b884:	30 e0       	ldi	r19, 0x00	; 0
    b886:	40 e8       	ldi	r20, 0x80	; 128
    b888:	5f e3       	ldi	r21, 0x3F	; 63
    b88a:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    b88e:	88 23       	and	r24, r24
    b890:	0c f0       	brlt	.+2      	; 0xb894 <main+0x8544>
    b892:	10 e0       	ldi	r17, 0x00	; 0
    b894:	11 23       	and	r17, r17
    b896:	49 f0       	breq	.+18     	; 0xb8aa <main+0x855a>
		__ticks = 1;
    b898:	ce 01       	movw	r24, r28
    b89a:	87 51       	subi	r24, 0x17	; 23
    b89c:	9c 4f       	sbci	r25, 0xFC	; 252
    b89e:	21 e0       	ldi	r18, 0x01	; 1
    b8a0:	30 e0       	ldi	r19, 0x00	; 0
    b8a2:	fc 01       	movw	r30, r24
    b8a4:	31 83       	std	Z+1, r19	; 0x01
    b8a6:	20 83       	st	Z, r18
    b8a8:	74 c0       	rjmp	.+232    	; 0xb992 <main+0x8642>
	else if (__tmp > 65535)
    b8aa:	ce 01       	movw	r24, r28
    b8ac:	8b 51       	subi	r24, 0x1B	; 27
    b8ae:	9c 4f       	sbci	r25, 0xFC	; 252
    b8b0:	11 e0       	ldi	r17, 0x01	; 1
    b8b2:	fc 01       	movw	r30, r24
    b8b4:	60 81       	ld	r22, Z
    b8b6:	71 81       	ldd	r23, Z+1	; 0x01
    b8b8:	82 81       	ldd	r24, Z+2	; 0x02
    b8ba:	93 81       	ldd	r25, Z+3	; 0x03
    b8bc:	20 e0       	ldi	r18, 0x00	; 0
    b8be:	3f ef       	ldi	r19, 0xFF	; 255
    b8c0:	4f e7       	ldi	r20, 0x7F	; 127
    b8c2:	57 e4       	ldi	r21, 0x47	; 71
    b8c4:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    b8c8:	18 16       	cp	r1, r24
    b8ca:	0c f0       	brlt	.+2      	; 0xb8ce <main+0x857e>
    b8cc:	10 e0       	ldi	r17, 0x00	; 0
    b8ce:	11 23       	and	r17, r17
    b8d0:	09 f4       	brne	.+2      	; 0xb8d4 <main+0x8584>
    b8d2:	4d c0       	rjmp	.+154    	; 0xb96e <main+0x861e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b8d4:	ce 01       	movw	r24, r28
    b8d6:	8f 51       	subi	r24, 0x1F	; 31
    b8d8:	9c 4f       	sbci	r25, 0xFC	; 252
    b8da:	fc 01       	movw	r30, r24
    b8dc:	60 81       	ld	r22, Z
    b8de:	71 81       	ldd	r23, Z+1	; 0x01
    b8e0:	82 81       	ldd	r24, Z+2	; 0x02
    b8e2:	93 81       	ldd	r25, Z+3	; 0x03
    b8e4:	20 e0       	ldi	r18, 0x00	; 0
    b8e6:	30 e0       	ldi	r19, 0x00	; 0
    b8e8:	40 e2       	ldi	r20, 0x20	; 32
    b8ea:	51 e4       	ldi	r21, 0x41	; 65
    b8ec:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    b8f0:	dc 01       	movw	r26, r24
    b8f2:	cb 01       	movw	r24, r22
    b8f4:	8e 01       	movw	r16, r28
    b8f6:	07 51       	subi	r16, 0x17	; 23
    b8f8:	1c 4f       	sbci	r17, 0xFC	; 252
    b8fa:	bc 01       	movw	r22, r24
    b8fc:	cd 01       	movw	r24, r26
    b8fe:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b902:	dc 01       	movw	r26, r24
    b904:	cb 01       	movw	r24, r22
    b906:	f8 01       	movw	r30, r16
    b908:	91 83       	std	Z+1, r25	; 0x01
    b90a:	80 83       	st	Z, r24
    b90c:	27 c0       	rjmp	.+78     	; 0xb95c <main+0x860c>
    b90e:	ce 01       	movw	r24, r28
    b910:	85 51       	subi	r24, 0x15	; 21
    b912:	9c 4f       	sbci	r25, 0xFC	; 252
    b914:	20 e7       	ldi	r18, 0x70	; 112
    b916:	31 e0       	ldi	r19, 0x01	; 1
    b918:	fc 01       	movw	r30, r24
    b91a:	31 83       	std	Z+1, r19	; 0x01
    b91c:	20 83       	st	Z, r18
    b91e:	ce 01       	movw	r24, r28
    b920:	85 51       	subi	r24, 0x15	; 21
    b922:	9c 4f       	sbci	r25, 0xFC	; 252
    b924:	fc 01       	movw	r30, r24
    b926:	80 81       	ld	r24, Z
    b928:	91 81       	ldd	r25, Z+1	; 0x01
    b92a:	8c 01       	movw	r16, r24
    b92c:	c8 01       	movw	r24, r16
    b92e:	01 97       	sbiw	r24, 0x01	; 1
    b930:	f1 f7       	brne	.-4      	; 0xb92e <main+0x85de>
    b932:	8c 01       	movw	r16, r24
    b934:	ce 01       	movw	r24, r28
    b936:	85 51       	subi	r24, 0x15	; 21
    b938:	9c 4f       	sbci	r25, 0xFC	; 252
    b93a:	fc 01       	movw	r30, r24
    b93c:	11 83       	std	Z+1, r17	; 0x01
    b93e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b940:	ce 01       	movw	r24, r28
    b942:	87 51       	subi	r24, 0x17	; 23
    b944:	9c 4f       	sbci	r25, 0xFC	; 252
    b946:	9e 01       	movw	r18, r28
    b948:	27 51       	subi	r18, 0x17	; 23
    b94a:	3c 4f       	sbci	r19, 0xFC	; 252
    b94c:	f9 01       	movw	r30, r18
    b94e:	20 81       	ld	r18, Z
    b950:	31 81       	ldd	r19, Z+1	; 0x01
    b952:	21 50       	subi	r18, 0x01	; 1
    b954:	30 40       	sbci	r19, 0x00	; 0
    b956:	fc 01       	movw	r30, r24
    b958:	31 83       	std	Z+1, r19	; 0x01
    b95a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b95c:	ce 01       	movw	r24, r28
    b95e:	87 51       	subi	r24, 0x17	; 23
    b960:	9c 4f       	sbci	r25, 0xFC	; 252
    b962:	fc 01       	movw	r30, r24
    b964:	80 81       	ld	r24, Z
    b966:	91 81       	ldd	r25, Z+1	; 0x01
    b968:	00 97       	sbiw	r24, 0x00	; 0
    b96a:	89 f6       	brne	.-94     	; 0xb90e <main+0x85be>
    b96c:	2f c0       	rjmp	.+94     	; 0xb9cc <main+0x867c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b96e:	8e 01       	movw	r16, r28
    b970:	07 51       	subi	r16, 0x17	; 23
    b972:	1c 4f       	sbci	r17, 0xFC	; 252
    b974:	ce 01       	movw	r24, r28
    b976:	8b 51       	subi	r24, 0x1B	; 27
    b978:	9c 4f       	sbci	r25, 0xFC	; 252
    b97a:	fc 01       	movw	r30, r24
    b97c:	60 81       	ld	r22, Z
    b97e:	71 81       	ldd	r23, Z+1	; 0x01
    b980:	82 81       	ldd	r24, Z+2	; 0x02
    b982:	93 81       	ldd	r25, Z+3	; 0x03
    b984:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    b988:	dc 01       	movw	r26, r24
    b98a:	cb 01       	movw	r24, r22
    b98c:	f8 01       	movw	r30, r16
    b98e:	91 83       	std	Z+1, r25	; 0x01
    b990:	80 83       	st	Z, r24
    b992:	ce 01       	movw	r24, r28
    b994:	83 51       	subi	r24, 0x13	; 19
    b996:	9c 4f       	sbci	r25, 0xFC	; 252
    b998:	9e 01       	movw	r18, r28
    b99a:	27 51       	subi	r18, 0x17	; 23
    b99c:	3c 4f       	sbci	r19, 0xFC	; 252
    b99e:	f9 01       	movw	r30, r18
    b9a0:	20 81       	ld	r18, Z
    b9a2:	31 81       	ldd	r19, Z+1	; 0x01
    b9a4:	fc 01       	movw	r30, r24
    b9a6:	31 83       	std	Z+1, r19	; 0x01
    b9a8:	20 83       	st	Z, r18
    b9aa:	ce 01       	movw	r24, r28
    b9ac:	83 51       	subi	r24, 0x13	; 19
    b9ae:	9c 4f       	sbci	r25, 0xFC	; 252
    b9b0:	fc 01       	movw	r30, r24
    b9b2:	80 81       	ld	r24, Z
    b9b4:	91 81       	ldd	r25, Z+1	; 0x01
    b9b6:	8c 01       	movw	r16, r24
    b9b8:	c8 01       	movw	r24, r16
    b9ba:	01 97       	sbiw	r24, 0x01	; 1
    b9bc:	f1 f7       	brne	.-4      	; 0xb9ba <main+0x866a>
    b9be:	8c 01       	movw	r16, r24
    b9c0:	ce 01       	movw	r24, r28
    b9c2:	83 51       	subi	r24, 0x13	; 19
    b9c4:	9c 4f       	sbci	r25, 0xFC	; 252
    b9c6:	fc 01       	movw	r30, r24
    b9c8:	11 83       	std	Z+1, r17	; 0x01
    b9ca:	00 83       	st	Z, r16
						_delay_ms(500);
						right_degrees(45);
    b9cc:	8d e2       	ldi	r24, 0x2D	; 45
    b9ce:	90 e0       	ldi	r25, 0x00	; 0
    b9d0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						left_degrees(180);
    b9d4:	84 eb       	ldi	r24, 0xB4	; 180
    b9d6:	90 e0       	ldi	r25, 0x00	; 0
    b9d8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						compass=6;
    b9dc:	86 e0       	ldi	r24, 0x06	; 6
    b9de:	90 e0       	ldi	r25, 0x00	; 0
    b9e0:	9c 83       	std	Y+4, r25	; 0x04
    b9e2:	8b 83       	std	Y+3, r24	; 0x03
						break;
    b9e4:	d4 c5       	rjmp	.+2984   	; 0xc58e <main+0x923e>
					
					}
					if(coor[0]<origin2[boxnumber][i][0] && coor[1]>origin2[boxnumber][i][1])
    b9e6:	20 91 a6 04 	lds	r18, 0x04A6
    b9ea:	30 91 a7 04 	lds	r19, 0x04A7
    b9ee:	ae 01       	movw	r20, r28
    b9f0:	4d 5f       	subi	r20, 0xFD	; 253
    b9f2:	5a 4f       	sbci	r21, 0xFA	; 250
    b9f4:	8d 81       	ldd	r24, Y+5	; 0x05
    b9f6:	9e 81       	ldd	r25, Y+6	; 0x06
    b9f8:	bc 01       	movw	r22, r24
    b9fa:	66 0f       	add	r22, r22
    b9fc:	77 1f       	adc	r23, r23
    b9fe:	66 0f       	add	r22, r22
    ba00:	77 1f       	adc	r23, r23
    ba02:	8f a1       	lds	r24, 0x4f
    ba04:	98 a5       	lds	r25, 0x68
    ba06:	86 0f       	add	r24, r22
    ba08:	97 1f       	adc	r25, r23
    ba0a:	88 0f       	add	r24, r24
    ba0c:	99 1f       	adc	r25, r25
    ba0e:	88 0f       	add	r24, r24
    ba10:	99 1f       	adc	r25, r25
    ba12:	84 0f       	add	r24, r20
    ba14:	95 1f       	adc	r25, r21
    ba16:	fc 01       	movw	r30, r24
    ba18:	80 81       	ld	r24, Z
    ba1a:	91 81       	ldd	r25, Z+1	; 0x01
    ba1c:	28 17       	cp	r18, r24
    ba1e:	39 07       	cpc	r19, r25
    ba20:	0c f0       	brlt	.+2      	; 0xba24 <main+0x86d4>
    ba22:	c6 c2       	rjmp	.+1420   	; 0xbfb0 <main+0x8c60>
    ba24:	20 91 a8 04 	lds	r18, 0x04A8
    ba28:	30 91 a9 04 	lds	r19, 0x04A9
    ba2c:	ae 01       	movw	r20, r28
    ba2e:	4d 5f       	subi	r20, 0xFD	; 253
    ba30:	5a 4f       	sbci	r21, 0xFA	; 250
    ba32:	8d 81       	ldd	r24, Y+5	; 0x05
    ba34:	9e 81       	ldd	r25, Y+6	; 0x06
    ba36:	bc 01       	movw	r22, r24
    ba38:	66 0f       	add	r22, r22
    ba3a:	77 1f       	adc	r23, r23
    ba3c:	66 0f       	add	r22, r22
    ba3e:	77 1f       	adc	r23, r23
    ba40:	8f a1       	lds	r24, 0x4f
    ba42:	98 a5       	lds	r25, 0x68
    ba44:	86 0f       	add	r24, r22
    ba46:	97 1f       	adc	r25, r23
    ba48:	88 0f       	add	r24, r24
    ba4a:	99 1f       	adc	r25, r25
    ba4c:	88 0f       	add	r24, r24
    ba4e:	99 1f       	adc	r25, r25
    ba50:	84 0f       	add	r24, r20
    ba52:	95 1f       	adc	r25, r21
    ba54:	02 96       	adiw	r24, 0x02	; 2
    ba56:	fc 01       	movw	r30, r24
    ba58:	80 81       	ld	r24, Z
    ba5a:	91 81       	ldd	r25, Z+1	; 0x01
    ba5c:	82 17       	cp	r24, r18
    ba5e:	93 07       	cpc	r25, r19
    ba60:	0c f0       	brlt	.+2      	; 0xba64 <main+0x8714>
    ba62:	a6 c2       	rjmp	.+1356   	; 0xbfb0 <main+0x8c60>
					{
						left_degrees(135);
    ba64:	87 e8       	ldi	r24, 0x87	; 135
    ba66:	90 e0       	ldi	r25, 0x00	; 0
    ba68:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						back_mm(65);
    ba6c:	81 e4       	ldi	r24, 0x41	; 65
    ba6e:	90 e0       	ldi	r25, 0x00	; 0
    ba70:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
						matrix2();
    ba74:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
							if(summ1[recur+1]>10)
    ba78:	8f 81       	ldd	r24, Y+7	; 0x07
    ba7a:	98 85       	ldd	r25, Y+8	; 0x08
    ba7c:	01 96       	adiw	r24, 0x01	; 1
    ba7e:	9e 01       	movw	r18, r28
    ba80:	25 54       	subi	r18, 0x45	; 69
    ba82:	39 4f       	sbci	r19, 0xF9	; 249
    ba84:	88 0f       	add	r24, r24
    ba86:	99 1f       	adc	r25, r25
    ba88:	82 0f       	add	r24, r18
    ba8a:	93 1f       	adc	r25, r19
    ba8c:	fc 01       	movw	r30, r24
    ba8e:	80 81       	ld	r24, Z
    ba90:	91 81       	ldd	r25, Z+1	; 0x01
    ba92:	8b 30       	cpi	r24, 0x0B	; 11
    ba94:	91 05       	cpc	r25, r1
    ba96:	0c f4       	brge	.+2      	; 0xba9a <main+0x874a>
    ba98:	d6 c0       	rjmp	.+428    	; 0xbc46 <main+0x88f6>
							{
								buzzer_on();
    ba9a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    ba9e:	9e 01       	movw	r18, r28
    baa0:	21 51       	subi	r18, 0x11	; 17
    baa2:	3c 4f       	sbci	r19, 0xFC	; 252
    baa4:	80 e0       	ldi	r24, 0x00	; 0
    baa6:	90 e0       	ldi	r25, 0x00	; 0
    baa8:	aa e7       	ldi	r26, 0x7A	; 122
    baaa:	b4 e4       	ldi	r27, 0x44	; 68
    baac:	f9 01       	movw	r30, r18
    baae:	80 83       	st	Z, r24
    bab0:	91 83       	std	Z+1, r25	; 0x01
    bab2:	a2 83       	std	Z+2, r26	; 0x02
    bab4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bab6:	8e 01       	movw	r16, r28
    bab8:	0d 50       	subi	r16, 0x0D	; 13
    baba:	1c 4f       	sbci	r17, 0xFC	; 252
    babc:	ce 01       	movw	r24, r28
    babe:	81 51       	subi	r24, 0x11	; 17
    bac0:	9c 4f       	sbci	r25, 0xFC	; 252
    bac2:	fc 01       	movw	r30, r24
    bac4:	60 81       	ld	r22, Z
    bac6:	71 81       	ldd	r23, Z+1	; 0x01
    bac8:	82 81       	ldd	r24, Z+2	; 0x02
    baca:	93 81       	ldd	r25, Z+3	; 0x03
    bacc:	26 e6       	ldi	r18, 0x66	; 102
    bace:	36 e6       	ldi	r19, 0x66	; 102
    bad0:	46 e6       	ldi	r20, 0x66	; 102
    bad2:	55 e4       	ldi	r21, 0x45	; 69
    bad4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    bad8:	dc 01       	movw	r26, r24
    bada:	cb 01       	movw	r24, r22
    badc:	f8 01       	movw	r30, r16
    bade:	80 83       	st	Z, r24
    bae0:	91 83       	std	Z+1, r25	; 0x01
    bae2:	a2 83       	std	Z+2, r26	; 0x02
    bae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bae6:	ce 01       	movw	r24, r28
    bae8:	8d 50       	subi	r24, 0x0D	; 13
    baea:	9c 4f       	sbci	r25, 0xFC	; 252
    baec:	11 e0       	ldi	r17, 0x01	; 1
    baee:	fc 01       	movw	r30, r24
    baf0:	60 81       	ld	r22, Z
    baf2:	71 81       	ldd	r23, Z+1	; 0x01
    baf4:	82 81       	ldd	r24, Z+2	; 0x02
    baf6:	93 81       	ldd	r25, Z+3	; 0x03
    baf8:	20 e0       	ldi	r18, 0x00	; 0
    bafa:	30 e0       	ldi	r19, 0x00	; 0
    bafc:	40 e8       	ldi	r20, 0x80	; 128
    bafe:	5f e3       	ldi	r21, 0x3F	; 63
    bb00:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    bb04:	88 23       	and	r24, r24
    bb06:	0c f0       	brlt	.+2      	; 0xbb0a <main+0x87ba>
    bb08:	10 e0       	ldi	r17, 0x00	; 0
    bb0a:	11 23       	and	r17, r17
    bb0c:	49 f0       	breq	.+18     	; 0xbb20 <main+0x87d0>
		__ticks = 1;
    bb0e:	ce 01       	movw	r24, r28
    bb10:	89 50       	subi	r24, 0x09	; 9
    bb12:	9c 4f       	sbci	r25, 0xFC	; 252
    bb14:	21 e0       	ldi	r18, 0x01	; 1
    bb16:	30 e0       	ldi	r19, 0x00	; 0
    bb18:	fc 01       	movw	r30, r24
    bb1a:	31 83       	std	Z+1, r19	; 0x01
    bb1c:	20 83       	st	Z, r18
    bb1e:	74 c0       	rjmp	.+232    	; 0xbc08 <main+0x88b8>
	else if (__tmp > 65535)
    bb20:	ce 01       	movw	r24, r28
    bb22:	8d 50       	subi	r24, 0x0D	; 13
    bb24:	9c 4f       	sbci	r25, 0xFC	; 252
    bb26:	11 e0       	ldi	r17, 0x01	; 1
    bb28:	fc 01       	movw	r30, r24
    bb2a:	60 81       	ld	r22, Z
    bb2c:	71 81       	ldd	r23, Z+1	; 0x01
    bb2e:	82 81       	ldd	r24, Z+2	; 0x02
    bb30:	93 81       	ldd	r25, Z+3	; 0x03
    bb32:	20 e0       	ldi	r18, 0x00	; 0
    bb34:	3f ef       	ldi	r19, 0xFF	; 255
    bb36:	4f e7       	ldi	r20, 0x7F	; 127
    bb38:	57 e4       	ldi	r21, 0x47	; 71
    bb3a:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    bb3e:	18 16       	cp	r1, r24
    bb40:	0c f0       	brlt	.+2      	; 0xbb44 <main+0x87f4>
    bb42:	10 e0       	ldi	r17, 0x00	; 0
    bb44:	11 23       	and	r17, r17
    bb46:	09 f4       	brne	.+2      	; 0xbb4a <main+0x87fa>
    bb48:	4d c0       	rjmp	.+154    	; 0xbbe4 <main+0x8894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bb4a:	ce 01       	movw	r24, r28
    bb4c:	81 51       	subi	r24, 0x11	; 17
    bb4e:	9c 4f       	sbci	r25, 0xFC	; 252
    bb50:	fc 01       	movw	r30, r24
    bb52:	60 81       	ld	r22, Z
    bb54:	71 81       	ldd	r23, Z+1	; 0x01
    bb56:	82 81       	ldd	r24, Z+2	; 0x02
    bb58:	93 81       	ldd	r25, Z+3	; 0x03
    bb5a:	20 e0       	ldi	r18, 0x00	; 0
    bb5c:	30 e0       	ldi	r19, 0x00	; 0
    bb5e:	40 e2       	ldi	r20, 0x20	; 32
    bb60:	51 e4       	ldi	r21, 0x41	; 65
    bb62:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    bb66:	dc 01       	movw	r26, r24
    bb68:	cb 01       	movw	r24, r22
    bb6a:	8e 01       	movw	r16, r28
    bb6c:	09 50       	subi	r16, 0x09	; 9
    bb6e:	1c 4f       	sbci	r17, 0xFC	; 252
    bb70:	bc 01       	movw	r22, r24
    bb72:	cd 01       	movw	r24, r26
    bb74:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bb78:	dc 01       	movw	r26, r24
    bb7a:	cb 01       	movw	r24, r22
    bb7c:	f8 01       	movw	r30, r16
    bb7e:	91 83       	std	Z+1, r25	; 0x01
    bb80:	80 83       	st	Z, r24
    bb82:	27 c0       	rjmp	.+78     	; 0xbbd2 <main+0x8882>
    bb84:	ce 01       	movw	r24, r28
    bb86:	87 50       	subi	r24, 0x07	; 7
    bb88:	9c 4f       	sbci	r25, 0xFC	; 252
    bb8a:	20 e7       	ldi	r18, 0x70	; 112
    bb8c:	31 e0       	ldi	r19, 0x01	; 1
    bb8e:	fc 01       	movw	r30, r24
    bb90:	31 83       	std	Z+1, r19	; 0x01
    bb92:	20 83       	st	Z, r18
    bb94:	ce 01       	movw	r24, r28
    bb96:	87 50       	subi	r24, 0x07	; 7
    bb98:	9c 4f       	sbci	r25, 0xFC	; 252
    bb9a:	fc 01       	movw	r30, r24
    bb9c:	80 81       	ld	r24, Z
    bb9e:	91 81       	ldd	r25, Z+1	; 0x01
    bba0:	8c 01       	movw	r16, r24
    bba2:	c8 01       	movw	r24, r16
    bba4:	01 97       	sbiw	r24, 0x01	; 1
    bba6:	f1 f7       	brne	.-4      	; 0xbba4 <main+0x8854>
    bba8:	8c 01       	movw	r16, r24
    bbaa:	ce 01       	movw	r24, r28
    bbac:	87 50       	subi	r24, 0x07	; 7
    bbae:	9c 4f       	sbci	r25, 0xFC	; 252
    bbb0:	fc 01       	movw	r30, r24
    bbb2:	11 83       	std	Z+1, r17	; 0x01
    bbb4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bbb6:	ce 01       	movw	r24, r28
    bbb8:	89 50       	subi	r24, 0x09	; 9
    bbba:	9c 4f       	sbci	r25, 0xFC	; 252
    bbbc:	9e 01       	movw	r18, r28
    bbbe:	29 50       	subi	r18, 0x09	; 9
    bbc0:	3c 4f       	sbci	r19, 0xFC	; 252
    bbc2:	f9 01       	movw	r30, r18
    bbc4:	20 81       	ld	r18, Z
    bbc6:	31 81       	ldd	r19, Z+1	; 0x01
    bbc8:	21 50       	subi	r18, 0x01	; 1
    bbca:	30 40       	sbci	r19, 0x00	; 0
    bbcc:	fc 01       	movw	r30, r24
    bbce:	31 83       	std	Z+1, r19	; 0x01
    bbd0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bbd2:	ce 01       	movw	r24, r28
    bbd4:	89 50       	subi	r24, 0x09	; 9
    bbd6:	9c 4f       	sbci	r25, 0xFC	; 252
    bbd8:	fc 01       	movw	r30, r24
    bbda:	80 81       	ld	r24, Z
    bbdc:	91 81       	ldd	r25, Z+1	; 0x01
    bbde:	00 97       	sbiw	r24, 0x00	; 0
    bbe0:	89 f6       	brne	.-94     	; 0xbb84 <main+0x8834>
    bbe2:	2f c0       	rjmp	.+94     	; 0xbc42 <main+0x88f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bbe4:	8e 01       	movw	r16, r28
    bbe6:	09 50       	subi	r16, 0x09	; 9
    bbe8:	1c 4f       	sbci	r17, 0xFC	; 252
    bbea:	ce 01       	movw	r24, r28
    bbec:	8d 50       	subi	r24, 0x0D	; 13
    bbee:	9c 4f       	sbci	r25, 0xFC	; 252
    bbf0:	fc 01       	movw	r30, r24
    bbf2:	60 81       	ld	r22, Z
    bbf4:	71 81       	ldd	r23, Z+1	; 0x01
    bbf6:	82 81       	ldd	r24, Z+2	; 0x02
    bbf8:	93 81       	ldd	r25, Z+3	; 0x03
    bbfa:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bbfe:	dc 01       	movw	r26, r24
    bc00:	cb 01       	movw	r24, r22
    bc02:	f8 01       	movw	r30, r16
    bc04:	91 83       	std	Z+1, r25	; 0x01
    bc06:	80 83       	st	Z, r24
    bc08:	ce 01       	movw	r24, r28
    bc0a:	85 50       	subi	r24, 0x05	; 5
    bc0c:	9c 4f       	sbci	r25, 0xFC	; 252
    bc0e:	9e 01       	movw	r18, r28
    bc10:	29 50       	subi	r18, 0x09	; 9
    bc12:	3c 4f       	sbci	r19, 0xFC	; 252
    bc14:	f9 01       	movw	r30, r18
    bc16:	20 81       	ld	r18, Z
    bc18:	31 81       	ldd	r19, Z+1	; 0x01
    bc1a:	fc 01       	movw	r30, r24
    bc1c:	31 83       	std	Z+1, r19	; 0x01
    bc1e:	20 83       	st	Z, r18
    bc20:	ce 01       	movw	r24, r28
    bc22:	85 50       	subi	r24, 0x05	; 5
    bc24:	9c 4f       	sbci	r25, 0xFC	; 252
    bc26:	fc 01       	movw	r30, r24
    bc28:	80 81       	ld	r24, Z
    bc2a:	91 81       	ldd	r25, Z+1	; 0x01
    bc2c:	8c 01       	movw	r16, r24
    bc2e:	c8 01       	movw	r24, r16
    bc30:	01 97       	sbiw	r24, 0x01	; 1
    bc32:	f1 f7       	brne	.-4      	; 0xbc30 <main+0x88e0>
    bc34:	8c 01       	movw	r16, r24
    bc36:	ce 01       	movw	r24, r28
    bc38:	85 50       	subi	r24, 0x05	; 5
    bc3a:	9c 4f       	sbci	r25, 0xFC	; 252
    bc3c:	fc 01       	movw	r30, r24
    bc3e:	11 83       	std	Z+1, r17	; 0x01
    bc40:	00 83       	st	Z, r16
								_delay_ms(1000);
								buzzer_off();
    bc42:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
							}
						forward_mm(75);
    bc46:	8b e4       	ldi	r24, 0x4B	; 75
    bc48:	90 e0       	ldi	r25, 0x00	; 0
    bc4a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    bc4e:	9e 01       	movw	r18, r28
    bc50:	23 50       	subi	r18, 0x03	; 3
    bc52:	3c 4f       	sbci	r19, 0xFC	; 252
    bc54:	80 e0       	ldi	r24, 0x00	; 0
    bc56:	90 e0       	ldi	r25, 0x00	; 0
    bc58:	a0 ef       	ldi	r26, 0xF0	; 240
    bc5a:	b1 e4       	ldi	r27, 0x41	; 65
    bc5c:	f9 01       	movw	r30, r18
    bc5e:	80 83       	st	Z, r24
    bc60:	91 83       	std	Z+1, r25	; 0x01
    bc62:	a2 83       	std	Z+2, r26	; 0x02
    bc64:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bc66:	8e 01       	movw	r16, r28
    bc68:	0f 5f       	subi	r16, 0xFF	; 255
    bc6a:	1b 4f       	sbci	r17, 0xFB	; 251
    bc6c:	ce 01       	movw	r24, r28
    bc6e:	83 50       	subi	r24, 0x03	; 3
    bc70:	9c 4f       	sbci	r25, 0xFC	; 252
    bc72:	fc 01       	movw	r30, r24
    bc74:	60 81       	ld	r22, Z
    bc76:	71 81       	ldd	r23, Z+1	; 0x01
    bc78:	82 81       	ldd	r24, Z+2	; 0x02
    bc7a:	93 81       	ldd	r25, Z+3	; 0x03
    bc7c:	26 e6       	ldi	r18, 0x66	; 102
    bc7e:	36 e6       	ldi	r19, 0x66	; 102
    bc80:	46 e6       	ldi	r20, 0x66	; 102
    bc82:	55 e4       	ldi	r21, 0x45	; 69
    bc84:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    bc88:	dc 01       	movw	r26, r24
    bc8a:	cb 01       	movw	r24, r22
    bc8c:	f8 01       	movw	r30, r16
    bc8e:	80 83       	st	Z, r24
    bc90:	91 83       	std	Z+1, r25	; 0x01
    bc92:	a2 83       	std	Z+2, r26	; 0x02
    bc94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bc96:	ce 01       	movw	r24, r28
    bc98:	8f 5f       	subi	r24, 0xFF	; 255
    bc9a:	9b 4f       	sbci	r25, 0xFB	; 251
    bc9c:	11 e0       	ldi	r17, 0x01	; 1
    bc9e:	fc 01       	movw	r30, r24
    bca0:	60 81       	ld	r22, Z
    bca2:	71 81       	ldd	r23, Z+1	; 0x01
    bca4:	82 81       	ldd	r24, Z+2	; 0x02
    bca6:	93 81       	ldd	r25, Z+3	; 0x03
    bca8:	20 e0       	ldi	r18, 0x00	; 0
    bcaa:	30 e0       	ldi	r19, 0x00	; 0
    bcac:	40 e8       	ldi	r20, 0x80	; 128
    bcae:	5f e3       	ldi	r21, 0x3F	; 63
    bcb0:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    bcb4:	88 23       	and	r24, r24
    bcb6:	0c f0       	brlt	.+2      	; 0xbcba <main+0x896a>
    bcb8:	10 e0       	ldi	r17, 0x00	; 0
    bcba:	11 23       	and	r17, r17
    bcbc:	49 f0       	breq	.+18     	; 0xbcd0 <main+0x8980>
		__ticks = 1;
    bcbe:	ce 01       	movw	r24, r28
    bcc0:	8b 5f       	subi	r24, 0xFB	; 251
    bcc2:	9b 4f       	sbci	r25, 0xFB	; 251
    bcc4:	21 e0       	ldi	r18, 0x01	; 1
    bcc6:	30 e0       	ldi	r19, 0x00	; 0
    bcc8:	fc 01       	movw	r30, r24
    bcca:	31 83       	std	Z+1, r19	; 0x01
    bccc:	20 83       	st	Z, r18
    bcce:	74 c0       	rjmp	.+232    	; 0xbdb8 <main+0x8a68>
	else if (__tmp > 65535)
    bcd0:	ce 01       	movw	r24, r28
    bcd2:	8f 5f       	subi	r24, 0xFF	; 255
    bcd4:	9b 4f       	sbci	r25, 0xFB	; 251
    bcd6:	11 e0       	ldi	r17, 0x01	; 1
    bcd8:	fc 01       	movw	r30, r24
    bcda:	60 81       	ld	r22, Z
    bcdc:	71 81       	ldd	r23, Z+1	; 0x01
    bcde:	82 81       	ldd	r24, Z+2	; 0x02
    bce0:	93 81       	ldd	r25, Z+3	; 0x03
    bce2:	20 e0       	ldi	r18, 0x00	; 0
    bce4:	3f ef       	ldi	r19, 0xFF	; 255
    bce6:	4f e7       	ldi	r20, 0x7F	; 127
    bce8:	57 e4       	ldi	r21, 0x47	; 71
    bcea:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    bcee:	18 16       	cp	r1, r24
    bcf0:	0c f0       	brlt	.+2      	; 0xbcf4 <main+0x89a4>
    bcf2:	10 e0       	ldi	r17, 0x00	; 0
    bcf4:	11 23       	and	r17, r17
    bcf6:	09 f4       	brne	.+2      	; 0xbcfa <main+0x89aa>
    bcf8:	4d c0       	rjmp	.+154    	; 0xbd94 <main+0x8a44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bcfa:	ce 01       	movw	r24, r28
    bcfc:	83 50       	subi	r24, 0x03	; 3
    bcfe:	9c 4f       	sbci	r25, 0xFC	; 252
    bd00:	fc 01       	movw	r30, r24
    bd02:	60 81       	ld	r22, Z
    bd04:	71 81       	ldd	r23, Z+1	; 0x01
    bd06:	82 81       	ldd	r24, Z+2	; 0x02
    bd08:	93 81       	ldd	r25, Z+3	; 0x03
    bd0a:	20 e0       	ldi	r18, 0x00	; 0
    bd0c:	30 e0       	ldi	r19, 0x00	; 0
    bd0e:	40 e2       	ldi	r20, 0x20	; 32
    bd10:	51 e4       	ldi	r21, 0x41	; 65
    bd12:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    bd16:	dc 01       	movw	r26, r24
    bd18:	cb 01       	movw	r24, r22
    bd1a:	8e 01       	movw	r16, r28
    bd1c:	0b 5f       	subi	r16, 0xFB	; 251
    bd1e:	1b 4f       	sbci	r17, 0xFB	; 251
    bd20:	bc 01       	movw	r22, r24
    bd22:	cd 01       	movw	r24, r26
    bd24:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bd28:	dc 01       	movw	r26, r24
    bd2a:	cb 01       	movw	r24, r22
    bd2c:	f8 01       	movw	r30, r16
    bd2e:	91 83       	std	Z+1, r25	; 0x01
    bd30:	80 83       	st	Z, r24
    bd32:	27 c0       	rjmp	.+78     	; 0xbd82 <main+0x8a32>
    bd34:	ce 01       	movw	r24, r28
    bd36:	89 5f       	subi	r24, 0xF9	; 249
    bd38:	9b 4f       	sbci	r25, 0xFB	; 251
    bd3a:	20 e7       	ldi	r18, 0x70	; 112
    bd3c:	31 e0       	ldi	r19, 0x01	; 1
    bd3e:	fc 01       	movw	r30, r24
    bd40:	31 83       	std	Z+1, r19	; 0x01
    bd42:	20 83       	st	Z, r18
    bd44:	ce 01       	movw	r24, r28
    bd46:	89 5f       	subi	r24, 0xF9	; 249
    bd48:	9b 4f       	sbci	r25, 0xFB	; 251
    bd4a:	fc 01       	movw	r30, r24
    bd4c:	80 81       	ld	r24, Z
    bd4e:	91 81       	ldd	r25, Z+1	; 0x01
    bd50:	8c 01       	movw	r16, r24
    bd52:	c8 01       	movw	r24, r16
    bd54:	01 97       	sbiw	r24, 0x01	; 1
    bd56:	f1 f7       	brne	.-4      	; 0xbd54 <main+0x8a04>
    bd58:	8c 01       	movw	r16, r24
    bd5a:	ce 01       	movw	r24, r28
    bd5c:	89 5f       	subi	r24, 0xF9	; 249
    bd5e:	9b 4f       	sbci	r25, 0xFB	; 251
    bd60:	fc 01       	movw	r30, r24
    bd62:	11 83       	std	Z+1, r17	; 0x01
    bd64:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bd66:	ce 01       	movw	r24, r28
    bd68:	8b 5f       	subi	r24, 0xFB	; 251
    bd6a:	9b 4f       	sbci	r25, 0xFB	; 251
    bd6c:	9e 01       	movw	r18, r28
    bd6e:	2b 5f       	subi	r18, 0xFB	; 251
    bd70:	3b 4f       	sbci	r19, 0xFB	; 251
    bd72:	f9 01       	movw	r30, r18
    bd74:	20 81       	ld	r18, Z
    bd76:	31 81       	ldd	r19, Z+1	; 0x01
    bd78:	21 50       	subi	r18, 0x01	; 1
    bd7a:	30 40       	sbci	r19, 0x00	; 0
    bd7c:	fc 01       	movw	r30, r24
    bd7e:	31 83       	std	Z+1, r19	; 0x01
    bd80:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bd82:	ce 01       	movw	r24, r28
    bd84:	8b 5f       	subi	r24, 0xFB	; 251
    bd86:	9b 4f       	sbci	r25, 0xFB	; 251
    bd88:	fc 01       	movw	r30, r24
    bd8a:	80 81       	ld	r24, Z
    bd8c:	91 81       	ldd	r25, Z+1	; 0x01
    bd8e:	00 97       	sbiw	r24, 0x00	; 0
    bd90:	89 f6       	brne	.-94     	; 0xbd34 <main+0x89e4>
    bd92:	2f c0       	rjmp	.+94     	; 0xbdf2 <main+0x8aa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bd94:	8e 01       	movw	r16, r28
    bd96:	0b 5f       	subi	r16, 0xFB	; 251
    bd98:	1b 4f       	sbci	r17, 0xFB	; 251
    bd9a:	ce 01       	movw	r24, r28
    bd9c:	8f 5f       	subi	r24, 0xFF	; 255
    bd9e:	9b 4f       	sbci	r25, 0xFB	; 251
    bda0:	fc 01       	movw	r30, r24
    bda2:	60 81       	ld	r22, Z
    bda4:	71 81       	ldd	r23, Z+1	; 0x01
    bda6:	82 81       	ldd	r24, Z+2	; 0x02
    bda8:	93 81       	ldd	r25, Z+3	; 0x03
    bdaa:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bdae:	dc 01       	movw	r26, r24
    bdb0:	cb 01       	movw	r24, r22
    bdb2:	f8 01       	movw	r30, r16
    bdb4:	91 83       	std	Z+1, r25	; 0x01
    bdb6:	80 83       	st	Z, r24
    bdb8:	ce 01       	movw	r24, r28
    bdba:	87 5f       	subi	r24, 0xF7	; 247
    bdbc:	9b 4f       	sbci	r25, 0xFB	; 251
    bdbe:	9e 01       	movw	r18, r28
    bdc0:	2b 5f       	subi	r18, 0xFB	; 251
    bdc2:	3b 4f       	sbci	r19, 0xFB	; 251
    bdc4:	f9 01       	movw	r30, r18
    bdc6:	20 81       	ld	r18, Z
    bdc8:	31 81       	ldd	r19, Z+1	; 0x01
    bdca:	fc 01       	movw	r30, r24
    bdcc:	31 83       	std	Z+1, r19	; 0x01
    bdce:	20 83       	st	Z, r18
    bdd0:	ce 01       	movw	r24, r28
    bdd2:	87 5f       	subi	r24, 0xF7	; 247
    bdd4:	9b 4f       	sbci	r25, 0xFB	; 251
    bdd6:	fc 01       	movw	r30, r24
    bdd8:	80 81       	ld	r24, Z
    bdda:	91 81       	ldd	r25, Z+1	; 0x01
    bddc:	8c 01       	movw	r16, r24
    bdde:	c8 01       	movw	r24, r16
    bde0:	01 97       	sbiw	r24, 0x01	; 1
    bde2:	f1 f7       	brne	.-4      	; 0xbde0 <main+0x8a90>
    bde4:	8c 01       	movw	r16, r24
    bde6:	ce 01       	movw	r24, r28
    bde8:	87 5f       	subi	r24, 0xF7	; 247
    bdea:	9b 4f       	sbci	r25, 0xFB	; 251
    bdec:	fc 01       	movw	r30, r24
    bdee:	11 83       	std	Z+1, r17	; 0x01
    bdf0:	00 83       	st	Z, r16
						_delay_ms(30);
						back_mm(10);
    bdf2:	8a e0       	ldi	r24, 0x0A	; 10
    bdf4:	90 e0       	ldi	r25, 0x00	; 0
    bdf6:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    bdfa:	9e 01       	movw	r18, r28
    bdfc:	25 5f       	subi	r18, 0xF5	; 245
    bdfe:	3b 4f       	sbci	r19, 0xFB	; 251
    be00:	80 e0       	ldi	r24, 0x00	; 0
    be02:	90 e0       	ldi	r25, 0x00	; 0
    be04:	aa ef       	ldi	r26, 0xFA	; 250
    be06:	b3 e4       	ldi	r27, 0x43	; 67
    be08:	f9 01       	movw	r30, r18
    be0a:	80 83       	st	Z, r24
    be0c:	91 83       	std	Z+1, r25	; 0x01
    be0e:	a2 83       	std	Z+2, r26	; 0x02
    be10:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    be12:	8e 01       	movw	r16, r28
    be14:	01 5f       	subi	r16, 0xF1	; 241
    be16:	1b 4f       	sbci	r17, 0xFB	; 251
    be18:	ce 01       	movw	r24, r28
    be1a:	85 5f       	subi	r24, 0xF5	; 245
    be1c:	9b 4f       	sbci	r25, 0xFB	; 251
    be1e:	fc 01       	movw	r30, r24
    be20:	60 81       	ld	r22, Z
    be22:	71 81       	ldd	r23, Z+1	; 0x01
    be24:	82 81       	ldd	r24, Z+2	; 0x02
    be26:	93 81       	ldd	r25, Z+3	; 0x03
    be28:	26 e6       	ldi	r18, 0x66	; 102
    be2a:	36 e6       	ldi	r19, 0x66	; 102
    be2c:	46 e6       	ldi	r20, 0x66	; 102
    be2e:	55 e4       	ldi	r21, 0x45	; 69
    be30:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    be34:	dc 01       	movw	r26, r24
    be36:	cb 01       	movw	r24, r22
    be38:	f8 01       	movw	r30, r16
    be3a:	80 83       	st	Z, r24
    be3c:	91 83       	std	Z+1, r25	; 0x01
    be3e:	a2 83       	std	Z+2, r26	; 0x02
    be40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    be42:	ce 01       	movw	r24, r28
    be44:	81 5f       	subi	r24, 0xF1	; 241
    be46:	9b 4f       	sbci	r25, 0xFB	; 251
    be48:	11 e0       	ldi	r17, 0x01	; 1
    be4a:	fc 01       	movw	r30, r24
    be4c:	60 81       	ld	r22, Z
    be4e:	71 81       	ldd	r23, Z+1	; 0x01
    be50:	82 81       	ldd	r24, Z+2	; 0x02
    be52:	93 81       	ldd	r25, Z+3	; 0x03
    be54:	20 e0       	ldi	r18, 0x00	; 0
    be56:	30 e0       	ldi	r19, 0x00	; 0
    be58:	40 e8       	ldi	r20, 0x80	; 128
    be5a:	5f e3       	ldi	r21, 0x3F	; 63
    be5c:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    be60:	88 23       	and	r24, r24
    be62:	0c f0       	brlt	.+2      	; 0xbe66 <main+0x8b16>
    be64:	10 e0       	ldi	r17, 0x00	; 0
    be66:	11 23       	and	r17, r17
    be68:	49 f0       	breq	.+18     	; 0xbe7c <main+0x8b2c>
		__ticks = 1;
    be6a:	ce 01       	movw	r24, r28
    be6c:	8d 5e       	subi	r24, 0xED	; 237
    be6e:	9b 4f       	sbci	r25, 0xFB	; 251
    be70:	21 e0       	ldi	r18, 0x01	; 1
    be72:	30 e0       	ldi	r19, 0x00	; 0
    be74:	fc 01       	movw	r30, r24
    be76:	31 83       	std	Z+1, r19	; 0x01
    be78:	20 83       	st	Z, r18
    be7a:	74 c0       	rjmp	.+232    	; 0xbf64 <main+0x8c14>
	else if (__tmp > 65535)
    be7c:	ce 01       	movw	r24, r28
    be7e:	81 5f       	subi	r24, 0xF1	; 241
    be80:	9b 4f       	sbci	r25, 0xFB	; 251
    be82:	11 e0       	ldi	r17, 0x01	; 1
    be84:	fc 01       	movw	r30, r24
    be86:	60 81       	ld	r22, Z
    be88:	71 81       	ldd	r23, Z+1	; 0x01
    be8a:	82 81       	ldd	r24, Z+2	; 0x02
    be8c:	93 81       	ldd	r25, Z+3	; 0x03
    be8e:	20 e0       	ldi	r18, 0x00	; 0
    be90:	3f ef       	ldi	r19, 0xFF	; 255
    be92:	4f e7       	ldi	r20, 0x7F	; 127
    be94:	57 e4       	ldi	r21, 0x47	; 71
    be96:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    be9a:	18 16       	cp	r1, r24
    be9c:	0c f0       	brlt	.+2      	; 0xbea0 <main+0x8b50>
    be9e:	10 e0       	ldi	r17, 0x00	; 0
    bea0:	11 23       	and	r17, r17
    bea2:	09 f4       	brne	.+2      	; 0xbea6 <main+0x8b56>
    bea4:	4d c0       	rjmp	.+154    	; 0xbf40 <main+0x8bf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bea6:	ce 01       	movw	r24, r28
    bea8:	85 5f       	subi	r24, 0xF5	; 245
    beaa:	9b 4f       	sbci	r25, 0xFB	; 251
    beac:	fc 01       	movw	r30, r24
    beae:	60 81       	ld	r22, Z
    beb0:	71 81       	ldd	r23, Z+1	; 0x01
    beb2:	82 81       	ldd	r24, Z+2	; 0x02
    beb4:	93 81       	ldd	r25, Z+3	; 0x03
    beb6:	20 e0       	ldi	r18, 0x00	; 0
    beb8:	30 e0       	ldi	r19, 0x00	; 0
    beba:	40 e2       	ldi	r20, 0x20	; 32
    bebc:	51 e4       	ldi	r21, 0x41	; 65
    bebe:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    bec2:	dc 01       	movw	r26, r24
    bec4:	cb 01       	movw	r24, r22
    bec6:	8e 01       	movw	r16, r28
    bec8:	0d 5e       	subi	r16, 0xED	; 237
    beca:	1b 4f       	sbci	r17, 0xFB	; 251
    becc:	bc 01       	movw	r22, r24
    bece:	cd 01       	movw	r24, r26
    bed0:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bed4:	dc 01       	movw	r26, r24
    bed6:	cb 01       	movw	r24, r22
    bed8:	f8 01       	movw	r30, r16
    beda:	91 83       	std	Z+1, r25	; 0x01
    bedc:	80 83       	st	Z, r24
    bede:	27 c0       	rjmp	.+78     	; 0xbf2e <main+0x8bde>
    bee0:	ce 01       	movw	r24, r28
    bee2:	8b 5e       	subi	r24, 0xEB	; 235
    bee4:	9b 4f       	sbci	r25, 0xFB	; 251
    bee6:	20 e7       	ldi	r18, 0x70	; 112
    bee8:	31 e0       	ldi	r19, 0x01	; 1
    beea:	fc 01       	movw	r30, r24
    beec:	31 83       	std	Z+1, r19	; 0x01
    beee:	20 83       	st	Z, r18
    bef0:	ce 01       	movw	r24, r28
    bef2:	8b 5e       	subi	r24, 0xEB	; 235
    bef4:	9b 4f       	sbci	r25, 0xFB	; 251
    bef6:	fc 01       	movw	r30, r24
    bef8:	80 81       	ld	r24, Z
    befa:	91 81       	ldd	r25, Z+1	; 0x01
    befc:	8c 01       	movw	r16, r24
    befe:	c8 01       	movw	r24, r16
    bf00:	01 97       	sbiw	r24, 0x01	; 1
    bf02:	f1 f7       	brne	.-4      	; 0xbf00 <main+0x8bb0>
    bf04:	8c 01       	movw	r16, r24
    bf06:	ce 01       	movw	r24, r28
    bf08:	8b 5e       	subi	r24, 0xEB	; 235
    bf0a:	9b 4f       	sbci	r25, 0xFB	; 251
    bf0c:	fc 01       	movw	r30, r24
    bf0e:	11 83       	std	Z+1, r17	; 0x01
    bf10:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bf12:	ce 01       	movw	r24, r28
    bf14:	8d 5e       	subi	r24, 0xED	; 237
    bf16:	9b 4f       	sbci	r25, 0xFB	; 251
    bf18:	9e 01       	movw	r18, r28
    bf1a:	2d 5e       	subi	r18, 0xED	; 237
    bf1c:	3b 4f       	sbci	r19, 0xFB	; 251
    bf1e:	f9 01       	movw	r30, r18
    bf20:	20 81       	ld	r18, Z
    bf22:	31 81       	ldd	r19, Z+1	; 0x01
    bf24:	21 50       	subi	r18, 0x01	; 1
    bf26:	30 40       	sbci	r19, 0x00	; 0
    bf28:	fc 01       	movw	r30, r24
    bf2a:	31 83       	std	Z+1, r19	; 0x01
    bf2c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf2e:	ce 01       	movw	r24, r28
    bf30:	8d 5e       	subi	r24, 0xED	; 237
    bf32:	9b 4f       	sbci	r25, 0xFB	; 251
    bf34:	fc 01       	movw	r30, r24
    bf36:	80 81       	ld	r24, Z
    bf38:	91 81       	ldd	r25, Z+1	; 0x01
    bf3a:	00 97       	sbiw	r24, 0x00	; 0
    bf3c:	89 f6       	brne	.-94     	; 0xbee0 <main+0x8b90>
    bf3e:	2f c0       	rjmp	.+94     	; 0xbf9e <main+0x8c4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bf40:	8e 01       	movw	r16, r28
    bf42:	0d 5e       	subi	r16, 0xED	; 237
    bf44:	1b 4f       	sbci	r17, 0xFB	; 251
    bf46:	ce 01       	movw	r24, r28
    bf48:	81 5f       	subi	r24, 0xF1	; 241
    bf4a:	9b 4f       	sbci	r25, 0xFB	; 251
    bf4c:	fc 01       	movw	r30, r24
    bf4e:	60 81       	ld	r22, Z
    bf50:	71 81       	ldd	r23, Z+1	; 0x01
    bf52:	82 81       	ldd	r24, Z+2	; 0x02
    bf54:	93 81       	ldd	r25, Z+3	; 0x03
    bf56:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    bf5a:	dc 01       	movw	r26, r24
    bf5c:	cb 01       	movw	r24, r22
    bf5e:	f8 01       	movw	r30, r16
    bf60:	91 83       	std	Z+1, r25	; 0x01
    bf62:	80 83       	st	Z, r24
    bf64:	ce 01       	movw	r24, r28
    bf66:	89 5e       	subi	r24, 0xE9	; 233
    bf68:	9b 4f       	sbci	r25, 0xFB	; 251
    bf6a:	9e 01       	movw	r18, r28
    bf6c:	2d 5e       	subi	r18, 0xED	; 237
    bf6e:	3b 4f       	sbci	r19, 0xFB	; 251
    bf70:	f9 01       	movw	r30, r18
    bf72:	20 81       	ld	r18, Z
    bf74:	31 81       	ldd	r19, Z+1	; 0x01
    bf76:	fc 01       	movw	r30, r24
    bf78:	31 83       	std	Z+1, r19	; 0x01
    bf7a:	20 83       	st	Z, r18
    bf7c:	ce 01       	movw	r24, r28
    bf7e:	89 5e       	subi	r24, 0xE9	; 233
    bf80:	9b 4f       	sbci	r25, 0xFB	; 251
    bf82:	fc 01       	movw	r30, r24
    bf84:	80 81       	ld	r24, Z
    bf86:	91 81       	ldd	r25, Z+1	; 0x01
    bf88:	8c 01       	movw	r16, r24
    bf8a:	c8 01       	movw	r24, r16
    bf8c:	01 97       	sbiw	r24, 0x01	; 1
    bf8e:	f1 f7       	brne	.-4      	; 0xbf8c <main+0x8c3c>
    bf90:	8c 01       	movw	r16, r24
    bf92:	ce 01       	movw	r24, r28
    bf94:	89 5e       	subi	r24, 0xE9	; 233
    bf96:	9b 4f       	sbci	r25, 0xFB	; 251
    bf98:	fc 01       	movw	r30, r24
    bf9a:	11 83       	std	Z+1, r17	; 0x01
    bf9c:	00 83       	st	Z, r16
						_delay_ms(500);
						left_degrees(40);
    bf9e:	88 e2       	ldi	r24, 0x28	; 40
    bfa0:	90 e0       	ldi	r25, 0x00	; 0
    bfa2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <left_degrees>
						compass=6;
    bfa6:	86 e0       	ldi	r24, 0x06	; 6
    bfa8:	90 e0       	ldi	r25, 0x00	; 0
    bfaa:	9c 83       	std	Y+4, r25	; 0x04
    bfac:	8b 83       	std	Y+3, r24	; 0x03
						break;
    bfae:	ef c2       	rjmp	.+1502   	; 0xc58e <main+0x923e>
					}
					if(coor[0]<coor[0]<origin2[boxnumber][i][0] && coor[1]<origin2[boxnumber][i][1])
    bfb0:	9e 01       	movw	r18, r28
    bfb2:	2d 5f       	subi	r18, 0xFD	; 253
    bfb4:	3a 4f       	sbci	r19, 0xFA	; 250
    bfb6:	8d 81       	ldd	r24, Y+5	; 0x05
    bfb8:	9e 81       	ldd	r25, Y+6	; 0x06
    bfba:	ac 01       	movw	r20, r24
    bfbc:	44 0f       	add	r20, r20
    bfbe:	55 1f       	adc	r21, r21
    bfc0:	44 0f       	add	r20, r20
    bfc2:	55 1f       	adc	r21, r21
    bfc4:	8f a1       	lds	r24, 0x4f
    bfc6:	98 a5       	lds	r25, 0x68
    bfc8:	84 0f       	add	r24, r20
    bfca:	95 1f       	adc	r25, r21
    bfcc:	88 0f       	add	r24, r24
    bfce:	99 1f       	adc	r25, r25
    bfd0:	88 0f       	add	r24, r24
    bfd2:	99 1f       	adc	r25, r25
    bfd4:	82 0f       	add	r24, r18
    bfd6:	93 1f       	adc	r25, r19
    bfd8:	fc 01       	movw	r30, r24
    bfda:	80 81       	ld	r24, Z
    bfdc:	91 81       	ldd	r25, Z+1	; 0x01
    bfde:	18 16       	cp	r1, r24
    bfe0:	19 06       	cpc	r1, r25
    bfe2:	0c f0       	brlt	.+2      	; 0xbfe6 <main+0x8c96>
    bfe4:	c6 c2       	rjmp	.+1420   	; 0xc572 <main+0x9222>
    bfe6:	20 91 a8 04 	lds	r18, 0x04A8
    bfea:	30 91 a9 04 	lds	r19, 0x04A9
    bfee:	ae 01       	movw	r20, r28
    bff0:	4d 5f       	subi	r20, 0xFD	; 253
    bff2:	5a 4f       	sbci	r21, 0xFA	; 250
    bff4:	8d 81       	ldd	r24, Y+5	; 0x05
    bff6:	9e 81       	ldd	r25, Y+6	; 0x06
    bff8:	bc 01       	movw	r22, r24
    bffa:	66 0f       	add	r22, r22
    bffc:	77 1f       	adc	r23, r23
    bffe:	66 0f       	add	r22, r22
    c000:	77 1f       	adc	r23, r23
    c002:	8f a1       	lds	r24, 0x4f
    c004:	98 a5       	lds	r25, 0x68
    c006:	86 0f       	add	r24, r22
    c008:	97 1f       	adc	r25, r23
    c00a:	88 0f       	add	r24, r24
    c00c:	99 1f       	adc	r25, r25
    c00e:	88 0f       	add	r24, r24
    c010:	99 1f       	adc	r25, r25
    c012:	84 0f       	add	r24, r20
    c014:	95 1f       	adc	r25, r21
    c016:	02 96       	adiw	r24, 0x02	; 2
    c018:	fc 01       	movw	r30, r24
    c01a:	80 81       	ld	r24, Z
    c01c:	91 81       	ldd	r25, Z+1	; 0x01
    c01e:	28 17       	cp	r18, r24
    c020:	39 07       	cpc	r19, r25
    c022:	0c f0       	brlt	.+2      	; 0xc026 <main+0x8cd6>
    c024:	a6 c2       	rjmp	.+1356   	; 0xc572 <main+0x9222>
					{
						right_degrees(135);
    c026:	87 e8       	ldi	r24, 0x87	; 135
    c028:	90 e0       	ldi	r25, 0x00	; 0
    c02a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						back_mm(65);
    c02e:	81 e4       	ldi	r24, 0x41	; 65
    c030:	90 e0       	ldi	r25, 0x00	; 0
    c032:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
						matrix2();
    c036:	0e 94 49 17 	call	0x2e92	; 0x2e92 <matrix2>
							if(summ1[recur+1]>10)
    c03a:	8f 81       	ldd	r24, Y+7	; 0x07
    c03c:	98 85       	ldd	r25, Y+8	; 0x08
    c03e:	01 96       	adiw	r24, 0x01	; 1
    c040:	9e 01       	movw	r18, r28
    c042:	25 54       	subi	r18, 0x45	; 69
    c044:	39 4f       	sbci	r19, 0xF9	; 249
    c046:	88 0f       	add	r24, r24
    c048:	99 1f       	adc	r25, r25
    c04a:	82 0f       	add	r24, r18
    c04c:	93 1f       	adc	r25, r19
    c04e:	fc 01       	movw	r30, r24
    c050:	80 81       	ld	r24, Z
    c052:	91 81       	ldd	r25, Z+1	; 0x01
    c054:	8b 30       	cpi	r24, 0x0B	; 11
    c056:	91 05       	cpc	r25, r1
    c058:	0c f4       	brge	.+2      	; 0xc05c <main+0x8d0c>
    c05a:	d6 c0       	rjmp	.+428    	; 0xc208 <main+0x8eb8>
							{
								buzzer_on();
    c05c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    c060:	9e 01       	movw	r18, r28
    c062:	27 5e       	subi	r18, 0xE7	; 231
    c064:	3b 4f       	sbci	r19, 0xFB	; 251
    c066:	80 e0       	ldi	r24, 0x00	; 0
    c068:	90 e0       	ldi	r25, 0x00	; 0
    c06a:	aa e7       	ldi	r26, 0x7A	; 122
    c06c:	b4 e4       	ldi	r27, 0x44	; 68
    c06e:	f9 01       	movw	r30, r18
    c070:	80 83       	st	Z, r24
    c072:	91 83       	std	Z+1, r25	; 0x01
    c074:	a2 83       	std	Z+2, r26	; 0x02
    c076:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c078:	8e 01       	movw	r16, r28
    c07a:	03 5e       	subi	r16, 0xE3	; 227
    c07c:	1b 4f       	sbci	r17, 0xFB	; 251
    c07e:	ce 01       	movw	r24, r28
    c080:	87 5e       	subi	r24, 0xE7	; 231
    c082:	9b 4f       	sbci	r25, 0xFB	; 251
    c084:	fc 01       	movw	r30, r24
    c086:	60 81       	ld	r22, Z
    c088:	71 81       	ldd	r23, Z+1	; 0x01
    c08a:	82 81       	ldd	r24, Z+2	; 0x02
    c08c:	93 81       	ldd	r25, Z+3	; 0x03
    c08e:	26 e6       	ldi	r18, 0x66	; 102
    c090:	36 e6       	ldi	r19, 0x66	; 102
    c092:	46 e6       	ldi	r20, 0x66	; 102
    c094:	55 e4       	ldi	r21, 0x45	; 69
    c096:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c09a:	dc 01       	movw	r26, r24
    c09c:	cb 01       	movw	r24, r22
    c09e:	f8 01       	movw	r30, r16
    c0a0:	80 83       	st	Z, r24
    c0a2:	91 83       	std	Z+1, r25	; 0x01
    c0a4:	a2 83       	std	Z+2, r26	; 0x02
    c0a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c0a8:	ce 01       	movw	r24, r28
    c0aa:	83 5e       	subi	r24, 0xE3	; 227
    c0ac:	9b 4f       	sbci	r25, 0xFB	; 251
    c0ae:	11 e0       	ldi	r17, 0x01	; 1
    c0b0:	fc 01       	movw	r30, r24
    c0b2:	60 81       	ld	r22, Z
    c0b4:	71 81       	ldd	r23, Z+1	; 0x01
    c0b6:	82 81       	ldd	r24, Z+2	; 0x02
    c0b8:	93 81       	ldd	r25, Z+3	; 0x03
    c0ba:	20 e0       	ldi	r18, 0x00	; 0
    c0bc:	30 e0       	ldi	r19, 0x00	; 0
    c0be:	40 e8       	ldi	r20, 0x80	; 128
    c0c0:	5f e3       	ldi	r21, 0x3F	; 63
    c0c2:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    c0c6:	88 23       	and	r24, r24
    c0c8:	0c f0       	brlt	.+2      	; 0xc0cc <main+0x8d7c>
    c0ca:	10 e0       	ldi	r17, 0x00	; 0
    c0cc:	11 23       	and	r17, r17
    c0ce:	49 f0       	breq	.+18     	; 0xc0e2 <main+0x8d92>
		__ticks = 1;
    c0d0:	ce 01       	movw	r24, r28
    c0d2:	8f 5d       	subi	r24, 0xDF	; 223
    c0d4:	9b 4f       	sbci	r25, 0xFB	; 251
    c0d6:	21 e0       	ldi	r18, 0x01	; 1
    c0d8:	30 e0       	ldi	r19, 0x00	; 0
    c0da:	fc 01       	movw	r30, r24
    c0dc:	31 83       	std	Z+1, r19	; 0x01
    c0de:	20 83       	st	Z, r18
    c0e0:	74 c0       	rjmp	.+232    	; 0xc1ca <main+0x8e7a>
	else if (__tmp > 65535)
    c0e2:	ce 01       	movw	r24, r28
    c0e4:	83 5e       	subi	r24, 0xE3	; 227
    c0e6:	9b 4f       	sbci	r25, 0xFB	; 251
    c0e8:	11 e0       	ldi	r17, 0x01	; 1
    c0ea:	fc 01       	movw	r30, r24
    c0ec:	60 81       	ld	r22, Z
    c0ee:	71 81       	ldd	r23, Z+1	; 0x01
    c0f0:	82 81       	ldd	r24, Z+2	; 0x02
    c0f2:	93 81       	ldd	r25, Z+3	; 0x03
    c0f4:	20 e0       	ldi	r18, 0x00	; 0
    c0f6:	3f ef       	ldi	r19, 0xFF	; 255
    c0f8:	4f e7       	ldi	r20, 0x7F	; 127
    c0fa:	57 e4       	ldi	r21, 0x47	; 71
    c0fc:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    c100:	18 16       	cp	r1, r24
    c102:	0c f0       	brlt	.+2      	; 0xc106 <main+0x8db6>
    c104:	10 e0       	ldi	r17, 0x00	; 0
    c106:	11 23       	and	r17, r17
    c108:	09 f4       	brne	.+2      	; 0xc10c <main+0x8dbc>
    c10a:	4d c0       	rjmp	.+154    	; 0xc1a6 <main+0x8e56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c10c:	ce 01       	movw	r24, r28
    c10e:	87 5e       	subi	r24, 0xE7	; 231
    c110:	9b 4f       	sbci	r25, 0xFB	; 251
    c112:	fc 01       	movw	r30, r24
    c114:	60 81       	ld	r22, Z
    c116:	71 81       	ldd	r23, Z+1	; 0x01
    c118:	82 81       	ldd	r24, Z+2	; 0x02
    c11a:	93 81       	ldd	r25, Z+3	; 0x03
    c11c:	20 e0       	ldi	r18, 0x00	; 0
    c11e:	30 e0       	ldi	r19, 0x00	; 0
    c120:	40 e2       	ldi	r20, 0x20	; 32
    c122:	51 e4       	ldi	r21, 0x41	; 65
    c124:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c128:	dc 01       	movw	r26, r24
    c12a:	cb 01       	movw	r24, r22
    c12c:	8e 01       	movw	r16, r28
    c12e:	0f 5d       	subi	r16, 0xDF	; 223
    c130:	1b 4f       	sbci	r17, 0xFB	; 251
    c132:	bc 01       	movw	r22, r24
    c134:	cd 01       	movw	r24, r26
    c136:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c13a:	dc 01       	movw	r26, r24
    c13c:	cb 01       	movw	r24, r22
    c13e:	f8 01       	movw	r30, r16
    c140:	91 83       	std	Z+1, r25	; 0x01
    c142:	80 83       	st	Z, r24
    c144:	27 c0       	rjmp	.+78     	; 0xc194 <main+0x8e44>
    c146:	ce 01       	movw	r24, r28
    c148:	8d 5d       	subi	r24, 0xDD	; 221
    c14a:	9b 4f       	sbci	r25, 0xFB	; 251
    c14c:	20 e7       	ldi	r18, 0x70	; 112
    c14e:	31 e0       	ldi	r19, 0x01	; 1
    c150:	fc 01       	movw	r30, r24
    c152:	31 83       	std	Z+1, r19	; 0x01
    c154:	20 83       	st	Z, r18
    c156:	ce 01       	movw	r24, r28
    c158:	8d 5d       	subi	r24, 0xDD	; 221
    c15a:	9b 4f       	sbci	r25, 0xFB	; 251
    c15c:	fc 01       	movw	r30, r24
    c15e:	80 81       	ld	r24, Z
    c160:	91 81       	ldd	r25, Z+1	; 0x01
    c162:	8c 01       	movw	r16, r24
    c164:	c8 01       	movw	r24, r16
    c166:	01 97       	sbiw	r24, 0x01	; 1
    c168:	f1 f7       	brne	.-4      	; 0xc166 <main+0x8e16>
    c16a:	8c 01       	movw	r16, r24
    c16c:	ce 01       	movw	r24, r28
    c16e:	8d 5d       	subi	r24, 0xDD	; 221
    c170:	9b 4f       	sbci	r25, 0xFB	; 251
    c172:	fc 01       	movw	r30, r24
    c174:	11 83       	std	Z+1, r17	; 0x01
    c176:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c178:	ce 01       	movw	r24, r28
    c17a:	8f 5d       	subi	r24, 0xDF	; 223
    c17c:	9b 4f       	sbci	r25, 0xFB	; 251
    c17e:	9e 01       	movw	r18, r28
    c180:	2f 5d       	subi	r18, 0xDF	; 223
    c182:	3b 4f       	sbci	r19, 0xFB	; 251
    c184:	f9 01       	movw	r30, r18
    c186:	20 81       	ld	r18, Z
    c188:	31 81       	ldd	r19, Z+1	; 0x01
    c18a:	21 50       	subi	r18, 0x01	; 1
    c18c:	30 40       	sbci	r19, 0x00	; 0
    c18e:	fc 01       	movw	r30, r24
    c190:	31 83       	std	Z+1, r19	; 0x01
    c192:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c194:	ce 01       	movw	r24, r28
    c196:	8f 5d       	subi	r24, 0xDF	; 223
    c198:	9b 4f       	sbci	r25, 0xFB	; 251
    c19a:	fc 01       	movw	r30, r24
    c19c:	80 81       	ld	r24, Z
    c19e:	91 81       	ldd	r25, Z+1	; 0x01
    c1a0:	00 97       	sbiw	r24, 0x00	; 0
    c1a2:	89 f6       	brne	.-94     	; 0xc146 <main+0x8df6>
    c1a4:	2f c0       	rjmp	.+94     	; 0xc204 <main+0x8eb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c1a6:	8e 01       	movw	r16, r28
    c1a8:	0f 5d       	subi	r16, 0xDF	; 223
    c1aa:	1b 4f       	sbci	r17, 0xFB	; 251
    c1ac:	ce 01       	movw	r24, r28
    c1ae:	83 5e       	subi	r24, 0xE3	; 227
    c1b0:	9b 4f       	sbci	r25, 0xFB	; 251
    c1b2:	fc 01       	movw	r30, r24
    c1b4:	60 81       	ld	r22, Z
    c1b6:	71 81       	ldd	r23, Z+1	; 0x01
    c1b8:	82 81       	ldd	r24, Z+2	; 0x02
    c1ba:	93 81       	ldd	r25, Z+3	; 0x03
    c1bc:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c1c0:	dc 01       	movw	r26, r24
    c1c2:	cb 01       	movw	r24, r22
    c1c4:	f8 01       	movw	r30, r16
    c1c6:	91 83       	std	Z+1, r25	; 0x01
    c1c8:	80 83       	st	Z, r24
    c1ca:	ce 01       	movw	r24, r28
    c1cc:	8b 5d       	subi	r24, 0xDB	; 219
    c1ce:	9b 4f       	sbci	r25, 0xFB	; 251
    c1d0:	9e 01       	movw	r18, r28
    c1d2:	2f 5d       	subi	r18, 0xDF	; 223
    c1d4:	3b 4f       	sbci	r19, 0xFB	; 251
    c1d6:	f9 01       	movw	r30, r18
    c1d8:	20 81       	ld	r18, Z
    c1da:	31 81       	ldd	r19, Z+1	; 0x01
    c1dc:	fc 01       	movw	r30, r24
    c1de:	31 83       	std	Z+1, r19	; 0x01
    c1e0:	20 83       	st	Z, r18
    c1e2:	ce 01       	movw	r24, r28
    c1e4:	8b 5d       	subi	r24, 0xDB	; 219
    c1e6:	9b 4f       	sbci	r25, 0xFB	; 251
    c1e8:	fc 01       	movw	r30, r24
    c1ea:	80 81       	ld	r24, Z
    c1ec:	91 81       	ldd	r25, Z+1	; 0x01
    c1ee:	8c 01       	movw	r16, r24
    c1f0:	c8 01       	movw	r24, r16
    c1f2:	01 97       	sbiw	r24, 0x01	; 1
    c1f4:	f1 f7       	brne	.-4      	; 0xc1f2 <main+0x8ea2>
    c1f6:	8c 01       	movw	r16, r24
    c1f8:	ce 01       	movw	r24, r28
    c1fa:	8b 5d       	subi	r24, 0xDB	; 219
    c1fc:	9b 4f       	sbci	r25, 0xFB	; 251
    c1fe:	fc 01       	movw	r30, r24
    c200:	11 83       	std	Z+1, r17	; 0x01
    c202:	00 83       	st	Z, r16
								_delay_ms(1000);
								buzzer_off();
    c204:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <buzzer_off>
							}
						forward_mm(75);
    c208:	8b e4       	ldi	r24, 0x4B	; 75
    c20a:	90 e0       	ldi	r25, 0x00	; 0
    c20c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <forward_mm>
    c210:	9e 01       	movw	r18, r28
    c212:	29 5d       	subi	r18, 0xD9	; 217
    c214:	3b 4f       	sbci	r19, 0xFB	; 251
    c216:	80 e0       	ldi	r24, 0x00	; 0
    c218:	90 e0       	ldi	r25, 0x00	; 0
    c21a:	a0 ef       	ldi	r26, 0xF0	; 240
    c21c:	b1 e4       	ldi	r27, 0x41	; 65
    c21e:	f9 01       	movw	r30, r18
    c220:	80 83       	st	Z, r24
    c222:	91 83       	std	Z+1, r25	; 0x01
    c224:	a2 83       	std	Z+2, r26	; 0x02
    c226:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c228:	8e 01       	movw	r16, r28
    c22a:	05 5d       	subi	r16, 0xD5	; 213
    c22c:	1b 4f       	sbci	r17, 0xFB	; 251
    c22e:	ce 01       	movw	r24, r28
    c230:	89 5d       	subi	r24, 0xD9	; 217
    c232:	9b 4f       	sbci	r25, 0xFB	; 251
    c234:	fc 01       	movw	r30, r24
    c236:	60 81       	ld	r22, Z
    c238:	71 81       	ldd	r23, Z+1	; 0x01
    c23a:	82 81       	ldd	r24, Z+2	; 0x02
    c23c:	93 81       	ldd	r25, Z+3	; 0x03
    c23e:	26 e6       	ldi	r18, 0x66	; 102
    c240:	36 e6       	ldi	r19, 0x66	; 102
    c242:	46 e6       	ldi	r20, 0x66	; 102
    c244:	55 e4       	ldi	r21, 0x45	; 69
    c246:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c24a:	dc 01       	movw	r26, r24
    c24c:	cb 01       	movw	r24, r22
    c24e:	f8 01       	movw	r30, r16
    c250:	80 83       	st	Z, r24
    c252:	91 83       	std	Z+1, r25	; 0x01
    c254:	a2 83       	std	Z+2, r26	; 0x02
    c256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c258:	ce 01       	movw	r24, r28
    c25a:	85 5d       	subi	r24, 0xD5	; 213
    c25c:	9b 4f       	sbci	r25, 0xFB	; 251
    c25e:	11 e0       	ldi	r17, 0x01	; 1
    c260:	fc 01       	movw	r30, r24
    c262:	60 81       	ld	r22, Z
    c264:	71 81       	ldd	r23, Z+1	; 0x01
    c266:	82 81       	ldd	r24, Z+2	; 0x02
    c268:	93 81       	ldd	r25, Z+3	; 0x03
    c26a:	20 e0       	ldi	r18, 0x00	; 0
    c26c:	30 e0       	ldi	r19, 0x00	; 0
    c26e:	40 e8       	ldi	r20, 0x80	; 128
    c270:	5f e3       	ldi	r21, 0x3F	; 63
    c272:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    c276:	88 23       	and	r24, r24
    c278:	0c f0       	brlt	.+2      	; 0xc27c <main+0x8f2c>
    c27a:	10 e0       	ldi	r17, 0x00	; 0
    c27c:	11 23       	and	r17, r17
    c27e:	49 f0       	breq	.+18     	; 0xc292 <main+0x8f42>
		__ticks = 1;
    c280:	ce 01       	movw	r24, r28
    c282:	81 5d       	subi	r24, 0xD1	; 209
    c284:	9b 4f       	sbci	r25, 0xFB	; 251
    c286:	21 e0       	ldi	r18, 0x01	; 1
    c288:	30 e0       	ldi	r19, 0x00	; 0
    c28a:	fc 01       	movw	r30, r24
    c28c:	31 83       	std	Z+1, r19	; 0x01
    c28e:	20 83       	st	Z, r18
    c290:	74 c0       	rjmp	.+232    	; 0xc37a <main+0x902a>
	else if (__tmp > 65535)
    c292:	ce 01       	movw	r24, r28
    c294:	85 5d       	subi	r24, 0xD5	; 213
    c296:	9b 4f       	sbci	r25, 0xFB	; 251
    c298:	11 e0       	ldi	r17, 0x01	; 1
    c29a:	fc 01       	movw	r30, r24
    c29c:	60 81       	ld	r22, Z
    c29e:	71 81       	ldd	r23, Z+1	; 0x01
    c2a0:	82 81       	ldd	r24, Z+2	; 0x02
    c2a2:	93 81       	ldd	r25, Z+3	; 0x03
    c2a4:	20 e0       	ldi	r18, 0x00	; 0
    c2a6:	3f ef       	ldi	r19, 0xFF	; 255
    c2a8:	4f e7       	ldi	r20, 0x7F	; 127
    c2aa:	57 e4       	ldi	r21, 0x47	; 71
    c2ac:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    c2b0:	18 16       	cp	r1, r24
    c2b2:	0c f0       	brlt	.+2      	; 0xc2b6 <main+0x8f66>
    c2b4:	10 e0       	ldi	r17, 0x00	; 0
    c2b6:	11 23       	and	r17, r17
    c2b8:	09 f4       	brne	.+2      	; 0xc2bc <main+0x8f6c>
    c2ba:	4d c0       	rjmp	.+154    	; 0xc356 <main+0x9006>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c2bc:	ce 01       	movw	r24, r28
    c2be:	89 5d       	subi	r24, 0xD9	; 217
    c2c0:	9b 4f       	sbci	r25, 0xFB	; 251
    c2c2:	fc 01       	movw	r30, r24
    c2c4:	60 81       	ld	r22, Z
    c2c6:	71 81       	ldd	r23, Z+1	; 0x01
    c2c8:	82 81       	ldd	r24, Z+2	; 0x02
    c2ca:	93 81       	ldd	r25, Z+3	; 0x03
    c2cc:	20 e0       	ldi	r18, 0x00	; 0
    c2ce:	30 e0       	ldi	r19, 0x00	; 0
    c2d0:	40 e2       	ldi	r20, 0x20	; 32
    c2d2:	51 e4       	ldi	r21, 0x41	; 65
    c2d4:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c2d8:	dc 01       	movw	r26, r24
    c2da:	cb 01       	movw	r24, r22
    c2dc:	8e 01       	movw	r16, r28
    c2de:	01 5d       	subi	r16, 0xD1	; 209
    c2e0:	1b 4f       	sbci	r17, 0xFB	; 251
    c2e2:	bc 01       	movw	r22, r24
    c2e4:	cd 01       	movw	r24, r26
    c2e6:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c2ea:	dc 01       	movw	r26, r24
    c2ec:	cb 01       	movw	r24, r22
    c2ee:	f8 01       	movw	r30, r16
    c2f0:	91 83       	std	Z+1, r25	; 0x01
    c2f2:	80 83       	st	Z, r24
    c2f4:	27 c0       	rjmp	.+78     	; 0xc344 <main+0x8ff4>
    c2f6:	ce 01       	movw	r24, r28
    c2f8:	8f 5c       	subi	r24, 0xCF	; 207
    c2fa:	9b 4f       	sbci	r25, 0xFB	; 251
    c2fc:	20 e7       	ldi	r18, 0x70	; 112
    c2fe:	31 e0       	ldi	r19, 0x01	; 1
    c300:	fc 01       	movw	r30, r24
    c302:	31 83       	std	Z+1, r19	; 0x01
    c304:	20 83       	st	Z, r18
    c306:	ce 01       	movw	r24, r28
    c308:	8f 5c       	subi	r24, 0xCF	; 207
    c30a:	9b 4f       	sbci	r25, 0xFB	; 251
    c30c:	fc 01       	movw	r30, r24
    c30e:	80 81       	ld	r24, Z
    c310:	91 81       	ldd	r25, Z+1	; 0x01
    c312:	8c 01       	movw	r16, r24
    c314:	c8 01       	movw	r24, r16
    c316:	01 97       	sbiw	r24, 0x01	; 1
    c318:	f1 f7       	brne	.-4      	; 0xc316 <main+0x8fc6>
    c31a:	8c 01       	movw	r16, r24
    c31c:	ce 01       	movw	r24, r28
    c31e:	8f 5c       	subi	r24, 0xCF	; 207
    c320:	9b 4f       	sbci	r25, 0xFB	; 251
    c322:	fc 01       	movw	r30, r24
    c324:	11 83       	std	Z+1, r17	; 0x01
    c326:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c328:	ce 01       	movw	r24, r28
    c32a:	81 5d       	subi	r24, 0xD1	; 209
    c32c:	9b 4f       	sbci	r25, 0xFB	; 251
    c32e:	9e 01       	movw	r18, r28
    c330:	21 5d       	subi	r18, 0xD1	; 209
    c332:	3b 4f       	sbci	r19, 0xFB	; 251
    c334:	f9 01       	movw	r30, r18
    c336:	20 81       	ld	r18, Z
    c338:	31 81       	ldd	r19, Z+1	; 0x01
    c33a:	21 50       	subi	r18, 0x01	; 1
    c33c:	30 40       	sbci	r19, 0x00	; 0
    c33e:	fc 01       	movw	r30, r24
    c340:	31 83       	std	Z+1, r19	; 0x01
    c342:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c344:	ce 01       	movw	r24, r28
    c346:	81 5d       	subi	r24, 0xD1	; 209
    c348:	9b 4f       	sbci	r25, 0xFB	; 251
    c34a:	fc 01       	movw	r30, r24
    c34c:	80 81       	ld	r24, Z
    c34e:	91 81       	ldd	r25, Z+1	; 0x01
    c350:	00 97       	sbiw	r24, 0x00	; 0
    c352:	89 f6       	brne	.-94     	; 0xc2f6 <main+0x8fa6>
    c354:	2f c0       	rjmp	.+94     	; 0xc3b4 <main+0x9064>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c356:	8e 01       	movw	r16, r28
    c358:	01 5d       	subi	r16, 0xD1	; 209
    c35a:	1b 4f       	sbci	r17, 0xFB	; 251
    c35c:	ce 01       	movw	r24, r28
    c35e:	85 5d       	subi	r24, 0xD5	; 213
    c360:	9b 4f       	sbci	r25, 0xFB	; 251
    c362:	fc 01       	movw	r30, r24
    c364:	60 81       	ld	r22, Z
    c366:	71 81       	ldd	r23, Z+1	; 0x01
    c368:	82 81       	ldd	r24, Z+2	; 0x02
    c36a:	93 81       	ldd	r25, Z+3	; 0x03
    c36c:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c370:	dc 01       	movw	r26, r24
    c372:	cb 01       	movw	r24, r22
    c374:	f8 01       	movw	r30, r16
    c376:	91 83       	std	Z+1, r25	; 0x01
    c378:	80 83       	st	Z, r24
    c37a:	ce 01       	movw	r24, r28
    c37c:	8d 5c       	subi	r24, 0xCD	; 205
    c37e:	9b 4f       	sbci	r25, 0xFB	; 251
    c380:	9e 01       	movw	r18, r28
    c382:	21 5d       	subi	r18, 0xD1	; 209
    c384:	3b 4f       	sbci	r19, 0xFB	; 251
    c386:	f9 01       	movw	r30, r18
    c388:	20 81       	ld	r18, Z
    c38a:	31 81       	ldd	r19, Z+1	; 0x01
    c38c:	fc 01       	movw	r30, r24
    c38e:	31 83       	std	Z+1, r19	; 0x01
    c390:	20 83       	st	Z, r18
    c392:	ce 01       	movw	r24, r28
    c394:	8d 5c       	subi	r24, 0xCD	; 205
    c396:	9b 4f       	sbci	r25, 0xFB	; 251
    c398:	fc 01       	movw	r30, r24
    c39a:	80 81       	ld	r24, Z
    c39c:	91 81       	ldd	r25, Z+1	; 0x01
    c39e:	8c 01       	movw	r16, r24
    c3a0:	c8 01       	movw	r24, r16
    c3a2:	01 97       	sbiw	r24, 0x01	; 1
    c3a4:	f1 f7       	brne	.-4      	; 0xc3a2 <main+0x9052>
    c3a6:	8c 01       	movw	r16, r24
    c3a8:	ce 01       	movw	r24, r28
    c3aa:	8d 5c       	subi	r24, 0xCD	; 205
    c3ac:	9b 4f       	sbci	r25, 0xFB	; 251
    c3ae:	fc 01       	movw	r30, r24
    c3b0:	11 83       	std	Z+1, r17	; 0x01
    c3b2:	00 83       	st	Z, r16
						_delay_ms(30);
						back_mm(10);
    c3b4:	8a e0       	ldi	r24, 0x0A	; 10
    c3b6:	90 e0       	ldi	r25, 0x00	; 0
    c3b8:	0e 94 06 10 	call	0x200c	; 0x200c <back_mm>
    c3bc:	9e 01       	movw	r18, r28
    c3be:	2b 5c       	subi	r18, 0xCB	; 203
    c3c0:	3b 4f       	sbci	r19, 0xFB	; 251
    c3c2:	80 e0       	ldi	r24, 0x00	; 0
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
    c3c6:	aa ef       	ldi	r26, 0xFA	; 250
    c3c8:	b3 e4       	ldi	r27, 0x43	; 67
    c3ca:	f9 01       	movw	r30, r18
    c3cc:	80 83       	st	Z, r24
    c3ce:	91 83       	std	Z+1, r25	; 0x01
    c3d0:	a2 83       	std	Z+2, r26	; 0x02
    c3d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c3d4:	8e 01       	movw	r16, r28
    c3d6:	07 5c       	subi	r16, 0xC7	; 199
    c3d8:	1b 4f       	sbci	r17, 0xFB	; 251
    c3da:	ce 01       	movw	r24, r28
    c3dc:	8b 5c       	subi	r24, 0xCB	; 203
    c3de:	9b 4f       	sbci	r25, 0xFB	; 251
    c3e0:	fc 01       	movw	r30, r24
    c3e2:	60 81       	ld	r22, Z
    c3e4:	71 81       	ldd	r23, Z+1	; 0x01
    c3e6:	82 81       	ldd	r24, Z+2	; 0x02
    c3e8:	93 81       	ldd	r25, Z+3	; 0x03
    c3ea:	26 e6       	ldi	r18, 0x66	; 102
    c3ec:	36 e6       	ldi	r19, 0x66	; 102
    c3ee:	46 e6       	ldi	r20, 0x66	; 102
    c3f0:	55 e4       	ldi	r21, 0x45	; 69
    c3f2:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c3f6:	dc 01       	movw	r26, r24
    c3f8:	cb 01       	movw	r24, r22
    c3fa:	f8 01       	movw	r30, r16
    c3fc:	80 83       	st	Z, r24
    c3fe:	91 83       	std	Z+1, r25	; 0x01
    c400:	a2 83       	std	Z+2, r26	; 0x02
    c402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c404:	ce 01       	movw	r24, r28
    c406:	87 5c       	subi	r24, 0xC7	; 199
    c408:	9b 4f       	sbci	r25, 0xFB	; 251
    c40a:	11 e0       	ldi	r17, 0x01	; 1
    c40c:	fc 01       	movw	r30, r24
    c40e:	60 81       	ld	r22, Z
    c410:	71 81       	ldd	r23, Z+1	; 0x01
    c412:	82 81       	ldd	r24, Z+2	; 0x02
    c414:	93 81       	ldd	r25, Z+3	; 0x03
    c416:	20 e0       	ldi	r18, 0x00	; 0
    c418:	30 e0       	ldi	r19, 0x00	; 0
    c41a:	40 e8       	ldi	r20, 0x80	; 128
    c41c:	5f e3       	ldi	r21, 0x3F	; 63
    c41e:	0e 94 3e 63 	call	0xc67c	; 0xc67c <__cmpsf2>
    c422:	88 23       	and	r24, r24
    c424:	0c f0       	brlt	.+2      	; 0xc428 <main+0x90d8>
    c426:	10 e0       	ldi	r17, 0x00	; 0
    c428:	11 23       	and	r17, r17
    c42a:	49 f0       	breq	.+18     	; 0xc43e <main+0x90ee>
		__ticks = 1;
    c42c:	ce 01       	movw	r24, r28
    c42e:	83 5c       	subi	r24, 0xC3	; 195
    c430:	9b 4f       	sbci	r25, 0xFB	; 251
    c432:	21 e0       	ldi	r18, 0x01	; 1
    c434:	30 e0       	ldi	r19, 0x00	; 0
    c436:	fc 01       	movw	r30, r24
    c438:	31 83       	std	Z+1, r19	; 0x01
    c43a:	20 83       	st	Z, r18
    c43c:	74 c0       	rjmp	.+232    	; 0xc526 <main+0x91d6>
	else if (__tmp > 65535)
    c43e:	ce 01       	movw	r24, r28
    c440:	87 5c       	subi	r24, 0xC7	; 199
    c442:	9b 4f       	sbci	r25, 0xFB	; 251
    c444:	11 e0       	ldi	r17, 0x01	; 1
    c446:	fc 01       	movw	r30, r24
    c448:	60 81       	ld	r22, Z
    c44a:	71 81       	ldd	r23, Z+1	; 0x01
    c44c:	82 81       	ldd	r24, Z+2	; 0x02
    c44e:	93 81       	ldd	r25, Z+3	; 0x03
    c450:	20 e0       	ldi	r18, 0x00	; 0
    c452:	3f ef       	ldi	r19, 0xFF	; 255
    c454:	4f e7       	ldi	r20, 0x7F	; 127
    c456:	57 e4       	ldi	r21, 0x47	; 71
    c458:	0e 94 88 64 	call	0xc910	; 0xc910 <__gesf2>
    c45c:	18 16       	cp	r1, r24
    c45e:	0c f0       	brlt	.+2      	; 0xc462 <main+0x9112>
    c460:	10 e0       	ldi	r17, 0x00	; 0
    c462:	11 23       	and	r17, r17
    c464:	09 f4       	brne	.+2      	; 0xc468 <main+0x9118>
    c466:	4d c0       	rjmp	.+154    	; 0xc502 <main+0x91b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c468:	ce 01       	movw	r24, r28
    c46a:	8b 5c       	subi	r24, 0xCB	; 203
    c46c:	9b 4f       	sbci	r25, 0xFB	; 251
    c46e:	fc 01       	movw	r30, r24
    c470:	60 81       	ld	r22, Z
    c472:	71 81       	ldd	r23, Z+1	; 0x01
    c474:	82 81       	ldd	r24, Z+2	; 0x02
    c476:	93 81       	ldd	r25, Z+3	; 0x03
    c478:	20 e0       	ldi	r18, 0x00	; 0
    c47a:	30 e0       	ldi	r19, 0x00	; 0
    c47c:	40 e2       	ldi	r20, 0x20	; 32
    c47e:	51 e4       	ldi	r21, 0x41	; 65
    c480:	0e 94 8c 64 	call	0xc918	; 0xc918 <__mulsf3>
    c484:	dc 01       	movw	r26, r24
    c486:	cb 01       	movw	r24, r22
    c488:	8e 01       	movw	r16, r28
    c48a:	03 5c       	subi	r16, 0xC3	; 195
    c48c:	1b 4f       	sbci	r17, 0xFB	; 251
    c48e:	bc 01       	movw	r22, r24
    c490:	cd 01       	movw	r24, r26
    c492:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c496:	dc 01       	movw	r26, r24
    c498:	cb 01       	movw	r24, r22
    c49a:	f8 01       	movw	r30, r16
    c49c:	91 83       	std	Z+1, r25	; 0x01
    c49e:	80 83       	st	Z, r24
    c4a0:	27 c0       	rjmp	.+78     	; 0xc4f0 <main+0x91a0>
    c4a2:	ce 01       	movw	r24, r28
    c4a4:	81 5c       	subi	r24, 0xC1	; 193
    c4a6:	9b 4f       	sbci	r25, 0xFB	; 251
    c4a8:	20 e7       	ldi	r18, 0x70	; 112
    c4aa:	31 e0       	ldi	r19, 0x01	; 1
    c4ac:	fc 01       	movw	r30, r24
    c4ae:	31 83       	std	Z+1, r19	; 0x01
    c4b0:	20 83       	st	Z, r18
    c4b2:	ce 01       	movw	r24, r28
    c4b4:	81 5c       	subi	r24, 0xC1	; 193
    c4b6:	9b 4f       	sbci	r25, 0xFB	; 251
    c4b8:	fc 01       	movw	r30, r24
    c4ba:	80 81       	ld	r24, Z
    c4bc:	91 81       	ldd	r25, Z+1	; 0x01
    c4be:	8c 01       	movw	r16, r24
    c4c0:	c8 01       	movw	r24, r16
    c4c2:	01 97       	sbiw	r24, 0x01	; 1
    c4c4:	f1 f7       	brne	.-4      	; 0xc4c2 <main+0x9172>
    c4c6:	8c 01       	movw	r16, r24
    c4c8:	ce 01       	movw	r24, r28
    c4ca:	81 5c       	subi	r24, 0xC1	; 193
    c4cc:	9b 4f       	sbci	r25, 0xFB	; 251
    c4ce:	fc 01       	movw	r30, r24
    c4d0:	11 83       	std	Z+1, r17	; 0x01
    c4d2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c4d4:	ce 01       	movw	r24, r28
    c4d6:	83 5c       	subi	r24, 0xC3	; 195
    c4d8:	9b 4f       	sbci	r25, 0xFB	; 251
    c4da:	9e 01       	movw	r18, r28
    c4dc:	23 5c       	subi	r18, 0xC3	; 195
    c4de:	3b 4f       	sbci	r19, 0xFB	; 251
    c4e0:	f9 01       	movw	r30, r18
    c4e2:	20 81       	ld	r18, Z
    c4e4:	31 81       	ldd	r19, Z+1	; 0x01
    c4e6:	21 50       	subi	r18, 0x01	; 1
    c4e8:	30 40       	sbci	r19, 0x00	; 0
    c4ea:	fc 01       	movw	r30, r24
    c4ec:	31 83       	std	Z+1, r19	; 0x01
    c4ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c4f0:	ce 01       	movw	r24, r28
    c4f2:	83 5c       	subi	r24, 0xC3	; 195
    c4f4:	9b 4f       	sbci	r25, 0xFB	; 251
    c4f6:	fc 01       	movw	r30, r24
    c4f8:	80 81       	ld	r24, Z
    c4fa:	91 81       	ldd	r25, Z+1	; 0x01
    c4fc:	00 97       	sbiw	r24, 0x00	; 0
    c4fe:	89 f6       	brne	.-94     	; 0xc4a2 <main+0x9152>
    c500:	2f c0       	rjmp	.+94     	; 0xc560 <main+0x9210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c502:	8e 01       	movw	r16, r28
    c504:	03 5c       	subi	r16, 0xC3	; 195
    c506:	1b 4f       	sbci	r17, 0xFB	; 251
    c508:	ce 01       	movw	r24, r28
    c50a:	87 5c       	subi	r24, 0xC7	; 199
    c50c:	9b 4f       	sbci	r25, 0xFB	; 251
    c50e:	fc 01       	movw	r30, r24
    c510:	60 81       	ld	r22, Z
    c512:	71 81       	ldd	r23, Z+1	; 0x01
    c514:	82 81       	ldd	r24, Z+2	; 0x02
    c516:	93 81       	ldd	r25, Z+3	; 0x03
    c518:	0e 94 aa 63 	call	0xc754	; 0xc754 <__fixunssfsi>
    c51c:	dc 01       	movw	r26, r24
    c51e:	cb 01       	movw	r24, r22
    c520:	f8 01       	movw	r30, r16
    c522:	91 83       	std	Z+1, r25	; 0x01
    c524:	80 83       	st	Z, r24
    c526:	ce 01       	movw	r24, r28
    c528:	8f 5b       	subi	r24, 0xBF	; 191
    c52a:	9b 4f       	sbci	r25, 0xFB	; 251
    c52c:	9e 01       	movw	r18, r28
    c52e:	23 5c       	subi	r18, 0xC3	; 195
    c530:	3b 4f       	sbci	r19, 0xFB	; 251
    c532:	f9 01       	movw	r30, r18
    c534:	20 81       	ld	r18, Z
    c536:	31 81       	ldd	r19, Z+1	; 0x01
    c538:	fc 01       	movw	r30, r24
    c53a:	31 83       	std	Z+1, r19	; 0x01
    c53c:	20 83       	st	Z, r18
    c53e:	ce 01       	movw	r24, r28
    c540:	8f 5b       	subi	r24, 0xBF	; 191
    c542:	9b 4f       	sbci	r25, 0xFB	; 251
    c544:	fc 01       	movw	r30, r24
    c546:	80 81       	ld	r24, Z
    c548:	91 81       	ldd	r25, Z+1	; 0x01
    c54a:	8c 01       	movw	r16, r24
    c54c:	c8 01       	movw	r24, r16
    c54e:	01 97       	sbiw	r24, 0x01	; 1
    c550:	f1 f7       	brne	.-4      	; 0xc54e <main+0x91fe>
    c552:	8c 01       	movw	r16, r24
    c554:	ce 01       	movw	r24, r28
    c556:	8f 5b       	subi	r24, 0xBF	; 191
    c558:	9b 4f       	sbci	r25, 0xFB	; 251
    c55a:	fc 01       	movw	r30, r24
    c55c:	11 83       	std	Z+1, r17	; 0x01
    c55e:	00 83       	st	Z, r16
						_delay_ms(500);
						right_degrees(45);
    c560:	8d e2       	ldi	r24, 0x2D	; 45
    c562:	90 e0       	ldi	r25, 0x00	; 0
    c564:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <right_degrees>
						compass=6;
    c568:	86 e0       	ldi	r24, 0x06	; 6
    c56a:	90 e0       	ldi	r25, 0x00	; 0
    c56c:	9c 83       	std	Y+4, r25	; 0x04
    c56e:	8b 83       	std	Y+3, r24	; 0x03
						break;	
    c570:	0e c0       	rjmp	.+28     	; 0xc58e <main+0x923e>
		}
		else
		{
			if(compass==7)
			{
				for(int i=0;i<4;i++)
    c572:	8f a1       	lds	r24, 0x4f
    c574:	98 a5       	lds	r25, 0x68
    c576:	01 96       	adiw	r24, 0x01	; 1
    c578:	98 a7       	lds	r25, 0x78
    c57a:	8f a3       	lds	r24, 0x5f
    c57c:	8f a1       	lds	r24, 0x4f
    c57e:	98 a5       	lds	r25, 0x68
    c580:	84 30       	cpi	r24, 0x04	; 4
    c582:	91 05       	cpc	r25, r1
    c584:	14 f4       	brge	.+4      	; 0xc58a <main+0x923a>
    c586:	0c 94 20 57 	jmp	0xae40	; 0xae40 <main+0x7af0>
					}
				}					
			}
		}
	}
	goto hotspot;
    c58a:	0c 94 9b 36 	jmp	0x6d36	; 0x6d36 <main+0x39e6>
    c58e:	0c 94 9b 36 	jmp	0x6d36	; 0x6d36 <main+0x39e6>
	point2: buzzer_on();			
    c592:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <buzzer_on>
    c596:	80 e0       	ldi	r24, 0x00	; 0
    c598:	90 e0       	ldi	r25, 0x00	; 0

}
    c59a:	c2 52       	subi	r28, 0x22	; 34
    c59c:	d9 4f       	sbci	r29, 0xF9	; 249
    c59e:	0f b6       	in	r0, 0x3f	; 63
    c5a0:	f8 94       	cli
    c5a2:	de bf       	out	0x3e, r29	; 62
    c5a4:	0f be       	out	0x3f, r0	; 63
    c5a6:	cd bf       	out	0x3d, r28	; 61
    c5a8:	df 91       	pop	r29
    c5aa:	cf 91       	pop	r28
    c5ac:	1f 91       	pop	r17
    c5ae:	0f 91       	pop	r16
    c5b0:	08 95       	ret

0000c5b2 <__subsf3>:
    c5b2:	50 58       	subi	r21, 0x80	; 128

0000c5b4 <__addsf3>:
    c5b4:	bb 27       	eor	r27, r27
    c5b6:	aa 27       	eor	r26, r26
    c5b8:	0e d0       	rcall	.+28     	; 0xc5d6 <__addsf3x>
    c5ba:	70 c1       	rjmp	.+736    	; 0xc89c <__fp_round>
    c5bc:	61 d1       	rcall	.+706    	; 0xc880 <__fp_pscA>
    c5be:	30 f0       	brcs	.+12     	; 0xc5cc <__addsf3+0x18>
    c5c0:	66 d1       	rcall	.+716    	; 0xc88e <__fp_pscB>
    c5c2:	20 f0       	brcs	.+8      	; 0xc5cc <__addsf3+0x18>
    c5c4:	31 f4       	brne	.+12     	; 0xc5d2 <__addsf3+0x1e>
    c5c6:	9f 3f       	cpi	r25, 0xFF	; 255
    c5c8:	11 f4       	brne	.+4      	; 0xc5ce <__addsf3+0x1a>
    c5ca:	1e f4       	brtc	.+6      	; 0xc5d2 <__addsf3+0x1e>
    c5cc:	56 c1       	rjmp	.+684    	; 0xc87a <__fp_nan>
    c5ce:	0e f4       	brtc	.+2      	; 0xc5d2 <__addsf3+0x1e>
    c5d0:	e0 95       	com	r30
    c5d2:	e7 fb       	bst	r30, 7
    c5d4:	4c c1       	rjmp	.+664    	; 0xc86e <__fp_inf>

0000c5d6 <__addsf3x>:
    c5d6:	e9 2f       	mov	r30, r25
    c5d8:	72 d1       	rcall	.+740    	; 0xc8be <__fp_split3>
    c5da:	80 f3       	brcs	.-32     	; 0xc5bc <__addsf3+0x8>
    c5dc:	ba 17       	cp	r27, r26
    c5de:	62 07       	cpc	r22, r18
    c5e0:	73 07       	cpc	r23, r19
    c5e2:	84 07       	cpc	r24, r20
    c5e4:	95 07       	cpc	r25, r21
    c5e6:	18 f0       	brcs	.+6      	; 0xc5ee <__addsf3x+0x18>
    c5e8:	71 f4       	brne	.+28     	; 0xc606 <__addsf3x+0x30>
    c5ea:	9e f5       	brtc	.+102    	; 0xc652 <__addsf3x+0x7c>
    c5ec:	8a c1       	rjmp	.+788    	; 0xc902 <__fp_zero>
    c5ee:	0e f4       	brtc	.+2      	; 0xc5f2 <__addsf3x+0x1c>
    c5f0:	e0 95       	com	r30
    c5f2:	0b 2e       	mov	r0, r27
    c5f4:	ba 2f       	mov	r27, r26
    c5f6:	a0 2d       	mov	r26, r0
    c5f8:	0b 01       	movw	r0, r22
    c5fa:	b9 01       	movw	r22, r18
    c5fc:	90 01       	movw	r18, r0
    c5fe:	0c 01       	movw	r0, r24
    c600:	ca 01       	movw	r24, r20
    c602:	a0 01       	movw	r20, r0
    c604:	11 24       	eor	r1, r1
    c606:	ff 27       	eor	r31, r31
    c608:	59 1b       	sub	r21, r25
    c60a:	99 f0       	breq	.+38     	; 0xc632 <__addsf3x+0x5c>
    c60c:	59 3f       	cpi	r21, 0xF9	; 249
    c60e:	50 f4       	brcc	.+20     	; 0xc624 <__addsf3x+0x4e>
    c610:	50 3e       	cpi	r21, 0xE0	; 224
    c612:	68 f1       	brcs	.+90     	; 0xc66e <__addsf3x+0x98>
    c614:	1a 16       	cp	r1, r26
    c616:	f0 40       	sbci	r31, 0x00	; 0
    c618:	a2 2f       	mov	r26, r18
    c61a:	23 2f       	mov	r18, r19
    c61c:	34 2f       	mov	r19, r20
    c61e:	44 27       	eor	r20, r20
    c620:	58 5f       	subi	r21, 0xF8	; 248
    c622:	f3 cf       	rjmp	.-26     	; 0xc60a <__addsf3x+0x34>
    c624:	46 95       	lsr	r20
    c626:	37 95       	ror	r19
    c628:	27 95       	ror	r18
    c62a:	a7 95       	ror	r26
    c62c:	f0 40       	sbci	r31, 0x00	; 0
    c62e:	53 95       	inc	r21
    c630:	c9 f7       	brne	.-14     	; 0xc624 <__addsf3x+0x4e>
    c632:	7e f4       	brtc	.+30     	; 0xc652 <__addsf3x+0x7c>
    c634:	1f 16       	cp	r1, r31
    c636:	ba 0b       	sbc	r27, r26
    c638:	62 0b       	sbc	r22, r18
    c63a:	73 0b       	sbc	r23, r19
    c63c:	84 0b       	sbc	r24, r20
    c63e:	ba f0       	brmi	.+46     	; 0xc66e <__addsf3x+0x98>
    c640:	91 50       	subi	r25, 0x01	; 1
    c642:	a1 f0       	breq	.+40     	; 0xc66c <__addsf3x+0x96>
    c644:	ff 0f       	add	r31, r31
    c646:	bb 1f       	adc	r27, r27
    c648:	66 1f       	adc	r22, r22
    c64a:	77 1f       	adc	r23, r23
    c64c:	88 1f       	adc	r24, r24
    c64e:	c2 f7       	brpl	.-16     	; 0xc640 <__addsf3x+0x6a>
    c650:	0e c0       	rjmp	.+28     	; 0xc66e <__addsf3x+0x98>
    c652:	ba 0f       	add	r27, r26
    c654:	62 1f       	adc	r22, r18
    c656:	73 1f       	adc	r23, r19
    c658:	84 1f       	adc	r24, r20
    c65a:	48 f4       	brcc	.+18     	; 0xc66e <__addsf3x+0x98>
    c65c:	87 95       	ror	r24
    c65e:	77 95       	ror	r23
    c660:	67 95       	ror	r22
    c662:	b7 95       	ror	r27
    c664:	f7 95       	ror	r31
    c666:	9e 3f       	cpi	r25, 0xFE	; 254
    c668:	08 f0       	brcs	.+2      	; 0xc66c <__addsf3x+0x96>
    c66a:	b3 cf       	rjmp	.-154    	; 0xc5d2 <__addsf3+0x1e>
    c66c:	93 95       	inc	r25
    c66e:	88 0f       	add	r24, r24
    c670:	08 f0       	brcs	.+2      	; 0xc674 <__addsf3x+0x9e>
    c672:	99 27       	eor	r25, r25
    c674:	ee 0f       	add	r30, r30
    c676:	97 95       	ror	r25
    c678:	87 95       	ror	r24
    c67a:	08 95       	ret

0000c67c <__cmpsf2>:
    c67c:	d4 d0       	rcall	.+424    	; 0xc826 <__fp_cmp>
    c67e:	08 f4       	brcc	.+2      	; 0xc682 <__cmpsf2+0x6>
    c680:	81 e0       	ldi	r24, 0x01	; 1
    c682:	08 95       	ret

0000c684 <__divsf3>:
    c684:	0c d0       	rcall	.+24     	; 0xc69e <__divsf3x>
    c686:	0a c1       	rjmp	.+532    	; 0xc89c <__fp_round>
    c688:	02 d1       	rcall	.+516    	; 0xc88e <__fp_pscB>
    c68a:	40 f0       	brcs	.+16     	; 0xc69c <__divsf3+0x18>
    c68c:	f9 d0       	rcall	.+498    	; 0xc880 <__fp_pscA>
    c68e:	30 f0       	brcs	.+12     	; 0xc69c <__divsf3+0x18>
    c690:	21 f4       	brne	.+8      	; 0xc69a <__divsf3+0x16>
    c692:	5f 3f       	cpi	r21, 0xFF	; 255
    c694:	19 f0       	breq	.+6      	; 0xc69c <__divsf3+0x18>
    c696:	eb c0       	rjmp	.+470    	; 0xc86e <__fp_inf>
    c698:	51 11       	cpse	r21, r1
    c69a:	34 c1       	rjmp	.+616    	; 0xc904 <__fp_szero>
    c69c:	ee c0       	rjmp	.+476    	; 0xc87a <__fp_nan>

0000c69e <__divsf3x>:
    c69e:	0f d1       	rcall	.+542    	; 0xc8be <__fp_split3>
    c6a0:	98 f3       	brcs	.-26     	; 0xc688 <__divsf3+0x4>

0000c6a2 <__divsf3_pse>:
    c6a2:	99 23       	and	r25, r25
    c6a4:	c9 f3       	breq	.-14     	; 0xc698 <__divsf3+0x14>
    c6a6:	55 23       	and	r21, r21
    c6a8:	b1 f3       	breq	.-20     	; 0xc696 <__divsf3+0x12>
    c6aa:	95 1b       	sub	r25, r21
    c6ac:	55 0b       	sbc	r21, r21
    c6ae:	bb 27       	eor	r27, r27
    c6b0:	aa 27       	eor	r26, r26
    c6b2:	62 17       	cp	r22, r18
    c6b4:	73 07       	cpc	r23, r19
    c6b6:	84 07       	cpc	r24, r20
    c6b8:	38 f0       	brcs	.+14     	; 0xc6c8 <__divsf3_pse+0x26>
    c6ba:	9f 5f       	subi	r25, 0xFF	; 255
    c6bc:	5f 4f       	sbci	r21, 0xFF	; 255
    c6be:	22 0f       	add	r18, r18
    c6c0:	33 1f       	adc	r19, r19
    c6c2:	44 1f       	adc	r20, r20
    c6c4:	aa 1f       	adc	r26, r26
    c6c6:	a9 f3       	breq	.-22     	; 0xc6b2 <__divsf3_pse+0x10>
    c6c8:	33 d0       	rcall	.+102    	; 0xc730 <__divsf3_pse+0x8e>
    c6ca:	0e 2e       	mov	r0, r30
    c6cc:	3a f0       	brmi	.+14     	; 0xc6dc <__divsf3_pse+0x3a>
    c6ce:	e0 e8       	ldi	r30, 0x80	; 128
    c6d0:	30 d0       	rcall	.+96     	; 0xc732 <__divsf3_pse+0x90>
    c6d2:	91 50       	subi	r25, 0x01	; 1
    c6d4:	50 40       	sbci	r21, 0x00	; 0
    c6d6:	e6 95       	lsr	r30
    c6d8:	00 1c       	adc	r0, r0
    c6da:	ca f7       	brpl	.-14     	; 0xc6ce <__divsf3_pse+0x2c>
    c6dc:	29 d0       	rcall	.+82     	; 0xc730 <__divsf3_pse+0x8e>
    c6de:	fe 2f       	mov	r31, r30
    c6e0:	27 d0       	rcall	.+78     	; 0xc730 <__divsf3_pse+0x8e>
    c6e2:	66 0f       	add	r22, r22
    c6e4:	77 1f       	adc	r23, r23
    c6e6:	88 1f       	adc	r24, r24
    c6e8:	bb 1f       	adc	r27, r27
    c6ea:	26 17       	cp	r18, r22
    c6ec:	37 07       	cpc	r19, r23
    c6ee:	48 07       	cpc	r20, r24
    c6f0:	ab 07       	cpc	r26, r27
    c6f2:	b0 e8       	ldi	r27, 0x80	; 128
    c6f4:	09 f0       	breq	.+2      	; 0xc6f8 <__divsf3_pse+0x56>
    c6f6:	bb 0b       	sbc	r27, r27
    c6f8:	80 2d       	mov	r24, r0
    c6fa:	bf 01       	movw	r22, r30
    c6fc:	ff 27       	eor	r31, r31
    c6fe:	93 58       	subi	r25, 0x83	; 131
    c700:	5f 4f       	sbci	r21, 0xFF	; 255
    c702:	2a f0       	brmi	.+10     	; 0xc70e <__divsf3_pse+0x6c>
    c704:	9e 3f       	cpi	r25, 0xFE	; 254
    c706:	51 05       	cpc	r21, r1
    c708:	68 f0       	brcs	.+26     	; 0xc724 <__divsf3_pse+0x82>
    c70a:	b1 c0       	rjmp	.+354    	; 0xc86e <__fp_inf>
    c70c:	fb c0       	rjmp	.+502    	; 0xc904 <__fp_szero>
    c70e:	5f 3f       	cpi	r21, 0xFF	; 255
    c710:	ec f3       	brlt	.-6      	; 0xc70c <__divsf3_pse+0x6a>
    c712:	98 3e       	cpi	r25, 0xE8	; 232
    c714:	dc f3       	brlt	.-10     	; 0xc70c <__divsf3_pse+0x6a>
    c716:	86 95       	lsr	r24
    c718:	77 95       	ror	r23
    c71a:	67 95       	ror	r22
    c71c:	b7 95       	ror	r27
    c71e:	f7 95       	ror	r31
    c720:	9f 5f       	subi	r25, 0xFF	; 255
    c722:	c9 f7       	brne	.-14     	; 0xc716 <__divsf3_pse+0x74>
    c724:	88 0f       	add	r24, r24
    c726:	91 1d       	adc	r25, r1
    c728:	96 95       	lsr	r25
    c72a:	87 95       	ror	r24
    c72c:	97 f9       	bld	r25, 7
    c72e:	08 95       	ret
    c730:	e1 e0       	ldi	r30, 0x01	; 1
    c732:	66 0f       	add	r22, r22
    c734:	77 1f       	adc	r23, r23
    c736:	88 1f       	adc	r24, r24
    c738:	bb 1f       	adc	r27, r27
    c73a:	62 17       	cp	r22, r18
    c73c:	73 07       	cpc	r23, r19
    c73e:	84 07       	cpc	r24, r20
    c740:	ba 07       	cpc	r27, r26
    c742:	20 f0       	brcs	.+8      	; 0xc74c <__divsf3_pse+0xaa>
    c744:	62 1b       	sub	r22, r18
    c746:	73 0b       	sbc	r23, r19
    c748:	84 0b       	sbc	r24, r20
    c74a:	ba 0b       	sbc	r27, r26
    c74c:	ee 1f       	adc	r30, r30
    c74e:	88 f7       	brcc	.-30     	; 0xc732 <__divsf3_pse+0x90>
    c750:	e0 95       	com	r30
    c752:	08 95       	ret

0000c754 <__fixunssfsi>:
    c754:	bc d0       	rcall	.+376    	; 0xc8ce <__fp_splitA>
    c756:	88 f0       	brcs	.+34     	; 0xc77a <__fixunssfsi+0x26>
    c758:	9f 57       	subi	r25, 0x7F	; 127
    c75a:	90 f0       	brcs	.+36     	; 0xc780 <__fixunssfsi+0x2c>
    c75c:	b9 2f       	mov	r27, r25
    c75e:	99 27       	eor	r25, r25
    c760:	b7 51       	subi	r27, 0x17	; 23
    c762:	a0 f0       	brcs	.+40     	; 0xc78c <__fixunssfsi+0x38>
    c764:	d1 f0       	breq	.+52     	; 0xc79a <__fixunssfsi+0x46>
    c766:	66 0f       	add	r22, r22
    c768:	77 1f       	adc	r23, r23
    c76a:	88 1f       	adc	r24, r24
    c76c:	99 1f       	adc	r25, r25
    c76e:	1a f0       	brmi	.+6      	; 0xc776 <__fixunssfsi+0x22>
    c770:	ba 95       	dec	r27
    c772:	c9 f7       	brne	.-14     	; 0xc766 <__fixunssfsi+0x12>
    c774:	12 c0       	rjmp	.+36     	; 0xc79a <__fixunssfsi+0x46>
    c776:	b1 30       	cpi	r27, 0x01	; 1
    c778:	81 f0       	breq	.+32     	; 0xc79a <__fixunssfsi+0x46>
    c77a:	c3 d0       	rcall	.+390    	; 0xc902 <__fp_zero>
    c77c:	b1 e0       	ldi	r27, 0x01	; 1
    c77e:	08 95       	ret
    c780:	c0 c0       	rjmp	.+384    	; 0xc902 <__fp_zero>
    c782:	67 2f       	mov	r22, r23
    c784:	78 2f       	mov	r23, r24
    c786:	88 27       	eor	r24, r24
    c788:	b8 5f       	subi	r27, 0xF8	; 248
    c78a:	39 f0       	breq	.+14     	; 0xc79a <__fixunssfsi+0x46>
    c78c:	b9 3f       	cpi	r27, 0xF9	; 249
    c78e:	cc f3       	brlt	.-14     	; 0xc782 <__fixunssfsi+0x2e>
    c790:	86 95       	lsr	r24
    c792:	77 95       	ror	r23
    c794:	67 95       	ror	r22
    c796:	b3 95       	inc	r27
    c798:	d9 f7       	brne	.-10     	; 0xc790 <__fixunssfsi+0x3c>
    c79a:	3e f4       	brtc	.+14     	; 0xc7aa <__fixunssfsi+0x56>
    c79c:	90 95       	com	r25
    c79e:	80 95       	com	r24
    c7a0:	70 95       	com	r23
    c7a2:	61 95       	neg	r22
    c7a4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7a6:	8f 4f       	sbci	r24, 0xFF	; 255
    c7a8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7aa:	08 95       	ret

0000c7ac <__floatunsisf>:
    c7ac:	e8 94       	clt
    c7ae:	09 c0       	rjmp	.+18     	; 0xc7c2 <__floatsisf+0x12>

0000c7b0 <__floatsisf>:
    c7b0:	97 fb       	bst	r25, 7
    c7b2:	3e f4       	brtc	.+14     	; 0xc7c2 <__floatsisf+0x12>
    c7b4:	90 95       	com	r25
    c7b6:	80 95       	com	r24
    c7b8:	70 95       	com	r23
    c7ba:	61 95       	neg	r22
    c7bc:	7f 4f       	sbci	r23, 0xFF	; 255
    c7be:	8f 4f       	sbci	r24, 0xFF	; 255
    c7c0:	9f 4f       	sbci	r25, 0xFF	; 255
    c7c2:	99 23       	and	r25, r25
    c7c4:	a9 f0       	breq	.+42     	; 0xc7f0 <__floatsisf+0x40>
    c7c6:	f9 2f       	mov	r31, r25
    c7c8:	96 e9       	ldi	r25, 0x96	; 150
    c7ca:	bb 27       	eor	r27, r27
    c7cc:	93 95       	inc	r25
    c7ce:	f6 95       	lsr	r31
    c7d0:	87 95       	ror	r24
    c7d2:	77 95       	ror	r23
    c7d4:	67 95       	ror	r22
    c7d6:	b7 95       	ror	r27
    c7d8:	f1 11       	cpse	r31, r1
    c7da:	f8 cf       	rjmp	.-16     	; 0xc7cc <__floatsisf+0x1c>
    c7dc:	fa f4       	brpl	.+62     	; 0xc81c <__floatsisf+0x6c>
    c7de:	bb 0f       	add	r27, r27
    c7e0:	11 f4       	brne	.+4      	; 0xc7e6 <__floatsisf+0x36>
    c7e2:	60 ff       	sbrs	r22, 0
    c7e4:	1b c0       	rjmp	.+54     	; 0xc81c <__floatsisf+0x6c>
    c7e6:	6f 5f       	subi	r22, 0xFF	; 255
    c7e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c7ea:	8f 4f       	sbci	r24, 0xFF	; 255
    c7ec:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ee:	16 c0       	rjmp	.+44     	; 0xc81c <__floatsisf+0x6c>
    c7f0:	88 23       	and	r24, r24
    c7f2:	11 f0       	breq	.+4      	; 0xc7f8 <__floatsisf+0x48>
    c7f4:	96 e9       	ldi	r25, 0x96	; 150
    c7f6:	11 c0       	rjmp	.+34     	; 0xc81a <__floatsisf+0x6a>
    c7f8:	77 23       	and	r23, r23
    c7fa:	21 f0       	breq	.+8      	; 0xc804 <__floatsisf+0x54>
    c7fc:	9e e8       	ldi	r25, 0x8E	; 142
    c7fe:	87 2f       	mov	r24, r23
    c800:	76 2f       	mov	r23, r22
    c802:	05 c0       	rjmp	.+10     	; 0xc80e <__floatsisf+0x5e>
    c804:	66 23       	and	r22, r22
    c806:	71 f0       	breq	.+28     	; 0xc824 <__floatsisf+0x74>
    c808:	96 e8       	ldi	r25, 0x86	; 134
    c80a:	86 2f       	mov	r24, r22
    c80c:	70 e0       	ldi	r23, 0x00	; 0
    c80e:	60 e0       	ldi	r22, 0x00	; 0
    c810:	2a f0       	brmi	.+10     	; 0xc81c <__floatsisf+0x6c>
    c812:	9a 95       	dec	r25
    c814:	66 0f       	add	r22, r22
    c816:	77 1f       	adc	r23, r23
    c818:	88 1f       	adc	r24, r24
    c81a:	da f7       	brpl	.-10     	; 0xc812 <__floatsisf+0x62>
    c81c:	88 0f       	add	r24, r24
    c81e:	96 95       	lsr	r25
    c820:	87 95       	ror	r24
    c822:	97 f9       	bld	r25, 7
    c824:	08 95       	ret

0000c826 <__fp_cmp>:
    c826:	99 0f       	add	r25, r25
    c828:	00 08       	sbc	r0, r0
    c82a:	55 0f       	add	r21, r21
    c82c:	aa 0b       	sbc	r26, r26
    c82e:	e0 e8       	ldi	r30, 0x80	; 128
    c830:	fe ef       	ldi	r31, 0xFE	; 254
    c832:	16 16       	cp	r1, r22
    c834:	17 06       	cpc	r1, r23
    c836:	e8 07       	cpc	r30, r24
    c838:	f9 07       	cpc	r31, r25
    c83a:	c0 f0       	brcs	.+48     	; 0xc86c <__fp_cmp+0x46>
    c83c:	12 16       	cp	r1, r18
    c83e:	13 06       	cpc	r1, r19
    c840:	e4 07       	cpc	r30, r20
    c842:	f5 07       	cpc	r31, r21
    c844:	98 f0       	brcs	.+38     	; 0xc86c <__fp_cmp+0x46>
    c846:	62 1b       	sub	r22, r18
    c848:	73 0b       	sbc	r23, r19
    c84a:	84 0b       	sbc	r24, r20
    c84c:	95 0b       	sbc	r25, r21
    c84e:	39 f4       	brne	.+14     	; 0xc85e <__fp_cmp+0x38>
    c850:	0a 26       	eor	r0, r26
    c852:	61 f0       	breq	.+24     	; 0xc86c <__fp_cmp+0x46>
    c854:	23 2b       	or	r18, r19
    c856:	24 2b       	or	r18, r20
    c858:	25 2b       	or	r18, r21
    c85a:	21 f4       	brne	.+8      	; 0xc864 <__fp_cmp+0x3e>
    c85c:	08 95       	ret
    c85e:	0a 26       	eor	r0, r26
    c860:	09 f4       	brne	.+2      	; 0xc864 <__fp_cmp+0x3e>
    c862:	a1 40       	sbci	r26, 0x01	; 1
    c864:	a6 95       	lsr	r26
    c866:	8f ef       	ldi	r24, 0xFF	; 255
    c868:	81 1d       	adc	r24, r1
    c86a:	81 1d       	adc	r24, r1
    c86c:	08 95       	ret

0000c86e <__fp_inf>:
    c86e:	97 f9       	bld	r25, 7
    c870:	9f 67       	ori	r25, 0x7F	; 127
    c872:	80 e8       	ldi	r24, 0x80	; 128
    c874:	70 e0       	ldi	r23, 0x00	; 0
    c876:	60 e0       	ldi	r22, 0x00	; 0
    c878:	08 95       	ret

0000c87a <__fp_nan>:
    c87a:	9f ef       	ldi	r25, 0xFF	; 255
    c87c:	80 ec       	ldi	r24, 0xC0	; 192
    c87e:	08 95       	ret

0000c880 <__fp_pscA>:
    c880:	00 24       	eor	r0, r0
    c882:	0a 94       	dec	r0
    c884:	16 16       	cp	r1, r22
    c886:	17 06       	cpc	r1, r23
    c888:	18 06       	cpc	r1, r24
    c88a:	09 06       	cpc	r0, r25
    c88c:	08 95       	ret

0000c88e <__fp_pscB>:
    c88e:	00 24       	eor	r0, r0
    c890:	0a 94       	dec	r0
    c892:	12 16       	cp	r1, r18
    c894:	13 06       	cpc	r1, r19
    c896:	14 06       	cpc	r1, r20
    c898:	05 06       	cpc	r0, r21
    c89a:	08 95       	ret

0000c89c <__fp_round>:
    c89c:	09 2e       	mov	r0, r25
    c89e:	03 94       	inc	r0
    c8a0:	00 0c       	add	r0, r0
    c8a2:	11 f4       	brne	.+4      	; 0xc8a8 <__fp_round+0xc>
    c8a4:	88 23       	and	r24, r24
    c8a6:	52 f0       	brmi	.+20     	; 0xc8bc <__fp_round+0x20>
    c8a8:	bb 0f       	add	r27, r27
    c8aa:	40 f4       	brcc	.+16     	; 0xc8bc <__fp_round+0x20>
    c8ac:	bf 2b       	or	r27, r31
    c8ae:	11 f4       	brne	.+4      	; 0xc8b4 <__fp_round+0x18>
    c8b0:	60 ff       	sbrs	r22, 0
    c8b2:	04 c0       	rjmp	.+8      	; 0xc8bc <__fp_round+0x20>
    c8b4:	6f 5f       	subi	r22, 0xFF	; 255
    c8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8b8:	8f 4f       	sbci	r24, 0xFF	; 255
    c8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    c8bc:	08 95       	ret

0000c8be <__fp_split3>:
    c8be:	57 fd       	sbrc	r21, 7
    c8c0:	90 58       	subi	r25, 0x80	; 128
    c8c2:	44 0f       	add	r20, r20
    c8c4:	55 1f       	adc	r21, r21
    c8c6:	59 f0       	breq	.+22     	; 0xc8de <__fp_splitA+0x10>
    c8c8:	5f 3f       	cpi	r21, 0xFF	; 255
    c8ca:	71 f0       	breq	.+28     	; 0xc8e8 <__fp_splitA+0x1a>
    c8cc:	47 95       	ror	r20

0000c8ce <__fp_splitA>:
    c8ce:	88 0f       	add	r24, r24
    c8d0:	97 fb       	bst	r25, 7
    c8d2:	99 1f       	adc	r25, r25
    c8d4:	61 f0       	breq	.+24     	; 0xc8ee <__fp_splitA+0x20>
    c8d6:	9f 3f       	cpi	r25, 0xFF	; 255
    c8d8:	79 f0       	breq	.+30     	; 0xc8f8 <__fp_splitA+0x2a>
    c8da:	87 95       	ror	r24
    c8dc:	08 95       	ret
    c8de:	12 16       	cp	r1, r18
    c8e0:	13 06       	cpc	r1, r19
    c8e2:	14 06       	cpc	r1, r20
    c8e4:	55 1f       	adc	r21, r21
    c8e6:	f2 cf       	rjmp	.-28     	; 0xc8cc <__fp_split3+0xe>
    c8e8:	46 95       	lsr	r20
    c8ea:	f1 df       	rcall	.-30     	; 0xc8ce <__fp_splitA>
    c8ec:	08 c0       	rjmp	.+16     	; 0xc8fe <__fp_splitA+0x30>
    c8ee:	16 16       	cp	r1, r22
    c8f0:	17 06       	cpc	r1, r23
    c8f2:	18 06       	cpc	r1, r24
    c8f4:	99 1f       	adc	r25, r25
    c8f6:	f1 cf       	rjmp	.-30     	; 0xc8da <__fp_splitA+0xc>
    c8f8:	86 95       	lsr	r24
    c8fa:	71 05       	cpc	r23, r1
    c8fc:	61 05       	cpc	r22, r1
    c8fe:	08 94       	sec
    c900:	08 95       	ret

0000c902 <__fp_zero>:
    c902:	e8 94       	clt

0000c904 <__fp_szero>:
    c904:	bb 27       	eor	r27, r27
    c906:	66 27       	eor	r22, r22
    c908:	77 27       	eor	r23, r23
    c90a:	cb 01       	movw	r24, r22
    c90c:	97 f9       	bld	r25, 7
    c90e:	08 95       	ret

0000c910 <__gesf2>:
    c910:	8a df       	rcall	.-236    	; 0xc826 <__fp_cmp>
    c912:	08 f4       	brcc	.+2      	; 0xc916 <__gesf2+0x6>
    c914:	8f ef       	ldi	r24, 0xFF	; 255
    c916:	08 95       	ret

0000c918 <__mulsf3>:
    c918:	0b d0       	rcall	.+22     	; 0xc930 <__mulsf3x>
    c91a:	c0 cf       	rjmp	.-128    	; 0xc89c <__fp_round>
    c91c:	b1 df       	rcall	.-158    	; 0xc880 <__fp_pscA>
    c91e:	28 f0       	brcs	.+10     	; 0xc92a <__mulsf3+0x12>
    c920:	b6 df       	rcall	.-148    	; 0xc88e <__fp_pscB>
    c922:	18 f0       	brcs	.+6      	; 0xc92a <__mulsf3+0x12>
    c924:	95 23       	and	r25, r21
    c926:	09 f0       	breq	.+2      	; 0xc92a <__mulsf3+0x12>
    c928:	a2 cf       	rjmp	.-188    	; 0xc86e <__fp_inf>
    c92a:	a7 cf       	rjmp	.-178    	; 0xc87a <__fp_nan>
    c92c:	11 24       	eor	r1, r1
    c92e:	ea cf       	rjmp	.-44     	; 0xc904 <__fp_szero>

0000c930 <__mulsf3x>:
    c930:	c6 df       	rcall	.-116    	; 0xc8be <__fp_split3>
    c932:	a0 f3       	brcs	.-24     	; 0xc91c <__mulsf3+0x4>

0000c934 <__mulsf3_pse>:
    c934:	95 9f       	mul	r25, r21
    c936:	d1 f3       	breq	.-12     	; 0xc92c <__mulsf3+0x14>
    c938:	95 0f       	add	r25, r21
    c93a:	50 e0       	ldi	r21, 0x00	; 0
    c93c:	55 1f       	adc	r21, r21
    c93e:	62 9f       	mul	r22, r18
    c940:	f0 01       	movw	r30, r0
    c942:	72 9f       	mul	r23, r18
    c944:	bb 27       	eor	r27, r27
    c946:	f0 0d       	add	r31, r0
    c948:	b1 1d       	adc	r27, r1
    c94a:	63 9f       	mul	r22, r19
    c94c:	aa 27       	eor	r26, r26
    c94e:	f0 0d       	add	r31, r0
    c950:	b1 1d       	adc	r27, r1
    c952:	aa 1f       	adc	r26, r26
    c954:	64 9f       	mul	r22, r20
    c956:	66 27       	eor	r22, r22
    c958:	b0 0d       	add	r27, r0
    c95a:	a1 1d       	adc	r26, r1
    c95c:	66 1f       	adc	r22, r22
    c95e:	82 9f       	mul	r24, r18
    c960:	22 27       	eor	r18, r18
    c962:	b0 0d       	add	r27, r0
    c964:	a1 1d       	adc	r26, r1
    c966:	62 1f       	adc	r22, r18
    c968:	73 9f       	mul	r23, r19
    c96a:	b0 0d       	add	r27, r0
    c96c:	a1 1d       	adc	r26, r1
    c96e:	62 1f       	adc	r22, r18
    c970:	83 9f       	mul	r24, r19
    c972:	a0 0d       	add	r26, r0
    c974:	61 1d       	adc	r22, r1
    c976:	22 1f       	adc	r18, r18
    c978:	74 9f       	mul	r23, r20
    c97a:	33 27       	eor	r19, r19
    c97c:	a0 0d       	add	r26, r0
    c97e:	61 1d       	adc	r22, r1
    c980:	23 1f       	adc	r18, r19
    c982:	84 9f       	mul	r24, r20
    c984:	60 0d       	add	r22, r0
    c986:	21 1d       	adc	r18, r1
    c988:	82 2f       	mov	r24, r18
    c98a:	76 2f       	mov	r23, r22
    c98c:	6a 2f       	mov	r22, r26
    c98e:	11 24       	eor	r1, r1
    c990:	9f 57       	subi	r25, 0x7F	; 127
    c992:	50 40       	sbci	r21, 0x00	; 0
    c994:	8a f0       	brmi	.+34     	; 0xc9b8 <__mulsf3_pse+0x84>
    c996:	e1 f0       	breq	.+56     	; 0xc9d0 <__mulsf3_pse+0x9c>
    c998:	88 23       	and	r24, r24
    c99a:	4a f0       	brmi	.+18     	; 0xc9ae <__mulsf3_pse+0x7a>
    c99c:	ee 0f       	add	r30, r30
    c99e:	ff 1f       	adc	r31, r31
    c9a0:	bb 1f       	adc	r27, r27
    c9a2:	66 1f       	adc	r22, r22
    c9a4:	77 1f       	adc	r23, r23
    c9a6:	88 1f       	adc	r24, r24
    c9a8:	91 50       	subi	r25, 0x01	; 1
    c9aa:	50 40       	sbci	r21, 0x00	; 0
    c9ac:	a9 f7       	brne	.-22     	; 0xc998 <__mulsf3_pse+0x64>
    c9ae:	9e 3f       	cpi	r25, 0xFE	; 254
    c9b0:	51 05       	cpc	r21, r1
    c9b2:	70 f0       	brcs	.+28     	; 0xc9d0 <__mulsf3_pse+0x9c>
    c9b4:	5c cf       	rjmp	.-328    	; 0xc86e <__fp_inf>
    c9b6:	a6 cf       	rjmp	.-180    	; 0xc904 <__fp_szero>
    c9b8:	5f 3f       	cpi	r21, 0xFF	; 255
    c9ba:	ec f3       	brlt	.-6      	; 0xc9b6 <__mulsf3_pse+0x82>
    c9bc:	98 3e       	cpi	r25, 0xE8	; 232
    c9be:	dc f3       	brlt	.-10     	; 0xc9b6 <__mulsf3_pse+0x82>
    c9c0:	86 95       	lsr	r24
    c9c2:	77 95       	ror	r23
    c9c4:	67 95       	ror	r22
    c9c6:	b7 95       	ror	r27
    c9c8:	f7 95       	ror	r31
    c9ca:	e7 95       	ror	r30
    c9cc:	9f 5f       	subi	r25, 0xFF	; 255
    c9ce:	c1 f7       	brne	.-16     	; 0xc9c0 <__mulsf3_pse+0x8c>
    c9d0:	fe 2b       	or	r31, r30
    c9d2:	88 0f       	add	r24, r24
    c9d4:	91 1d       	adc	r25, r1
    c9d6:	96 95       	lsr	r25
    c9d8:	87 95       	ror	r24
    c9da:	97 f9       	bld	r25, 7
    c9dc:	08 95       	ret

0000c9de <__udivmodhi4>:
    c9de:	aa 1b       	sub	r26, r26
    c9e0:	bb 1b       	sub	r27, r27
    c9e2:	51 e1       	ldi	r21, 0x11	; 17
    c9e4:	07 c0       	rjmp	.+14     	; 0xc9f4 <__udivmodhi4_ep>

0000c9e6 <__udivmodhi4_loop>:
    c9e6:	aa 1f       	adc	r26, r26
    c9e8:	bb 1f       	adc	r27, r27
    c9ea:	a6 17       	cp	r26, r22
    c9ec:	b7 07       	cpc	r27, r23
    c9ee:	10 f0       	brcs	.+4      	; 0xc9f4 <__udivmodhi4_ep>
    c9f0:	a6 1b       	sub	r26, r22
    c9f2:	b7 0b       	sbc	r27, r23

0000c9f4 <__udivmodhi4_ep>:
    c9f4:	88 1f       	adc	r24, r24
    c9f6:	99 1f       	adc	r25, r25
    c9f8:	5a 95       	dec	r21
    c9fa:	a9 f7       	brne	.-22     	; 0xc9e6 <__udivmodhi4_loop>
    c9fc:	80 95       	com	r24
    c9fe:	90 95       	com	r25
    ca00:	bc 01       	movw	r22, r24
    ca02:	cd 01       	movw	r24, r26
    ca04:	08 95       	ret

0000ca06 <_exit>:
    ca06:	f8 94       	cli

0000ca08 <__stop_program>:
    ca08:	ff cf       	rjmp	.-2      	; 0xca08 <__stop_program>
