
Grid Solver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800200  00006c30  00006cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800476  00800476  00006f3a  2**0
                  ALLOC
  3 .stab         00001ec0  00000000  00000000  00006f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  00008dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000094a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ff  00000000  00000000  00009548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bf  00000000  00000000  0000b947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef9  00000000  00000000  0000bc06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b8  00000000  00000000  0000cb00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6a  00000000  00000000  0000d559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_5>
      18:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e3       	ldi	r30, 0x30	; 48
      fc:	fc e6       	ldi	r31, 0x6C	; 108
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 37       	cpi	r26, 0x76	; 118
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	a6 e7       	ldi	r26, 0x76	; 118
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 39       	cpi	r26, 0x95	; 149
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <main>
     122:	0c 94 16 36 	jmp	0x6c2c	; 0x6c2c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	a0 e8       	ldi	r26, 0x80	; 128
     14a:	bf e3       	ldi	r27, 0x3F	; 63
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	ab 83       	std	Y+3, r26	; 0x03
     152:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	26 e6       	ldi	r18, 0x66	; 102
     15e:	36 e6       	ldi	r19, 0x66	; 102
     160:	46 e6       	ldi	r20, 0x66	; 102
     162:	55 e4       	ldi	r21, 0x45	; 69
     164:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	9e 83       	std	Y+6, r25	; 0x06
     170:	af 83       	std	Y+7, r26	; 0x07
     172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     18a:	88 23       	and	r24, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <lcd_set_4bit+0x66>
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	11 23       	and	r17, r17
     192:	29 f0       	breq	.+10     	; 0x19e <lcd_set_4bit+0x74>
		__ticks = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	46 c0       	rjmp	.+140    	; 0x22a <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	3f ef       	ldi	r19, 0xFF	; 255
     1ac:	4f e7       	ldi	r20, 0x7F	; 127
     1ae:	57 e4       	ldi	r21, 0x47	; 71
     1b0:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <lcd_set_4bit+0x90>
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	11 23       	and	r17, r17
     1bc:	61 f1       	breq	.+88     	; 0x216 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1be:	69 81       	ldd	r22, Y+1	; 0x01
     1c0:	7a 81       	ldd	r23, Y+2	; 0x02
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	9a 87       	std	Y+10, r25	; 0x0a
     1e4:	89 87       	std	Y+9, r24	; 0x09
     1e6:	12 c0       	rjmp	.+36     	; 0x20c <lcd_set_4bit+0xe2>
     1e8:	80 e7       	ldi	r24, 0x70	; 112
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9c 87       	std	Y+12, r25	; 0x0c
     1ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f4:	8c 01       	movw	r16, r24
     1f6:	c8 01       	movw	r24, r16
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0xce>
     1fc:	8c 01       	movw	r16, r24
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
     200:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	51 f7       	brne	.-44     	; 0x1e8 <lcd_set_4bit+0xbe>
     214:	17 c0       	rjmp	.+46     	; 0x244 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	9e 87       	std	Y+14, r25	; 0x0e
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	8c 01       	movw	r16, r24
     238:	f8 01       	movw	r30, r16
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x110>
     23e:	8f 01       	movw	r16, r30
     240:	1e 87       	std	Y+14, r17	; 0x0e
     242:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e2       	ldi	r18, 0x28	; 40
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2e 7f       	andi	r18, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     256:	88 e2       	ldi	r24, 0x28	; 40
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e2       	ldi	r18, 0x28	; 40
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	2d 7f       	andi	r18, 0xFD	; 253
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     268:	88 e2       	ldi	r24, 0x28	; 40
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	28 e2       	ldi	r18, 0x28	; 40
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	24 60       	ori	r18, 0x04	; 4
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b0 e4       	ldi	r27, 0x40	; 64
     28c:	8f 87       	std	Y+15, r24	; 0x0f
     28e:	98 8b       	std	Y+16, r25	; 0x10
     290:	a9 8b       	std	Y+17, r26	; 0x11
     292:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     294:	6f 85       	ldd	r22, Y+15	; 0x0f
     296:	78 89       	ldd	r23, Y+16	; 0x10
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	9a 89       	ldd	r25, Y+18	; 0x12
     29c:	26 e6       	ldi	r18, 0x66	; 102
     29e:	36 e6       	ldi	r19, 0x66	; 102
     2a0:	46 e6       	ldi	r20, 0x66	; 102
     2a2:	55 e4       	ldi	r21, 0x45	; 69
     2a4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8b 8b       	std	Y+19, r24	; 0x13
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	ad 8b       	std	Y+21, r26	; 0x15
     2b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	6b 89       	ldd	r22, Y+19	; 0x13
     2b8:	7c 89       	ldd	r23, Y+20	; 0x14
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <lcd_set_4bit+0x1a6>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	29 f0       	breq	.+10     	; 0x2de <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	46 c0       	rjmp	.+140    	; 0x36a <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	7c 89       	ldd	r23, Y+20	; 0x14
     2e4:	8d 89       	ldd	r24, Y+21	; 0x15
     2e6:	9e 89       	ldd	r25, Y+22	; 0x16
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <lcd_set_4bit+0x1d0>
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	11 23       	and	r17, r17
     2fc:	61 f1       	breq	.+88     	; 0x356 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     300:	78 89       	ldd	r23, Y+16	; 0x10
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	9a 89       	ldd	r25, Y+18	; 0x12
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	8f 8b       	std	Y+23, r24	; 0x17
     326:	12 c0       	rjmp	.+36     	; 0x34c <lcd_set_4bit+0x222>
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9a 8f       	std	Y+26, r25	; 0x1a
     32e:	89 8f       	std	Y+25, r24	; 0x19
     330:	89 8d       	ldd	r24, Y+25	; 0x19
     332:	9a 8d       	ldd	r25, Y+26	; 0x1a
     334:	8c 01       	movw	r16, r24
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_set_4bit+0x20e>
     33c:	8c 01       	movw	r16, r24
     33e:	1a 8f       	std	Y+26, r17	; 0x1a
     340:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	8f 89       	ldd	r24, Y+23	; 0x17
     344:	98 8d       	ldd	r25, Y+24	; 0x18
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	98 8f       	std	Y+24, r25	; 0x18
     34a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	51 f7       	brne	.-44     	; 0x328 <lcd_set_4bit+0x1fe>
     354:	17 c0       	rjmp	.+46     	; 0x384 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	9c 8f       	std	Y+28, r25	; 0x1c
     370:	8b 8f       	std	Y+27, r24	; 0x1b
     372:	8b 8d       	ldd	r24, Y+27	; 0x1b
     374:	9c 8d       	ldd	r25, Y+28	; 0x1c
     376:	8c 01       	movw	r16, r24
     378:	f8 01       	movw	r30, r16
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_set_4bit+0x250>
     37e:	8f 01       	movw	r16, r30
     380:	1c 8f       	std	Y+28, r17	; 0x1c
     382:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 e2       	ldi	r18, 0x28	; 40
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2b 7f       	andi	r18, 0xFB	; 251
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e8       	ldi	r26, 0x80	; 128
     39c:	bf e3       	ldi	r27, 0x3F	; 63
     39e:	8d 8f       	std	Y+29, r24	; 0x1d
     3a0:	9e 8f       	std	Y+30, r25	; 0x1e
     3a2:	af 8f       	std	Y+31, r26	; 0x1f
     3a4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ac:	98 a1       	lds	r25, 0x48
     3ae:	26 e6       	ldi	r18, 0x66	; 102
     3b0:	36 e6       	ldi	r19, 0x66	; 102
     3b2:	46 e6       	ldi	r20, 0x66	; 102
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	89 a3       	lds	r24, 0x59
     3c0:	9a a3       	lds	r25, 0x5a
     3c2:	ab a3       	lds	r26, 0x5b
     3c4:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	69 a1       	lds	r22, 0x49
     3ca:	7a a1       	lds	r23, 0x4a
     3cc:	8b a1       	lds	r24, 0x4b
     3ce:	9c a1       	lds	r25, 0x4c
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_set_4bit+0x2b8>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e a3       	lds	r25, 0x5e
     3ec:	8d a3       	lds	r24, 0x5d
     3ee:	46 c0       	rjmp	.+140    	; 0x47c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	69 a1       	lds	r22, 0x49
     3f4:	7a a1       	lds	r23, 0x4a
     3f6:	8b a1       	lds	r24, 0x4b
     3f8:	9c a1       	lds	r25, 0x4c
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	3f ef       	ldi	r19, 0xFF	; 255
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	57 e4       	ldi	r21, 0x47	; 71
     402:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     406:	18 16       	cp	r1, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <lcd_set_4bit+0x2e2>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	11 23       	and	r17, r17
     40e:	61 f1       	breq	.+88     	; 0x468 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     410:	6d 8d       	ldd	r22, Y+29	; 0x1d
     412:	7e 8d       	ldd	r23, Y+30	; 0x1e
     414:	8f 8d       	ldd	r24, Y+31	; 0x1f
     416:	98 a1       	lds	r25, 0x48
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e a3       	lds	r25, 0x5e
     436:	8d a3       	lds	r24, 0x5d
     438:	12 c0       	rjmp	.+36     	; 0x45e <lcd_set_4bit+0x334>
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 a7       	lds	r25, 0x78
     440:	8f a3       	lds	r24, 0x5f
     442:	8f a1       	lds	r24, 0x4f
     444:	98 a5       	lds	r25, 0x68
     446:	8c 01       	movw	r16, r24
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_set_4bit+0x320>
     44e:	8c 01       	movw	r16, r24
     450:	18 a7       	lds	r17, 0x78
     452:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     454:	8d a1       	lds	r24, 0x4d
     456:	9e a1       	lds	r25, 0x4e
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	9e a3       	lds	r25, 0x5e
     45c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	8d a1       	lds	r24, 0x4d
     460:	9e a1       	lds	r25, 0x4e
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f7       	brne	.-44     	; 0x43a <lcd_set_4bit+0x310>
     466:	17 c0       	rjmp	.+46     	; 0x496 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     468:	69 a1       	lds	r22, 0x49
     46a:	7a a1       	lds	r23, 0x4a
     46c:	8b a1       	lds	r24, 0x4b
     46e:	9c a1       	lds	r25, 0x4c
     470:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	8d a1       	lds	r24, 0x4d
     47e:	9e a1       	lds	r25, 0x4e
     480:	9a a7       	lds	r25, 0x7a
     482:	89 a7       	lds	r24, 0x79
     484:	89 a5       	lds	r24, 0x69
     486:	9a a5       	lds	r25, 0x6a
     488:	8c 01       	movw	r16, r24
     48a:	f8 01       	movw	r30, r16
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x362>
     490:	8f 01       	movw	r16, r30
     492:	1a a7       	lds	r17, 0x7a
     494:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e2       	ldi	r18, 0x28	; 40
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e2       	ldi	r18, 0x28	; 40
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2d 7f       	andi	r18, 0xFD	; 253
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     4ba:	88 e2       	ldi	r24, 0x28	; 40
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     4c4:	88 e2       	ldi	r24, 0x28	; 40
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	20 81       	ld	r18, Z
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 ea       	ldi	r26, 0xA0	; 160
     4dc:	b0 e4       	ldi	r27, 0x40	; 64
     4de:	8b a7       	lds	r24, 0x7b
     4e0:	9c a7       	lds	r25, 0x7c
     4e2:	ad a7       	lds	r26, 0x7d
     4e4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	6b a5       	lds	r22, 0x6b
     4e8:	7c a5       	lds	r23, 0x6c
     4ea:	8d a5       	lds	r24, 0x6d
     4ec:	9e a5       	lds	r25, 0x6e
     4ee:	26 e6       	ldi	r18, 0x66	; 102
     4f0:	36 e6       	ldi	r19, 0x66	; 102
     4f2:	46 e6       	ldi	r20, 0x66	; 102
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	8f a7       	lds	r24, 0x7f
     500:	98 ab       	sts	0x58, r25
     502:	a9 ab       	sts	0x59, r26
     504:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     506:	11 e0       	ldi	r17, 0x01	; 1
     508:	6f a5       	lds	r22, 0x6f
     50a:	78 a9       	sts	0x48, r23
     50c:	89 a9       	sts	0x49, r24
     50e:	9a a9       	sts	0x4a, r25
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x3f8>
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	11 23       	and	r17, r17
     524:	29 f0       	breq	.+10     	; 0x530 <lcd_set_4bit+0x406>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c ab       	sts	0x5c, r25
     52c:	8b ab       	sts	0x5b, r24
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f a5       	lds	r22, 0x6f
     534:	78 a9       	sts	0x48, r23
     536:	89 a9       	sts	0x49, r24
     538:	9a a9       	sts	0x4a, r25
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <lcd_set_4bit+0x422>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	11 23       	and	r17, r17
     54e:	61 f1       	breq	.+88     	; 0x5a8 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     550:	6b a5       	lds	r22, 0x6b
     552:	7c a5       	lds	r23, 0x6c
     554:	8d a5       	lds	r24, 0x6d
     556:	9e a5       	lds	r25, 0x6e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	9c ab       	sts	0x5c, r25
     576:	8b ab       	sts	0x5b, r24
     578:	12 c0       	rjmp	.+36     	; 0x59e <lcd_set_4bit+0x474>
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9e ab       	sts	0x5e, r25
     580:	8d ab       	sts	0x5d, r24
     582:	8d a9       	sts	0x4d, r24
     584:	9e a9       	sts	0x4e, r25
     586:	8c 01       	movw	r16, r24
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_set_4bit+0x460>
     58e:	8c 01       	movw	r16, r24
     590:	1e ab       	sts	0x5e, r17
     592:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     594:	8b a9       	sts	0x4b, r24
     596:	9c a9       	sts	0x4c, r25
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	9c ab       	sts	0x5c, r25
     59c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	8b a9       	sts	0x4b, r24
     5a0:	9c a9       	sts	0x4c, r25
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	51 f7       	brne	.-44     	; 0x57a <lcd_set_4bit+0x450>
     5a6:	17 c0       	rjmp	.+46     	; 0x5d6 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	6f a5       	lds	r22, 0x6f
     5aa:	78 a9       	sts	0x48, r23
     5ac:	89 a9       	sts	0x49, r24
     5ae:	9a a9       	sts	0x4a, r25
     5b0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	8b a9       	sts	0x4b, r24
     5be:	9c a9       	sts	0x4c, r25
     5c0:	98 af       	sts	0x78, r25
     5c2:	8f ab       	sts	0x5f, r24
     5c4:	8f a9       	sts	0x4f, r24
     5c6:	98 ad       	sts	0x68, r25
     5c8:	8c 01       	movw	r16, r24
     5ca:	f8 01       	movw	r30, r16
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_set_4bit+0x4a2>
     5d0:	8f 01       	movw	r16, r30
     5d2:	18 af       	sts	0x78, r17
     5d4:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2b 7f       	andi	r18, 0xFB	; 251
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e8       	ldi	r26, 0x80	; 128
     5ee:	bf e3       	ldi	r27, 0x3F	; 63
     5f0:	89 af       	sts	0x79, r24
     5f2:	9a af       	sts	0x7a, r25
     5f4:	ab af       	sts	0x7b, r26
     5f6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	69 ad       	sts	0x69, r22
     5fa:	7a ad       	sts	0x6a, r23
     5fc:	8b ad       	sts	0x6b, r24
     5fe:	9c ad       	sts	0x6c, r25
     600:	26 e6       	ldi	r18, 0x66	; 102
     602:	36 e6       	ldi	r19, 0x66	; 102
     604:	46 e6       	ldi	r20, 0x66	; 102
     606:	55 e4       	ldi	r21, 0x45	; 69
     608:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	23 5c       	subi	r18, 0xC3	; 195
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	cd 96       	adiw	r24, 0x3d	; 61
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <lcd_set_4bit+0x518>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	11 23       	and	r17, r17
     644:	49 f0       	breq	.+18     	; 0x658 <lcd_set_4bit+0x52e>
		__ticks = 1;
     646:	ce 01       	movw	r24, r28
     648:	8f 5b       	subi	r24, 0xBF	; 191
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	6e c0       	rjmp	.+220    	; 0x734 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	cd 96       	adiw	r24, 0x3d	; 61
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	57 e4       	ldi	r21, 0x47	; 71
     670:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <lcd_set_4bit+0x550>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	11 23       	and	r17, r17
     67c:	09 f4       	brne	.+2      	; 0x680 <lcd_set_4bit+0x556>
     67e:	49 c0       	rjmp	.+146    	; 0x712 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	69 ad       	sts	0x69, r22
     682:	7a ad       	sts	0x6a, r23
     684:	8b ad       	sts	0x6b, r24
     686:	9c ad       	sts	0x6c, r25
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8e 01       	movw	r16, r28
     69a:	0f 5b       	subi	r16, 0xBF	; 191
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	f8 01       	movw	r30, r16
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	27 c0       	rjmp	.+78     	; 0x700 <lcd_set_4bit+0x5d6>
     6b2:	ce 01       	movw	r24, r28
     6b4:	8d 5b       	subi	r24, 0xBD	; 189
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	20 e7       	ldi	r18, 0x70	; 112
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
     6c2:	ce 01       	movw	r24, r28
     6c4:	8d 5b       	subi	r24, 0xBD	; 189
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	8c 01       	movw	r16, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_set_4bit+0x5a8>
     6d6:	8c 01       	movw	r16, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	8d 5b       	subi	r24, 0xBD	; 189
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	11 83       	std	Z+1, r17	; 0x01
     6e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	ce 01       	movw	r24, r28
     6e6:	8f 5b       	subi	r24, 0xBF	; 191
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	9e 01       	movw	r18, r28
     6ec:	2f 5b       	subi	r18, 0xBF	; 191
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	ce 01       	movw	r24, r28
     702:	8f 5b       	subi	r24, 0xBF	; 191
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f6       	brne	.-94     	; 0x6b2 <lcd_set_4bit+0x588>
     710:	2e c0       	rjmp	.+92     	; 0x76e <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	8e 01       	movw	r16, r28
     714:	0f 5b       	subi	r16, 0xBF	; 191
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	cd 96       	adiw	r24, 0x3d	; 61
     71c:	fc 01       	movw	r30, r24
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	ce 01       	movw	r24, r28
     736:	8b 5b       	subi	r24, 0xBB	; 187
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5b       	subi	r18, 0xBF	; 191
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
     74c:	ce 01       	movw	r24, r28
     74e:	8b 5b       	subi	r24, 0xBB	; 187
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	8c 01       	movw	r16, r24
     75a:	c8 01       	movw	r24, r16
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x632>
     760:	8c 01       	movw	r16, r24
     762:	ce 01       	movw	r24, r28
     764:	8b 5b       	subi	r24, 0xBB	; 187
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	11 83       	std	Z+1, r17	; 0x01
     76c:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	28 e2       	ldi	r18, 0x28	; 40
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	88 e2       	ldi	r24, 0x28	; 40
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 e2       	ldi	r18, 0x28	; 40
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	2d 7f       	andi	r18, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	24 60       	ori	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	9e 01       	movw	r18, r28
     7b0:	29 5b       	subi	r18, 0xB9	; 185
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 ea       	ldi	r26, 0xA0	; 160
     7ba:	b0 e4       	ldi	r27, 0x40	; 64
     7bc:	f9 01       	movw	r30, r18
     7be:	80 83       	st	Z, r24
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	a2 83       	std	Z+2, r26	; 0x02
     7c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	05 5b       	subi	r16, 0xB5	; 181
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	89 5b       	subi	r24, 0xB9	; 185
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 e6       	ldi	r20, 0x66	; 102
     7e2:	55 e4       	ldi	r21, 0x45	; 69
     7e4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 83       	st	Z, r24
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	a2 83       	std	Z+2, r26	; 0x02
     7f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7f6:	ce 01       	movw	r24, r28
     7f8:	85 5b       	subi	r24, 0xB5	; 181
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	93 81       	ldd	r25, Z+3	; 0x03
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <lcd_set_4bit+0x6f0>
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <lcd_set_4bit+0x706>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	74 c0       	rjmp	.+232    	; 0x918 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <lcd_set_4bit+0x72a>
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	11 23       	and	r17, r17
     856:	09 f4       	brne	.+2      	; 0x85a <lcd_set_4bit+0x730>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	ce 01       	movw	r24, r28
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <lcd_set_4bit+0x7b8>
     894:	ce 01       	movw	r24, r28
     896:	8f 5a       	subi	r24, 0xAF	; 175
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	20 e7       	ldi	r18, 0x70	; 112
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	fc 01       	movw	r30, r24
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ce 01       	movw	r24, r28
     8a6:	8f 5a       	subi	r24, 0xAF	; 175
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	8c 01       	movw	r16, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_set_4bit+0x78a>
     8b8:	8c 01       	movw	r16, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 83       	std	Z+1, r17	; 0x01
     8c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	ce 01       	movw	r24, r28
     8c8:	81 5b       	subi	r24, 0xB1	; 177
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	9e 01       	movw	r18, r28
     8ce:	21 5b       	subi	r18, 0xB1	; 177
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	ce 01       	movw	r24, r28
     8e4:	81 5b       	subi	r24, 0xB1	; 177
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	89 f6       	brne	.-94     	; 0x894 <lcd_set_4bit+0x76a>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	8e 01       	movw	r16, r28
     8f6:	01 5b       	subi	r16, 0xB1	; 177
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	85 5b       	subi	r24, 0xB5	; 181
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	ce 01       	movw	r24, r28
     91a:	8d 5a       	subi	r24, 0xAD	; 173
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	9e 01       	movw	r18, r28
     920:	21 5b       	subi	r18, 0xB1	; 177
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	ce 01       	movw	r24, r28
     932:	8d 5a       	subi	r24, 0xAD	; 173
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	8c 01       	movw	r16, r24
     93e:	c8 01       	movw	r24, r16
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <lcd_set_4bit+0x816>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	8d 5a       	subi	r24, 0xAD	; 173
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	11 83       	std	Z+1, r17	; 0x01
     950:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 e2       	ldi	r18, 0x28	; 40
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	9e 01       	movw	r18, r28
     966:	2b 5a       	subi	r18, 0xAB	; 171
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	8e 01       	movw	r16, r28
     97e:	07 5a       	subi	r16, 0xA7	; 167
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	8b 5a       	subi	r24, 0xAB	; 171
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	fc 01       	movw	r30, r24
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	26 e6       	ldi	r18, 0x66	; 102
     994:	36 e6       	ldi	r19, 0x66	; 102
     996:	46 e6       	ldi	r20, 0x66	; 102
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	a2 83       	std	Z+2, r26	; 0x02
     9aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 5a       	subi	r24, 0xA7	; 167
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	60 81       	ld	r22, Z
     9b8:	71 81       	ldd	r23, Z+1	; 0x01
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_set_4bit+0x8a6>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	11 23       	and	r17, r17
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5a       	subi	r24, 0xA3	; 163
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	74 c0       	rjmp	.+232    	; 0xace <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9e6:	ce 01       	movw	r24, r28
     9e8:	87 5a       	subi	r24, 0xA7	; 167
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f0       	brlt	.+2      	; 0xa0a <lcd_set_4bit+0x8e0>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	11 23       	and	r17, r17
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_set_4bit+0x8e6>
     a0e:	4d c0       	rjmp	.+154    	; 0xaaa <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5a       	subi	r24, 0xAB	; 171
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8e 01       	movw	r16, r28
     a32:	03 5a       	subi	r16, 0xA3	; 163
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	f8 01       	movw	r30, r16
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	27 c0       	rjmp	.+78     	; 0xa98 <lcd_set_4bit+0x96e>
     a4a:	ce 01       	movw	r24, r28
     a4c:	81 5a       	subi	r24, 0xA1	; 161
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ce 01       	movw	r24, r28
     a5c:	81 5a       	subi	r24, 0xA1	; 161
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	8c 01       	movw	r16, r24
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x940>
     a6e:	8c 01       	movw	r16, r24
     a70:	ce 01       	movw	r24, r28
     a72:	81 5a       	subi	r24, 0xA1	; 161
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	11 83       	std	Z+1, r17	; 0x01
     a7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 5a       	subi	r24, 0xA3	; 163
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	23 5a       	subi	r18, 0xA3	; 163
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	ce 01       	movw	r24, r28
     a9a:	83 5a       	subi	r24, 0xA3	; 163
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	89 f6       	brne	.-94     	; 0xa4a <lcd_set_4bit+0x920>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5a       	subi	r16, 0xA3	; 163
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5a       	subi	r24, 0xA7	; 167
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	f8 01       	movw	r30, r16
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	ce 01       	movw	r24, r28
     ad0:	8f 59       	subi	r24, 0x9F	; 159
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	9e 01       	movw	r18, r28
     ad6:	23 5a       	subi	r18, 0xA3	; 163
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	ce 01       	movw	r24, r28
     ae8:	8f 59       	subi	r24, 0x9F	; 159
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8c 01       	movw	r16, r24
     af4:	c8 01       	movw	r24, r16
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_set_4bit+0x9cc>
     afa:	8c 01       	movw	r16, r24
     afc:	ce 01       	movw	r24, r28
     afe:	8f 59       	subi	r24, 0x9F	; 159
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	11 83       	std	Z+1, r17	; 0x01
     b06:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	20 e2       	ldi	r18, 0x20	; 32
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	28 e2       	ldi	r18, 0x28	; 40
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	24 60       	ori	r18, 0x04	; 4
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	9e 01       	movw	r18, r28
     b4a:	2d 59       	subi	r18, 0x9D	; 157
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 ea       	ldi	r26, 0xA0	; 160
     b54:	b0 e4       	ldi	r27, 0x40	; 64
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	09 59       	subi	r16, 0x99	; 153
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ce 01       	movw	r24, r28
     b68:	8d 59       	subi	r24, 0x9D	; 157
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	26 e6       	ldi	r18, 0x66	; 102
     b78:	36 e6       	ldi	r19, 0x66	; 102
     b7a:	46 e6       	ldi	r20, 0x66	; 102
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	f8 01       	movw	r30, r16
     b88:	80 83       	st	Z, r24
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	a2 83       	std	Z+2, r26	; 0x02
     b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b90:	ce 01       	movw	r24, r28
     b92:	89 59       	subi	r24, 0x99	; 153
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <lcd_set_4bit+0xa8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	11 23       	and	r17, r17
     bb6:	49 f0       	breq	.+18     	; 0xbca <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	85 59       	subi	r24, 0x95	; 149
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	74 c0       	rjmp	.+232    	; 0xcb2 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	89 59       	subi	r24, 0x99	; 153
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <lcd_set_4bit+0xac4>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_set_4bit+0xaca>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 59       	subi	r24, 0x9D	; 157
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8e 01       	movw	r16, r28
     c16:	05 59       	subi	r16, 0x95	; 149
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <lcd_set_4bit+0xb52>
     c2e:	ce 01       	movw	r24, r28
     c30:	83 59       	subi	r24, 0x93	; 147
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	20 e7       	ldi	r18, 0x70	; 112
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	20 83       	st	Z, r18
     c3e:	ce 01       	movw	r24, r28
     c40:	83 59       	subi	r24, 0x93	; 147
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	8c 01       	movw	r16, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_set_4bit+0xb24>
     c52:	8c 01       	movw	r16, r24
     c54:	ce 01       	movw	r24, r28
     c56:	83 59       	subi	r24, 0x93	; 147
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 83       	std	Z+1, r17	; 0x01
     c5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	ce 01       	movw	r24, r28
     c62:	85 59       	subi	r24, 0x95	; 149
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	25 59       	subi	r18, 0x95	; 149
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 59       	subi	r24, 0x95	; 149
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	89 f6       	brne	.-94     	; 0xc2e <lcd_set_4bit+0xb04>
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 59       	subi	r16, 0x95	; 149
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	89 59       	subi	r24, 0x99	; 153
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	ce 01       	movw	r24, r28
     cb4:	81 59       	subi	r24, 0x91	; 145
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	25 59       	subi	r18, 0x95	; 149
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	ce 01       	movw	r24, r28
     ccc:	81 59       	subi	r24, 0x91	; 145
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	8c 01       	movw	r16, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <lcd_set_4bit+0xbb0>
     cde:	8c 01       	movw	r16, r24
     ce0:	ce 01       	movw	r24, r28
     ce2:	81 59       	subi	r24, 0x91	; 145
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 83       	std	Z+1, r17	; 0x01
     cea:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	28 e2       	ldi	r18, 0x28	; 40
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	2b 7f       	andi	r18, 0xFB	; 251
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18

	
}
     cfe:	c0 59       	subi	r28, 0x90	; 144
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2e 97       	sbiw	r28, 0x0e	; 14
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     d2e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e8       	ldi	r26, 0x80	; 128
     d38:	bf e3       	ldi	r27, 0x3F	; 63
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	ab 83       	std	Y+3, r26	; 0x03
     d40:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	26 e6       	ldi	r18, 0x66	; 102
     d4c:	36 e6       	ldi	r19, 0x66	; 102
     d4e:	46 e6       	ldi	r20, 0x66	; 102
     d50:	55 e4       	ldi	r21, 0x45	; 69
     d52:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	af 83       	std	Y+7, r26	; 0x07
     d60:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d62:	11 e0       	ldi	r17, 0x01	; 1
     d64:	6d 81       	ldd	r22, Y+5	; 0x05
     d66:	7e 81       	ldd	r23, Y+6	; 0x06
     d68:	8f 81       	ldd	r24, Y+7	; 0x07
     d6a:	98 85       	ldd	r25, Y+8	; 0x08
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <lcd_init+0x68>
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	11 23       	and	r17, r17
     d80:	29 f0       	breq	.+10     	; 0xd8c <lcd_init+0x76>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9a 87       	std	Y+10, r25	; 0x0a
     d88:	89 87       	std	Y+9, r24	; 0x09
     d8a:	46 c0       	rjmp	.+140    	; 0xe18 <lcd_init+0x102>
	else if (__tmp > 65535)
     d8c:	11 e0       	ldi	r17, 0x01	; 1
     d8e:	6d 81       	ldd	r22, Y+5	; 0x05
     d90:	7e 81       	ldd	r23, Y+6	; 0x06
     d92:	8f 81       	ldd	r24, Y+7	; 0x07
     d94:	98 85       	ldd	r25, Y+8	; 0x08
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     da2:	18 16       	cp	r1, r24
     da4:	0c f0       	brlt	.+2      	; 0xda8 <lcd_init+0x92>
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	11 23       	and	r17, r17
     daa:	61 f1       	breq	.+88     	; 0xe04 <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9a 87       	std	Y+10, r25	; 0x0a
     dd2:	89 87       	std	Y+9, r24	; 0x09
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <lcd_init+0xe4>
     dd6:	80 e7       	ldi	r24, 0x70	; 112
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	8b 85       	ldd	r24, Y+11	; 0x0b
     de0:	9c 85       	ldd	r25, Y+12	; 0x0c
     de2:	8c 01       	movw	r16, r24
     de4:	c8 01       	movw	r24, r16
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <lcd_init+0xd0>
     dea:	8c 01       	movw	r16, r24
     dec:	1c 87       	std	Y+12, r17	; 0x0c
     dee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9a 87       	std	Y+10, r25	; 0x0a
     df8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	51 f7       	brne	.-44     	; 0xdd6 <lcd_init+0xc0>
     e02:	17 c0       	rjmp	.+46     	; 0xe32 <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6d 81       	ldd	r22, Y+5	; 0x05
     e06:	7e 81       	ldd	r23, Y+6	; 0x06
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	89 87       	std	Y+9, r24	; 0x09
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	9e 87       	std	Y+14, r25	; 0x0e
     e1e:	8d 87       	std	Y+13, r24	; 0x0d
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	8c 01       	movw	r16, r24
     e26:	c8 01       	movw	r24, r16
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <lcd_init+0x112>
     e2c:	8c 01       	movw	r16, r24
     e2e:	1e 87       	std	Y+14, r17	; 0x0e
     e30:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e32:	88 e2       	ldi	r24, 0x28	; 40
     e34:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x01);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x06);
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x0E);
     e44:	8e e0       	ldi	r24, 0x0E	; 14
     e46:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x80);
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
		
}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	6e 97       	sbiw	r28, 0x1e	; 30
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	80 7f       	andi	r24, 0xF0	; 240
     e88:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     e8a:	88 e2       	ldi	r24, 0x28	; 40
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e2       	ldi	r18, 0x28	; 40
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	2f 70       	andi	r18, 0x0F	; 15
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	lcd_port |= temp;
     e9c:	88 e2       	ldi	r24, 0x28	; 40
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	28 e2       	ldi	r18, 0x28	; 40
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	f9 01       	movw	r30, r18
     ea6:	30 81       	ld	r19, Z
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	23 2b       	or	r18, r19
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     eb0:	88 e2       	ldi	r24, 0x28	; 40
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	28 e2       	ldi	r18, 0x28	; 40
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	20 81       	ld	r18, Z
     ebc:	2e 7f       	andi	r18, 0xFE	; 254
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     ec2:	88 e2       	ldi	r24, 0x28	; 40
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	28 e2       	ldi	r18, 0x28	; 40
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	20 81       	ld	r18, Z
     ece:	2d 7f       	andi	r18, 0xFD	; 253
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     ed4:	88 e2       	ldi	r24, 0x28	; 40
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	28 e2       	ldi	r18, 0x28	; 40
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	24 60       	ori	r18, 0x04	; 4
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 ea       	ldi	r26, 0xA0	; 160
     eec:	b0 e4       	ldi	r27, 0x40	; 64
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	ac 83       	std	Y+4, r26	; 0x04
     ef4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6a 81       	ldd	r22, Y+2	; 0x02
     ef8:	7b 81       	ldd	r23, Y+3	; 0x03
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	26 e6       	ldi	r18, 0x66	; 102
     f00:	36 e6       	ldi	r19, 0x66	; 102
     f02:	46 e6       	ldi	r20, 0x66	; 102
     f04:	55 e4       	ldi	r21, 0x45	; 69
     f06:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8e 83       	std	Y+6, r24	; 0x06
     f10:	9f 83       	std	Y+7, r25	; 0x07
     f12:	a8 87       	std	Y+8, r26	; 0x08
     f14:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f16:	11 e0       	ldi	r17, 0x01	; 1
     f18:	6e 81       	ldd	r22, Y+6	; 0x06
     f1a:	7f 81       	ldd	r23, Y+7	; 0x07
     f1c:	88 85       	ldd	r24, Y+8	; 0x08
     f1e:	99 85       	ldd	r25, Y+9	; 0x09
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <lcd_wr_command+0xcc>
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	11 23       	and	r17, r17
     f34:	29 f0       	breq	.+10     	; 0xf40 <lcd_wr_command+0xda>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9b 87       	std	Y+11, r25	; 0x0b
     f3c:	8a 87       	std	Y+10, r24	; 0x0a
     f3e:	46 c0       	rjmp	.+140    	; 0xfcc <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f40:	11 e0       	ldi	r17, 0x01	; 1
     f42:	6e 81       	ldd	r22, Y+6	; 0x06
     f44:	7f 81       	ldd	r23, Y+7	; 0x07
     f46:	88 85       	ldd	r24, Y+8	; 0x08
     f48:	99 85       	ldd	r25, Y+9	; 0x09
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
     f56:	18 16       	cp	r1, r24
     f58:	0c f0       	brlt	.+2      	; 0xf5c <lcd_wr_command+0xf6>
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	11 23       	and	r17, r17
     f5e:	61 f1       	breq	.+88     	; 0xfb8 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	7b 81       	ldd	r23, Y+3	; 0x03
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9b 87       	std	Y+11, r25	; 0x0b
     f86:	8a 87       	std	Y+10, r24	; 0x0a
     f88:	12 c0       	rjmp	.+36     	; 0xfae <lcd_wr_command+0x148>
     f8a:	80 e7       	ldi	r24, 0x70	; 112
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	9d 87       	std	Y+13, r25	; 0x0d
     f90:	8c 87       	std	Y+12, r24	; 0x0c
     f92:	8c 85       	ldd	r24, Y+12	; 0x0c
     f94:	9d 85       	ldd	r25, Y+13	; 0x0d
     f96:	8c 01       	movw	r16, r24
     f98:	c8 01       	movw	r24, r16
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <lcd_wr_command+0x134>
     f9e:	8c 01       	movw	r16, r24
     fa0:	1d 87       	std	Y+13, r17	; 0x0d
     fa2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9b 87       	std	Y+11, r25	; 0x0b
     fac:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	51 f7       	brne	.-44     	; 0xf8a <lcd_wr_command+0x124>
     fb6:	17 c0       	rjmp	.+46     	; 0xfe6 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6e 81       	ldd	r22, Y+6	; 0x06
     fba:	7f 81       	ldd	r23, Y+7	; 0x07
     fbc:	88 85       	ldd	r24, Y+8	; 0x08
     fbe:	99 85       	ldd	r25, Y+9	; 0x09
     fc0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9b 87       	std	Y+11, r25	; 0x0b
     fca:	8a 87       	std	Y+10, r24	; 0x0a
     fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fce:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd0:	9f 87       	std	Y+15, r25	; 0x0f
     fd2:	8e 87       	std	Y+14, r24	; 0x0e
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd8:	8c 01       	movw	r16, r24
     fda:	f8 01       	movw	r30, r16
     fdc:	31 97       	sbiw	r30, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <lcd_wr_command+0x176>
     fe0:	8f 01       	movw	r16, r30
     fe2:	1f 87       	std	Y+15, r17	; 0x0f
     fe4:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe6:	88 e2       	ldi	r24, 0x28	; 40
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	28 e2       	ldi	r18, 0x28	; 40
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	2b 7f       	andi	r18, 0xFB	; 251
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	8f 70       	andi	r24, 0x0F	; 15
     ffc:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     ffe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1000:	82 95       	swap	r24
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	28 e2       	ldi	r18, 0x28	; 40
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2f 70       	andi	r18, 0x0F	; 15
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	28 e2       	ldi	r18, 0x28	; 40
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	30 81       	ld	r19, Z
    1024:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1026:	23 2b       	or	r18, r19
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 e2       	ldi	r18, 0x28	; 40
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	2e 7f       	andi	r18, 0xFE	; 254
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    103e:	88 e2       	ldi	r24, 0x28	; 40
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	28 e2       	ldi	r18, 0x28	; 40
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	2d 7f       	andi	r18, 0xFD	; 253
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1050:	88 e2       	ldi	r24, 0x28	; 40
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	28 e2       	ldi	r18, 0x28	; 40
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	24 60       	ori	r18, 0x04	; 4
    105e:	fc 01       	movw	r30, r24
    1060:	20 83       	st	Z, r18
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 ea       	ldi	r26, 0xA0	; 160
    1068:	b0 e4       	ldi	r27, 0x40	; 64
    106a:	88 8b       	std	Y+16, r24	; 0x10
    106c:	99 8b       	std	Y+17, r25	; 0x11
    106e:	aa 8b       	std	Y+18, r26	; 0x12
    1070:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1072:	68 89       	ldd	r22, Y+16	; 0x10
    1074:	79 89       	ldd	r23, Y+17	; 0x11
    1076:	8a 89       	ldd	r24, Y+18	; 0x12
    1078:	9b 89       	ldd	r25, Y+19	; 0x13
    107a:	26 e6       	ldi	r18, 0x66	; 102
    107c:	36 e6       	ldi	r19, 0x66	; 102
    107e:	46 e6       	ldi	r20, 0x66	; 102
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8c 8b       	std	Y+20, r24	; 0x14
    108c:	9d 8b       	std	Y+21, r25	; 0x15
    108e:	ae 8b       	std	Y+22, r26	; 0x16
    1090:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1092:	11 e0       	ldi	r17, 0x01	; 1
    1094:	6c 89       	ldd	r22, Y+20	; 0x14
    1096:	7d 89       	ldd	r23, Y+21	; 0x15
    1098:	8e 89       	ldd	r24, Y+22	; 0x16
    109a:	9f 89       	ldd	r25, Y+23	; 0x17
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	0c f0       	brlt	.+2      	; 0x10ae <lcd_wr_command+0x248>
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	11 23       	and	r17, r17
    10b0:	29 f0       	breq	.+10     	; 0x10bc <lcd_wr_command+0x256>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	99 8f       	std	Y+25, r25	; 0x19
    10b8:	88 8f       	std	Y+24, r24	; 0x18
    10ba:	46 c0       	rjmp	.+140    	; 0x1148 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10bc:	11 e0       	ldi	r17, 0x01	; 1
    10be:	6c 89       	ldd	r22, Y+20	; 0x14
    10c0:	7d 89       	ldd	r23, Y+21	; 0x15
    10c2:	8e 89       	ldd	r24, Y+22	; 0x16
    10c4:	9f 89       	ldd	r25, Y+23	; 0x17
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <lcd_wr_command+0x272>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	11 23       	and	r17, r17
    10da:	61 f1       	breq	.+88     	; 0x1134 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	68 89       	ldd	r22, Y+16	; 0x10
    10de:	79 89       	ldd	r23, Y+17	; 0x11
    10e0:	8a 89       	ldd	r24, Y+18	; 0x12
    10e2:	9b 89       	ldd	r25, Y+19	; 0x13
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	99 8f       	std	Y+25, r25	; 0x19
    1102:	88 8f       	std	Y+24, r24	; 0x18
    1104:	12 c0       	rjmp	.+36     	; 0x112a <lcd_wr_command+0x2c4>
    1106:	80 e7       	ldi	r24, 0x70	; 112
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	9b 8f       	std	Y+27, r25	; 0x1b
    110c:	8a 8f       	std	Y+26, r24	; 0x1a
    110e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1110:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1112:	8c 01       	movw	r16, r24
    1114:	c8 01       	movw	r24, r16
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <lcd_wr_command+0x2b0>
    111a:	8c 01       	movw	r16, r24
    111c:	1b 8f       	std	Y+27, r17	; 0x1b
    111e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	99 8f       	std	Y+25, r25	; 0x19
    1128:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	88 8d       	ldd	r24, Y+24	; 0x18
    112c:	99 8d       	ldd	r25, Y+25	; 0x19
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	51 f7       	brne	.-44     	; 0x1106 <lcd_wr_command+0x2a0>
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	6c 89       	ldd	r22, Y+20	; 0x14
    1136:	7d 89       	ldd	r23, Y+21	; 0x15
    1138:	8e 89       	ldd	r24, Y+22	; 0x16
    113a:	9f 89       	ldd	r25, Y+23	; 0x17
    113c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	99 8f       	std	Y+25, r25	; 0x19
    1146:	88 8f       	std	Y+24, r24	; 0x18
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	99 8d       	ldd	r25, Y+25	; 0x19
    114c:	9d 8f       	std	Y+29, r25	; 0x1d
    114e:	8c 8f       	std	Y+28, r24	; 0x1c
    1150:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1152:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1154:	8c 01       	movw	r16, r24
    1156:	f8 01       	movw	r30, r16
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <lcd_wr_command+0x2f2>
    115c:	8f 01       	movw	r16, r30
    115e:	1d 8f       	std	Y+29, r17	; 0x1d
    1160:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1162:	88 e2       	ldi	r24, 0x28	; 40
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	28 e2       	ldi	r18, 0x28	; 40
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	2b 7f       	andi	r18, 0xFB	; 251
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
}
    1174:	6e 96       	adiw	r28, 0x1e	; 30
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6e 97       	sbiw	r28, 0x1e	; 30
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a6:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	80 7f       	andi	r24, 0xF0	; 240
    11ac:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11ae:	88 e2       	ldi	r24, 0x28	; 40
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 e2       	ldi	r18, 0x28	; 40
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	2f 70       	andi	r18, 0x0F	; 15
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
	lcd_port |= temp;
    11c0:	88 e2       	ldi	r24, 0x28	; 40
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	28 e2       	ldi	r18, 0x28	; 40
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	30 81       	ld	r19, Z
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	23 2b       	or	r18, r19
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    11d4:	88 e2       	ldi	r24, 0x28	; 40
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	28 e2       	ldi	r18, 0x28	; 40
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	21 60       	ori	r18, 0x01	; 1
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    11e6:	88 e2       	ldi	r24, 0x28	; 40
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	28 e2       	ldi	r18, 0x28	; 40
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	2d 7f       	andi	r18, 0xFD	; 253
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    11f8:	88 e2       	ldi	r24, 0x28	; 40
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	28 e2       	ldi	r18, 0x28	; 40
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	24 60       	ori	r18, 0x04	; 4
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 ea       	ldi	r26, 0xA0	; 160
    1210:	b0 e4       	ldi	r27, 0x40	; 64
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	9b 83       	std	Y+3, r25	; 0x03
    1216:	ac 83       	std	Y+4, r26	; 0x04
    1218:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	7b 81       	ldd	r23, Y+3	; 0x03
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	26 e6       	ldi	r18, 0x66	; 102
    1224:	36 e6       	ldi	r19, 0x66	; 102
    1226:	46 e6       	ldi	r20, 0x66	; 102
    1228:	55 e4       	ldi	r21, 0x45	; 69
    122a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 83       	std	Y+6, r24	; 0x06
    1234:	9f 83       	std	Y+7, r25	; 0x07
    1236:	a8 87       	std	Y+8, r26	; 0x08
    1238:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    123a:	11 e0       	ldi	r17, 0x01	; 1
    123c:	6e 81       	ldd	r22, Y+6	; 0x06
    123e:	7f 81       	ldd	r23, Y+7	; 0x07
    1240:	88 85       	ldd	r24, Y+8	; 0x08
    1242:	99 85       	ldd	r25, Y+9	; 0x09
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    1250:	88 23       	and	r24, r24
    1252:	0c f0       	brlt	.+2      	; 0x1256 <lcd_wr_char+0xcc>
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	11 23       	and	r17, r17
    1258:	29 f0       	breq	.+10     	; 0x1264 <lcd_wr_char+0xda>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9b 87       	std	Y+11, r25	; 0x0b
    1260:	8a 87       	std	Y+10, r24	; 0x0a
    1262:	46 c0       	rjmp	.+140    	; 0x12f0 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1264:	11 e0       	ldi	r17, 0x01	; 1
    1266:	6e 81       	ldd	r22, Y+6	; 0x06
    1268:	7f 81       	ldd	r23, Y+7	; 0x07
    126a:	88 85       	ldd	r24, Y+8	; 0x08
    126c:	99 85       	ldd	r25, Y+9	; 0x09
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <lcd_wr_char+0xf6>
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	11 23       	and	r17, r17
    1282:	61 f1       	breq	.+88     	; 0x12dc <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6a 81       	ldd	r22, Y+2	; 0x02
    1286:	7b 81       	ldd	r23, Y+3	; 0x03
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9b 87       	std	Y+11, r25	; 0x0b
    12aa:	8a 87       	std	Y+10, r24	; 0x0a
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <lcd_wr_char+0x148>
    12ae:	80 e7       	ldi	r24, 0x70	; 112
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	9d 87       	std	Y+13, r25	; 0x0d
    12b4:	8c 87       	std	Y+12, r24	; 0x0c
    12b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ba:	8c 01       	movw	r16, r24
    12bc:	c8 01       	movw	r24, r16
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <lcd_wr_char+0x134>
    12c2:	8c 01       	movw	r16, r24
    12c4:	1d 87       	std	Y+13, r17	; 0x0d
    12c6:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9b 87       	std	Y+11, r25	; 0x0b
    12d0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	51 f7       	brne	.-44     	; 0x12ae <lcd_wr_char+0x124>
    12da:	17 c0       	rjmp	.+46     	; 0x130a <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6e 81       	ldd	r22, Y+6	; 0x06
    12de:	7f 81       	ldd	r23, Y+7	; 0x07
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9b 87       	std	Y+11, r25	; 0x0b
    12ee:	8a 87       	std	Y+10, r24	; 0x0a
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f4:	9f 87       	std	Y+15, r25	; 0x0f
    12f6:	8e 87       	std	Y+14, r24	; 0x0e
    12f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    12fc:	8c 01       	movw	r16, r24
    12fe:	f8 01       	movw	r30, r16
    1300:	31 97       	sbiw	r30, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <lcd_wr_char+0x176>
    1304:	8f 01       	movw	r16, r30
    1306:	1f 87       	std	Y+15, r17	; 0x0f
    1308:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    130a:	88 e2       	ldi	r24, 0x28	; 40
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	28 e2       	ldi	r18, 0x28	; 40
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	2b 7f       	andi	r18, 0xFB	; 251
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	8f 70       	andi	r24, 0x0F	; 15
    1320:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1324:	82 95       	swap	r24
    1326:	80 7f       	andi	r24, 0xF0	; 240
    1328:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    132a:	88 e2       	ldi	r24, 0x28	; 40
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	28 e2       	ldi	r18, 0x28	; 40
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	f9 01       	movw	r30, r18
    1334:	20 81       	ld	r18, Z
    1336:	2f 70       	andi	r18, 0x0F	; 15
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
	lcd_port |= letter;
    133c:	88 e2       	ldi	r24, 0x28	; 40
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	28 e2       	ldi	r18, 0x28	; 40
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	30 81       	ld	r19, Z
    1348:	2e 8d       	ldd	r18, Y+30	; 0x1e
    134a:	23 2b       	or	r18, r19
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1350:	88 e2       	ldi	r24, 0x28	; 40
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	28 e2       	ldi	r18, 0x28	; 40
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	21 60       	ori	r18, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1362:	88 e2       	ldi	r24, 0x28	; 40
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	28 e2       	ldi	r18, 0x28	; 40
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f9 01       	movw	r30, r18
    136c:	20 81       	ld	r18, Z
    136e:	2d 7f       	andi	r18, 0xFD	; 253
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1374:	88 e2       	ldi	r24, 0x28	; 40
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	28 e2       	ldi	r18, 0x28	; 40
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	20 81       	ld	r18, Z
    1380:	24 60       	ori	r18, 0x04	; 4
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 ea       	ldi	r26, 0xA0	; 160
    138c:	b0 e4       	ldi	r27, 0x40	; 64
    138e:	88 8b       	std	Y+16, r24	; 0x10
    1390:	99 8b       	std	Y+17, r25	; 0x11
    1392:	aa 8b       	std	Y+18, r26	; 0x12
    1394:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1396:	68 89       	ldd	r22, Y+16	; 0x10
    1398:	79 89       	ldd	r23, Y+17	; 0x11
    139a:	8a 89       	ldd	r24, Y+18	; 0x12
    139c:	9b 89       	ldd	r25, Y+19	; 0x13
    139e:	26 e6       	ldi	r18, 0x66	; 102
    13a0:	36 e6       	ldi	r19, 0x66	; 102
    13a2:	46 e6       	ldi	r20, 0x66	; 102
    13a4:	55 e4       	ldi	r21, 0x45	; 69
    13a6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8c 8b       	std	Y+20, r24	; 0x14
    13b0:	9d 8b       	std	Y+21, r25	; 0x15
    13b2:	ae 8b       	std	Y+22, r26	; 0x16
    13b4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13b6:	11 e0       	ldi	r17, 0x01	; 1
    13b8:	6c 89       	ldd	r22, Y+20	; 0x14
    13ba:	7d 89       	ldd	r23, Y+21	; 0x15
    13bc:	8e 89       	ldd	r24, Y+22	; 0x16
    13be:	9f 89       	ldd	r25, Y+23	; 0x17
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <lcd_wr_char+0x248>
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	11 23       	and	r17, r17
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <lcd_wr_char+0x256>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	99 8f       	std	Y+25, r25	; 0x19
    13dc:	88 8f       	std	Y+24, r24	; 0x18
    13de:	46 c0       	rjmp	.+140    	; 0x146c <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e0:	11 e0       	ldi	r17, 0x01	; 1
    13e2:	6c 89       	ldd	r22, Y+20	; 0x14
    13e4:	7d 89       	ldd	r23, Y+21	; 0x15
    13e6:	8e 89       	ldd	r24, Y+22	; 0x16
    13e8:	9f 89       	ldd	r25, Y+23	; 0x17
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <lcd_wr_char+0x272>
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	11 23       	and	r17, r17
    13fe:	61 f1       	breq	.+88     	; 0x1458 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	68 89       	ldd	r22, Y+16	; 0x10
    1402:	79 89       	ldd	r23, Y+17	; 0x11
    1404:	8a 89       	ldd	r24, Y+18	; 0x12
    1406:	9b 89       	ldd	r25, Y+19	; 0x13
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	99 8f       	std	Y+25, r25	; 0x19
    1426:	88 8f       	std	Y+24, r24	; 0x18
    1428:	12 c0       	rjmp	.+36     	; 0x144e <lcd_wr_char+0x2c4>
    142a:	80 e7       	ldi	r24, 0x70	; 112
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	9b 8f       	std	Y+27, r25	; 0x1b
    1430:	8a 8f       	std	Y+26, r24	; 0x1a
    1432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1434:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1436:	8c 01       	movw	r16, r24
    1438:	c8 01       	movw	r24, r16
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <lcd_wr_char+0x2b0>
    143e:	8c 01       	movw	r16, r24
    1440:	1b 8f       	std	Y+27, r17	; 0x1b
    1442:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	88 8d       	ldd	r24, Y+24	; 0x18
    1446:	99 8d       	ldd	r25, Y+25	; 0x19
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	99 8f       	std	Y+25, r25	; 0x19
    144c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	88 8d       	ldd	r24, Y+24	; 0x18
    1450:	99 8d       	ldd	r25, Y+25	; 0x19
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	51 f7       	brne	.-44     	; 0x142a <lcd_wr_char+0x2a0>
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6c 89       	ldd	r22, Y+20	; 0x14
    145a:	7d 89       	ldd	r23, Y+21	; 0x15
    145c:	8e 89       	ldd	r24, Y+22	; 0x16
    145e:	9f 89       	ldd	r25, Y+23	; 0x17
    1460:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	99 8f       	std	Y+25, r25	; 0x19
    146a:	88 8f       	std	Y+24, r24	; 0x18
    146c:	88 8d       	ldd	r24, Y+24	; 0x18
    146e:	99 8d       	ldd	r25, Y+25	; 0x19
    1470:	9d 8f       	std	Y+29, r25	; 0x1d
    1472:	8c 8f       	std	Y+28, r24	; 0x1c
    1474:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1476:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1478:	8c 01       	movw	r16, r24
    147a:	f8 01       	movw	r30, r16
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <lcd_wr_char+0x2f2>
    1480:	8f 01       	movw	r16, r30
    1482:	1d 8f       	std	Y+29, r17	; 0x1d
    1484:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1486:	88 e2       	ldi	r24, 0x28	; 40
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	28 e2       	ldi	r18, 0x28	; 40
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	2b 7f       	andi	r18, 0xFB	; 251
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
}
    1498:	6e 96       	adiw	r28, 0x1e	; 30
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	0f 92       	push	r0
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		str++;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	79 f7       	brne	.-34     	; 0x14d4 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	0f 92       	push	r0
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	99 f0       	breq	.+38     	; 0x1542 <lcd_cursor+0x42>
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	24 f4       	brge	.+8      	; 0x152a <lcd_cursor+0x2a>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	41 f0       	breq	.+16     	; 0x1538 <lcd_cursor+0x38>
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <lcd_cursor+0x60>
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	71 f0       	breq	.+28     	; 0x154c <lcd_cursor+0x4c>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <lcd_cursor+0x56>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	81 58       	subi	r24, 0x81	; 129
    153c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	81 54       	subi	r24, 0x41	; 65
    1546:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	8d 56       	subi	r24, 0x6D	; 109
    1550:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	8d 52       	subi	r24, 0x2D	; 45
    155a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <lcd_cursor+0x62>
		default: break;
    1560:	00 00       	nop
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	27 97       	sbiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
    1584:	5d 83       	std	Y+5, r21	; 0x05
    1586:	4c 83       	std	Y+4, r20	; 0x04
    1588:	3f 83       	std	Y+7, r19	; 0x07
    158a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    158c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <lcd_print+0x2e>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 23       	and	r24, r24
    1598:	19 f4       	brne	.+6      	; 0x15a0 <lcd_print+0x34>
	{
		lcd_home();
    159a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <lcd_home>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	6b 81       	ldd	r22, Y+3	; 0x03
    15a4:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	91 05       	cpc	r25, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <lcd_print+0x4c>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	b1 f4       	brne	.+44     	; 0x15e4 <lcd_print+0x78>
	{
		million=value/10000+48;
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	20 e1       	ldi	r18, 0x10	; 16
    15be:	37 e2       	ldi	r19, 0x27	; 39
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    15c6:	9b 01       	movw	r18, r22
    15c8:	c9 01       	movw	r24, r18
    15ca:	c0 96       	adiw	r24, 0x30	; 48
    15cc:	90 93 85 04 	sts	0x0485, r25
    15d0:	80 93 84 04 	sts	0x0484, r24
		lcd_wr_char(million);
    15d4:	80 91 84 04 	lds	r24, 0x0484
    15d8:	90 91 85 04 	lds	r25, 0x0485
    15dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	91 05       	cpc	r25, r1
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <lcd_print+0x88>
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	19 f5       	brne	.+70     	; 0x163a <lcd_print+0xce>
	{
		temp = value/1000;
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	28 ee       	ldi	r18, 0xE8	; 232
    15fa:	33 e0       	ldi	r19, 0x03	; 3
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    1602:	9b 01       	movw	r18, r22
    1604:	c9 01       	movw	r24, r18
    1606:	90 93 87 04 	sts	0x0487, r25
    160a:	80 93 86 04 	sts	0x0486, r24
		thousand = temp%10 + 48;
    160e:	80 91 86 04 	lds	r24, 0x0486
    1612:	90 91 87 04 	lds	r25, 0x0487
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	b9 01       	movw	r22, r18
    161c:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    1620:	c0 96       	adiw	r24, 0x30	; 48
    1622:	90 93 94 04 	sts	0x0494, r25
    1626:	80 93 93 04 	sts	0x0493, r24
		lcd_wr_char(thousand);
    162a:	80 91 93 04 	lds	r24, 0x0493
    162e:	90 91 94 04 	lds	r25, 0x0494
    1632:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	19 f0       	breq	.+6      	; 0x164a <lcd_print+0xde>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	19 f5       	brne	.+70     	; 0x1690 <lcd_print+0x124>
	{
		temp = value/100;
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	24 e6       	ldi	r18, 0x64	; 100
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	b9 01       	movw	r22, r18
    1654:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    1658:	9b 01       	movw	r18, r22
    165a:	c9 01       	movw	r24, r18
    165c:	90 93 87 04 	sts	0x0487, r25
    1660:	80 93 86 04 	sts	0x0486, r24
		hundred = temp%10 + 48;
    1664:	80 91 86 04 	lds	r24, 0x0486
    1668:	90 91 87 04 	lds	r25, 0x0487
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	b9 01       	movw	r22, r18
    1672:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    1676:	c0 96       	adiw	r24, 0x30	; 48
    1678:	90 93 90 04 	sts	0x0490, r25
    167c:	80 93 8f 04 	sts	0x048F, r24
		lcd_wr_char(hundred);
    1680:	80 91 8f 04 	lds	r24, 0x048F
    1684:	90 91 90 04 	lds	r25, 0x0490
    1688:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	19 f0       	breq	.+6      	; 0x16a0 <lcd_print+0x134>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	19 f5       	brne	.+70     	; 0x16e6 <lcd_print+0x17a>
	{
		temp = value/10;
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	2a e0       	ldi	r18, 0x0A	; 10
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    16ae:	9b 01       	movw	r18, r22
    16b0:	c9 01       	movw	r24, r18
    16b2:	90 93 87 04 	sts	0x0487, r25
    16b6:	80 93 86 04 	sts	0x0486, r24
		tens = temp%10 + 48;
    16ba:	80 91 86 04 	lds	r24, 0x0486
    16be:	90 91 87 04 	lds	r25, 0x0487
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    16cc:	c0 96       	adiw	r24, 0x30	; 48
    16ce:	90 93 8e 04 	sts	0x048E, r25
    16d2:	80 93 8d 04 	sts	0x048D, r24
		lcd_wr_char(tens);
    16d6:	80 91 8d 04 	lds	r24, 0x048D
    16da:	90 91 8e 04 	lds	r25, 0x048E
    16de:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <lcd_print+0x18a>
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 f4       	brne	.+36     	; 0x171a <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	b9 01       	movw	r22, r18
    1700:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__udivmodhi4>
    1704:	c0 96       	adiw	r24, 0x30	; 48
    1706:	90 93 92 04 	sts	0x0492, r25
    170a:	80 93 91 04 	sts	0x0491, r24
		lcd_wr_char(unit);
    170e:	80 91 91 04 	lds	r24, 0x0491
    1712:	90 91 92 04 	lds	r25, 0x0492
    1716:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	if(digits>5)
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	86 30       	cpi	r24, 0x06	; 6
    1720:	91 05       	cpc	r25, r1
    1722:	1c f0       	brlt	.+6      	; 0x172a <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1724:	85 e4       	ldi	r24, 0x45	; 69
    1726:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	
}
    172a:	27 96       	adiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <lcd_port_config>:
unsigned char Center_white_line = 0;
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1744:	87 e2       	ldi	r24, 0x27	; 39
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	27 e2       	ldi	r18, 0x27	; 39
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	27 6f       	ori	r18, 0xF7	; 247
    1752:	fc 01       	movw	r30, r24
    1754:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1756:	88 e2       	ldi	r24, 0x28	; 40
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	28 e2       	ldi	r18, 0x28	; 40
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	20 78       	andi	r18, 0x80	; 128
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	fc 01       	movw	r30, r24
    177c:	10 82       	st	Z, r1
 PORTF = 0x00;
    177e:	81 e3       	ldi	r24, 0x31	; 49
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	fc 01       	movw	r30, r24
    1784:	10 82       	st	Z, r1
 DDRK = 0x00;
    1786:	87 e0       	ldi	r24, 0x07	; 7
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	fc 01       	movw	r30, r24
    178c:	10 82       	st	Z, r1
 PORTK = 0x00;
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	fc 01       	movw	r30, r24
    1794:	10 82       	st	Z, r1
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    17a4:	87 e2       	ldi	r24, 0x27	; 39
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	27 e2       	ldi	r18, 0x27	; 39
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	28 60       	ori	r18, 0x08	; 8
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    17b6:	88 e2       	ldi	r24, 0x28	; 40
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	28 e2       	ldi	r18, 0x28	; 40
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	20 81       	ld	r18, Z
    17c2:	27 7f       	andi	r18, 0xF7	; 247
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <left_encoder_pin_config>:



//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17d6:	8d e2       	ldi	r24, 0x2D	; 45
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2d e2       	ldi	r18, 0x2D	; 45
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	2f 7e       	andi	r18, 0xEF	; 239
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17e8:	8e e2       	ldi	r24, 0x2E	; 46
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	2e e2       	ldi	r18, 0x2E	; 46
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	f9 01       	movw	r30, r18
    17f2:	20 81       	ld	r18, Z
    17f4:	20 61       	ori	r18, 0x10	; 16
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 83       	st	Z, r18
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1808:	8d e2       	ldi	r24, 0x2D	; 45
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	2d e2       	ldi	r18, 0x2D	; 45
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	2f 7d       	andi	r18, 0xDF	; 223
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    181a:	8e e2       	ldi	r24, 0x2E	; 46
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	2e e2       	ldi	r18, 0x2E	; 46
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	20 62       	ori	r18, 0x20	; 32
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    183a:	81 e2       	ldi	r24, 0x21	; 33
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	21 e2       	ldi	r18, 0x21	; 33
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	2f 60       	ori	r18, 0x0F	; 15
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    184c:	82 e2       	ldi	r24, 0x22	; 34
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	22 e2       	ldi	r18, 0x22	; 34
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	20 7f       	andi	r18, 0xF0	; 240
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    185e:	8a e0       	ldi	r24, 0x0A	; 10
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	28 61       	ori	r18, 0x18	; 24
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1870:	8b e0       	ldi	r24, 0x0B	; 11
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	2b e0       	ldi	r18, 0x0B	; 11
    1876:	31 e0       	ldi	r19, 0x01	; 1
    1878:	f9 01       	movw	r30, r18
    187a:	20 81       	ld	r18, Z
    187c:	28 61       	ori	r18, 0x18	; 24
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1890:	0e 94 9e 0b 	call	0x173c	; 0x173c <lcd_port_config>
	adc_pin_config();
    1894:	0e 94 b7 0b 	call	0x176e	; 0x176e <adc_pin_config>
	motion_pin_config();
    1898:	0e 94 19 0c 	call	0x1832	; 0x1832 <motion_pin_config>
	buzzer_pin_config();
    189c:	0e 94 ce 0b 	call	0x179c	; 0x179c <buzzer_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    18a0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <left_encoder_pin_config>
    right_encoder_pin_config(); //right encoder pin config		
    18a4:	0e 94 00 0c 	call	0x1800	; 0x1800 <right_encoder_pin_config>
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    18b6:	81 e2       	ldi	r24, 0x21	; 33
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	fc 01       	movw	r30, r24
    18bc:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    18be:	85 e2       	ldi	r24, 0x25	; 37
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	2f ef       	ldi	r18, 0xFF	; 255
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    18c8:	84 e2       	ldi	r24, 0x24	; 36
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    18d2:	89 e2       	ldi	r24, 0x29	; 41
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	fc 01       	movw	r30, r24
    18d8:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    18da:	88 e2       	ldi	r24, 0x28	; 40
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	2f ef       	ldi	r18, 0xFF	; 255
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    18e4:	8b e2       	ldi	r24, 0x2B	; 43
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	fc 01       	movw	r30, r24
    18ea:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    18ec:	8a e2       	ldi	r24, 0x2A	; 42
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	2f ef       	ldi	r18, 0xFF	; 255
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    18f6:	8d e2       	ldi	r24, 0x2D	; 45
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	fc 01       	movw	r30, r24
    18fc:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    18fe:	8c e2       	ldi	r24, 0x2C	; 44
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	2f ef       	ldi	r18, 0xFF	; 255
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	29 ea       	ldi	r18, 0xA9	; 169
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	2b e0       	ldi	r18, 0x0B	; 11
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <adc_init>:

void adc_init()
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    192a:	8a e7       	ldi	r24, 0x7A	; 122
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	fc 01       	movw	r30, r24
    1930:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1932:	8b e7       	ldi	r24, 0x7B	; 123
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    193a:	8c e7       	ldi	r24, 0x7C	; 124
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	20 e2       	ldi	r18, 0x20	; 32
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
	ACSR = 0x80;
    1944:	80 e5       	ldi	r24, 0x50	; 80
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	20 e8       	ldi	r18, 0x80	; 128
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    194e:	8a e7       	ldi	r24, 0x7A	; 122
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	26 e8       	ldi	r18, 0x86	; 134
    1954:	fc 01       	movw	r30, r24
    1956:	20 83       	st	Z, r18
}
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	0f 92       	push	r0
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	88 30       	cpi	r24, 0x08	; 8
    1970:	28 f0       	brcs	.+10     	; 0x197c <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    1972:	8b e7       	ldi	r24, 0x7B	; 123
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	28 e0       	ldi	r18, 0x08	; 8
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	87 70       	andi	r24, 0x07	; 7
    1980:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1982:	8c e7       	ldi	r24, 0x7C	; 124
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	2a 81       	ldd	r18, Y+2	; 0x02
    1988:	20 62       	ori	r18, 0x20	; 32
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    198e:	8a e7       	ldi	r24, 0x7A	; 122
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	2a e7       	ldi	r18, 0x7A	; 122
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	f9 01       	movw	r30, r18
    1998:	20 81       	ld	r18, Z
    199a:	20 64       	ori	r18, 0x40	; 64
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    19a0:	00 00       	nop
    19a2:	8a e7       	ldi	r24, 0x7A	; 122
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	80 71       	andi	r24, 0x10	; 16
    19b0:	90 70       	andi	r25, 0x00	; 0
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	b1 f3       	breq	.-20     	; 0x19a2 <ADC_Conversion+0x44>
	a=ADCH;
    19b6:	89 e7       	ldi	r24, 0x79	; 121
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    19c0:	8a e7       	ldi	r24, 0x7A	; 122
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	2a e7       	ldi	r18, 0x7A	; 122
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	f9 01       	movw	r30, r18
    19ca:	20 81       	ld	r18, Z
    19cc:	20 61       	ori	r18, 0x10	; 16
    19ce:	fc 01       	movw	r30, r24
    19d0:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    19d2:	8b e7       	ldi	r24, 0x7B	; 123
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	10 82       	st	Z, r1
	return a;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <buzzer_on>:


void buzzer_on (void)
{
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	0f 92       	push	r0
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    19f0:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    19f2:	86 e2       	ldi	r24, 0x26	; 38
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 60       	ori	r24, 0x08	; 8
    1a00:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1a02:	88 e2       	ldi	r24, 0x28	; 40
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	29 81       	ldd	r18, Y+1	; 0x01
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
}
    1a0c:	0f 90       	pop	r0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <buzzer_off>:

void buzzer_off (void)
{
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1a20:	86 e2       	ldi	r24, 0x26	; 38
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	fc 01       	movw	r30, r24
    1a26:	80 81       	ld	r24, Z
    1a28:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1a30:	88 e2       	ldi	r24, 0x28	; 40
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	29 81       	ldd	r18, Y+1	; 0x01
    1a36:	fc 01       	movw	r30, r24
    1a38:	20 83       	st	Z, r18
}
    1a3a:	0f 90       	pop	r0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <print_sensor>:


//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <print_sensor+0x6>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
    1a50:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	0e 94 af 0c 	call	0x195e	; 0x195e <ADC_Conversion>
    1a58:	80 93 88 04 	sts	0x0488, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1a5c:	80 91 88 04 	lds	r24, 0x0488
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	6a 81       	ldd	r22, Y+2	; 0x02
    1a68:	a9 01       	movw	r20, r18
    1a6a:	23 e0       	ldi	r18, 0x03	; 3
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret

00001a7e <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	0f 92       	push	r0
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1a8e:	88 e2       	ldi	r24, 0x28	; 40
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	29 81       	ldd	r18, Y+1	; 0x01
    1a94:	fc 01       	movw	r30, r24
    1a96:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1a98:	8a e2       	ldi	r24, 0x2A	; 42
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 83       	st	Z, r18
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	0f 92       	push	r0
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1aba:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	8f 70       	andi	r24, 0x0F	; 15
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1ac2:	82 e2       	ldi	r24, 0x22	; 34
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	80 7f       	andi	r24, 0xF0	; 240
    1ad0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	89 2b       	or	r24, r25
    1ad8:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1ada:	82 e2       	ldi	r24, 0x22	; 34
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	29 81       	ldd	r18, Y+1	; 0x01
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <forward>:

void forward (void) 
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1af6:	86 e0       	ldi	r24, 0x06	; 6
    1af8:	0e 94 56 0d 	call	0x1aac	; 0x1aac <motion_set>
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <motion_set>
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1b1e:	8a e0       	ldi	r24, 0x0A	; 10
    1b20:	0e 94 56 0d 	call	0x1aac	; 0x1aac <motion_set>
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1b32:	85 e0       	ldi	r24, 0x05	; 5
    1b34:	0e 94 56 0d 	call	0x1aac	; 0x1aac <motion_set>
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <stop>:


void stop (void)
{
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 56 0d 	call	0x1aac	; 0x1aac <motion_set>
}
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1b5a:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1b5c:	8a e6       	ldi	r24, 0x6A	; 106
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	2a e6       	ldi	r18, 0x6A	; 106
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	f9 01       	movw	r30, r18
    1b66:	20 81       	ld	r18, Z
    1b68:	22 60       	ori	r18, 0x02	; 2
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1b6e:	8d e3       	ldi	r24, 0x3D	; 61
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	2d e3       	ldi	r18, 0x3D	; 61
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	f9 01       	movw	r30, r18
    1b78:	20 81       	ld	r18, Z
    1b7a:	20 61       	ori	r18, 0x10	; 16
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
 sei();   // Enables the global interrupt 
    1b80:	78 94       	sei
}
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1b90:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1b92:	8a e6       	ldi	r24, 0x6A	; 106
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	2a e6       	ldi	r18, 0x6A	; 106
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	28 60       	ori	r18, 0x08	; 8
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1ba4:	8d e3       	ldi	r24, 0x3D	; 61
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	2d e3       	ldi	r18, 0x3D	; 61
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	f9 01       	movw	r30, r18
    1bae:	20 81       	ld	r18, Z
    1bb0:	20 62       	ori	r18, 0x20	; 32
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	20 83       	st	Z, r18
 sei();   // Enables the global interrupt 
    1bb6:	78 94       	sei
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	8f 93       	push	r24
    1bca:	9f 93       	push	r25
    1bcc:	af 93       	push	r26
    1bce:	bf 93       	push	r27
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    1bd8:	80 91 7a 04 	lds	r24, 0x047A
    1bdc:	90 91 7b 04 	lds	r25, 0x047B
    1be0:	a0 91 7c 04 	lds	r26, 0x047C
    1be4:	b0 91 7d 04 	lds	r27, 0x047D
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	a1 1d       	adc	r26, r1
    1bec:	b1 1d       	adc	r27, r1
    1bee:	80 93 7a 04 	sts	0x047A, r24
    1bf2:	90 93 7b 04 	sts	0x047B, r25
    1bf6:	a0 93 7c 04 	sts	0x047C, r26
    1bfa:	b0 93 7d 04 	sts	0x047D, r27
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	8f 93       	push	r24
    1c20:	9f 93       	push	r25
    1c22:	af 93       	push	r26
    1c24:	bf 93       	push	r27
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1c2e:	80 91 76 04 	lds	r24, 0x0476
    1c32:	90 91 77 04 	lds	r25, 0x0477
    1c36:	a0 91 78 04 	lds	r26, 0x0478
    1c3a:	b0 91 79 04 	lds	r27, 0x0479
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	a1 1d       	adc	r26, r1
    1c42:	b1 1d       	adc	r27, r1
    1c44:	80 93 76 04 	sts	0x0476, r24
    1c48:	90 93 77 04 	sts	0x0477, r25
    1c4c:	a0 93 78 04 	sts	0x0478, r26
    1c50:	b0 93 79 04 	sts	0x0479, r27
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	bf 91       	pop	r27
    1c5a:	af 91       	pop	r26
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti

00001c6a <angle_rotate>:
//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	2a 97       	sbiw	r28, 0x0a	; 10
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	9a 87       	std	Y+10, r25	; 0x0a
    1c80:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	dc 01       	movw	r26, r24
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	ab 83       	std	Y+3, r26	; 0x03
    1c8e:	bc 83       	std	Y+4, r27	; 0x04
 unsigned long int ReqdShaftCountInt = 0;
    1c90:	1d 82       	std	Y+5, r1	; 0x05
    1c92:	1e 82       	std	Y+6, r1	; 0x06
    1c94:	1f 82       	std	Y+7, r1	; 0x07
    1c96:	18 86       	std	Y+8, r1	; 0x08

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	cc 01       	movw	r24, r24
    1c9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <__floatunsisf>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	28 e4       	ldi	r18, 0x48	; 72
    1cb4:	31 ee       	ldi	r19, 0xE1	; 225
    1cb6:	42 e8       	ldi	r20, 0x82	; 130
    1cb8:	50 e4       	ldi	r21, 0x40	; 64
    1cba:	0e 94 55 34 	call	0x68aa	; 0x68aa <__divsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	ab 83       	std	Y+3, r26	; 0x03
    1cc8:	bc 83       	std	Y+4, r27	; 0x04
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1cca:	69 81       	ldd	r22, Y+1	; 0x01
    1ccc:	7a 81       	ldd	r23, Y+2	; 0x02
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	cc 01       	movw	r24, r24
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	af 83       	std	Y+7, r26	; 0x07
    1ce6:	b8 87       	std	Y+8, r27	; 0x08
 ShaftCountRight = 0; 
    1ce8:	10 92 7a 04 	sts	0x047A, r1
    1cec:	10 92 7b 04 	sts	0x047B, r1
    1cf0:	10 92 7c 04 	sts	0x047C, r1
    1cf4:	10 92 7d 04 	sts	0x047D, r1
 ShaftCountLeft = 0; 
    1cf8:	10 92 76 04 	sts	0x0476, r1
    1cfc:	10 92 77 04 	sts	0x0477, r1
    1d00:	10 92 78 04 	sts	0x0478, r1
    1d04:	10 92 79 04 	sts	0x0479, r1
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <angle_rotate+0xa2>

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
    1d0a:	00 00       	nop
 ShaftCountRight = 0; 
 ShaftCountLeft = 0; 

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1d0c:	20 91 7a 04 	lds	r18, 0x047A
    1d10:	30 91 7b 04 	lds	r19, 0x047B
    1d14:	40 91 7c 04 	lds	r20, 0x047C
    1d18:	50 91 7d 04 	lds	r21, 0x047D
    1d1c:	71 e0       	ldi	r23, 0x01	; 1
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	af 81       	ldd	r26, Y+7	; 0x07
    1d24:	b8 85       	ldd	r27, Y+8	; 0x08
    1d26:	28 17       	cp	r18, r24
    1d28:	39 07       	cpc	r19, r25
    1d2a:	4a 07       	cpc	r20, r26
    1d2c:	5b 07       	cpc	r21, r27
    1d2e:	08 f4       	brcc	.+2      	; 0x1d32 <angle_rotate+0xc8>
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	20 91 76 04 	lds	r18, 0x0476
    1d36:	30 91 77 04 	lds	r19, 0x0477
    1d3a:	40 91 78 04 	lds	r20, 0x0478
    1d3e:	50 91 79 04 	lds	r21, 0x0479
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	af 81       	ldd	r26, Y+7	; 0x07
    1d4a:	b8 85       	ldd	r27, Y+8	; 0x08
    1d4c:	28 17       	cp	r18, r24
    1d4e:	39 07       	cpc	r19, r25
    1d50:	4a 07       	cpc	r20, r26
    1d52:	5b 07       	cpc	r21, r27
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <angle_rotate+0xee>
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	87 2f       	mov	r24, r23
    1d5a:	86 2b       	or	r24, r22
    1d5c:	88 23       	and	r24, r24
    1d5e:	a9 f2       	breq	.-86     	; 0x1d0a <angle_rotate+0xa0>
  break;
    1d60:	00 00       	nop
 }
 stop(); //Stop robot
    1d62:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <stop>
}
    1d66:	2a 96       	adiw	r28, 0x0a	; 10
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	08 95       	ret

00001d78 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	0f 92       	push	r0
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1d88:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <left>
 angle_rotate(Degrees);
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <angle_rotate>
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	0f 92       	push	r0
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1dae:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <right>
 angle_rotate(Degrees);
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <angle_rotate>
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <linear_distance_mm>:

void linear_distance_mm(unsigned int DistanceInMM)
{
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	2a 97       	sbiw	r28, 0x0a	; 10
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	9a 87       	std	Y+10, r25	; 0x0a
    1dda:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	dc 01       	movw	r26, r24
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	ab 83       	std	Y+3, r26	; 0x03
    1de8:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1dea:	1d 82       	std	Y+5, r1	; 0x05
    1dec:	1e 82       	std	Y+6, r1	; 0x06
    1dee:	1f 82       	std	Y+7, r1	; 0x07
    1df0:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	cc 01       	movw	r24, r24
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <__floatunsisf>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	25 ee       	ldi	r18, 0xE5	; 229
    1e0e:	30 ed       	ldi	r19, 0xD0	; 208
    1e10:	4a ea       	ldi	r20, 0xAA	; 170
    1e12:	50 e4       	ldi	r21, 0x40	; 64
    1e14:	0e 94 55 34 	call	0x68aa	; 0x68aa <__divsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	ab 83       	std	Y+3, r26	; 0x03
    1e22:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1e24:	69 81       	ldd	r22, Y+1	; 0x01
    1e26:	7a 81       	ldd	r23, Y+2	; 0x02
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	af 83       	std	Y+7, r26	; 0x07
    1e3a:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    1e3c:	10 92 7a 04 	sts	0x047A, r1
    1e40:	10 92 7b 04 	sts	0x047B, r1
    1e44:	10 92 7c 04 	sts	0x047C, r1
    1e48:	10 92 7d 04 	sts	0x047D, r1
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1e4e:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1e50:	20 91 7a 04 	lds	r18, 0x047A
    1e54:	30 91 7b 04 	lds	r19, 0x047B
    1e58:	40 91 7c 04 	lds	r20, 0x047C
    1e5c:	50 91 7d 04 	lds	r21, 0x047D
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	af 81       	ldd	r26, Y+7	; 0x07
    1e66:	b8 85       	ldd	r27, Y+8	; 0x08
    1e68:	82 17       	cp	r24, r18
    1e6a:	93 07       	cpc	r25, r19
    1e6c:	a4 07       	cpc	r26, r20
    1e6e:	b5 07       	cpc	r27, r21
    1e70:	70 f7       	brcc	.-36     	; 0x1e4e <linear_distance_mm+0x8a>
		{
			break;
    1e72:	00 00       	nop
		}
	}
	stop(); //Stop robot
    1e74:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <stop>
}
    1e78:	2a 96       	adiw	r28, 0x0a	; 10
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	0f 92       	push	r0
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
	forward();
    1e9a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
	linear_distance_mm(DistanceInMM);
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <linear_distance_mm>
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <init_devices>:
	linear_distance_mm(DistanceInMM);
}*/


void init_devices (void)
{
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    1eb8:	f8 94       	cli
	port_init();
    1eba:	0e 94 44 0c 	call	0x1888	; 0x1888 <port_init>
	adc_init();
    1ebe:	0e 94 91 0c 	call	0x1922	; 0x1922 <adc_init>
	timer5_init();
    1ec2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <timer5_init>
	left_position_encoder_interrupt_init();
    1ec6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <left_position_encoder_interrupt_init>
 	right_position_encoder_interrupt_init();
    1eca:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
    1ece:	78 94       	sei
}
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	08 95       	ret

00001ed6 <whitesensor>:


void whitesensor()
{
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	0e 94 af 0c 	call	0x195e	; 0x195e <ADC_Conversion>
    1ee4:	80 93 7f 04 	sts	0x047F, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	0e 94 af 0c 	call	0x195e	; 0x195e <ADC_Conversion>
    1eee:	80 93 80 04 	sts	0x0480, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	0e 94 af 0c 	call	0x195e	; 0x195e <ADC_Conversion>
    1ef8:	80 93 81 04 	sts	0x0481, r24
}
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <printlcd>:

void printlcd(int x,int y)
{
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <printlcd+0x6>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	7c 83       	std	Y+4, r23	; 0x04
    1f14:	6b 83       	std	Y+3, r22	; 0x03
	
	lcd_init();
    1f16:	0e 94 8b 06 	call	0xd16	; 0xd16 <lcd_init>
	if (x>=0)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	99 23       	and	r25, r25
    1f20:	4c f0       	brlt	.+18     	; 0x1f34 <printlcd+0x32>
	lcd_print(1,1,x,1);
    1f22:	29 81       	ldd	r18, Y+1	; 0x01
    1f24:	3a 81       	ldd	r19, Y+2	; 0x02
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	
	if(x<0)
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	99 23       	and	r25, r25
    1f3a:	c4 f4       	brge	.+48     	; 0x1f6c <printlcd+0x6a>
	{
		lcd_cursor(1,1);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
		lcd_string("-");
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <lcd_string>
		x=x*-1;
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	90 95       	com	r25
    1f52:	81 95       	neg	r24
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
		lcd_print(1,2,x,1);
    1f5a:	29 81       	ldd	r18, Y+1	; 0x01
    1f5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	a9 01       	movw	r20, r18
    1f64:	21 e0       	ldi	r18, 0x01	; 1
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	}
	
	if (y>=0)
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	99 23       	and	r25, r25
    1f72:	4c f0       	brlt	.+18     	; 0x1f86 <printlcd+0x84>
	lcd_print(1,4,y,1);
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	64 e0       	ldi	r22, 0x04	; 4
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	21 e0       	ldi	r18, 0x01	; 1
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	
	if(y<0)
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	99 23       	and	r25, r25
    1f8c:	c4 f4       	brge	.+48     	; 0x1fbe <printlcd+0xbc>
	{
		lcd_cursor(1,4);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	64 e0       	ldi	r22, 0x04	; 4
    1f92:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
		lcd_string("-");
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <lcd_string>
		y=y*-1;
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	90 95       	com	r25
    1fa4:	81 95       	neg	r24
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
		lcd_print(1,5,y,1);
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	65 e0       	ldi	r22, 0x05	; 5
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	21 e0       	ldi	r18, 0x01	; 1
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	08 95       	ret

00001fcc <linefollwer>:

int coor[2];
int count=1;

void linefollwer()
{
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <linefollwer+0xc>
				_delay_ms(100);		//delay
				buzzer_off();
				_delay_ms(100);    //delay
		}
		
	}
    1fd6:	00 00       	nop

void linefollwer()
{
	while(1)
	{
		whitesensor();
    1fd8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <whitesensor>
		flag=0;
    1fdc:	10 92 7e 04 	sts	0x047E, r1
	
	
		if(Center_white_line>16)
    1fe0:	80 91 80 04 	lds	r24, 0x0480
    1fe4:	81 31       	cpi	r24, 0x11	; 17
    1fe6:	48 f0       	brcs	.+18     	; 0x1ffa <linefollwer+0x2e>
		{
			
			flag=1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 7e 04 	sts	0x047E, r24
			forward();
    1fee:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
			velocity(140,140);
    1ff2:	8c e8       	ldi	r24, 0x8C	; 140
    1ff4:	6c e8       	ldi	r22, 0x8C	; 140
    1ff6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <velocity>
		}
		
		if((Left_white_line>16) && (flag==0))
    1ffa:	80 91 7f 04 	lds	r24, 0x047F
    1ffe:	81 31       	cpi	r24, 0x11	; 17
    2000:	68 f0       	brcs	.+26     	; 0x201c <linefollwer+0x50>
    2002:	80 91 7e 04 	lds	r24, 0x047E
    2006:	88 23       	and	r24, r24
    2008:	49 f4       	brne	.+18     	; 0x201c <linefollwer+0x50>
		{
			flag=1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	80 93 7e 04 	sts	0x047E, r24
			forward();
    2010:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
			velocity(50,130);
    2014:	82 e3       	ldi	r24, 0x32	; 50
    2016:	62 e8       	ldi	r22, 0x82	; 130
    2018:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <velocity>
		}

		if((Right_white_line>16) && (flag==0))
    201c:	80 91 81 04 	lds	r24, 0x0481
    2020:	81 31       	cpi	r24, 0x11	; 17
    2022:	68 f0       	brcs	.+26     	; 0x203e <linefollwer+0x72>
    2024:	80 91 7e 04 	lds	r24, 0x047E
    2028:	88 23       	and	r24, r24
    202a:	49 f4       	brne	.+18     	; 0x203e <linefollwer+0x72>
		{
			flag=1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	80 93 7e 04 	sts	0x047E, r24
			forward();
    2032:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
			velocity(130,50);
    2036:	82 e8       	ldi	r24, 0x82	; 130
    2038:	62 e3       	ldi	r22, 0x32	; 50
    203a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <velocity>
		}
		if(Center_white_line<16 && Left_white_line<16 && Right_white_line<16)
    203e:	80 91 80 04 	lds	r24, 0x0480
    2042:	80 31       	cpi	r24, 0x10	; 16
    2044:	70 f4       	brcc	.+28     	; 0x2062 <linefollwer+0x96>
    2046:	80 91 7f 04 	lds	r24, 0x047F
    204a:	80 31       	cpi	r24, 0x10	; 16
    204c:	50 f4       	brcc	.+20     	; 0x2062 <linefollwer+0x96>
    204e:	80 91 81 04 	lds	r24, 0x0481
    2052:	80 31       	cpi	r24, 0x10	; 16
    2054:	30 f4       	brcc	.+12     	; 0x2062 <linefollwer+0x96>
		{
			forward();
    2056:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
			velocity(140,140);
    205a:	8c e8       	ldi	r24, 0x8C	; 140
    205c:	6c e8       	ldi	r22, 0x8C	; 140
    205e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <velocity>
		}
		
		if((Center_white_line>16 && Left_white_line>16) || (Center_white_line>16 && Right_white_line>16))
    2062:	80 91 80 04 	lds	r24, 0x0480
    2066:	81 31       	cpi	r24, 0x11	; 17
    2068:	20 f0       	brcs	.+8      	; 0x2072 <linefollwer+0xa6>
    206a:	80 91 7f 04 	lds	r24, 0x047F
    206e:	81 31       	cpi	r24, 0x11	; 17
    2070:	50 f4       	brcc	.+20     	; 0x2086 <linefollwer+0xba>
    2072:	80 91 80 04 	lds	r24, 0x0480
    2076:	81 31       	cpi	r24, 0x11	; 17
    2078:	08 f4       	brcc	.+2      	; 0x207c <linefollwer+0xb0>
    207a:	ad cf       	rjmp	.-166    	; 0x1fd6 <linefollwer+0xa>
    207c:	80 91 81 04 	lds	r24, 0x0481
    2080:	81 31       	cpi	r24, 0x11	; 17
    2082:	08 f4       	brcc	.+2      	; 0x2086 <linefollwer+0xba>
    2084:	a8 cf       	rjmp	.-176    	; 0x1fd6 <linefollwer+0xa>
		{
			    forward_mm(80);
    2086:	80 e5       	ldi	r24, 0x50	; 80
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <forward_mm>
				stop();
    208e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <stop>
				printlcd(coor[0],coor[1]);
    2092:	80 91 89 04 	lds	r24, 0x0489
    2096:	90 91 8a 04 	lds	r25, 0x048A
    209a:	20 91 8b 04 	lds	r18, 0x048B
    209e:	30 91 8c 04 	lds	r19, 0x048C
    20a2:	b9 01       	movw	r22, r18
    20a4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <printlcd>
				break;
    20a8:	00 00       	nop
				buzzer_off();
				_delay_ms(100);    //delay
		}
		
	}
}
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	08 95       	ret

000020b0 <main>:


//Main Function
int main()
{   
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	c2 5b       	subi	r28, 0xB2	; 178
    20be:	d4 40       	sbci	r29, 0x04	; 4
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    20ca:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <init_devices>
	lcd_set_4bit();
    20ce:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
    int origin1[12][4][2]=
    20d2:	ce 01       	movw	r24, r28
    20d4:	83 5d       	subi	r24, 0xD3	; 211
    20d6:	9d 4f       	sbci	r25, 0xFD	; 253
    20d8:	24 e0       	ldi	r18, 0x04	; 4
    20da:	32 e0       	ldi	r19, 0x02	; 2
    20dc:	40 ec       	ldi	r20, 0xC0	; 192
    20de:	f9 01       	movw	r30, r18
    20e0:	00 80       	ld	r0, Z
    20e2:	2f 5f       	subi	r18, 0xFF	; 255
    20e4:	3f 4f       	sbci	r19, 0xFF	; 255
    20e6:	fc 01       	movw	r30, r24
    20e8:	00 82       	st	Z, r0
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	41 50       	subi	r20, 0x01	; 1
    20ee:	44 23       	and	r20, r20
    20f0:	b1 f7       	brne	.-20     	; 0x20de <main+0x2e>
	   {{-2,3},{-1,3},{-2,2},{-1,2}},
	   {{-2,2},{-1,2},{-2,1},{-1,1}},
	   {{-2,1},{-1,1},{-2,0},{-1,0}},	   	   	   	   	   	   	         
	};
	
	int origin2[24][4][2]=
    20f2:	ce 01       	movw	r24, r28
    20f4:	83 51       	subi	r24, 0x13	; 19
    20f6:	9d 4f       	sbci	r25, 0xFD	; 253
    20f8:	9c 01       	movw	r18, r24
    20fa:	44 ec       	ldi	r20, 0xC4	; 196
    20fc:	52 e0       	ldi	r21, 0x02	; 2
    20fe:	80 e8       	ldi	r24, 0x80	; 128
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	fa 01       	movw	r30, r20
    2104:	00 80       	ld	r0, Z
    2106:	4f 5f       	subi	r20, 0xFF	; 255
    2108:	5f 4f       	sbci	r21, 0xFF	; 255
    210a:	f9 01       	movw	r30, r18
    210c:	00 82       	st	Z, r0
    210e:	2f 5f       	subi	r18, 0xFF	; 255
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	a9 f7       	brne	.-22     	; 0x2102 <main+0x52>
		{{2,0},{3,0},{2,1},{3,1}},
		{{2,1},{3,1},{2,2},{3,2}},
		{{2,2},{3,2},{2,3},{3,3}},
		{{2,4},{3,4},{2,3},{3,3}},																							
	};
	coor[0]=-2;
    2118:	8e ef       	ldi	r24, 0xFE	; 254
    211a:	9f ef       	ldi	r25, 0xFF	; 255
    211c:	90 93 8a 04 	sts	0x048A, r25
    2120:	80 93 89 04 	sts	0x0489, r24
	coor[1]=2;
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	90 93 8c 04 	sts	0x048C, r25
    212c:	80 93 8b 04 	sts	0x048B, r24
	int flag1=1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		whitesensor();
    2138:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <whitesensor>
		if((Center_white_line>16 && Left_white_line>16) || (Center_white_line>16 && Right_white_line>16))
    213c:	80 91 80 04 	lds	r24, 0x0480
    2140:	81 31       	cpi	r24, 0x11	; 17
    2142:	20 f0       	brcs	.+8      	; 0x214c <main+0x9c>
    2144:	80 91 7f 04 	lds	r24, 0x047F
    2148:	81 31       	cpi	r24, 0x11	; 17
    214a:	40 f4       	brcc	.+16     	; 0x215c <main+0xac>
    214c:	80 91 80 04 	lds	r24, 0x0480
    2150:	81 31       	cpi	r24, 0x11	; 17
    2152:	58 f0       	brcs	.+22     	; 0x216a <main+0xba>
    2154:	80 91 81 04 	lds	r24, 0x0481
    2158:	81 31       	cpi	r24, 0x11	; 17
    215a:	38 f0       	brcs	.+14     	; 0x216a <main+0xba>
		{
			forward();
    215c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <forward>
			velocity(140,140);
    2160:	8c e8       	ldi	r24, 0x8C	; 140
    2162:	6c e8       	ldi	r22, 0x8C	; 140
    2164:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <velocity>
		}
		else
		{
			break;
		}
	}		
    2168:	e7 cf       	rjmp	.-50     	; 0x2138 <main+0x88>
	linefollwer();
    216a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
	int compass=6;
    216e:	86 e0       	ldi	r24, 0x06	; 6
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int D1[12]={0,3,5,8,6,4,3,1,6,1,2,4};
    2176:	ce 01       	movw	r24, r28
    2178:	83 59       	subi	r24, 0x93	; 147
    217a:	9b 4f       	sbci	r25, 0xFB	; 251
    217c:	24 e4       	ldi	r18, 0x44	; 68
    217e:	34 e0       	ldi	r19, 0x04	; 4
    2180:	48 e1       	ldi	r20, 0x18	; 24
    2182:	f9 01       	movw	r30, r18
    2184:	00 80       	ld	r0, Z
    2186:	2f 5f       	subi	r18, 0xFF	; 255
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	fc 01       	movw	r30, r24
    218c:	00 82       	st	Z, r0
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	41 50       	subi	r20, 0x01	; 1
    2192:	44 23       	and	r20, r20
    2194:	b1 f7       	brne	.-20     	; 0x2182 <main+0xd2>
	int D2[2][2]={{7,15},{12,19}};	
    2196:	ce 01       	movw	r24, r28
    2198:	8b 57       	subi	r24, 0x7B	; 123
    219a:	9b 4f       	sbci	r25, 0xFB	; 251
    219c:	2c e5       	ldi	r18, 0x5C	; 92
    219e:	34 e0       	ldi	r19, 0x04	; 4
    21a0:	48 e0       	ldi	r20, 0x08	; 8
    21a2:	f9 01       	movw	r30, r18
    21a4:	00 80       	ld	r0, Z
    21a6:	2f 5f       	subi	r18, 0xFF	; 255
    21a8:	3f 4f       	sbci	r19, 0xFF	; 255
    21aa:	fc 01       	movw	r30, r24
    21ac:	00 82       	st	Z, r0
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	41 50       	subi	r20, 0x01	; 1
    21b2:	44 23       	and	r20, r20
    21b4:	b1 f7       	brne	.-20     	; 0x21a2 <main+0xf2>
	int summ1[9]={8,3,4,15,6,3,6,4,19};
    21b6:	ce 01       	movw	r24, r28
    21b8:	83 57       	subi	r24, 0x73	; 115
    21ba:	9b 4f       	sbci	r25, 0xFB	; 251
    21bc:	24 e6       	ldi	r18, 0x64	; 100
    21be:	34 e0       	ldi	r19, 0x04	; 4
    21c0:	42 e1       	ldi	r20, 0x12	; 18
    21c2:	f9 01       	movw	r30, r18
    21c4:	00 80       	ld	r0, Z
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	fc 01       	movw	r30, r24
    21cc:	00 82       	st	Z, r0
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	41 50       	subi	r20, 0x01	; 1
    21d2:	44 23       	and	r20, r20
    21d4:	b1 f7       	brne	.-20     	; 0x21c2 <main+0x112>
	int boxnumber;	
	int final[2];
	int recur=0;
    21d6:	18 86       	std	Y+8, r1	; 0x08
    21d8:	1f 82       	std	Y+7, r1	; 0x07
	int recur1=0;
    21da:	1a 86       	std	Y+10, r1	; 0x0a
    21dc:	19 86       	std	Y+9, r1	; 0x09
	int help=summ1[recur];
    21de:	9e 01       	movw	r18, r28
    21e0:	23 57       	subi	r18, 0x73	; 115
    21e2:	3b 4f       	sbci	r19, 0xFB	; 251
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	9c 87       	std	Y+12, r25	; 0x0c
    21f8:	8b 87       	std	Y+11, r24	; 0x0b
	
	point1 : if(flag1%2!=0)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	81 70       	andi	r24, 0x01	; 1
    2200:	90 70       	andi	r25, 0x00	; 0
    2202:	88 23       	and	r24, r24
    2204:	09 f4       	brne	.+2      	; 0x2208 <__stack+0x9>
    2206:	22 c1       	rjmp	.+580    	; 0x244c <__stack+0x24d>
	{
		int x1,y1;
		int result,index;
		int arr[4];
		for(int x=0;x<12;x++)
    2208:	1e 8a       	std	Y+22, r1	; 0x16
    220a:	1d 8a       	std	Y+21, r1	; 0x15
    220c:	29 c0       	rjmp	.+82     	; 0x2260 <__stack+0x61>
		{
			if(D1[x]==help)
    220e:	9e 01       	movw	r18, r28
    2210:	23 59       	subi	r18, 0x93	; 147
    2212:	3b 4f       	sbci	r19, 0xFB	; 251
    2214:	8d 89       	ldd	r24, Y+21	; 0x15
    2216:	9e 89       	ldd	r25, Y+22	; 0x16
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	82 0f       	add	r24, r18
    221e:	93 1f       	adc	r25, r19
    2220:	fc 01       	movw	r30, r24
    2222:	20 81       	ld	r18, Z
    2224:	31 81       	ldd	r19, Z+1	; 0x01
    2226:	8b 85       	ldd	r24, Y+11	; 0x0b
    2228:	9c 85       	ldd	r25, Y+12	; 0x0c
    222a:	28 17       	cp	r18, r24
    222c:	39 07       	cpc	r19, r25
    222e:	99 f4       	brne	.+38     	; 0x2256 <__stack+0x57>
			{
				boxnumber=x;
    2230:	8d 89       	ldd	r24, Y+21	; 0x15
    2232:	9e 89       	ldd	r25, Y+22	; 0x16
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
				D1[x]=-1;
    2238:	9e 01       	movw	r18, r28
    223a:	23 59       	subi	r18, 0x93	; 147
    223c:	3b 4f       	sbci	r19, 0xFB	; 251
    223e:	8d 89       	ldd	r24, Y+21	; 0x15
    2240:	9e 89       	ldd	r25, Y+22	; 0x16
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	82 0f       	add	r24, r18
    2248:	93 1f       	adc	r25, r19
    224a:	2f ef       	ldi	r18, 0xFF	; 255
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	fc 01       	movw	r30, r24
    2250:	31 83       	std	Z+1, r19	; 0x01
    2252:	20 83       	st	Z, r18
				break;
    2254:	0a c0       	rjmp	.+20     	; 0x226a <__stack+0x6b>
	point1 : if(flag1%2!=0)
	{
		int x1,y1;
		int result,index;
		int arr[4];
		for(int x=0;x<12;x++)
    2256:	8d 89       	ldd	r24, Y+21	; 0x15
    2258:	9e 89       	ldd	r25, Y+22	; 0x16
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	9e 8b       	std	Y+22, r25	; 0x16
    225e:	8d 8b       	std	Y+21, r24	; 0x15
    2260:	8d 89       	ldd	r24, Y+21	; 0x15
    2262:	9e 89       	ldd	r25, Y+22	; 0x16
    2264:	8c 30       	cpi	r24, 0x0C	; 12
    2266:	91 05       	cpc	r25, r1
    2268:	94 f2       	brlt	.-92     	; 0x220e <__stack+0xf>
				boxnumber=x;
				D1[x]=-1;
				break;
			}				
		}
		for(int k=0;k<4;k++)
    226a:	18 8e       	std	Y+24, r1	; 0x18
    226c:	1f 8a       	std	Y+23, r1	; 0x17
    226e:	70 c0       	rjmp	.+224    	; 0x2350 <__stack+0x151>
		{
			x1=coor[0]-origin1[boxnumber][k][0];
    2270:	20 91 89 04 	lds	r18, 0x0489
    2274:	30 91 8a 04 	lds	r19, 0x048A
    2278:	ae 01       	movw	r20, r28
    227a:	43 5d       	subi	r20, 0xD3	; 211
    227c:	5d 4f       	sbci	r21, 0xFD	; 253
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	bc 01       	movw	r22, r24
    2284:	66 0f       	add	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	66 0f       	add	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	86 0f       	add	r24, r22
    2292:	97 1f       	adc	r25, r23
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	84 0f       	add	r24, r20
    229e:	95 1f       	adc	r25, r21
    22a0:	fc 01       	movw	r30, r24
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	a9 01       	movw	r20, r18
    22a8:	48 1b       	sub	r20, r24
    22aa:	59 0b       	sbc	r21, r25
    22ac:	ca 01       	movw	r24, r20
    22ae:	9e 87       	std	Y+14, r25	; 0x0e
    22b0:	8d 87       	std	Y+13, r24	; 0x0d
			y1=coor[1]-origin1[boxnumber][k][1];
    22b2:	20 91 8b 04 	lds	r18, 0x048B
    22b6:	30 91 8c 04 	lds	r19, 0x048C
    22ba:	ae 01       	movw	r20, r28
    22bc:	43 5d       	subi	r20, 0xD3	; 211
    22be:	5d 4f       	sbci	r21, 0xFD	; 253
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	bc 01       	movw	r22, r24
    22c6:	66 0f       	add	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	66 0f       	add	r22, r22
    22cc:	77 1f       	adc	r23, r23
    22ce:	8f 89       	ldd	r24, Y+23	; 0x17
    22d0:	98 8d       	ldd	r25, Y+24	; 0x18
    22d2:	86 0f       	add	r24, r22
    22d4:	97 1f       	adc	r25, r23
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	84 0f       	add	r24, r20
    22e0:	95 1f       	adc	r25, r21
    22e2:	02 96       	adiw	r24, 0x02	; 2
    22e4:	fc 01       	movw	r30, r24
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	a9 01       	movw	r20, r18
    22ec:	48 1b       	sub	r20, r24
    22ee:	59 0b       	sbc	r21, r25
    22f0:	ca 01       	movw	r24, r20
    22f2:	98 8b       	std	Y+16, r25	; 0x10
    22f4:	8f 87       	std	Y+15, r24	; 0x0f
			if(x1<0)
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	99 23       	and	r25, r25
    22fc:	3c f4       	brge	.+14     	; 0x230c <__stack+0x10d>
				x1=x1*-1;
    22fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2300:	9e 85       	ldd	r25, Y+14	; 0x0e
    2302:	90 95       	com	r25
    2304:	81 95       	neg	r24
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	9e 87       	std	Y+14, r25	; 0x0e
    230a:	8d 87       	std	Y+13, r24	; 0x0d
			if(y1<0)
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	99 23       	and	r25, r25
    2312:	3c f4       	brge	.+14     	; 0x2322 <__stack+0x123>
				y1=y1*-1;
    2314:	8f 85       	ldd	r24, Y+15	; 0x0f
    2316:	98 89       	ldd	r25, Y+16	; 0x10
    2318:	90 95       	com	r25
    231a:	81 95       	neg	r24
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	98 8b       	std	Y+16, r25	; 0x10
    2320:	8f 87       	std	Y+15, r24	; 0x0f
			arr[k]=x1+y1;
    2322:	2d 85       	ldd	r18, Y+13	; 0x0d
    2324:	3e 85       	ldd	r19, Y+14	; 0x0e
    2326:	8f 85       	ldd	r24, Y+15	; 0x0f
    2328:	98 89       	ldd	r25, Y+16	; 0x10
    232a:	28 0f       	add	r18, r24
    232c:	39 1f       	adc	r19, r25
    232e:	ae 01       	movw	r20, r28
    2330:	4d 55       	subi	r20, 0x5D	; 93
    2332:	5b 4f       	sbci	r21, 0xFB	; 251
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	84 0f       	add	r24, r20
    233e:	95 1f       	adc	r25, r21
    2340:	fc 01       	movw	r30, r24
    2342:	31 83       	std	Z+1, r19	; 0x01
    2344:	20 83       	st	Z, r18
				boxnumber=x;
				D1[x]=-1;
				break;
			}				
		}
		for(int k=0;k<4;k++)
    2346:	8f 89       	ldd	r24, Y+23	; 0x17
    2348:	98 8d       	ldd	r25, Y+24	; 0x18
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	98 8f       	std	Y+24, r25	; 0x18
    234e:	8f 8b       	std	Y+23, r24	; 0x17
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	91 05       	cpc	r25, r1
    2358:	0c f4       	brge	.+2      	; 0x235c <__stack+0x15d>
    235a:	8a cf       	rjmp	.-236    	; 0x2270 <__stack+0x71>
				x1=x1*-1;
			if(y1<0)
				y1=y1*-1;
			arr[k]=x1+y1;
		}
		result=arr[0];
    235c:	ce 01       	movw	r24, r28
    235e:	8d 55       	subi	r24, 0x5D	; 93
    2360:	9b 4f       	sbci	r25, 0xFB	; 251
    2362:	fc 01       	movw	r30, r24
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	9a 8b       	std	Y+18, r25	; 0x12
    236a:	89 8b       	std	Y+17, r24	; 0x11
		index=0;
    236c:	1c 8a       	std	Y+20, r1	; 0x14
    236e:	1b 8a       	std	Y+19, r1	; 0x13
		for(int j=1;j<4;j++)
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9a 8f       	std	Y+26, r25	; 0x1a
    2376:	89 8f       	std	Y+25, r24	; 0x19
    2378:	28 c0       	rjmp	.+80     	; 0x23ca <__stack+0x1cb>
		{
			if(arr[j]<result)
    237a:	9e 01       	movw	r18, r28
    237c:	2d 55       	subi	r18, 0x5D	; 93
    237e:	3b 4f       	sbci	r19, 0xFB	; 251
    2380:	89 8d       	ldd	r24, Y+25	; 0x19
    2382:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	fc 01       	movw	r30, r24
    238e:	20 81       	ld	r18, Z
    2390:	31 81       	ldd	r19, Z+1	; 0x01
    2392:	89 89       	ldd	r24, Y+17	; 0x11
    2394:	9a 89       	ldd	r25, Y+18	; 0x12
    2396:	28 17       	cp	r18, r24
    2398:	39 07       	cpc	r19, r25
    239a:	94 f4       	brge	.+36     	; 0x23c0 <__stack+0x1c1>
			{
				result=arr[j];
    239c:	9e 01       	movw	r18, r28
    239e:	2d 55       	subi	r18, 0x5D	; 93
    23a0:	3b 4f       	sbci	r19, 0xFB	; 251
    23a2:	89 8d       	ldd	r24, Y+25	; 0x19
    23a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	fc 01       	movw	r30, r24
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	89 8b       	std	Y+17, r24	; 0x11
				index=j;
    23b8:	89 8d       	ldd	r24, Y+25	; 0x19
    23ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
				y1=y1*-1;
			arr[k]=x1+y1;
		}
		result=arr[0];
		index=0;
		for(int j=1;j<4;j++)
    23c0:	89 8d       	ldd	r24, Y+25	; 0x19
    23c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	9a 8f       	std	Y+26, r25	; 0x1a
    23c8:	89 8f       	std	Y+25, r24	; 0x19
    23ca:	89 8d       	ldd	r24, Y+25	; 0x19
    23cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23ce:	84 30       	cpi	r24, 0x04	; 4
    23d0:	91 05       	cpc	r25, r1
    23d2:	9c f2       	brlt	.-90     	; 0x237a <__stack+0x17b>
			{
				result=arr[j];
				index=j;
			}
		}
		final[0]=origin1[boxnumber][index][0];
    23d4:	9e 01       	movw	r18, r28
    23d6:	23 5d       	subi	r18, 0xD3	; 211
    23d8:	3d 4f       	sbci	r19, 0xFD	; 253
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	ac 01       	movw	r20, r24
    23e0:	44 0f       	add	r20, r20
    23e2:	55 1f       	adc	r21, r21
    23e4:	44 0f       	add	r20, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	84 0f       	add	r24, r20
    23ee:	95 1f       	adc	r25, r21
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	fc 01       	movw	r30, r24
    23fe:	20 81       	ld	r18, Z
    2400:	31 81       	ldd	r19, Z+1	; 0x01
    2402:	ce 01       	movw	r24, r28
    2404:	81 56       	subi	r24, 0x61	; 97
    2406:	9b 4f       	sbci	r25, 0xFB	; 251
    2408:	fc 01       	movw	r30, r24
    240a:	31 83       	std	Z+1, r19	; 0x01
    240c:	20 83       	st	Z, r18
		final[1]=origin1[boxnumber][index][1];
    240e:	9e 01       	movw	r18, r28
    2410:	23 5d       	subi	r18, 0xD3	; 211
    2412:	3d 4f       	sbci	r19, 0xFD	; 253
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	ac 01       	movw	r20, r24
    241a:	44 0f       	add	r20, r20
    241c:	55 1f       	adc	r21, r21
    241e:	44 0f       	add	r20, r20
    2420:	55 1f       	adc	r21, r21
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	84 0f       	add	r24, r20
    2428:	95 1f       	adc	r25, r21
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	02 96       	adiw	r24, 0x02	; 2
    2438:	fc 01       	movw	r30, r24
    243a:	20 81       	ld	r18, Z
    243c:	31 81       	ldd	r19, Z+1	; 0x01
    243e:	ce 01       	movw	r24, r28
    2440:	81 56       	subi	r24, 0x61	; 97
    2442:	9b 4f       	sbci	r25, 0xFB	; 251
    2444:	fc 01       	movw	r30, r24
    2446:	33 83       	std	Z+3, r19	; 0x03
    2448:	22 83       	std	Z+2, r18	; 0x02
    244a:	f9 c0       	rjmp	.+498    	; 0x263e <__stack+0x43f>
	}  			
	else
	{
		if(flag1%2==0)
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	81 70       	andi	r24, 0x01	; 1
    2452:	90 70       	andi	r25, 0x00	; 0
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	09 f0       	breq	.+2      	; 0x245a <__stack+0x25b>
    2458:	f2 c0       	rjmp	.+484    	; 0x263e <__stack+0x43f>
		{
			int x1,y1;
			int result,index;
			int arr[4];
			for(int k=0;k<4;k++)
    245a:	1c a2       	lds	r17, 0x9c
    245c:	1b a2       	lds	r17, 0x9b
    245e:	70 c0       	rjmp	.+224    	; 0x2540 <__stack+0x341>
			{
				x1=coor[0]-origin2[boxnumber][k][0];
    2460:	20 91 89 04 	lds	r18, 0x0489
    2464:	30 91 8a 04 	lds	r19, 0x048A
    2468:	ae 01       	movw	r20, r28
    246a:	43 51       	subi	r20, 0x13	; 19
    246c:	5d 4f       	sbci	r21, 0xFD	; 253
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	bc 01       	movw	r22, r24
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	66 0f       	add	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	8b a1       	lds	r24, 0x4b
    247e:	9c a1       	lds	r25, 0x4c
    2480:	86 0f       	add	r24, r22
    2482:	97 1f       	adc	r25, r23
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	84 0f       	add	r24, r20
    248e:	95 1f       	adc	r25, r21
    2490:	fc 01       	movw	r30, r24
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	a9 01       	movw	r20, r18
    2498:	48 1b       	sub	r20, r24
    249a:	59 0b       	sbc	r21, r25
    249c:	ca 01       	movw	r24, r20
    249e:	9c 8f       	std	Y+28, r25	; 0x1c
    24a0:	8b 8f       	std	Y+27, r24	; 0x1b
				y1=coor[1]-origin2[boxnumber][k][1];
    24a2:	20 91 8b 04 	lds	r18, 0x048B
    24a6:	30 91 8c 04 	lds	r19, 0x048C
    24aa:	ae 01       	movw	r20, r28
    24ac:	43 51       	subi	r20, 0x13	; 19
    24ae:	5d 4f       	sbci	r21, 0xFD	; 253
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	bc 01       	movw	r22, r24
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	66 0f       	add	r22, r22
    24bc:	77 1f       	adc	r23, r23
    24be:	8b a1       	lds	r24, 0x4b
    24c0:	9c a1       	lds	r25, 0x4c
    24c2:	86 0f       	add	r24, r22
    24c4:	97 1f       	adc	r25, r23
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	84 0f       	add	r24, r20
    24d0:	95 1f       	adc	r25, r21
    24d2:	02 96       	adiw	r24, 0x02	; 2
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	a9 01       	movw	r20, r18
    24dc:	48 1b       	sub	r20, r24
    24de:	59 0b       	sbc	r21, r25
    24e0:	ca 01       	movw	r24, r20
    24e2:	9e 8f       	std	Y+30, r25	; 0x1e
    24e4:	8d 8f       	std	Y+29, r24	; 0x1d
				if(x1<0)
    24e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ea:	99 23       	and	r25, r25
    24ec:	3c f4       	brge	.+14     	; 0x24fc <__stack+0x2fd>
					x1=x1*-1;
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	90 95       	com	r25
    24f4:	81 95       	neg	r24
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	9c 8f       	std	Y+28, r25	; 0x1c
    24fa:	8b 8f       	std	Y+27, r24	; 0x1b
				if(y1<0)
    24fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2500:	99 23       	and	r25, r25
    2502:	3c f4       	brge	.+14     	; 0x2512 <__stack+0x313>
					y1=y1*-1;
    2504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2508:	90 95       	com	r25
    250a:	81 95       	neg	r24
    250c:	9f 4f       	sbci	r25, 0xFF	; 255
    250e:	9e 8f       	std	Y+30, r25	; 0x1e
    2510:	8d 8f       	std	Y+29, r24	; 0x1d
				arr[k]=x1+y1;
    2512:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2514:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2516:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2518:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251a:	28 0f       	add	r18, r24
    251c:	39 1f       	adc	r19, r25
    251e:	ae 01       	movw	r20, r28
    2520:	45 55       	subi	r20, 0x55	; 85
    2522:	5b 4f       	sbci	r21, 0xFB	; 251
    2524:	8b a1       	lds	r24, 0x4b
    2526:	9c a1       	lds	r25, 0x4c
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	84 0f       	add	r24, r20
    252e:	95 1f       	adc	r25, r21
    2530:	fc 01       	movw	r30, r24
    2532:	31 83       	std	Z+1, r19	; 0x01
    2534:	20 83       	st	Z, r18
		if(flag1%2==0)
		{
			int x1,y1;
			int result,index;
			int arr[4];
			for(int k=0;k<4;k++)
    2536:	8b a1       	lds	r24, 0x4b
    2538:	9c a1       	lds	r25, 0x4c
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	9c a3       	lds	r25, 0x5c
    253e:	8b a3       	lds	r24, 0x5b
    2540:	8b a1       	lds	r24, 0x4b
    2542:	9c a1       	lds	r25, 0x4c
    2544:	84 30       	cpi	r24, 0x04	; 4
    2546:	91 05       	cpc	r25, r1
    2548:	0c f4       	brge	.+2      	; 0x254c <__stack+0x34d>
    254a:	8a cf       	rjmp	.-236    	; 0x2460 <__stack+0x261>
					x1=x1*-1;
				if(y1<0)
					y1=y1*-1;
				arr[k]=x1+y1;
			}
			result=arr[0];
    254c:	ce 01       	movw	r24, r28
    254e:	85 55       	subi	r24, 0x55	; 85
    2550:	9b 4f       	sbci	r25, 0xFB	; 251
    2552:	fc 01       	movw	r30, r24
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	98 a3       	lds	r25, 0x58
    255a:	8f 8f       	std	Y+31, r24	; 0x1f
			index=0;
    255c:	1a a2       	lds	r17, 0x9a
    255e:	19 a2       	lds	r17, 0x99
			for(int j=1;j<4;j++)
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e a3       	lds	r25, 0x5e
    2566:	8d a3       	lds	r24, 0x5d
    2568:	28 c0       	rjmp	.+80     	; 0x25ba <__stack+0x3bb>
			{
				if(arr[j]<result)
    256a:	9e 01       	movw	r18, r28
    256c:	25 55       	subi	r18, 0x55	; 85
    256e:	3b 4f       	sbci	r19, 0xFB	; 251
    2570:	8d a1       	lds	r24, 0x4d
    2572:	9e a1       	lds	r25, 0x4e
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	82 0f       	add	r24, r18
    257a:	93 1f       	adc	r25, r19
    257c:	fc 01       	movw	r30, r24
    257e:	20 81       	ld	r18, Z
    2580:	31 81       	ldd	r19, Z+1	; 0x01
    2582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2584:	98 a1       	lds	r25, 0x48
    2586:	28 17       	cp	r18, r24
    2588:	39 07       	cpc	r19, r25
    258a:	94 f4       	brge	.+36     	; 0x25b0 <__stack+0x3b1>
				{
					result=arr[j];
    258c:	9e 01       	movw	r18, r28
    258e:	25 55       	subi	r18, 0x55	; 85
    2590:	3b 4f       	sbci	r19, 0xFB	; 251
    2592:	8d a1       	lds	r24, 0x4d
    2594:	9e a1       	lds	r25, 0x4e
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	fc 01       	movw	r30, r24
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	98 a3       	lds	r25, 0x58
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
					index=j;
    25a8:	8d a1       	lds	r24, 0x4d
    25aa:	9e a1       	lds	r25, 0x4e
    25ac:	9a a3       	lds	r25, 0x5a
    25ae:	89 a3       	lds	r24, 0x59
					y1=y1*-1;
				arr[k]=x1+y1;
			}
			result=arr[0];
			index=0;
			for(int j=1;j<4;j++)
    25b0:	8d a1       	lds	r24, 0x4d
    25b2:	9e a1       	lds	r25, 0x4e
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	9e a3       	lds	r25, 0x5e
    25b8:	8d a3       	lds	r24, 0x5d
    25ba:	8d a1       	lds	r24, 0x4d
    25bc:	9e a1       	lds	r25, 0x4e
    25be:	84 30       	cpi	r24, 0x04	; 4
    25c0:	91 05       	cpc	r25, r1
    25c2:	9c f2       	brlt	.-90     	; 0x256a <__stack+0x36b>
				{
					result=arr[j];
					index=j;
				}
			}
			final[0]=origin2[boxnumber][index][0];
    25c4:	9e 01       	movw	r18, r28
    25c6:	23 51       	subi	r18, 0x13	; 19
    25c8:	3d 4f       	sbci	r19, 0xFD	; 253
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	ac 01       	movw	r20, r24
    25d0:	44 0f       	add	r20, r20
    25d2:	55 1f       	adc	r21, r21
    25d4:	44 0f       	add	r20, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	89 a1       	lds	r24, 0x49
    25da:	9a a1       	lds	r25, 0x4a
    25dc:	84 0f       	add	r24, r20
    25de:	95 1f       	adc	r25, r21
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	82 0f       	add	r24, r18
    25ea:	93 1f       	adc	r25, r19
    25ec:	fc 01       	movw	r30, r24
    25ee:	20 81       	ld	r18, Z
    25f0:	31 81       	ldd	r19, Z+1	; 0x01
    25f2:	ce 01       	movw	r24, r28
    25f4:	81 56       	subi	r24, 0x61	; 97
    25f6:	9b 4f       	sbci	r25, 0xFB	; 251
    25f8:	fc 01       	movw	r30, r24
    25fa:	31 83       	std	Z+1, r19	; 0x01
    25fc:	20 83       	st	Z, r18
			final[1]=origin2[boxnumber][index][1];
    25fe:	9e 01       	movw	r18, r28
    2600:	23 51       	subi	r18, 0x13	; 19
    2602:	3d 4f       	sbci	r19, 0xFD	; 253
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	ac 01       	movw	r20, r24
    260a:	44 0f       	add	r20, r20
    260c:	55 1f       	adc	r21, r21
    260e:	44 0f       	add	r20, r20
    2610:	55 1f       	adc	r21, r21
    2612:	89 a1       	lds	r24, 0x49
    2614:	9a a1       	lds	r25, 0x4a
    2616:	84 0f       	add	r24, r20
    2618:	95 1f       	adc	r25, r21
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	82 0f       	add	r24, r18
    2624:	93 1f       	adc	r25, r19
    2626:	02 96       	adiw	r24, 0x02	; 2
    2628:	fc 01       	movw	r30, r24
    262a:	20 81       	ld	r18, Z
    262c:	31 81       	ldd	r19, Z+1	; 0x01
    262e:	ce 01       	movw	r24, r28
    2630:	81 56       	subi	r24, 0x61	; 97
    2632:	9b 4f       	sbci	r25, 0xFB	; 251
    2634:	fc 01       	movw	r30, r24
    2636:	33 83       	std	Z+3, r19	; 0x03
    2638:	22 83       	std	Z+2, r18	; 0x02
    263a:	01 c0       	rjmp	.+2      	; 0x263e <__stack+0x43f>
			_delay_ms(100);		//delay
			buzzer_off();
			_delay_ms(100);    //delay
			break;
		}
	}
    263c:	00 00       	nop
	
	
	point : while(1)         ///////////////////////////////////////////////////////////////////////////////////////////////////////
	{
		
		if(final[1]>coor[1])
    263e:	ce 01       	movw	r24, r28
    2640:	81 56       	subi	r24, 0x61	; 97
    2642:	9b 4f       	sbci	r25, 0xFB	; 251
    2644:	fc 01       	movw	r30, r24
    2646:	22 81       	ldd	r18, Z+2	; 0x02
    2648:	33 81       	ldd	r19, Z+3	; 0x03
    264a:	80 91 8b 04 	lds	r24, 0x048B
    264e:	90 91 8c 04 	lds	r25, 0x048C
    2652:	82 17       	cp	r24, r18
    2654:	93 07       	cpc	r25, r19
    2656:	0c f0       	brlt	.+2      	; 0x265a <__stack+0x45b>
    2658:	92 c5       	rjmp	.+2852   	; 0x317e <__stack+0xf7f>
		{
			if(compass==4)
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	84 30       	cpi	r24, 0x04	; 4
    2660:	91 05       	cpc	r25, r1
    2662:	09 f0       	breq	.+2      	; 0x2666 <__stack+0x467>
    2664:	90 c0       	rjmp	.+288    	; 0x2786 <__stack+0x587>
			{
				coor[1]=coor[1]+1;
    2666:	80 91 8b 04 	lds	r24, 0x048B
    266a:	90 91 8c 04 	lds	r25, 0x048C
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	90 93 8c 04 	sts	0x048C, r25
    2674:	80 93 8b 04 	sts	0x048B, r24
				compass=4;
    2678:	84 e0       	ldi	r24, 0x04	; 4
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a8 ec       	ldi	r26, 0xC8	; 200
    2686:	b2 e4       	ldi	r27, 0x42	; 66
    2688:	8f a3       	lds	r24, 0x5f
    268a:	98 a7       	lds	r25, 0x78
    268c:	a9 a7       	lds	r26, 0x79
    268e:	ba a7       	lds	r27, 0x7a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6f a1       	lds	r22, 0x4f
    2692:	78 a5       	lds	r23, 0x68
    2694:	89 a5       	lds	r24, 0x69
    2696:	9a a5       	lds	r25, 0x6a
    2698:	26 e6       	ldi	r18, 0x66	; 102
    269a:	36 e6       	ldi	r19, 0x66	; 102
    269c:	46 e6       	ldi	r20, 0x66	; 102
    269e:	55 e4       	ldi	r21, 0x45	; 69
    26a0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8b a7       	lds	r24, 0x7b
    26aa:	9c a7       	lds	r25, 0x7c
    26ac:	ad a7       	lds	r26, 0x7d
    26ae:	be a7       	lds	r27, 0x7e
	if (__tmp < 1.0)
    26b0:	11 e0       	ldi	r17, 0x01	; 1
    26b2:	6b a5       	lds	r22, 0x6b
    26b4:	7c a5       	lds	r23, 0x6c
    26b6:	8d a5       	lds	r24, 0x6d
    26b8:	9e a5       	lds	r25, 0x6e
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <__stack+0x4cd>
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	11 23       	and	r17, r17
    26ce:	29 f0       	breq	.+10     	; 0x26da <__stack+0x4db>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	98 ab       	sts	0x58, r25
    26d6:	8f a7       	lds	r24, 0x7f
    26d8:	46 c0       	rjmp	.+140    	; 0x2766 <__stack+0x567>
	else if (__tmp > 65535)
    26da:	11 e0       	ldi	r17, 0x01	; 1
    26dc:	6b a5       	lds	r22, 0x6b
    26de:	7c a5       	lds	r23, 0x6c
    26e0:	8d a5       	lds	r24, 0x6d
    26e2:	9e a5       	lds	r25, 0x6e
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	0c f0       	brlt	.+2      	; 0x26f6 <__stack+0x4f7>
    26f4:	10 e0       	ldi	r17, 0x00	; 0
    26f6:	11 23       	and	r17, r17
    26f8:	61 f1       	breq	.+88     	; 0x2752 <__stack+0x553>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6f a1       	lds	r22, 0x4f
    26fc:	78 a5       	lds	r23, 0x68
    26fe:	89 a5       	lds	r24, 0x69
    2700:	9a a5       	lds	r25, 0x6a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	98 ab       	sts	0x58, r25
    2720:	8f a7       	lds	r24, 0x7f
    2722:	12 c0       	rjmp	.+36     	; 0x2748 <__stack+0x549>
    2724:	80 e7       	ldi	r24, 0x70	; 112
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	9a ab       	sts	0x5a, r25
    272a:	89 ab       	sts	0x59, r24
    272c:	89 a9       	sts	0x49, r24
    272e:	9a a9       	sts	0x4a, r25
    2730:	8c 01       	movw	r16, r24
    2732:	c8 01       	movw	r24, r16
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <__stack+0x535>
    2738:	8c 01       	movw	r16, r24
    273a:	1a ab       	sts	0x5a, r17
    273c:	09 ab       	sts	0x59, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	8f a5       	lds	r24, 0x6f
    2740:	98 a9       	sts	0x48, r25
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	98 ab       	sts	0x58, r25
    2746:	8f a7       	lds	r24, 0x7f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	8f a5       	lds	r24, 0x6f
    274a:	98 a9       	sts	0x48, r25
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	51 f7       	brne	.-44     	; 0x2724 <__stack+0x525>
    2750:	17 c0       	rjmp	.+46     	; 0x2780 <__stack+0x581>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	6b a5       	lds	r22, 0x6b
    2754:	7c a5       	lds	r23, 0x6c
    2756:	8d a5       	lds	r24, 0x6d
    2758:	9e a5       	lds	r25, 0x6e
    275a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	98 ab       	sts	0x58, r25
    2764:	8f a7       	lds	r24, 0x7f
    2766:	8f a5       	lds	r24, 0x6f
    2768:	98 a9       	sts	0x48, r25
    276a:	9c ab       	sts	0x5c, r25
    276c:	8b ab       	sts	0x5b, r24
    276e:	8b a9       	sts	0x4b, r24
    2770:	9c a9       	sts	0x4c, r25
    2772:	8c 01       	movw	r16, r24
    2774:	f8 01       	movw	r30, r16
    2776:	31 97       	sbiw	r30, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <__stack+0x577>
    277a:	8f 01       	movw	r16, r30
    277c:	1c ab       	sts	0x5c, r17
    277e:	0b ab       	sts	0x5b, r16
				_delay_ms(100);
				linefollwer();
    2780:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    2784:	fc c4       	rjmp	.+2552   	; 0x317e <__stack+0xf7f>
			}
			else
			{
				
				if(compass==6)
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	86 30       	cpi	r24, 0x06	; 6
    278c:	91 05       	cpc	r25, r1
    278e:	09 f0       	breq	.+2      	; 0x2792 <__stack+0x593>
    2790:	7b c1       	rjmp	.+758    	; 0x2a88 <__stack+0x889>
				{
					coor[1]=coor[1]+1;
    2792:	80 91 8b 04 	lds	r24, 0x048B
    2796:	90 91 8c 04 	lds	r25, 0x048C
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	90 93 8c 04 	sts	0x048C, r25
    27a0:	80 93 8b 04 	sts	0x048B, r24
					compass=4;
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	aa ef       	ldi	r26, 0xFA	; 250
    27b2:	b3 e4       	ldi	r27, 0x43	; 67
    27b4:	8d ab       	sts	0x5d, r24
    27b6:	9e ab       	sts	0x5e, r25
    27b8:	af ab       	sts	0x5f, r26
    27ba:	b8 af       	sts	0x78, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	6d a9       	sts	0x4d, r22
    27be:	7e a9       	sts	0x4e, r23
    27c0:	8f a9       	sts	0x4f, r24
    27c2:	98 ad       	sts	0x68, r25
    27c4:	26 e6       	ldi	r18, 0x66	; 102
    27c6:	36 e6       	ldi	r19, 0x66	; 102
    27c8:	46 e6       	ldi	r20, 0x66	; 102
    27ca:	55 e4       	ldi	r21, 0x45	; 69
    27cc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	89 af       	sts	0x79, r24
    27d6:	9a af       	sts	0x7a, r25
    27d8:	ab af       	sts	0x7b, r26
    27da:	bc af       	sts	0x7c, r27
	if (__tmp < 1.0)
    27dc:	11 e0       	ldi	r17, 0x01	; 1
    27de:	69 ad       	sts	0x69, r22
    27e0:	7a ad       	sts	0x6a, r23
    27e2:	8b ad       	sts	0x6b, r24
    27e4:	9c ad       	sts	0x6c, r25
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e8       	ldi	r20, 0x80	; 128
    27ec:	5f e3       	ldi	r21, 0x3F	; 63
    27ee:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    27f2:	88 23       	and	r24, r24
    27f4:	0c f0       	brlt	.+2      	; 0x27f8 <__stack+0x5f9>
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	11 23       	and	r17, r17
    27fa:	29 f0       	breq	.+10     	; 0x2806 <__stack+0x607>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9e af       	sts	0x7e, r25
    2802:	8d af       	sts	0x7d, r24
    2804:	4f c0       	rjmp	.+158    	; 0x28a4 <__stack+0x6a5>
	else if (__tmp > 65535)
    2806:	11 e0       	ldi	r17, 0x01	; 1
    2808:	69 ad       	sts	0x69, r22
    280a:	7a ad       	sts	0x6a, r23
    280c:	8b ad       	sts	0x6b, r24
    280e:	9c ad       	sts	0x6c, r25
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    281c:	18 16       	cp	r1, r24
    281e:	0c f0       	brlt	.+2      	; 0x2822 <__stack+0x623>
    2820:	10 e0       	ldi	r17, 0x00	; 0
    2822:	11 23       	and	r17, r17
    2824:	a9 f1       	breq	.+106    	; 0x2890 <__stack+0x691>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6d a9       	sts	0x4d, r22
    2828:	7e a9       	sts	0x4e, r23
    282a:	8f a9       	sts	0x4f, r24
    282c:	98 ad       	sts	0x68, r25
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e af       	sts	0x7e, r25
    284c:	8d af       	sts	0x7d, r24
    284e:	1b c0       	rjmp	.+54     	; 0x2886 <__stack+0x687>
    2850:	20 e7       	ldi	r18, 0x70	; 112
    2852:	31 e0       	ldi	r19, 0x01	; 1
    2854:	ce 01       	movw	r24, r28
    2856:	cf 96       	adiw	r24, 0x3f	; 63
    2858:	fc 01       	movw	r30, r24
    285a:	31 83       	std	Z+1, r19	; 0x01
    285c:	20 83       	st	Z, r18
    285e:	ce 01       	movw	r24, r28
    2860:	cf 96       	adiw	r24, 0x3f	; 63
    2862:	fc 01       	movw	r30, r24
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	8c 01       	movw	r16, r24
    286a:	c8 01       	movw	r24, r16
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <__stack+0x66d>
    2870:	8c 01       	movw	r16, r24
    2872:	ce 01       	movw	r24, r28
    2874:	cf 96       	adiw	r24, 0x3f	; 63
    2876:	fc 01       	movw	r30, r24
    2878:	11 83       	std	Z+1, r17	; 0x01
    287a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287c:	8d ad       	sts	0x6d, r24
    287e:	9e ad       	sts	0x6e, r25
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	9e af       	sts	0x7e, r25
    2884:	8d af       	sts	0x7d, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2886:	8d ad       	sts	0x6d, r24
    2888:	9e ad       	sts	0x6e, r25
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	09 f7       	brne	.-62     	; 0x2850 <__stack+0x651>
    288e:	23 c0       	rjmp	.+70     	; 0x28d6 <__stack+0x6d7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2890:	69 ad       	sts	0x69, r22
    2892:	7a ad       	sts	0x6a, r23
    2894:	8b ad       	sts	0x6b, r24
    2896:	9c ad       	sts	0x6c, r25
    2898:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9e af       	sts	0x7e, r25
    28a2:	8d af       	sts	0x7d, r24
    28a4:	ce 01       	movw	r24, r28
    28a6:	8f 5b       	subi	r24, 0xBF	; 191
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	2d ad       	sts	0x6d, r18
    28ac:	3e ad       	sts	0x6e, r19
    28ae:	fc 01       	movw	r30, r24
    28b0:	31 83       	std	Z+1, r19	; 0x01
    28b2:	20 83       	st	Z, r18
    28b4:	ce 01       	movw	r24, r28
    28b6:	8f 5b       	subi	r24, 0xBF	; 191
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	fc 01       	movw	r30, r24
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	8c 01       	movw	r16, r24
    28c2:	c8 01       	movw	r24, r16
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <__stack+0x6c5>
    28c8:	8c 01       	movw	r16, r24
    28ca:	ce 01       	movw	r24, r28
    28cc:	8f 5b       	subi	r24, 0xBF	; 191
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	fc 01       	movw	r30, r24
    28d2:	11 83       	std	Z+1, r17	; 0x01
    28d4:	00 83       	st	Z, r16
					_delay_ms(500);
					left_degrees(85);
    28d6:	85 e5       	ldi	r24, 0x55	; 85
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    28de:	9e 01       	movw	r18, r28
    28e0:	2d 5b       	subi	r18, 0xBD	; 189
    28e2:	3f 4f       	sbci	r19, 0xFF	; 255
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a8 ec       	ldi	r26, 0xC8	; 200
    28ea:	b2 e4       	ldi	r27, 0x42	; 66
    28ec:	f9 01       	movw	r30, r18
    28ee:	80 83       	st	Z, r24
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	a2 83       	std	Z+2, r26	; 0x02
    28f4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	8e 01       	movw	r16, r28
    28f8:	09 5b       	subi	r16, 0xB9	; 185
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	ce 01       	movw	r24, r28
    28fe:	8d 5b       	subi	r24, 0xBD	; 189
    2900:	9f 4f       	sbci	r25, 0xFF	; 255
    2902:	fc 01       	movw	r30, r24
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	26 e6       	ldi	r18, 0x66	; 102
    290e:	36 e6       	ldi	r19, 0x66	; 102
    2910:	46 e6       	ldi	r20, 0x66	; 102
    2912:	55 e4       	ldi	r21, 0x45	; 69
    2914:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2926:	ce 01       	movw	r24, r28
    2928:	89 5b       	subi	r24, 0xB9	; 185
    292a:	9f 4f       	sbci	r25, 0xFF	; 255
    292c:	11 e0       	ldi	r17, 0x01	; 1
    292e:	fc 01       	movw	r30, r24
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    2944:	88 23       	and	r24, r24
    2946:	0c f0       	brlt	.+2      	; 0x294a <__stack+0x74b>
    2948:	10 e0       	ldi	r17, 0x00	; 0
    294a:	11 23       	and	r17, r17
    294c:	49 f0       	breq	.+18     	; 0x2960 <__stack+0x761>
		__ticks = 1;
    294e:	ce 01       	movw	r24, r28
    2950:	85 5b       	subi	r24, 0xB5	; 181
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	21 e0       	ldi	r18, 0x01	; 1
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	fc 01       	movw	r30, r24
    295a:	31 83       	std	Z+1, r19	; 0x01
    295c:	20 83       	st	Z, r18
    295e:	74 c0       	rjmp	.+232    	; 0x2a48 <__stack+0x849>
	else if (__tmp > 65535)
    2960:	ce 01       	movw	r24, r28
    2962:	89 5b       	subi	r24, 0xB9	; 185
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	fc 01       	movw	r30, r24
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <__stack+0x785>
    2982:	10 e0       	ldi	r17, 0x00	; 0
    2984:	11 23       	and	r17, r17
    2986:	09 f4       	brne	.+2      	; 0x298a <__stack+0x78b>
    2988:	4d c0       	rjmp	.+154    	; 0x2a24 <__stack+0x825>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	ce 01       	movw	r24, r28
    298c:	8d 5b       	subi	r24, 0xBD	; 189
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	fc 01       	movw	r30, r24
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	8e 01       	movw	r16, r28
    29ac:	05 5b       	subi	r16, 0xB5	; 181
    29ae:	1f 4f       	sbci	r17, 0xFF	; 255
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	27 c0       	rjmp	.+78     	; 0x2a12 <__stack+0x813>
    29c4:	ce 01       	movw	r24, r28
    29c6:	83 5b       	subi	r24, 0xB3	; 179
    29c8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ca:	20 e7       	ldi	r18, 0x70	; 112
    29cc:	31 e0       	ldi	r19, 0x01	; 1
    29ce:	fc 01       	movw	r30, r24
    29d0:	31 83       	std	Z+1, r19	; 0x01
    29d2:	20 83       	st	Z, r18
    29d4:	ce 01       	movw	r24, r28
    29d6:	83 5b       	subi	r24, 0xB3	; 179
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	fc 01       	movw	r30, r24
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	8c 01       	movw	r16, r24
    29e2:	c8 01       	movw	r24, r16
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <__stack+0x7e5>
    29e8:	8c 01       	movw	r16, r24
    29ea:	ce 01       	movw	r24, r28
    29ec:	83 5b       	subi	r24, 0xB3	; 179
    29ee:	9f 4f       	sbci	r25, 0xFF	; 255
    29f0:	fc 01       	movw	r30, r24
    29f2:	11 83       	std	Z+1, r17	; 0x01
    29f4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	ce 01       	movw	r24, r28
    29f8:	85 5b       	subi	r24, 0xB5	; 181
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	9e 01       	movw	r18, r28
    29fe:	25 5b       	subi	r18, 0xB5	; 181
    2a00:	3f 4f       	sbci	r19, 0xFF	; 255
    2a02:	f9 01       	movw	r30, r18
    2a04:	20 81       	ld	r18, Z
    2a06:	31 81       	ldd	r19, Z+1	; 0x01
    2a08:	21 50       	subi	r18, 0x01	; 1
    2a0a:	30 40       	sbci	r19, 0x00	; 0
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	31 83       	std	Z+1, r19	; 0x01
    2a10:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	ce 01       	movw	r24, r28
    2a14:	85 5b       	subi	r24, 0xB5	; 181
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	fc 01       	movw	r30, r24
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	89 f6       	brne	.-94     	; 0x29c4 <__stack+0x7c5>
    2a22:	2f c0       	rjmp	.+94     	; 0x2a82 <__stack+0x883>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	8e 01       	movw	r16, r28
    2a26:	05 5b       	subi	r16, 0xB5	; 181
    2a28:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	89 5b       	subi	r24, 0xB9	; 185
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	fc 01       	movw	r30, r24
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	ce 01       	movw	r24, r28
    2a4a:	81 5b       	subi	r24, 0xB1	; 177
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	9e 01       	movw	r18, r28
    2a50:	25 5b       	subi	r18, 0xB5	; 181
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	f9 01       	movw	r30, r18
    2a56:	20 81       	ld	r18, Z
    2a58:	31 81       	ldd	r19, Z+1	; 0x01
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	31 83       	std	Z+1, r19	; 0x01
    2a5e:	20 83       	st	Z, r18
    2a60:	ce 01       	movw	r24, r28
    2a62:	81 5b       	subi	r24, 0xB1	; 177
    2a64:	9f 4f       	sbci	r25, 0xFF	; 255
    2a66:	fc 01       	movw	r30, r24
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	8c 01       	movw	r16, r24
    2a6e:	c8 01       	movw	r24, r16
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <__stack+0x871>
    2a74:	8c 01       	movw	r16, r24
    2a76:	ce 01       	movw	r24, r28
    2a78:	81 5b       	subi	r24, 0xB1	; 177
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	11 83       	std	Z+1, r17	; 0x01
    2a80:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    2a82:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    2a86:	7b c3       	rjmp	.+1782   	; 0x317e <__stack+0xf7f>
				}
				else
				{
					if(compass==7)
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	87 30       	cpi	r24, 0x07	; 7
    2a8e:	91 05       	cpc	r25, r1
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <__stack+0x895>
    2a92:	b8 c1       	rjmp	.+880    	; 0x2e04 <__stack+0xc05>
					{
						coor[1]=coor[1]+1;
    2a94:	80 91 8b 04 	lds	r24, 0x048B
    2a98:	90 91 8c 04 	lds	r25, 0x048C
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	90 93 8c 04 	sts	0x048C, r25
    2aa2:	80 93 8b 04 	sts	0x048B, r24
						compass=4;
    2aa6:	84 e0       	ldi	r24, 0x04	; 4
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9c 83       	std	Y+4, r25	; 0x04
    2aac:	8b 83       	std	Y+3, r24	; 0x03
    2aae:	9e 01       	movw	r18, r28
    2ab0:	2f 5a       	subi	r18, 0xAF	; 175
    2ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	aa ef       	ldi	r26, 0xFA	; 250
    2aba:	b3 e4       	ldi	r27, 0x43	; 67
    2abc:	f9 01       	movw	r30, r18
    2abe:	80 83       	st	Z, r24
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	a2 83       	std	Z+2, r26	; 0x02
    2ac4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ac6:	8e 01       	movw	r16, r28
    2ac8:	0b 5a       	subi	r16, 0xAB	; 171
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	ce 01       	movw	r24, r28
    2ace:	8f 5a       	subi	r24, 0xAF	; 175
    2ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	26 e6       	ldi	r18, 0x66	; 102
    2ade:	36 e6       	ldi	r19, 0x66	; 102
    2ae0:	46 e6       	ldi	r20, 0x66	; 102
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	f8 01       	movw	r30, r16
    2aee:	80 83       	st	Z, r24
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	a2 83       	std	Z+2, r26	; 0x02
    2af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af6:	ce 01       	movw	r24, r28
    2af8:	8b 5a       	subi	r24, 0xAB	; 171
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	11 e0       	ldi	r17, 0x01	; 1
    2afe:	fc 01       	movw	r30, r24
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <__stack+0x91b>
    2b18:	10 e0       	ldi	r17, 0x00	; 0
    2b1a:	11 23       	and	r17, r17
    2b1c:	49 f0       	breq	.+18     	; 0x2b30 <__stack+0x931>
		__ticks = 1;
    2b1e:	ce 01       	movw	r24, r28
    2b20:	87 5a       	subi	r24, 0xA7	; 167
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	21 e0       	ldi	r18, 0x01	; 1
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	fc 01       	movw	r30, r24
    2b2a:	31 83       	std	Z+1, r19	; 0x01
    2b2c:	20 83       	st	Z, r18
    2b2e:	74 c0       	rjmp	.+232    	; 0x2c18 <__stack+0xa19>
	else if (__tmp > 65535)
    2b30:	ce 01       	movw	r24, r28
    2b32:	8b 5a       	subi	r24, 0xAB	; 171
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	11 e0       	ldi	r17, 0x01	; 1
    2b38:	fc 01       	movw	r30, r24
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	0c f0       	brlt	.+2      	; 0x2b54 <__stack+0x955>
    2b52:	10 e0       	ldi	r17, 0x00	; 0
    2b54:	11 23       	and	r17, r17
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <__stack+0x95b>
    2b58:	4d c0       	rjmp	.+154    	; 0x2bf4 <__stack+0x9f5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	8f 5a       	subi	r24, 0xAF	; 175
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	fc 01       	movw	r30, r24
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8e 01       	movw	r16, r28
    2b7c:	07 5a       	subi	r16, 0xA7	; 167
    2b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	27 c0       	rjmp	.+78     	; 0x2be2 <__stack+0x9e3>
    2b94:	ce 01       	movw	r24, r28
    2b96:	85 5a       	subi	r24, 0xA5	; 165
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	20 e7       	ldi	r18, 0x70	; 112
    2b9c:	31 e0       	ldi	r19, 0x01	; 1
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	31 83       	std	Z+1, r19	; 0x01
    2ba2:	20 83       	st	Z, r18
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	85 5a       	subi	r24, 0xA5	; 165
    2ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    2baa:	fc 01       	movw	r30, r24
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	8c 01       	movw	r16, r24
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <__stack+0x9b5>
    2bb8:	8c 01       	movw	r16, r24
    2bba:	ce 01       	movw	r24, r28
    2bbc:	85 5a       	subi	r24, 0xA5	; 165
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	11 83       	std	Z+1, r17	; 0x01
    2bc4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	87 5a       	subi	r24, 0xA7	; 167
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	9e 01       	movw	r18, r28
    2bce:	27 5a       	subi	r18, 0xA7	; 167
    2bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd2:	f9 01       	movw	r30, r18
    2bd4:	20 81       	ld	r18, Z
    2bd6:	31 81       	ldd	r19, Z+1	; 0x01
    2bd8:	21 50       	subi	r18, 0x01	; 1
    2bda:	30 40       	sbci	r19, 0x00	; 0
    2bdc:	fc 01       	movw	r30, r24
    2bde:	31 83       	std	Z+1, r19	; 0x01
    2be0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	ce 01       	movw	r24, r28
    2be4:	87 5a       	subi	r24, 0xA7	; 167
    2be6:	9f 4f       	sbci	r25, 0xFF	; 255
    2be8:	fc 01       	movw	r30, r24
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	89 f6       	brne	.-94     	; 0x2b94 <__stack+0x995>
    2bf2:	2f c0       	rjmp	.+94     	; 0x2c52 <__stack+0xa53>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	07 5a       	subi	r16, 0xA7	; 167
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	8b 5a       	subi	r24, 0xAB	; 171
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	fc 01       	movw	r30, r24
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	f8 01       	movw	r30, r16
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	ce 01       	movw	r24, r28
    2c1a:	83 5a       	subi	r24, 0xA3	; 163
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	9e 01       	movw	r18, r28
    2c20:	27 5a       	subi	r18, 0xA7	; 167
    2c22:	3f 4f       	sbci	r19, 0xFF	; 255
    2c24:	f9 01       	movw	r30, r18
    2c26:	20 81       	ld	r18, Z
    2c28:	31 81       	ldd	r19, Z+1	; 0x01
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	31 83       	std	Z+1, r19	; 0x01
    2c2e:	20 83       	st	Z, r18
    2c30:	ce 01       	movw	r24, r28
    2c32:	83 5a       	subi	r24, 0xA3	; 163
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	fc 01       	movw	r30, r24
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	8c 01       	movw	r16, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <__stack+0xa41>
    2c44:	8c 01       	movw	r16, r24
    2c46:	ce 01       	movw	r24, r28
    2c48:	83 5a       	subi	r24, 0xA3	; 163
    2c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	11 83       	std	Z+1, r17	; 0x01
    2c50:	00 83       	st	Z, r16
						_delay_ms(500);
						right_degrees(85);
    2c52:	85 e5       	ldi	r24, 0x55	; 85
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    2c5a:	9e 01       	movw	r18, r28
    2c5c:	21 5a       	subi	r18, 0xA1	; 161
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a8 ec       	ldi	r26, 0xC8	; 200
    2c66:	b2 e4       	ldi	r27, 0x42	; 66
    2c68:	f9 01       	movw	r30, r18
    2c6a:	80 83       	st	Z, r24
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	a2 83       	std	Z+2, r26	; 0x02
    2c70:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	8e 01       	movw	r16, r28
    2c74:	0d 59       	subi	r16, 0x9D	; 157
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	ce 01       	movw	r24, r28
    2c7a:	81 5a       	subi	r24, 0xA1	; 161
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	fc 01       	movw	r30, r24
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	26 e6       	ldi	r18, 0x66	; 102
    2c8a:	36 e6       	ldi	r19, 0x66	; 102
    2c8c:	46 e6       	ldi	r20, 0x66	; 102
    2c8e:	55 e4       	ldi	r21, 0x45	; 69
    2c90:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	f8 01       	movw	r30, r16
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	8d 59       	subi	r24, 0x9D	; 157
    2ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca8:	11 e0       	ldi	r17, 0x01	; 1
    2caa:	fc 01       	movw	r30, r24
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <__stack+0xac7>
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
    2cc6:	11 23       	and	r17, r17
    2cc8:	49 f0       	breq	.+18     	; 0x2cdc <__stack+0xadd>
		__ticks = 1;
    2cca:	ce 01       	movw	r24, r28
    2ccc:	89 59       	subi	r24, 0x99	; 153
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	21 e0       	ldi	r18, 0x01	; 1
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	31 83       	std	Z+1, r19	; 0x01
    2cd8:	20 83       	st	Z, r18
    2cda:	74 c0       	rjmp	.+232    	; 0x2dc4 <__stack+0xbc5>
	else if (__tmp > 65535)
    2cdc:	ce 01       	movw	r24, r28
    2cde:	8d 59       	subi	r24, 0x9D	; 157
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	11 e0       	ldi	r17, 0x01	; 1
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	0c f0       	brlt	.+2      	; 0x2d00 <__stack+0xb01>
    2cfe:	10 e0       	ldi	r17, 0x00	; 0
    2d00:	11 23       	and	r17, r17
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <__stack+0xb07>
    2d04:	4d c0       	rjmp	.+154    	; 0x2da0 <__stack+0xba1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	ce 01       	movw	r24, r28
    2d08:	81 5a       	subi	r24, 0xA1	; 161
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8e 01       	movw	r16, r28
    2d28:	09 59       	subi	r16, 0x99	; 153
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	f8 01       	movw	r30, r16
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	27 c0       	rjmp	.+78     	; 0x2d8e <__stack+0xb8f>
    2d40:	ce 01       	movw	r24, r28
    2d42:	87 59       	subi	r24, 0x97	; 151
    2d44:	9f 4f       	sbci	r25, 0xFF	; 255
    2d46:	20 e7       	ldi	r18, 0x70	; 112
    2d48:	31 e0       	ldi	r19, 0x01	; 1
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	31 83       	std	Z+1, r19	; 0x01
    2d4e:	20 83       	st	Z, r18
    2d50:	ce 01       	movw	r24, r28
    2d52:	87 59       	subi	r24, 0x97	; 151
    2d54:	9f 4f       	sbci	r25, 0xFF	; 255
    2d56:	fc 01       	movw	r30, r24
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	8c 01       	movw	r16, r24
    2d5e:	c8 01       	movw	r24, r16
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <__stack+0xb61>
    2d64:	8c 01       	movw	r16, r24
    2d66:	ce 01       	movw	r24, r28
    2d68:	87 59       	subi	r24, 0x97	; 151
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	11 83       	std	Z+1, r17	; 0x01
    2d70:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	ce 01       	movw	r24, r28
    2d74:	89 59       	subi	r24, 0x99	; 153
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	9e 01       	movw	r18, r28
    2d7a:	29 59       	subi	r18, 0x99	; 153
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	f9 01       	movw	r30, r18
    2d80:	20 81       	ld	r18, Z
    2d82:	31 81       	ldd	r19, Z+1	; 0x01
    2d84:	21 50       	subi	r18, 0x01	; 1
    2d86:	30 40       	sbci	r19, 0x00	; 0
    2d88:	fc 01       	movw	r30, r24
    2d8a:	31 83       	std	Z+1, r19	; 0x01
    2d8c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	ce 01       	movw	r24, r28
    2d90:	89 59       	subi	r24, 0x99	; 153
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	89 f6       	brne	.-94     	; 0x2d40 <__stack+0xb41>
    2d9e:	2f c0       	rjmp	.+94     	; 0x2dfe <__stack+0xbff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	8e 01       	movw	r16, r28
    2da2:	09 59       	subi	r16, 0x99	; 153
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
    2da6:	ce 01       	movw	r24, r28
    2da8:	8d 59       	subi	r24, 0x9D	; 157
    2daa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dac:	fc 01       	movw	r30, r24
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	85 59       	subi	r24, 0x95	; 149
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	9e 01       	movw	r18, r28
    2dcc:	29 59       	subi	r18, 0x99	; 153
    2dce:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd0:	f9 01       	movw	r30, r18
    2dd2:	20 81       	ld	r18, Z
    2dd4:	31 81       	ldd	r19, Z+1	; 0x01
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	31 83       	std	Z+1, r19	; 0x01
    2dda:	20 83       	st	Z, r18
    2ddc:	ce 01       	movw	r24, r28
    2dde:	85 59       	subi	r24, 0x95	; 149
    2de0:	9f 4f       	sbci	r25, 0xFF	; 255
    2de2:	fc 01       	movw	r30, r24
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	8c 01       	movw	r16, r24
    2dea:	c8 01       	movw	r24, r16
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <__stack+0xbed>
    2df0:	8c 01       	movw	r16, r24
    2df2:	ce 01       	movw	r24, r28
    2df4:	85 59       	subi	r24, 0x95	; 149
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	fc 01       	movw	r30, r24
    2dfa:	11 83       	std	Z+1, r17	; 0x01
    2dfc:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    2dfe:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    2e02:	bd c1       	rjmp	.+890    	; 0x317e <__stack+0xf7f>
					}
					else
					{
						if(compass==5)
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	85 30       	cpi	r24, 0x05	; 5
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <__stack+0xc11>
    2e0e:	b7 c1       	rjmp	.+878    	; 0x317e <__stack+0xf7f>
						{
							coor[1]=coor[1]+1;
    2e10:	80 91 8b 04 	lds	r24, 0x048B
    2e14:	90 91 8c 04 	lds	r25, 0x048C
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	90 93 8c 04 	sts	0x048C, r25
    2e1e:	80 93 8b 04 	sts	0x048B, r24
							compass=4;
    2e22:	84 e0       	ldi	r24, 0x04	; 4
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9c 83       	std	Y+4, r25	; 0x04
    2e28:	8b 83       	std	Y+3, r24	; 0x03
    2e2a:	9e 01       	movw	r18, r28
    2e2c:	23 59       	subi	r18, 0x93	; 147
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	aa ef       	ldi	r26, 0xFA	; 250
    2e36:	b3 e4       	ldi	r27, 0x43	; 67
    2e38:	f9 01       	movw	r30, r18
    2e3a:	80 83       	st	Z, r24
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	a2 83       	std	Z+2, r26	; 0x02
    2e40:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	8e 01       	movw	r16, r28
    2e44:	0f 58       	subi	r16, 0x8F	; 143
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	ce 01       	movw	r24, r28
    2e4a:	83 59       	subi	r24, 0x93	; 147
    2e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4e:	fc 01       	movw	r30, r24
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	26 e6       	ldi	r18, 0x66	; 102
    2e5a:	36 e6       	ldi	r19, 0x66	; 102
    2e5c:	46 e6       	ldi	r20, 0x66	; 102
    2e5e:	55 e4       	ldi	r21, 0x45	; 69
    2e60:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	f8 01       	movw	r30, r16
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e72:	ce 01       	movw	r24, r28
    2e74:	8f 58       	subi	r24, 0x8F	; 143
    2e76:	9f 4f       	sbci	r25, 0xFF	; 255
    2e78:	11 e0       	ldi	r17, 0x01	; 1
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	0c f0       	brlt	.+2      	; 0x2e96 <__stack+0xc97>
    2e94:	10 e0       	ldi	r17, 0x00	; 0
    2e96:	11 23       	and	r17, r17
    2e98:	49 f0       	breq	.+18     	; 0x2eac <__stack+0xcad>
		__ticks = 1;
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	8b 58       	subi	r24, 0x8B	; 139
    2e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea0:	21 e0       	ldi	r18, 0x01	; 1
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	31 83       	std	Z+1, r19	; 0x01
    2ea8:	20 83       	st	Z, r18
    2eaa:	74 c0       	rjmp	.+232    	; 0x2f94 <__stack+0xd95>
	else if (__tmp > 65535)
    2eac:	ce 01       	movw	r24, r28
    2eae:	8f 58       	subi	r24, 0x8F	; 143
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	11 e0       	ldi	r17, 0x01	; 1
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	0c f0       	brlt	.+2      	; 0x2ed0 <__stack+0xcd1>
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	11 23       	and	r17, r17
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <__stack+0xcd7>
    2ed4:	4d c0       	rjmp	.+154    	; 0x2f70 <__stack+0xd71>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	83 59       	subi	r24, 0x93	; 147
    2eda:	9f 4f       	sbci	r25, 0xFF	; 255
    2edc:	fc 01       	movw	r30, r24
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	0b 58       	subi	r16, 0x8B	; 139
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	f8 01       	movw	r30, r16
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
    2f0e:	27 c0       	rjmp	.+78     	; 0x2f5e <__stack+0xd5f>
    2f10:	ce 01       	movw	r24, r28
    2f12:	89 58       	subi	r24, 0x89	; 137
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	20 e7       	ldi	r18, 0x70	; 112
    2f18:	31 e0       	ldi	r19, 0x01	; 1
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	31 83       	std	Z+1, r19	; 0x01
    2f1e:	20 83       	st	Z, r18
    2f20:	ce 01       	movw	r24, r28
    2f22:	89 58       	subi	r24, 0x89	; 137
    2f24:	9f 4f       	sbci	r25, 0xFF	; 255
    2f26:	fc 01       	movw	r30, r24
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	8c 01       	movw	r16, r24
    2f2e:	c8 01       	movw	r24, r16
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <__stack+0xd31>
    2f34:	8c 01       	movw	r16, r24
    2f36:	ce 01       	movw	r24, r28
    2f38:	89 58       	subi	r24, 0x89	; 137
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	11 83       	std	Z+1, r17	; 0x01
    2f40:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f42:	ce 01       	movw	r24, r28
    2f44:	8b 58       	subi	r24, 0x8B	; 139
    2f46:	9f 4f       	sbci	r25, 0xFF	; 255
    2f48:	9e 01       	movw	r18, r28
    2f4a:	2b 58       	subi	r18, 0x8B	; 139
    2f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4e:	f9 01       	movw	r30, r18
    2f50:	20 81       	ld	r18, Z
    2f52:	31 81       	ldd	r19, Z+1	; 0x01
    2f54:	21 50       	subi	r18, 0x01	; 1
    2f56:	30 40       	sbci	r19, 0x00	; 0
    2f58:	fc 01       	movw	r30, r24
    2f5a:	31 83       	std	Z+1, r19	; 0x01
    2f5c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	ce 01       	movw	r24, r28
    2f60:	8b 58       	subi	r24, 0x8B	; 139
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	fc 01       	movw	r30, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	89 f6       	brne	.-94     	; 0x2f10 <__stack+0xd11>
    2f6e:	2f c0       	rjmp	.+94     	; 0x2fce <__stack+0xdcf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	8e 01       	movw	r16, r28
    2f72:	0b 58       	subi	r16, 0x8B	; 139
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	ce 01       	movw	r24, r28
    2f78:	8f 58       	subi	r24, 0x8F	; 143
    2f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	ce 01       	movw	r24, r28
    2f96:	87 58       	subi	r24, 0x87	; 135
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	9e 01       	movw	r18, r28
    2f9c:	2b 58       	subi	r18, 0x8B	; 139
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	20 81       	ld	r18, Z
    2fa4:	31 81       	ldd	r19, Z+1	; 0x01
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	31 83       	std	Z+1, r19	; 0x01
    2faa:	20 83       	st	Z, r18
    2fac:	ce 01       	movw	r24, r28
    2fae:	87 58       	subi	r24, 0x87	; 135
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	8c 01       	movw	r16, r24
    2fba:	c8 01       	movw	r24, r16
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <__stack+0xdbd>
    2fc0:	8c 01       	movw	r16, r24
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	87 58       	subi	r24, 0x87	; 135
    2fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc8:	fc 01       	movw	r30, r24
    2fca:	11 83       	std	Z+1, r17	; 0x01
    2fcc:	00 83       	st	Z, r16
							_delay_ms(500);
							right_degrees(180);
    2fce:	84 eb       	ldi	r24, 0xB4	; 180
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    2fd6:	9e 01       	movw	r18, r28
    2fd8:	25 58       	subi	r18, 0x85	; 133
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	a8 ec       	ldi	r26, 0xC8	; 200
    2fe2:	b2 e4       	ldi	r27, 0x42	; 66
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	8e 01       	movw	r16, r28
    2ff0:	01 58       	subi	r16, 0x81	; 129
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	85 58       	subi	r24, 0x85	; 133
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	60 81       	ld	r22, Z
    2ffe:	71 81       	ldd	r23, Z+1	; 0x01
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	26 e6       	ldi	r18, 0x66	; 102
    3006:	36 e6       	ldi	r19, 0x66	; 102
    3008:	46 e6       	ldi	r20, 0x66	; 102
    300a:	55 e4       	ldi	r21, 0x45	; 69
    300c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	f8 01       	movw	r30, r16
    3016:	80 83       	st	Z, r24
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	a2 83       	std	Z+2, r26	; 0x02
    301c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    301e:	ce 01       	movw	r24, r28
    3020:	81 58       	subi	r24, 0x81	; 129
    3022:	9f 4f       	sbci	r25, 0xFF	; 255
    3024:	11 e0       	ldi	r17, 0x01	; 1
    3026:	fc 01       	movw	r30, r24
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e8       	ldi	r20, 0x80	; 128
    3036:	5f e3       	ldi	r21, 0x3F	; 63
    3038:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    303c:	88 23       	and	r24, r24
    303e:	0c f0       	brlt	.+2      	; 0x3042 <__stack+0xe43>
    3040:	10 e0       	ldi	r17, 0x00	; 0
    3042:	11 23       	and	r17, r17
    3044:	49 f0       	breq	.+18     	; 0x3058 <__stack+0xe59>
		__ticks = 1;
    3046:	ce 01       	movw	r24, r28
    3048:	8d 57       	subi	r24, 0x7D	; 125
    304a:	9f 4f       	sbci	r25, 0xFF	; 255
    304c:	21 e0       	ldi	r18, 0x01	; 1
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	fc 01       	movw	r30, r24
    3052:	31 83       	std	Z+1, r19	; 0x01
    3054:	20 83       	st	Z, r18
    3056:	74 c0       	rjmp	.+232    	; 0x3140 <__stack+0xf41>
	else if (__tmp > 65535)
    3058:	ce 01       	movw	r24, r28
    305a:	81 58       	subi	r24, 0x81	; 129
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	11 e0       	ldi	r17, 0x01	; 1
    3060:	fc 01       	movw	r30, r24
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3f ef       	ldi	r19, 0xFF	; 255
    306e:	4f e7       	ldi	r20, 0x7F	; 127
    3070:	57 e4       	ldi	r21, 0x47	; 71
    3072:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3076:	18 16       	cp	r1, r24
    3078:	0c f0       	brlt	.+2      	; 0x307c <__stack+0xe7d>
    307a:	10 e0       	ldi	r17, 0x00	; 0
    307c:	11 23       	and	r17, r17
    307e:	09 f4       	brne	.+2      	; 0x3082 <__stack+0xe83>
    3080:	4d c0       	rjmp	.+154    	; 0x311c <__stack+0xf1d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	ce 01       	movw	r24, r28
    3084:	85 58       	subi	r24, 0x85	; 133
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	fc 01       	movw	r30, r24
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8e 01       	movw	r16, r28
    30a4:	0d 57       	subi	r16, 0x7D	; 125
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	f8 01       	movw	r30, r16
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
    30ba:	27 c0       	rjmp	.+78     	; 0x310a <__stack+0xf0b>
    30bc:	ce 01       	movw	r24, r28
    30be:	8b 57       	subi	r24, 0x7B	; 123
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	20 e7       	ldi	r18, 0x70	; 112
    30c4:	31 e0       	ldi	r19, 0x01	; 1
    30c6:	fc 01       	movw	r30, r24
    30c8:	31 83       	std	Z+1, r19	; 0x01
    30ca:	20 83       	st	Z, r18
    30cc:	ce 01       	movw	r24, r28
    30ce:	8b 57       	subi	r24, 0x7B	; 123
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
    30d2:	fc 01       	movw	r30, r24
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	8c 01       	movw	r16, r24
    30da:	c8 01       	movw	r24, r16
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <__stack+0xedd>
    30e0:	8c 01       	movw	r16, r24
    30e2:	ce 01       	movw	r24, r28
    30e4:	8b 57       	subi	r24, 0x7B	; 123
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	fc 01       	movw	r30, r24
    30ea:	11 83       	std	Z+1, r17	; 0x01
    30ec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	ce 01       	movw	r24, r28
    30f0:	8d 57       	subi	r24, 0x7D	; 125
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	9e 01       	movw	r18, r28
    30f6:	2d 57       	subi	r18, 0x7D	; 125
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	f9 01       	movw	r30, r18
    30fc:	20 81       	ld	r18, Z
    30fe:	31 81       	ldd	r19, Z+1	; 0x01
    3100:	21 50       	subi	r18, 0x01	; 1
    3102:	30 40       	sbci	r19, 0x00	; 0
    3104:	fc 01       	movw	r30, r24
    3106:	31 83       	std	Z+1, r19	; 0x01
    3108:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310a:	ce 01       	movw	r24, r28
    310c:	8d 57       	subi	r24, 0x7D	; 125
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	fc 01       	movw	r30, r24
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	89 f6       	brne	.-94     	; 0x30bc <__stack+0xebd>
    311a:	2f c0       	rjmp	.+94     	; 0x317a <__stack+0xf7b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	8e 01       	movw	r16, r28
    311e:	0d 57       	subi	r16, 0x7D	; 125
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	ce 01       	movw	r24, r28
    3124:	81 58       	subi	r24, 0x81	; 129
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	fc 01       	movw	r30, r24
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	f8 01       	movw	r30, r16
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24
    3140:	ce 01       	movw	r24, r28
    3142:	89 57       	subi	r24, 0x79	; 121
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	9e 01       	movw	r18, r28
    3148:	2d 57       	subi	r18, 0x7D	; 125
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	f9 01       	movw	r30, r18
    314e:	20 81       	ld	r18, Z
    3150:	31 81       	ldd	r19, Z+1	; 0x01
    3152:	fc 01       	movw	r30, r24
    3154:	31 83       	std	Z+1, r19	; 0x01
    3156:	20 83       	st	Z, r18
    3158:	ce 01       	movw	r24, r28
    315a:	89 57       	subi	r24, 0x79	; 121
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	fc 01       	movw	r30, r24
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	8c 01       	movw	r16, r24
    3166:	c8 01       	movw	r24, r16
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <__stack+0xf69>
    316c:	8c 01       	movw	r16, r24
    316e:	ce 01       	movw	r24, r28
    3170:	89 57       	subi	r24, 0x79	; 121
    3172:	9f 4f       	sbci	r25, 0xFF	; 255
    3174:	fc 01       	movw	r30, r24
    3176:	11 83       	std	Z+1, r17	; 0x01
    3178:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    317a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					}
				}	
			}					
			
		}
		if(final[1]<coor[1])
    317e:	ce 01       	movw	r24, r28
    3180:	81 56       	subi	r24, 0x61	; 97
    3182:	9b 4f       	sbci	r25, 0xFB	; 251
    3184:	fc 01       	movw	r30, r24
    3186:	22 81       	ldd	r18, Z+2	; 0x02
    3188:	33 81       	ldd	r19, Z+3	; 0x03
    318a:	80 91 8b 04 	lds	r24, 0x048B
    318e:	90 91 8c 04 	lds	r25, 0x048C
    3192:	28 17       	cp	r18, r24
    3194:	39 07       	cpc	r19, r25
    3196:	0c f0       	brlt	.+2      	; 0x319a <__stack+0xf9b>
    3198:	21 c6       	rjmp	.+3138   	; 0x3ddc <__stack+0x1bdd>
		{
			if(compass==6)
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	86 30       	cpi	r24, 0x06	; 6
    31a0:	91 05       	cpc	r25, r1
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <__stack+0xfa7>
    31a4:	b8 c1       	rjmp	.+880    	; 0x3516 <__stack+0x1317>
			{
				coor[1]=coor[1]-1;
    31a6:	80 91 8b 04 	lds	r24, 0x048B
    31aa:	90 91 8c 04 	lds	r25, 0x048C
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	90 93 8c 04 	sts	0x048C, r25
    31b4:	80 93 8b 04 	sts	0x048B, r24
				compass=5;
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
    31c0:	9e 01       	movw	r18, r28
    31c2:	27 57       	subi	r18, 0x77	; 119
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	aa ef       	ldi	r26, 0xFA	; 250
    31cc:	b3 e4       	ldi	r27, 0x43	; 67
    31ce:	f9 01       	movw	r30, r18
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	8e 01       	movw	r16, r28
    31da:	03 57       	subi	r16, 0x73	; 115
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	ce 01       	movw	r24, r28
    31e0:	87 57       	subi	r24, 0x77	; 119
    31e2:	9f 4f       	sbci	r25, 0xFF	; 255
    31e4:	fc 01       	movw	r30, r24
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	26 e6       	ldi	r18, 0x66	; 102
    31f0:	36 e6       	ldi	r19, 0x66	; 102
    31f2:	46 e6       	ldi	r20, 0x66	; 102
    31f4:	55 e4       	ldi	r21, 0x45	; 69
    31f6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	80 83       	st	Z, r24
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	a2 83       	std	Z+2, r26	; 0x02
    3206:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3208:	ce 01       	movw	r24, r28
    320a:	83 57       	subi	r24, 0x73	; 115
    320c:	9f 4f       	sbci	r25, 0xFF	; 255
    320e:	11 e0       	ldi	r17, 0x01	; 1
    3210:	fc 01       	movw	r30, r24
    3212:	60 81       	ld	r22, Z
    3214:	71 81       	ldd	r23, Z+1	; 0x01
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    3226:	88 23       	and	r24, r24
    3228:	0c f0       	brlt	.+2      	; 0x322c <__stack+0x102d>
    322a:	10 e0       	ldi	r17, 0x00	; 0
    322c:	11 23       	and	r17, r17
    322e:	49 f0       	breq	.+18     	; 0x3242 <__stack+0x1043>
		__ticks = 1;
    3230:	ce 01       	movw	r24, r28
    3232:	8f 56       	subi	r24, 0x6F	; 111
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	21 e0       	ldi	r18, 0x01	; 1
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	fc 01       	movw	r30, r24
    323c:	31 83       	std	Z+1, r19	; 0x01
    323e:	20 83       	st	Z, r18
    3240:	74 c0       	rjmp	.+232    	; 0x332a <__stack+0x112b>
	else if (__tmp > 65535)
    3242:	ce 01       	movw	r24, r28
    3244:	83 57       	subi	r24, 0x73	; 115
    3246:	9f 4f       	sbci	r25, 0xFF	; 255
    3248:	11 e0       	ldi	r17, 0x01	; 1
    324a:	fc 01       	movw	r30, r24
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	3f ef       	ldi	r19, 0xFF	; 255
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	57 e4       	ldi	r21, 0x47	; 71
    325c:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3260:	18 16       	cp	r1, r24
    3262:	0c f0       	brlt	.+2      	; 0x3266 <__stack+0x1067>
    3264:	10 e0       	ldi	r17, 0x00	; 0
    3266:	11 23       	and	r17, r17
    3268:	09 f4       	brne	.+2      	; 0x326c <__stack+0x106d>
    326a:	4d c0       	rjmp	.+154    	; 0x3306 <__stack+0x1107>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	ce 01       	movw	r24, r28
    326e:	87 57       	subi	r24, 0x77	; 119
    3270:	9f 4f       	sbci	r25, 0xFF	; 255
    3272:	fc 01       	movw	r30, r24
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e2       	ldi	r20, 0x20	; 32
    3282:	51 e4       	ldi	r21, 0x41	; 65
    3284:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8e 01       	movw	r16, r28
    328e:	0f 56       	subi	r16, 0x6F	; 111
    3290:	1f 4f       	sbci	r17, 0xFF	; 255
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	27 c0       	rjmp	.+78     	; 0x32f4 <__stack+0x10f5>
    32a6:	ce 01       	movw	r24, r28
    32a8:	8d 56       	subi	r24, 0x6D	; 109
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	20 e7       	ldi	r18, 0x70	; 112
    32ae:	31 e0       	ldi	r19, 0x01	; 1
    32b0:	fc 01       	movw	r30, r24
    32b2:	31 83       	std	Z+1, r19	; 0x01
    32b4:	20 83       	st	Z, r18
    32b6:	ce 01       	movw	r24, r28
    32b8:	8d 56       	subi	r24, 0x6D	; 109
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	fc 01       	movw	r30, r24
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	8c 01       	movw	r16, r24
    32c4:	c8 01       	movw	r24, r16
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <__stack+0x10c7>
    32ca:	8c 01       	movw	r16, r24
    32cc:	ce 01       	movw	r24, r28
    32ce:	8d 56       	subi	r24, 0x6D	; 109
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	fc 01       	movw	r30, r24
    32d4:	11 83       	std	Z+1, r17	; 0x01
    32d6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	ce 01       	movw	r24, r28
    32da:	8f 56       	subi	r24, 0x6F	; 111
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	9e 01       	movw	r18, r28
    32e0:	2f 56       	subi	r18, 0x6F	; 111
    32e2:	3f 4f       	sbci	r19, 0xFF	; 255
    32e4:	f9 01       	movw	r30, r18
    32e6:	20 81       	ld	r18, Z
    32e8:	31 81       	ldd	r19, Z+1	; 0x01
    32ea:	21 50       	subi	r18, 0x01	; 1
    32ec:	30 40       	sbci	r19, 0x00	; 0
    32ee:	fc 01       	movw	r30, r24
    32f0:	31 83       	std	Z+1, r19	; 0x01
    32f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	ce 01       	movw	r24, r28
    32f6:	8f 56       	subi	r24, 0x6F	; 111
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	fc 01       	movw	r30, r24
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	89 f6       	brne	.-94     	; 0x32a6 <__stack+0x10a7>
    3304:	2f c0       	rjmp	.+94     	; 0x3364 <__stack+0x1165>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	8e 01       	movw	r16, r28
    3308:	0f 56       	subi	r16, 0x6F	; 111
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
    330c:	ce 01       	movw	r24, r28
    330e:	83 57       	subi	r24, 0x73	; 115
    3310:	9f 4f       	sbci	r25, 0xFF	; 255
    3312:	fc 01       	movw	r30, r24
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	f8 01       	movw	r30, r16
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
    332a:	ce 01       	movw	r24, r28
    332c:	8b 56       	subi	r24, 0x6B	; 107
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	9e 01       	movw	r18, r28
    3332:	2f 56       	subi	r18, 0x6F	; 111
    3334:	3f 4f       	sbci	r19, 0xFF	; 255
    3336:	f9 01       	movw	r30, r18
    3338:	20 81       	ld	r18, Z
    333a:	31 81       	ldd	r19, Z+1	; 0x01
    333c:	fc 01       	movw	r30, r24
    333e:	31 83       	std	Z+1, r19	; 0x01
    3340:	20 83       	st	Z, r18
    3342:	ce 01       	movw	r24, r28
    3344:	8b 56       	subi	r24, 0x6B	; 107
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	fc 01       	movw	r30, r24
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	8c 01       	movw	r16, r24
    3350:	c8 01       	movw	r24, r16
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <__stack+0x1153>
    3356:	8c 01       	movw	r16, r24
    3358:	ce 01       	movw	r24, r28
    335a:	8b 56       	subi	r24, 0x6B	; 107
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	fc 01       	movw	r30, r24
    3360:	11 83       	std	Z+1, r17	; 0x01
    3362:	00 83       	st	Z, r16
				_delay_ms(500);
				right_degrees(85);
    3364:	85 e5       	ldi	r24, 0x55	; 85
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    336c:	9e 01       	movw	r18, r28
    336e:	29 56       	subi	r18, 0x69	; 105
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a8 ec       	ldi	r26, 0xC8	; 200
    3378:	b2 e4       	ldi	r27, 0x42	; 66
    337a:	f9 01       	movw	r30, r18
    337c:	80 83       	st	Z, r24
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	a2 83       	std	Z+2, r26	; 0x02
    3382:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3384:	8e 01       	movw	r16, r28
    3386:	05 56       	subi	r16, 0x65	; 101
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	ce 01       	movw	r24, r28
    338c:	89 56       	subi	r24, 0x69	; 105
    338e:	9f 4f       	sbci	r25, 0xFF	; 255
    3390:	fc 01       	movw	r30, r24
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	26 e6       	ldi	r18, 0x66	; 102
    339c:	36 e6       	ldi	r19, 0x66	; 102
    339e:	46 e6       	ldi	r20, 0x66	; 102
    33a0:	55 e4       	ldi	r21, 0x45	; 69
    33a2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	f8 01       	movw	r30, r16
    33ac:	80 83       	st	Z, r24
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	a2 83       	std	Z+2, r26	; 0x02
    33b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33b4:	ce 01       	movw	r24, r28
    33b6:	85 56       	subi	r24, 0x65	; 101
    33b8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ba:	11 e0       	ldi	r17, 0x01	; 1
    33bc:	fc 01       	movw	r30, r24
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <__stack+0x11d9>
    33d6:	10 e0       	ldi	r17, 0x00	; 0
    33d8:	11 23       	and	r17, r17
    33da:	49 f0       	breq	.+18     	; 0x33ee <__stack+0x11ef>
		__ticks = 1;
    33dc:	ce 01       	movw	r24, r28
    33de:	81 56       	subi	r24, 0x61	; 97
    33e0:	9f 4f       	sbci	r25, 0xFF	; 255
    33e2:	21 e0       	ldi	r18, 0x01	; 1
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	fc 01       	movw	r30, r24
    33e8:	31 83       	std	Z+1, r19	; 0x01
    33ea:	20 83       	st	Z, r18
    33ec:	74 c0       	rjmp	.+232    	; 0x34d6 <__stack+0x12d7>
	else if (__tmp > 65535)
    33ee:	ce 01       	movw	r24, r28
    33f0:	85 56       	subi	r24, 0x65	; 101
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	11 e0       	ldi	r17, 0x01	; 1
    33f6:	fc 01       	movw	r30, r24
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    340c:	18 16       	cp	r1, r24
    340e:	0c f0       	brlt	.+2      	; 0x3412 <__stack+0x1213>
    3410:	10 e0       	ldi	r17, 0x00	; 0
    3412:	11 23       	and	r17, r17
    3414:	09 f4       	brne	.+2      	; 0x3418 <__stack+0x1219>
    3416:	4d c0       	rjmp	.+154    	; 0x34b2 <__stack+0x12b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3418:	ce 01       	movw	r24, r28
    341a:	89 56       	subi	r24, 0x69	; 105
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	fc 01       	movw	r30, r24
    3420:	60 81       	ld	r22, Z
    3422:	71 81       	ldd	r23, Z+1	; 0x01
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e2       	ldi	r20, 0x20	; 32
    342e:	51 e4       	ldi	r21, 0x41	; 65
    3430:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	8e 01       	movw	r16, r28
    343a:	01 56       	subi	r16, 0x61	; 97
    343c:	1f 4f       	sbci	r17, 0xFF	; 255
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
    3450:	27 c0       	rjmp	.+78     	; 0x34a0 <__stack+0x12a1>
    3452:	ce 01       	movw	r24, r28
    3454:	8f 55       	subi	r24, 0x5F	; 95
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
    3458:	20 e7       	ldi	r18, 0x70	; 112
    345a:	31 e0       	ldi	r19, 0x01	; 1
    345c:	fc 01       	movw	r30, r24
    345e:	31 83       	std	Z+1, r19	; 0x01
    3460:	20 83       	st	Z, r18
    3462:	ce 01       	movw	r24, r28
    3464:	8f 55       	subi	r24, 0x5F	; 95
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	fc 01       	movw	r30, r24
    346a:	80 81       	ld	r24, Z
    346c:	91 81       	ldd	r25, Z+1	; 0x01
    346e:	8c 01       	movw	r16, r24
    3470:	c8 01       	movw	r24, r16
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <__stack+0x1273>
    3476:	8c 01       	movw	r16, r24
    3478:	ce 01       	movw	r24, r28
    347a:	8f 55       	subi	r24, 0x5F	; 95
    347c:	9f 4f       	sbci	r25, 0xFF	; 255
    347e:	fc 01       	movw	r30, r24
    3480:	11 83       	std	Z+1, r17	; 0x01
    3482:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3484:	ce 01       	movw	r24, r28
    3486:	81 56       	subi	r24, 0x61	; 97
    3488:	9f 4f       	sbci	r25, 0xFF	; 255
    348a:	9e 01       	movw	r18, r28
    348c:	21 56       	subi	r18, 0x61	; 97
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	f9 01       	movw	r30, r18
    3492:	20 81       	ld	r18, Z
    3494:	31 81       	ldd	r19, Z+1	; 0x01
    3496:	21 50       	subi	r18, 0x01	; 1
    3498:	30 40       	sbci	r19, 0x00	; 0
    349a:	fc 01       	movw	r30, r24
    349c:	31 83       	std	Z+1, r19	; 0x01
    349e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	ce 01       	movw	r24, r28
    34a2:	81 56       	subi	r24, 0x61	; 97
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	fc 01       	movw	r30, r24
    34a8:	80 81       	ld	r24, Z
    34aa:	91 81       	ldd	r25, Z+1	; 0x01
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	89 f6       	brne	.-94     	; 0x3452 <__stack+0x1253>
    34b0:	2f c0       	rjmp	.+94     	; 0x3510 <__stack+0x1311>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	8e 01       	movw	r16, r28
    34b4:	01 56       	subi	r16, 0x61	; 97
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	ce 01       	movw	r24, r28
    34ba:	85 56       	subi	r24, 0x65	; 101
    34bc:	9f 4f       	sbci	r25, 0xFF	; 255
    34be:	fc 01       	movw	r30, r24
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	f8 01       	movw	r30, r16
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
    34d6:	ce 01       	movw	r24, r28
    34d8:	8d 55       	subi	r24, 0x5D	; 93
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	9e 01       	movw	r18, r28
    34de:	21 56       	subi	r18, 0x61	; 97
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	f9 01       	movw	r30, r18
    34e4:	20 81       	ld	r18, Z
    34e6:	31 81       	ldd	r19, Z+1	; 0x01
    34e8:	fc 01       	movw	r30, r24
    34ea:	31 83       	std	Z+1, r19	; 0x01
    34ec:	20 83       	st	Z, r18
    34ee:	ce 01       	movw	r24, r28
    34f0:	8d 55       	subi	r24, 0x5D	; 93
    34f2:	9f 4f       	sbci	r25, 0xFF	; 255
    34f4:	fc 01       	movw	r30, r24
    34f6:	80 81       	ld	r24, Z
    34f8:	91 81       	ldd	r25, Z+1	; 0x01
    34fa:	8c 01       	movw	r16, r24
    34fc:	c8 01       	movw	r24, r16
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <__stack+0x12ff>
    3502:	8c 01       	movw	r16, r24
    3504:	ce 01       	movw	r24, r28
    3506:	8d 55       	subi	r24, 0x5D	; 93
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	fc 01       	movw	r30, r24
    350c:	11 83       	std	Z+1, r17	; 0x01
    350e:	00 83       	st	Z, r16
				_delay_ms(100);
				linefollwer();
    3510:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    3514:	63 c4       	rjmp	.+2246   	; 0x3ddc <__stack+0x1bdd>
			}
			else
			{
				if(compass==7)
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	9c 81       	ldd	r25, Y+4	; 0x04
    351a:	87 30       	cpi	r24, 0x07	; 7
    351c:	91 05       	cpc	r25, r1
    351e:	09 f0       	breq	.+2      	; 0x3522 <__stack+0x1323>
    3520:	b8 c1       	rjmp	.+880    	; 0x3892 <__stack+0x1693>
				{
					coor[1]=coor[1]-1;
    3522:	80 91 8b 04 	lds	r24, 0x048B
    3526:	90 91 8c 04 	lds	r25, 0x048C
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	90 93 8c 04 	sts	0x048C, r25
    3530:	80 93 8b 04 	sts	0x048B, r24
					compass=5;
    3534:	85 e0       	ldi	r24, 0x05	; 5
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	8b 83       	std	Y+3, r24	; 0x03
    353c:	9e 01       	movw	r18, r28
    353e:	2b 55       	subi	r18, 0x5B	; 91
    3540:	3f 4f       	sbci	r19, 0xFF	; 255
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	aa ef       	ldi	r26, 0xFA	; 250
    3548:	b3 e4       	ldi	r27, 0x43	; 67
    354a:	f9 01       	movw	r30, r18
    354c:	80 83       	st	Z, r24
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	a2 83       	std	Z+2, r26	; 0x02
    3552:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3554:	8e 01       	movw	r16, r28
    3556:	07 55       	subi	r16, 0x57	; 87
    3558:	1f 4f       	sbci	r17, 0xFF	; 255
    355a:	ce 01       	movw	r24, r28
    355c:	8b 55       	subi	r24, 0x5B	; 91
    355e:	9f 4f       	sbci	r25, 0xFF	; 255
    3560:	fc 01       	movw	r30, r24
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	26 e6       	ldi	r18, 0x66	; 102
    356c:	36 e6       	ldi	r19, 0x66	; 102
    356e:	46 e6       	ldi	r20, 0x66	; 102
    3570:	55 e4       	ldi	r21, 0x45	; 69
    3572:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	f8 01       	movw	r30, r16
    357c:	80 83       	st	Z, r24
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	a2 83       	std	Z+2, r26	; 0x02
    3582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3584:	ce 01       	movw	r24, r28
    3586:	87 55       	subi	r24, 0x57	; 87
    3588:	9f 4f       	sbci	r25, 0xFF	; 255
    358a:	11 e0       	ldi	r17, 0x01	; 1
    358c:	fc 01       	movw	r30, r24
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e8       	ldi	r20, 0x80	; 128
    359c:	5f e3       	ldi	r21, 0x3F	; 63
    359e:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    35a2:	88 23       	and	r24, r24
    35a4:	0c f0       	brlt	.+2      	; 0x35a8 <__stack+0x13a9>
    35a6:	10 e0       	ldi	r17, 0x00	; 0
    35a8:	11 23       	and	r17, r17
    35aa:	49 f0       	breq	.+18     	; 0x35be <__stack+0x13bf>
		__ticks = 1;
    35ac:	ce 01       	movw	r24, r28
    35ae:	83 55       	subi	r24, 0x53	; 83
    35b0:	9f 4f       	sbci	r25, 0xFF	; 255
    35b2:	21 e0       	ldi	r18, 0x01	; 1
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	fc 01       	movw	r30, r24
    35b8:	31 83       	std	Z+1, r19	; 0x01
    35ba:	20 83       	st	Z, r18
    35bc:	74 c0       	rjmp	.+232    	; 0x36a6 <__stack+0x14a7>
	else if (__tmp > 65535)
    35be:	ce 01       	movw	r24, r28
    35c0:	87 55       	subi	r24, 0x57	; 87
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	11 e0       	ldi	r17, 0x01	; 1
    35c6:	fc 01       	movw	r30, r24
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	3f ef       	ldi	r19, 0xFF	; 255
    35d4:	4f e7       	ldi	r20, 0x7F	; 127
    35d6:	57 e4       	ldi	r21, 0x47	; 71
    35d8:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    35dc:	18 16       	cp	r1, r24
    35de:	0c f0       	brlt	.+2      	; 0x35e2 <__stack+0x13e3>
    35e0:	10 e0       	ldi	r17, 0x00	; 0
    35e2:	11 23       	and	r17, r17
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <__stack+0x13e9>
    35e6:	4d c0       	rjmp	.+154    	; 0x3682 <__stack+0x1483>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e8:	ce 01       	movw	r24, r28
    35ea:	8b 55       	subi	r24, 0x5B	; 91
    35ec:	9f 4f       	sbci	r25, 0xFF	; 255
    35ee:	fc 01       	movw	r30, r24
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	8e 01       	movw	r16, r28
    360a:	03 55       	subi	r16, 0x53	; 83
    360c:	1f 4f       	sbci	r17, 0xFF	; 255
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	f8 01       	movw	r30, r16
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
    3620:	27 c0       	rjmp	.+78     	; 0x3670 <__stack+0x1471>
    3622:	ce 01       	movw	r24, r28
    3624:	81 55       	subi	r24, 0x51	; 81
    3626:	9f 4f       	sbci	r25, 0xFF	; 255
    3628:	20 e7       	ldi	r18, 0x70	; 112
    362a:	31 e0       	ldi	r19, 0x01	; 1
    362c:	fc 01       	movw	r30, r24
    362e:	31 83       	std	Z+1, r19	; 0x01
    3630:	20 83       	st	Z, r18
    3632:	ce 01       	movw	r24, r28
    3634:	81 55       	subi	r24, 0x51	; 81
    3636:	9f 4f       	sbci	r25, 0xFF	; 255
    3638:	fc 01       	movw	r30, r24
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	8c 01       	movw	r16, r24
    3640:	c8 01       	movw	r24, r16
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <__stack+0x1443>
    3646:	8c 01       	movw	r16, r24
    3648:	ce 01       	movw	r24, r28
    364a:	81 55       	subi	r24, 0x51	; 81
    364c:	9f 4f       	sbci	r25, 0xFF	; 255
    364e:	fc 01       	movw	r30, r24
    3650:	11 83       	std	Z+1, r17	; 0x01
    3652:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	ce 01       	movw	r24, r28
    3656:	83 55       	subi	r24, 0x53	; 83
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	9e 01       	movw	r18, r28
    365c:	23 55       	subi	r18, 0x53	; 83
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	f9 01       	movw	r30, r18
    3662:	20 81       	ld	r18, Z
    3664:	31 81       	ldd	r19, Z+1	; 0x01
    3666:	21 50       	subi	r18, 0x01	; 1
    3668:	30 40       	sbci	r19, 0x00	; 0
    366a:	fc 01       	movw	r30, r24
    366c:	31 83       	std	Z+1, r19	; 0x01
    366e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3670:	ce 01       	movw	r24, r28
    3672:	83 55       	subi	r24, 0x53	; 83
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	fc 01       	movw	r30, r24
    3678:	80 81       	ld	r24, Z
    367a:	91 81       	ldd	r25, Z+1	; 0x01
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	89 f6       	brne	.-94     	; 0x3622 <__stack+0x1423>
    3680:	2f c0       	rjmp	.+94     	; 0x36e0 <__stack+0x14e1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3682:	8e 01       	movw	r16, r28
    3684:	03 55       	subi	r16, 0x53	; 83
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	ce 01       	movw	r24, r28
    368a:	87 55       	subi	r24, 0x57	; 87
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	fc 01       	movw	r30, r24
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	f8 01       	movw	r30, r16
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
    36a6:	ce 01       	movw	r24, r28
    36a8:	8f 54       	subi	r24, 0x4F	; 79
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	9e 01       	movw	r18, r28
    36ae:	23 55       	subi	r18, 0x53	; 83
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	f9 01       	movw	r30, r18
    36b4:	20 81       	ld	r18, Z
    36b6:	31 81       	ldd	r19, Z+1	; 0x01
    36b8:	fc 01       	movw	r30, r24
    36ba:	31 83       	std	Z+1, r19	; 0x01
    36bc:	20 83       	st	Z, r18
    36be:	ce 01       	movw	r24, r28
    36c0:	8f 54       	subi	r24, 0x4F	; 79
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	fc 01       	movw	r30, r24
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	8c 01       	movw	r16, r24
    36cc:	c8 01       	movw	r24, r16
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <__stack+0x14cf>
    36d2:	8c 01       	movw	r16, r24
    36d4:	ce 01       	movw	r24, r28
    36d6:	8f 54       	subi	r24, 0x4F	; 79
    36d8:	9f 4f       	sbci	r25, 0xFF	; 255
    36da:	fc 01       	movw	r30, r24
    36dc:	11 83       	std	Z+1, r17	; 0x01
    36de:	00 83       	st	Z, r16
					_delay_ms(500);
					left_degrees(85);
    36e0:	85 e5       	ldi	r24, 0x55	; 85
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    36e8:	9e 01       	movw	r18, r28
    36ea:	2d 54       	subi	r18, 0x4D	; 77
    36ec:	3f 4f       	sbci	r19, 0xFF	; 255
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a8 ec       	ldi	r26, 0xC8	; 200
    36f4:	b2 e4       	ldi	r27, 0x42	; 66
    36f6:	f9 01       	movw	r30, r18
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3700:	8e 01       	movw	r16, r28
    3702:	09 54       	subi	r16, 0x49	; 73
    3704:	1f 4f       	sbci	r17, 0xFF	; 255
    3706:	ce 01       	movw	r24, r28
    3708:	8d 54       	subi	r24, 0x4D	; 77
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	fc 01       	movw	r30, r24
    370e:	60 81       	ld	r22, Z
    3710:	71 81       	ldd	r23, Z+1	; 0x01
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	26 e6       	ldi	r18, 0x66	; 102
    3718:	36 e6       	ldi	r19, 0x66	; 102
    371a:	46 e6       	ldi	r20, 0x66	; 102
    371c:	55 e4       	ldi	r21, 0x45	; 69
    371e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	f8 01       	movw	r30, r16
    3728:	80 83       	st	Z, r24
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	a2 83       	std	Z+2, r26	; 0x02
    372e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3730:	ce 01       	movw	r24, r28
    3732:	89 54       	subi	r24, 0x49	; 73
    3734:	9f 4f       	sbci	r25, 0xFF	; 255
    3736:	11 e0       	ldi	r17, 0x01	; 1
    3738:	fc 01       	movw	r30, r24
    373a:	60 81       	ld	r22, Z
    373c:	71 81       	ldd	r23, Z+1	; 0x01
    373e:	82 81       	ldd	r24, Z+2	; 0x02
    3740:	93 81       	ldd	r25, Z+3	; 0x03
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e8       	ldi	r20, 0x80	; 128
    3748:	5f e3       	ldi	r21, 0x3F	; 63
    374a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    374e:	88 23       	and	r24, r24
    3750:	0c f0       	brlt	.+2      	; 0x3754 <__stack+0x1555>
    3752:	10 e0       	ldi	r17, 0x00	; 0
    3754:	11 23       	and	r17, r17
    3756:	49 f0       	breq	.+18     	; 0x376a <__stack+0x156b>
		__ticks = 1;
    3758:	ce 01       	movw	r24, r28
    375a:	85 54       	subi	r24, 0x45	; 69
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	21 e0       	ldi	r18, 0x01	; 1
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	fc 01       	movw	r30, r24
    3764:	31 83       	std	Z+1, r19	; 0x01
    3766:	20 83       	st	Z, r18
    3768:	74 c0       	rjmp	.+232    	; 0x3852 <__stack+0x1653>
	else if (__tmp > 65535)
    376a:	ce 01       	movw	r24, r28
    376c:	89 54       	subi	r24, 0x49	; 73
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	11 e0       	ldi	r17, 0x01	; 1
    3772:	fc 01       	movw	r30, r24
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	3f ef       	ldi	r19, 0xFF	; 255
    3780:	4f e7       	ldi	r20, 0x7F	; 127
    3782:	57 e4       	ldi	r21, 0x47	; 71
    3784:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3788:	18 16       	cp	r1, r24
    378a:	0c f0       	brlt	.+2      	; 0x378e <__stack+0x158f>
    378c:	10 e0       	ldi	r17, 0x00	; 0
    378e:	11 23       	and	r17, r17
    3790:	09 f4       	brne	.+2      	; 0x3794 <__stack+0x1595>
    3792:	4d c0       	rjmp	.+154    	; 0x382e <__stack+0x162f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3794:	ce 01       	movw	r24, r28
    3796:	8d 54       	subi	r24, 0x4D	; 77
    3798:	9f 4f       	sbci	r25, 0xFF	; 255
    379a:	fc 01       	movw	r30, r24
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e2       	ldi	r20, 0x20	; 32
    37aa:	51 e4       	ldi	r21, 0x41	; 65
    37ac:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	8e 01       	movw	r16, r28
    37b6:	05 54       	subi	r16, 0x45	; 69
    37b8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ba:	bc 01       	movw	r22, r24
    37bc:	cd 01       	movw	r24, r26
    37be:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	f8 01       	movw	r30, r16
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	80 83       	st	Z, r24
    37cc:	27 c0       	rjmp	.+78     	; 0x381c <__stack+0x161d>
    37ce:	ce 01       	movw	r24, r28
    37d0:	83 54       	subi	r24, 0x43	; 67
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	20 e7       	ldi	r18, 0x70	; 112
    37d6:	31 e0       	ldi	r19, 0x01	; 1
    37d8:	fc 01       	movw	r30, r24
    37da:	31 83       	std	Z+1, r19	; 0x01
    37dc:	20 83       	st	Z, r18
    37de:	ce 01       	movw	r24, r28
    37e0:	83 54       	subi	r24, 0x43	; 67
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	fc 01       	movw	r30, r24
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	8c 01       	movw	r16, r24
    37ec:	c8 01       	movw	r24, r16
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <__stack+0x15ef>
    37f2:	8c 01       	movw	r16, r24
    37f4:	ce 01       	movw	r24, r28
    37f6:	83 54       	subi	r24, 0x43	; 67
    37f8:	9f 4f       	sbci	r25, 0xFF	; 255
    37fa:	fc 01       	movw	r30, r24
    37fc:	11 83       	std	Z+1, r17	; 0x01
    37fe:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	ce 01       	movw	r24, r28
    3802:	85 54       	subi	r24, 0x45	; 69
    3804:	9f 4f       	sbci	r25, 0xFF	; 255
    3806:	9e 01       	movw	r18, r28
    3808:	25 54       	subi	r18, 0x45	; 69
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	f9 01       	movw	r30, r18
    380e:	20 81       	ld	r18, Z
    3810:	31 81       	ldd	r19, Z+1	; 0x01
    3812:	21 50       	subi	r18, 0x01	; 1
    3814:	30 40       	sbci	r19, 0x00	; 0
    3816:	fc 01       	movw	r30, r24
    3818:	31 83       	std	Z+1, r19	; 0x01
    381a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381c:	ce 01       	movw	r24, r28
    381e:	85 54       	subi	r24, 0x45	; 69
    3820:	9f 4f       	sbci	r25, 0xFF	; 255
    3822:	fc 01       	movw	r30, r24
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	89 f6       	brne	.-94     	; 0x37ce <__stack+0x15cf>
    382c:	2f c0       	rjmp	.+94     	; 0x388c <__stack+0x168d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382e:	8e 01       	movw	r16, r28
    3830:	05 54       	subi	r16, 0x45	; 69
    3832:	1f 4f       	sbci	r17, 0xFF	; 255
    3834:	ce 01       	movw	r24, r28
    3836:	89 54       	subi	r24, 0x49	; 73
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	fc 01       	movw	r30, r24
    383c:	60 81       	ld	r22, Z
    383e:	71 81       	ldd	r23, Z+1	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	f8 01       	movw	r30, r16
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	80 83       	st	Z, r24
    3852:	ce 01       	movw	r24, r28
    3854:	81 54       	subi	r24, 0x41	; 65
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	9e 01       	movw	r18, r28
    385a:	25 54       	subi	r18, 0x45	; 69
    385c:	3f 4f       	sbci	r19, 0xFF	; 255
    385e:	f9 01       	movw	r30, r18
    3860:	20 81       	ld	r18, Z
    3862:	31 81       	ldd	r19, Z+1	; 0x01
    3864:	fc 01       	movw	r30, r24
    3866:	31 83       	std	Z+1, r19	; 0x01
    3868:	20 83       	st	Z, r18
    386a:	ce 01       	movw	r24, r28
    386c:	81 54       	subi	r24, 0x41	; 65
    386e:	9f 4f       	sbci	r25, 0xFF	; 255
    3870:	fc 01       	movw	r30, r24
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	8c 01       	movw	r16, r24
    3878:	c8 01       	movw	r24, r16
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <__stack+0x167b>
    387e:	8c 01       	movw	r16, r24
    3880:	ce 01       	movw	r24, r28
    3882:	81 54       	subi	r24, 0x41	; 65
    3884:	9f 4f       	sbci	r25, 0xFF	; 255
    3886:	fc 01       	movw	r30, r24
    3888:	11 83       	std	Z+1, r17	; 0x01
    388a:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    388c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    3890:	a5 c2       	rjmp	.+1354   	; 0x3ddc <__stack+0x1bdd>
				}
				else
				{
					if(compass==5)
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	85 30       	cpi	r24, 0x05	; 5
    3898:	91 05       	cpc	r25, r1
    389a:	09 f0       	breq	.+2      	; 0x389e <__stack+0x169f>
    389c:	e2 c0       	rjmp	.+452    	; 0x3a62 <__stack+0x1863>
					{		   
						coor[1]=coor[1]-1;
    389e:	80 91 8b 04 	lds	r24, 0x048B
    38a2:	90 91 8c 04 	lds	r25, 0x048C
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	90 93 8c 04 	sts	0x048C, r25
    38ac:	80 93 8b 04 	sts	0x048B, r24
						compass=5;
    38b0:	85 e0       	ldi	r24, 0x05	; 5
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9c 83       	std	Y+4, r25	; 0x04
    38b6:	8b 83       	std	Y+3, r24	; 0x03
    38b8:	9e 01       	movw	r18, r28
    38ba:	2f 53       	subi	r18, 0x3F	; 63
    38bc:	3f 4f       	sbci	r19, 0xFF	; 255
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a8 ec       	ldi	r26, 0xC8	; 200
    38c4:	b2 e4       	ldi	r27, 0x42	; 66
    38c6:	f9 01       	movw	r30, r18
    38c8:	80 83       	st	Z, r24
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	a2 83       	std	Z+2, r26	; 0x02
    38ce:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    38d0:	8e 01       	movw	r16, r28
    38d2:	0b 53       	subi	r16, 0x3B	; 59
    38d4:	1f 4f       	sbci	r17, 0xFF	; 255
    38d6:	ce 01       	movw	r24, r28
    38d8:	8f 53       	subi	r24, 0x3F	; 63
    38da:	9f 4f       	sbci	r25, 0xFF	; 255
    38dc:	fc 01       	movw	r30, r24
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	26 e6       	ldi	r18, 0x66	; 102
    38e8:	36 e6       	ldi	r19, 0x66	; 102
    38ea:	46 e6       	ldi	r20, 0x66	; 102
    38ec:	55 e4       	ldi	r21, 0x45	; 69
    38ee:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	f8 01       	movw	r30, r16
    38f8:	80 83       	st	Z, r24
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	a2 83       	std	Z+2, r26	; 0x02
    38fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3900:	ce 01       	movw	r24, r28
    3902:	8b 53       	subi	r24, 0x3B	; 59
    3904:	9f 4f       	sbci	r25, 0xFF	; 255
    3906:	11 e0       	ldi	r17, 0x01	; 1
    3908:	fc 01       	movw	r30, r24
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e8       	ldi	r20, 0x80	; 128
    3918:	5f e3       	ldi	r21, 0x3F	; 63
    391a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    391e:	88 23       	and	r24, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <__stack+0x1725>
    3922:	10 e0       	ldi	r17, 0x00	; 0
    3924:	11 23       	and	r17, r17
    3926:	49 f0       	breq	.+18     	; 0x393a <__stack+0x173b>
		__ticks = 1;
    3928:	ce 01       	movw	r24, r28
    392a:	87 53       	subi	r24, 0x37	; 55
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	21 e0       	ldi	r18, 0x01	; 1
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	fc 01       	movw	r30, r24
    3934:	31 83       	std	Z+1, r19	; 0x01
    3936:	20 83       	st	Z, r18
    3938:	74 c0       	rjmp	.+232    	; 0x3a22 <__stack+0x1823>
	else if (__tmp > 65535)
    393a:	ce 01       	movw	r24, r28
    393c:	8b 53       	subi	r24, 0x3B	; 59
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	11 e0       	ldi	r17, 0x01	; 1
    3942:	fc 01       	movw	r30, r24
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	3f ef       	ldi	r19, 0xFF	; 255
    3950:	4f e7       	ldi	r20, 0x7F	; 127
    3952:	57 e4       	ldi	r21, 0x47	; 71
    3954:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3958:	18 16       	cp	r1, r24
    395a:	0c f0       	brlt	.+2      	; 0x395e <__stack+0x175f>
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	11 23       	and	r17, r17
    3960:	09 f4       	brne	.+2      	; 0x3964 <__stack+0x1765>
    3962:	4d c0       	rjmp	.+154    	; 0x39fe <__stack+0x17ff>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3964:	ce 01       	movw	r24, r28
    3966:	8f 53       	subi	r24, 0x3F	; 63
    3968:	9f 4f       	sbci	r25, 0xFF	; 255
    396a:	fc 01       	movw	r30, r24
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8e 01       	movw	r16, r28
    3986:	07 53       	subi	r16, 0x37	; 55
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	27 c0       	rjmp	.+78     	; 0x39ec <__stack+0x17ed>
    399e:	ce 01       	movw	r24, r28
    39a0:	85 53       	subi	r24, 0x35	; 53
    39a2:	9f 4f       	sbci	r25, 0xFF	; 255
    39a4:	20 e7       	ldi	r18, 0x70	; 112
    39a6:	31 e0       	ldi	r19, 0x01	; 1
    39a8:	fc 01       	movw	r30, r24
    39aa:	31 83       	std	Z+1, r19	; 0x01
    39ac:	20 83       	st	Z, r18
    39ae:	ce 01       	movw	r24, r28
    39b0:	85 53       	subi	r24, 0x35	; 53
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	8c 01       	movw	r16, r24
    39bc:	c8 01       	movw	r24, r16
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <__stack+0x17bf>
    39c2:	8c 01       	movw	r16, r24
    39c4:	ce 01       	movw	r24, r28
    39c6:	85 53       	subi	r24, 0x35	; 53
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	fc 01       	movw	r30, r24
    39cc:	11 83       	std	Z+1, r17	; 0x01
    39ce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d0:	ce 01       	movw	r24, r28
    39d2:	87 53       	subi	r24, 0x37	; 55
    39d4:	9f 4f       	sbci	r25, 0xFF	; 255
    39d6:	9e 01       	movw	r18, r28
    39d8:	27 53       	subi	r18, 0x37	; 55
    39da:	3f 4f       	sbci	r19, 0xFF	; 255
    39dc:	f9 01       	movw	r30, r18
    39de:	20 81       	ld	r18, Z
    39e0:	31 81       	ldd	r19, Z+1	; 0x01
    39e2:	21 50       	subi	r18, 0x01	; 1
    39e4:	30 40       	sbci	r19, 0x00	; 0
    39e6:	fc 01       	movw	r30, r24
    39e8:	31 83       	std	Z+1, r19	; 0x01
    39ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	ce 01       	movw	r24, r28
    39ee:	87 53       	subi	r24, 0x37	; 55
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	fc 01       	movw	r30, r24
    39f4:	80 81       	ld	r24, Z
    39f6:	91 81       	ldd	r25, Z+1	; 0x01
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	89 f6       	brne	.-94     	; 0x399e <__stack+0x179f>
    39fc:	2f c0       	rjmp	.+94     	; 0x3a5c <__stack+0x185d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fe:	8e 01       	movw	r16, r28
    3a00:	07 53       	subi	r16, 0x37	; 55
    3a02:	1f 4f       	sbci	r17, 0xFF	; 255
    3a04:	ce 01       	movw	r24, r28
    3a06:	8b 53       	subi	r24, 0x3B	; 59
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	60 81       	ld	r22, Z
    3a0e:	71 81       	ldd	r23, Z+1	; 0x01
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	93 81       	ldd	r25, Z+3	; 0x03
    3a14:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	f8 01       	movw	r30, r16
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
    3a22:	ce 01       	movw	r24, r28
    3a24:	83 53       	subi	r24, 0x33	; 51
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	9e 01       	movw	r18, r28
    3a2a:	27 53       	subi	r18, 0x37	; 55
    3a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2e:	f9 01       	movw	r30, r18
    3a30:	20 81       	ld	r18, Z
    3a32:	31 81       	ldd	r19, Z+1	; 0x01
    3a34:	fc 01       	movw	r30, r24
    3a36:	31 83       	std	Z+1, r19	; 0x01
    3a38:	20 83       	st	Z, r18
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	83 53       	subi	r24, 0x33	; 51
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	fc 01       	movw	r30, r24
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	8c 01       	movw	r16, r24
    3a48:	c8 01       	movw	r24, r16
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <__stack+0x184b>
    3a4e:	8c 01       	movw	r16, r24
    3a50:	ce 01       	movw	r24, r28
    3a52:	83 53       	subi	r24, 0x33	; 51
    3a54:	9f 4f       	sbci	r25, 0xFF	; 255
    3a56:	fc 01       	movw	r30, r24
    3a58:	11 83       	std	Z+1, r17	; 0x01
    3a5a:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    3a5c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    3a60:	bd c1       	rjmp	.+890    	; 0x3ddc <__stack+0x1bdd>
					}
					else
					{
						if(compass==4)
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	84 30       	cpi	r24, 0x04	; 4
    3a68:	91 05       	cpc	r25, r1
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <__stack+0x186f>
    3a6c:	b7 c1       	rjmp	.+878    	; 0x3ddc <__stack+0x1bdd>
						{
							coor[1]=coor[1]-1;
    3a6e:	80 91 8b 04 	lds	r24, 0x048B
    3a72:	90 91 8c 04 	lds	r25, 0x048C
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	90 93 8c 04 	sts	0x048C, r25
    3a7c:	80 93 8b 04 	sts	0x048B, r24
							compass=5;
    3a80:	85 e0       	ldi	r24, 0x05	; 5
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	9c 83       	std	Y+4, r25	; 0x04
    3a86:	8b 83       	std	Y+3, r24	; 0x03
    3a88:	9e 01       	movw	r18, r28
    3a8a:	21 53       	subi	r18, 0x31	; 49
    3a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	aa ef       	ldi	r26, 0xFA	; 250
    3a94:	b3 e4       	ldi	r27, 0x43	; 67
    3a96:	f9 01       	movw	r30, r18
    3a98:	80 83       	st	Z, r24
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	a2 83       	std	Z+2, r26	; 0x02
    3a9e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3aa0:	8e 01       	movw	r16, r28
    3aa2:	0d 52       	subi	r16, 0x2D	; 45
    3aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	81 53       	subi	r24, 0x31	; 49
    3aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3aac:	fc 01       	movw	r30, r24
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	26 e6       	ldi	r18, 0x66	; 102
    3ab8:	36 e6       	ldi	r19, 0x66	; 102
    3aba:	46 e6       	ldi	r20, 0x66	; 102
    3abc:	55 e4       	ldi	r21, 0x45	; 69
    3abe:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	80 83       	st	Z, r24
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	a2 83       	std	Z+2, r26	; 0x02
    3ace:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	8d 52       	subi	r24, 0x2D	; 45
    3ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad6:	11 e0       	ldi	r17, 0x01	; 1
    3ad8:	fc 01       	movw	r30, r24
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	5f e3       	ldi	r21, 0x3F	; 63
    3aea:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    3aee:	88 23       	and	r24, r24
    3af0:	0c f0       	brlt	.+2      	; 0x3af4 <__stack+0x18f5>
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	11 23       	and	r17, r17
    3af6:	49 f0       	breq	.+18     	; 0x3b0a <__stack+0x190b>
		__ticks = 1;
    3af8:	ce 01       	movw	r24, r28
    3afa:	89 52       	subi	r24, 0x29	; 41
    3afc:	9f 4f       	sbci	r25, 0xFF	; 255
    3afe:	21 e0       	ldi	r18, 0x01	; 1
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	fc 01       	movw	r30, r24
    3b04:	31 83       	std	Z+1, r19	; 0x01
    3b06:	20 83       	st	Z, r18
    3b08:	74 c0       	rjmp	.+232    	; 0x3bf2 <__stack+0x19f3>
	else if (__tmp > 65535)
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	8d 52       	subi	r24, 0x2D	; 45
    3b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b10:	11 e0       	ldi	r17, 0x01	; 1
    3b12:	fc 01       	movw	r30, r24
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	0c f0       	brlt	.+2      	; 0x3b2e <__stack+0x192f>
    3b2c:	10 e0       	ldi	r17, 0x00	; 0
    3b2e:	11 23       	and	r17, r17
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <__stack+0x1935>
    3b32:	4d c0       	rjmp	.+154    	; 0x3bce <__stack+0x19cf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	ce 01       	movw	r24, r28
    3b36:	81 53       	subi	r24, 0x31	; 49
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	60 81       	ld	r22, Z
    3b3e:	71 81       	ldd	r23, Z+1	; 0x01
    3b40:	82 81       	ldd	r24, Z+2	; 0x02
    3b42:	93 81       	ldd	r25, Z+3	; 0x03
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e2       	ldi	r20, 0x20	; 32
    3b4a:	51 e4       	ldi	r21, 0x41	; 65
    3b4c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	8e 01       	movw	r16, r28
    3b56:	09 52       	subi	r16, 0x29	; 41
    3b58:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5a:	bc 01       	movw	r22, r24
    3b5c:	cd 01       	movw	r24, r26
    3b5e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	f8 01       	movw	r30, r16
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	80 83       	st	Z, r24
    3b6c:	27 c0       	rjmp	.+78     	; 0x3bbc <__stack+0x19bd>
    3b6e:	ce 01       	movw	r24, r28
    3b70:	87 52       	subi	r24, 0x27	; 39
    3b72:	9f 4f       	sbci	r25, 0xFF	; 255
    3b74:	20 e7       	ldi	r18, 0x70	; 112
    3b76:	31 e0       	ldi	r19, 0x01	; 1
    3b78:	fc 01       	movw	r30, r24
    3b7a:	31 83       	std	Z+1, r19	; 0x01
    3b7c:	20 83       	st	Z, r18
    3b7e:	ce 01       	movw	r24, r28
    3b80:	87 52       	subi	r24, 0x27	; 39
    3b82:	9f 4f       	sbci	r25, 0xFF	; 255
    3b84:	fc 01       	movw	r30, r24
    3b86:	80 81       	ld	r24, Z
    3b88:	91 81       	ldd	r25, Z+1	; 0x01
    3b8a:	8c 01       	movw	r16, r24
    3b8c:	c8 01       	movw	r24, r16
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <__stack+0x198f>
    3b92:	8c 01       	movw	r16, r24
    3b94:	ce 01       	movw	r24, r28
    3b96:	87 52       	subi	r24, 0x27	; 39
    3b98:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	11 83       	std	Z+1, r17	; 0x01
    3b9e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	89 52       	subi	r24, 0x29	; 41
    3ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba6:	9e 01       	movw	r18, r28
    3ba8:	29 52       	subi	r18, 0x29	; 41
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	f9 01       	movw	r30, r18
    3bae:	20 81       	ld	r18, Z
    3bb0:	31 81       	ldd	r19, Z+1	; 0x01
    3bb2:	21 50       	subi	r18, 0x01	; 1
    3bb4:	30 40       	sbci	r19, 0x00	; 0
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	31 83       	std	Z+1, r19	; 0x01
    3bba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	89 52       	subi	r24, 0x29	; 41
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	89 f6       	brne	.-94     	; 0x3b6e <__stack+0x196f>
    3bcc:	2f c0       	rjmp	.+94     	; 0x3c2c <__stack+0x1a2d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	8e 01       	movw	r16, r28
    3bd0:	09 52       	subi	r16, 0x29	; 41
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	8d 52       	subi	r24, 0x2D	; 45
    3bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bda:	fc 01       	movw	r30, r24
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	f8 01       	movw	r30, r16
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	80 83       	st	Z, r24
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	85 52       	subi	r24, 0x25	; 37
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	9e 01       	movw	r18, r28
    3bfa:	29 52       	subi	r18, 0x29	; 41
    3bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfe:	f9 01       	movw	r30, r18
    3c00:	20 81       	ld	r18, Z
    3c02:	31 81       	ldd	r19, Z+1	; 0x01
    3c04:	fc 01       	movw	r30, r24
    3c06:	31 83       	std	Z+1, r19	; 0x01
    3c08:	20 83       	st	Z, r18
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	85 52       	subi	r24, 0x25	; 37
    3c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c10:	fc 01       	movw	r30, r24
    3c12:	80 81       	ld	r24, Z
    3c14:	91 81       	ldd	r25, Z+1	; 0x01
    3c16:	8c 01       	movw	r16, r24
    3c18:	c8 01       	movw	r24, r16
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <__stack+0x1a1b>
    3c1e:	8c 01       	movw	r16, r24
    3c20:	ce 01       	movw	r24, r28
    3c22:	85 52       	subi	r24, 0x25	; 37
    3c24:	9f 4f       	sbci	r25, 0xFF	; 255
    3c26:	fc 01       	movw	r30, r24
    3c28:	11 83       	std	Z+1, r17	; 0x01
    3c2a:	00 83       	st	Z, r16
							_delay_ms(500);
							right_degrees(180);
    3c2c:	84 eb       	ldi	r24, 0xB4	; 180
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    3c34:	9e 01       	movw	r18, r28
    3c36:	23 52       	subi	r18, 0x23	; 35
    3c38:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	a8 ec       	ldi	r26, 0xC8	; 200
    3c40:	b2 e4       	ldi	r27, 0x42	; 66
    3c42:	f9 01       	movw	r30, r18
    3c44:	80 83       	st	Z, r24
    3c46:	91 83       	std	Z+1, r25	; 0x01
    3c48:	a2 83       	std	Z+2, r26	; 0x02
    3c4a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3c4c:	8e 01       	movw	r16, r28
    3c4e:	0f 51       	subi	r16, 0x1F	; 31
    3c50:	1f 4f       	sbci	r17, 0xFF	; 255
    3c52:	ce 01       	movw	r24, r28
    3c54:	83 52       	subi	r24, 0x23	; 35
    3c56:	9f 4f       	sbci	r25, 0xFF	; 255
    3c58:	fc 01       	movw	r30, r24
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	26 e6       	ldi	r18, 0x66	; 102
    3c64:	36 e6       	ldi	r19, 0x66	; 102
    3c66:	46 e6       	ldi	r20, 0x66	; 102
    3c68:	55 e4       	ldi	r21, 0x45	; 69
    3c6a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	f8 01       	movw	r30, r16
    3c74:	80 83       	st	Z, r24
    3c76:	91 83       	std	Z+1, r25	; 0x01
    3c78:	a2 83       	std	Z+2, r26	; 0x02
    3c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	8f 51       	subi	r24, 0x1F	; 31
    3c80:	9f 4f       	sbci	r25, 0xFF	; 255
    3c82:	11 e0       	ldi	r17, 0x01	; 1
    3c84:	fc 01       	movw	r30, r24
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 e8       	ldi	r20, 0x80	; 128
    3c94:	5f e3       	ldi	r21, 0x3F	; 63
    3c96:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    3c9a:	88 23       	and	r24, r24
    3c9c:	0c f0       	brlt	.+2      	; 0x3ca0 <__stack+0x1aa1>
    3c9e:	10 e0       	ldi	r17, 0x00	; 0
    3ca0:	11 23       	and	r17, r17
    3ca2:	49 f0       	breq	.+18     	; 0x3cb6 <__stack+0x1ab7>
		__ticks = 1;
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	8b 51       	subi	r24, 0x1B	; 27
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	21 e0       	ldi	r18, 0x01	; 1
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	fc 01       	movw	r30, r24
    3cb0:	31 83       	std	Z+1, r19	; 0x01
    3cb2:	20 83       	st	Z, r18
    3cb4:	74 c0       	rjmp	.+232    	; 0x3d9e <__stack+0x1b9f>
	else if (__tmp > 65535)
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	8f 51       	subi	r24, 0x1F	; 31
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	11 e0       	ldi	r17, 0x01	; 1
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	60 81       	ld	r22, Z
    3cc2:	71 81       	ldd	r23, Z+1	; 0x01
    3cc4:	82 81       	ldd	r24, Z+2	; 0x02
    3cc6:	93 81       	ldd	r25, Z+3	; 0x03
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	3f ef       	ldi	r19, 0xFF	; 255
    3ccc:	4f e7       	ldi	r20, 0x7F	; 127
    3cce:	57 e4       	ldi	r21, 0x47	; 71
    3cd0:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3cd4:	18 16       	cp	r1, r24
    3cd6:	0c f0       	brlt	.+2      	; 0x3cda <__stack+0x1adb>
    3cd8:	10 e0       	ldi	r17, 0x00	; 0
    3cda:	11 23       	and	r17, r17
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <__stack+0x1ae1>
    3cde:	4d c0       	rjmp	.+154    	; 0x3d7a <__stack+0x1b7b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	83 52       	subi	r24, 0x23	; 35
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	60 81       	ld	r22, Z
    3cea:	71 81       	ldd	r23, Z+1	; 0x01
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	93 81       	ldd	r25, Z+3	; 0x03
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e2       	ldi	r20, 0x20	; 32
    3cf6:	51 e4       	ldi	r21, 0x41	; 65
    3cf8:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8e 01       	movw	r16, r28
    3d02:	0b 51       	subi	r16, 0x1B	; 27
    3d04:	1f 4f       	sbci	r17, 0xFF	; 255
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	f8 01       	movw	r30, r16
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	80 83       	st	Z, r24
    3d18:	27 c0       	rjmp	.+78     	; 0x3d68 <__stack+0x1b69>
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	89 51       	subi	r24, 0x19	; 25
    3d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d20:	20 e7       	ldi	r18, 0x70	; 112
    3d22:	31 e0       	ldi	r19, 0x01	; 1
    3d24:	fc 01       	movw	r30, r24
    3d26:	31 83       	std	Z+1, r19	; 0x01
    3d28:	20 83       	st	Z, r18
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	89 51       	subi	r24, 0x19	; 25
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	fc 01       	movw	r30, r24
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	8c 01       	movw	r16, r24
    3d38:	c8 01       	movw	r24, r16
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <__stack+0x1b3b>
    3d3e:	8c 01       	movw	r16, r24
    3d40:	ce 01       	movw	r24, r28
    3d42:	89 51       	subi	r24, 0x19	; 25
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	fc 01       	movw	r30, r24
    3d48:	11 83       	std	Z+1, r17	; 0x01
    3d4a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	8b 51       	subi	r24, 0x1B	; 27
    3d50:	9f 4f       	sbci	r25, 0xFF	; 255
    3d52:	9e 01       	movw	r18, r28
    3d54:	2b 51       	subi	r18, 0x1B	; 27
    3d56:	3f 4f       	sbci	r19, 0xFF	; 255
    3d58:	f9 01       	movw	r30, r18
    3d5a:	20 81       	ld	r18, Z
    3d5c:	31 81       	ldd	r19, Z+1	; 0x01
    3d5e:	21 50       	subi	r18, 0x01	; 1
    3d60:	30 40       	sbci	r19, 0x00	; 0
    3d62:	fc 01       	movw	r30, r24
    3d64:	31 83       	std	Z+1, r19	; 0x01
    3d66:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d68:	ce 01       	movw	r24, r28
    3d6a:	8b 51       	subi	r24, 0x1B	; 27
    3d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6e:	fc 01       	movw	r30, r24
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	89 f6       	brne	.-94     	; 0x3d1a <__stack+0x1b1b>
    3d78:	2f c0       	rjmp	.+94     	; 0x3dd8 <__stack+0x1bd9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7a:	8e 01       	movw	r16, r28
    3d7c:	0b 51       	subi	r16, 0x1B	; 27
    3d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d80:	ce 01       	movw	r24, r28
    3d82:	8f 51       	subi	r24, 0x1F	; 31
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	fc 01       	movw	r30, r24
    3d88:	60 81       	ld	r22, Z
    3d8a:	71 81       	ldd	r23, Z+1	; 0x01
    3d8c:	82 81       	ldd	r24, Z+2	; 0x02
    3d8e:	93 81       	ldd	r25, Z+3	; 0x03
    3d90:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	f8 01       	movw	r30, r16
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
    3d9e:	ce 01       	movw	r24, r28
    3da0:	87 51       	subi	r24, 0x17	; 23
    3da2:	9f 4f       	sbci	r25, 0xFF	; 255
    3da4:	9e 01       	movw	r18, r28
    3da6:	2b 51       	subi	r18, 0x1B	; 27
    3da8:	3f 4f       	sbci	r19, 0xFF	; 255
    3daa:	f9 01       	movw	r30, r18
    3dac:	20 81       	ld	r18, Z
    3dae:	31 81       	ldd	r19, Z+1	; 0x01
    3db0:	fc 01       	movw	r30, r24
    3db2:	31 83       	std	Z+1, r19	; 0x01
    3db4:	20 83       	st	Z, r18
    3db6:	ce 01       	movw	r24, r28
    3db8:	87 51       	subi	r24, 0x17	; 23
    3dba:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	8c 01       	movw	r16, r24
    3dc4:	c8 01       	movw	r24, r16
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <__stack+0x1bc7>
    3dca:	8c 01       	movw	r16, r24
    3dcc:	ce 01       	movw	r24, r28
    3dce:	87 51       	subi	r24, 0x17	; 23
    3dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	11 83       	std	Z+1, r17	; 0x01
    3dd6:	00 83       	st	Z, r16
							_delay_ms(100);
							linefollwer();
    3dd8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					}
			
				}
			}
		}							
		if(final[0]>coor[0])
    3ddc:	ce 01       	movw	r24, r28
    3dde:	81 56       	subi	r24, 0x61	; 97
    3de0:	9b 4f       	sbci	r25, 0xFB	; 251
    3de2:	fc 01       	movw	r30, r24
    3de4:	20 81       	ld	r18, Z
    3de6:	31 81       	ldd	r19, Z+1	; 0x01
    3de8:	80 91 89 04 	lds	r24, 0x0489
    3dec:	90 91 8a 04 	lds	r25, 0x048A
    3df0:	82 17       	cp	r24, r18
    3df2:	93 07       	cpc	r25, r19
    3df4:	0c f0       	brlt	.+2      	; 0x3df8 <__stack+0x1bf9>
    3df6:	21 c6       	rjmp	.+3138   	; 0x4a3a <__stack+0x283b>
		{
			if(compass==4)
    3df8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfc:	84 30       	cpi	r24, 0x04	; 4
    3dfe:	91 05       	cpc	r25, r1
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <__stack+0x1c05>
    3e02:	b8 c1       	rjmp	.+880    	; 0x4174 <__stack+0x1f75>
			{
				coor[0]=coor[0]+1;
    3e04:	80 91 89 04 	lds	r24, 0x0489
    3e08:	90 91 8a 04 	lds	r25, 0x048A
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	90 93 8a 04 	sts	0x048A, r25
    3e12:	80 93 89 04 	sts	0x0489, r24
				compass=6;
    3e16:	86 e0       	ldi	r24, 0x06	; 6
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	9c 83       	std	Y+4, r25	; 0x04
    3e1c:	8b 83       	std	Y+3, r24	; 0x03
    3e1e:	9e 01       	movw	r18, r28
    3e20:	25 51       	subi	r18, 0x15	; 21
    3e22:	3f 4f       	sbci	r19, 0xFF	; 255
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	aa ef       	ldi	r26, 0xFA	; 250
    3e2a:	b3 e4       	ldi	r27, 0x43	; 67
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	80 83       	st	Z, r24
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	a2 83       	std	Z+2, r26	; 0x02
    3e34:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e36:	8e 01       	movw	r16, r28
    3e38:	01 51       	subi	r16, 0x11	; 17
    3e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	85 51       	subi	r24, 0x15	; 21
    3e40:	9f 4f       	sbci	r25, 0xFF	; 255
    3e42:	fc 01       	movw	r30, r24
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	26 e6       	ldi	r18, 0x66	; 102
    3e4e:	36 e6       	ldi	r19, 0x66	; 102
    3e50:	46 e6       	ldi	r20, 0x66	; 102
    3e52:	55 e4       	ldi	r21, 0x45	; 69
    3e54:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e66:	ce 01       	movw	r24, r28
    3e68:	81 51       	subi	r24, 0x11	; 17
    3e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6c:	11 e0       	ldi	r17, 0x01	; 1
    3e6e:	fc 01       	movw	r30, r24
    3e70:	60 81       	ld	r22, Z
    3e72:	71 81       	ldd	r23, Z+1	; 0x01
    3e74:	82 81       	ldd	r24, Z+2	; 0x02
    3e76:	93 81       	ldd	r25, Z+3	; 0x03
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e8       	ldi	r20, 0x80	; 128
    3e7e:	5f e3       	ldi	r21, 0x3F	; 63
    3e80:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    3e84:	88 23       	and	r24, r24
    3e86:	0c f0       	brlt	.+2      	; 0x3e8a <__stack+0x1c8b>
    3e88:	10 e0       	ldi	r17, 0x00	; 0
    3e8a:	11 23       	and	r17, r17
    3e8c:	49 f0       	breq	.+18     	; 0x3ea0 <__stack+0x1ca1>
		__ticks = 1;
    3e8e:	ce 01       	movw	r24, r28
    3e90:	8d 50       	subi	r24, 0x0D	; 13
    3e92:	9f 4f       	sbci	r25, 0xFF	; 255
    3e94:	21 e0       	ldi	r18, 0x01	; 1
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	fc 01       	movw	r30, r24
    3e9a:	31 83       	std	Z+1, r19	; 0x01
    3e9c:	20 83       	st	Z, r18
    3e9e:	74 c0       	rjmp	.+232    	; 0x3f88 <__stack+0x1d89>
	else if (__tmp > 65535)
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	81 51       	subi	r24, 0x11	; 17
    3ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea6:	11 e0       	ldi	r17, 0x01	; 1
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	60 81       	ld	r22, Z
    3eac:	71 81       	ldd	r23, Z+1	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	3f ef       	ldi	r19, 0xFF	; 255
    3eb6:	4f e7       	ldi	r20, 0x7F	; 127
    3eb8:	57 e4       	ldi	r21, 0x47	; 71
    3eba:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    3ebe:	18 16       	cp	r1, r24
    3ec0:	0c f0       	brlt	.+2      	; 0x3ec4 <__stack+0x1cc5>
    3ec2:	10 e0       	ldi	r17, 0x00	; 0
    3ec4:	11 23       	and	r17, r17
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <__stack+0x1ccb>
    3ec8:	4d c0       	rjmp	.+154    	; 0x3f64 <__stack+0x1d65>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eca:	ce 01       	movw	r24, r28
    3ecc:	85 51       	subi	r24, 0x15	; 21
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e2       	ldi	r20, 0x20	; 32
    3ee0:	51 e4       	ldi	r21, 0x41	; 65
    3ee2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	8e 01       	movw	r16, r28
    3eec:	0d 50       	subi	r16, 0x0D	; 13
    3eee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	f8 01       	movw	r30, r16
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	27 c0       	rjmp	.+78     	; 0x3f52 <__stack+0x1d53>
    3f04:	ce 01       	movw	r24, r28
    3f06:	8b 50       	subi	r24, 0x0B	; 11
    3f08:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0a:	20 e7       	ldi	r18, 0x70	; 112
    3f0c:	31 e0       	ldi	r19, 0x01	; 1
    3f0e:	fc 01       	movw	r30, r24
    3f10:	31 83       	std	Z+1, r19	; 0x01
    3f12:	20 83       	st	Z, r18
    3f14:	ce 01       	movw	r24, r28
    3f16:	8b 50       	subi	r24, 0x0B	; 11
    3f18:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	8c 01       	movw	r16, r24
    3f22:	c8 01       	movw	r24, r16
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <__stack+0x1d25>
    3f28:	8c 01       	movw	r16, r24
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	8b 50       	subi	r24, 0x0B	; 11
    3f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f30:	fc 01       	movw	r30, r24
    3f32:	11 83       	std	Z+1, r17	; 0x01
    3f34:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f36:	ce 01       	movw	r24, r28
    3f38:	8d 50       	subi	r24, 0x0D	; 13
    3f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3c:	9e 01       	movw	r18, r28
    3f3e:	2d 50       	subi	r18, 0x0D	; 13
    3f40:	3f 4f       	sbci	r19, 0xFF	; 255
    3f42:	f9 01       	movw	r30, r18
    3f44:	20 81       	ld	r18, Z
    3f46:	31 81       	ldd	r19, Z+1	; 0x01
    3f48:	21 50       	subi	r18, 0x01	; 1
    3f4a:	30 40       	sbci	r19, 0x00	; 0
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	31 83       	std	Z+1, r19	; 0x01
    3f50:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f52:	ce 01       	movw	r24, r28
    3f54:	8d 50       	subi	r24, 0x0D	; 13
    3f56:	9f 4f       	sbci	r25, 0xFF	; 255
    3f58:	fc 01       	movw	r30, r24
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	89 f6       	brne	.-94     	; 0x3f04 <__stack+0x1d05>
    3f62:	2f c0       	rjmp	.+94     	; 0x3fc2 <__stack+0x1dc3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	8e 01       	movw	r16, r28
    3f66:	0d 50       	subi	r16, 0x0D	; 13
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	81 51       	subi	r24, 0x11	; 17
    3f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f70:	fc 01       	movw	r30, r24
    3f72:	60 81       	ld	r22, Z
    3f74:	71 81       	ldd	r23, Z+1	; 0x01
    3f76:	82 81       	ldd	r24, Z+2	; 0x02
    3f78:	93 81       	ldd	r25, Z+3	; 0x03
    3f7a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	f8 01       	movw	r30, r16
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	80 83       	st	Z, r24
    3f88:	ce 01       	movw	r24, r28
    3f8a:	89 50       	subi	r24, 0x09	; 9
    3f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8e:	9e 01       	movw	r18, r28
    3f90:	2d 50       	subi	r18, 0x0D	; 13
    3f92:	3f 4f       	sbci	r19, 0xFF	; 255
    3f94:	f9 01       	movw	r30, r18
    3f96:	20 81       	ld	r18, Z
    3f98:	31 81       	ldd	r19, Z+1	; 0x01
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	31 83       	std	Z+1, r19	; 0x01
    3f9e:	20 83       	st	Z, r18
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	89 50       	subi	r24, 0x09	; 9
    3fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	80 81       	ld	r24, Z
    3faa:	91 81       	ldd	r25, Z+1	; 0x01
    3fac:	8c 01       	movw	r16, r24
    3fae:	c8 01       	movw	r24, r16
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <__stack+0x1db1>
    3fb4:	8c 01       	movw	r16, r24
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	89 50       	subi	r24, 0x09	; 9
    3fba:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	11 83       	std	Z+1, r17	; 0x01
    3fc0:	00 83       	st	Z, r16
				_delay_ms(500);
				right_degrees(85);
    3fc2:	85 e5       	ldi	r24, 0x55	; 85
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    3fca:	9e 01       	movw	r18, r28
    3fcc:	27 50       	subi	r18, 0x07	; 7
    3fce:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	a8 ec       	ldi	r26, 0xC8	; 200
    3fd6:	b2 e4       	ldi	r27, 0x42	; 66
    3fd8:	f9 01       	movw	r30, r18
    3fda:	80 83       	st	Z, r24
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	a2 83       	std	Z+2, r26	; 0x02
    3fe0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3fe2:	8e 01       	movw	r16, r28
    3fe4:	03 50       	subi	r16, 0x03	; 3
    3fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe8:	ce 01       	movw	r24, r28
    3fea:	87 50       	subi	r24, 0x07	; 7
    3fec:	9f 4f       	sbci	r25, 0xFF	; 255
    3fee:	fc 01       	movw	r30, r24
    3ff0:	60 81       	ld	r22, Z
    3ff2:	71 81       	ldd	r23, Z+1	; 0x01
    3ff4:	82 81       	ldd	r24, Z+2	; 0x02
    3ff6:	93 81       	ldd	r25, Z+3	; 0x03
    3ff8:	26 e6       	ldi	r18, 0x66	; 102
    3ffa:	36 e6       	ldi	r19, 0x66	; 102
    3ffc:	46 e6       	ldi	r20, 0x66	; 102
    3ffe:	55 e4       	ldi	r21, 0x45	; 69
    4000:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	f8 01       	movw	r30, r16
    400a:	80 83       	st	Z, r24
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	a2 83       	std	Z+2, r26	; 0x02
    4010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4012:	ce 01       	movw	r24, r28
    4014:	83 50       	subi	r24, 0x03	; 3
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	11 e0       	ldi	r17, 0x01	; 1
    401a:	fc 01       	movw	r30, r24
    401c:	60 81       	ld	r22, Z
    401e:	71 81       	ldd	r23, Z+1	; 0x01
    4020:	82 81       	ldd	r24, Z+2	; 0x02
    4022:	93 81       	ldd	r25, Z+3	; 0x03
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    4030:	88 23       	and	r24, r24
    4032:	0c f0       	brlt	.+2      	; 0x4036 <__stack+0x1e37>
    4034:	10 e0       	ldi	r17, 0x00	; 0
    4036:	11 23       	and	r17, r17
    4038:	49 f0       	breq	.+18     	; 0x404c <__stack+0x1e4d>
		__ticks = 1;
    403a:	ce 01       	movw	r24, r28
    403c:	8f 5f       	subi	r24, 0xFF	; 255
    403e:	9e 4f       	sbci	r25, 0xFE	; 254
    4040:	21 e0       	ldi	r18, 0x01	; 1
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	fc 01       	movw	r30, r24
    4046:	31 83       	std	Z+1, r19	; 0x01
    4048:	20 83       	st	Z, r18
    404a:	74 c0       	rjmp	.+232    	; 0x4134 <__stack+0x1f35>
	else if (__tmp > 65535)
    404c:	ce 01       	movw	r24, r28
    404e:	83 50       	subi	r24, 0x03	; 3
    4050:	9f 4f       	sbci	r25, 0xFF	; 255
    4052:	11 e0       	ldi	r17, 0x01	; 1
    4054:	fc 01       	movw	r30, r24
    4056:	60 81       	ld	r22, Z
    4058:	71 81       	ldd	r23, Z+1	; 0x01
    405a:	82 81       	ldd	r24, Z+2	; 0x02
    405c:	93 81       	ldd	r25, Z+3	; 0x03
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	3f ef       	ldi	r19, 0xFF	; 255
    4062:	4f e7       	ldi	r20, 0x7F	; 127
    4064:	57 e4       	ldi	r21, 0x47	; 71
    4066:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    406a:	18 16       	cp	r1, r24
    406c:	0c f0       	brlt	.+2      	; 0x4070 <__stack+0x1e71>
    406e:	10 e0       	ldi	r17, 0x00	; 0
    4070:	11 23       	and	r17, r17
    4072:	09 f4       	brne	.+2      	; 0x4076 <__stack+0x1e77>
    4074:	4d c0       	rjmp	.+154    	; 0x4110 <__stack+0x1f11>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4076:	ce 01       	movw	r24, r28
    4078:	87 50       	subi	r24, 0x07	; 7
    407a:	9f 4f       	sbci	r25, 0xFF	; 255
    407c:	fc 01       	movw	r30, r24
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e2       	ldi	r20, 0x20	; 32
    408c:	51 e4       	ldi	r21, 0x41	; 65
    408e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	8e 01       	movw	r16, r28
    4098:	0f 5f       	subi	r16, 0xFF	; 255
    409a:	1e 4f       	sbci	r17, 0xFE	; 254
    409c:	bc 01       	movw	r22, r24
    409e:	cd 01       	movw	r24, r26
    40a0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	f8 01       	movw	r30, r16
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
    40ae:	27 c0       	rjmp	.+78     	; 0x40fe <__stack+0x1eff>
    40b0:	ce 01       	movw	r24, r28
    40b2:	8d 5f       	subi	r24, 0xFD	; 253
    40b4:	9e 4f       	sbci	r25, 0xFE	; 254
    40b6:	20 e7       	ldi	r18, 0x70	; 112
    40b8:	31 e0       	ldi	r19, 0x01	; 1
    40ba:	fc 01       	movw	r30, r24
    40bc:	31 83       	std	Z+1, r19	; 0x01
    40be:	20 83       	st	Z, r18
    40c0:	ce 01       	movw	r24, r28
    40c2:	8d 5f       	subi	r24, 0xFD	; 253
    40c4:	9e 4f       	sbci	r25, 0xFE	; 254
    40c6:	fc 01       	movw	r30, r24
    40c8:	80 81       	ld	r24, Z
    40ca:	91 81       	ldd	r25, Z+1	; 0x01
    40cc:	8c 01       	movw	r16, r24
    40ce:	c8 01       	movw	r24, r16
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <__stack+0x1ed1>
    40d4:	8c 01       	movw	r16, r24
    40d6:	ce 01       	movw	r24, r28
    40d8:	8d 5f       	subi	r24, 0xFD	; 253
    40da:	9e 4f       	sbci	r25, 0xFE	; 254
    40dc:	fc 01       	movw	r30, r24
    40de:	11 83       	std	Z+1, r17	; 0x01
    40e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e2:	ce 01       	movw	r24, r28
    40e4:	8f 5f       	subi	r24, 0xFF	; 255
    40e6:	9e 4f       	sbci	r25, 0xFE	; 254
    40e8:	9e 01       	movw	r18, r28
    40ea:	2f 5f       	subi	r18, 0xFF	; 255
    40ec:	3e 4f       	sbci	r19, 0xFE	; 254
    40ee:	f9 01       	movw	r30, r18
    40f0:	20 81       	ld	r18, Z
    40f2:	31 81       	ldd	r19, Z+1	; 0x01
    40f4:	21 50       	subi	r18, 0x01	; 1
    40f6:	30 40       	sbci	r19, 0x00	; 0
    40f8:	fc 01       	movw	r30, r24
    40fa:	31 83       	std	Z+1, r19	; 0x01
    40fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fe:	ce 01       	movw	r24, r28
    4100:	8f 5f       	subi	r24, 0xFF	; 255
    4102:	9e 4f       	sbci	r25, 0xFE	; 254
    4104:	fc 01       	movw	r30, r24
    4106:	80 81       	ld	r24, Z
    4108:	91 81       	ldd	r25, Z+1	; 0x01
    410a:	00 97       	sbiw	r24, 0x00	; 0
    410c:	89 f6       	brne	.-94     	; 0x40b0 <__stack+0x1eb1>
    410e:	2f c0       	rjmp	.+94     	; 0x416e <__stack+0x1f6f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4110:	8e 01       	movw	r16, r28
    4112:	0f 5f       	subi	r16, 0xFF	; 255
    4114:	1e 4f       	sbci	r17, 0xFE	; 254
    4116:	ce 01       	movw	r24, r28
    4118:	83 50       	subi	r24, 0x03	; 3
    411a:	9f 4f       	sbci	r25, 0xFF	; 255
    411c:	fc 01       	movw	r30, r24
    411e:	60 81       	ld	r22, Z
    4120:	71 81       	ldd	r23, Z+1	; 0x01
    4122:	82 81       	ldd	r24, Z+2	; 0x02
    4124:	93 81       	ldd	r25, Z+3	; 0x03
    4126:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	f8 01       	movw	r30, r16
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	80 83       	st	Z, r24
    4134:	ce 01       	movw	r24, r28
    4136:	8b 5f       	subi	r24, 0xFB	; 251
    4138:	9e 4f       	sbci	r25, 0xFE	; 254
    413a:	9e 01       	movw	r18, r28
    413c:	2f 5f       	subi	r18, 0xFF	; 255
    413e:	3e 4f       	sbci	r19, 0xFE	; 254
    4140:	f9 01       	movw	r30, r18
    4142:	20 81       	ld	r18, Z
    4144:	31 81       	ldd	r19, Z+1	; 0x01
    4146:	fc 01       	movw	r30, r24
    4148:	31 83       	std	Z+1, r19	; 0x01
    414a:	20 83       	st	Z, r18
    414c:	ce 01       	movw	r24, r28
    414e:	8b 5f       	subi	r24, 0xFB	; 251
    4150:	9e 4f       	sbci	r25, 0xFE	; 254
    4152:	fc 01       	movw	r30, r24
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	8c 01       	movw	r16, r24
    415a:	c8 01       	movw	r24, r16
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <__stack+0x1f5d>
    4160:	8c 01       	movw	r16, r24
    4162:	ce 01       	movw	r24, r28
    4164:	8b 5f       	subi	r24, 0xFB	; 251
    4166:	9e 4f       	sbci	r25, 0xFE	; 254
    4168:	fc 01       	movw	r30, r24
    416a:	11 83       	std	Z+1, r17	; 0x01
    416c:	00 83       	st	Z, r16
				_delay_ms(100);
				linefollwer();
    416e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    4172:	63 c4       	rjmp	.+2246   	; 0x4a3a <__stack+0x283b>
			}
			else
			{
				if(compass==6)
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	9c 81       	ldd	r25, Y+4	; 0x04
    4178:	86 30       	cpi	r24, 0x06	; 6
    417a:	91 05       	cpc	r25, r1
    417c:	09 f0       	breq	.+2      	; 0x4180 <__stack+0x1f81>
    417e:	e2 c0       	rjmp	.+452    	; 0x4344 <__stack+0x2145>
				{
					coor[0]=coor[0]+1;
    4180:	80 91 89 04 	lds	r24, 0x0489
    4184:	90 91 8a 04 	lds	r25, 0x048A
    4188:	01 96       	adiw	r24, 0x01	; 1
    418a:	90 93 8a 04 	sts	0x048A, r25
    418e:	80 93 89 04 	sts	0x0489, r24
					compass=6;
    4192:	86 e0       	ldi	r24, 0x06	; 6
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9c 83       	std	Y+4, r25	; 0x04
    4198:	8b 83       	std	Y+3, r24	; 0x03
    419a:	9e 01       	movw	r18, r28
    419c:	29 5f       	subi	r18, 0xF9	; 249
    419e:	3e 4f       	sbci	r19, 0xFE	; 254
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	a8 ec       	ldi	r26, 0xC8	; 200
    41a6:	b2 e4       	ldi	r27, 0x42	; 66
    41a8:	f9 01       	movw	r30, r18
    41aa:	80 83       	st	Z, r24
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	a2 83       	std	Z+2, r26	; 0x02
    41b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41b2:	8e 01       	movw	r16, r28
    41b4:	05 5f       	subi	r16, 0xF5	; 245
    41b6:	1e 4f       	sbci	r17, 0xFE	; 254
    41b8:	ce 01       	movw	r24, r28
    41ba:	89 5f       	subi	r24, 0xF9	; 249
    41bc:	9e 4f       	sbci	r25, 0xFE	; 254
    41be:	fc 01       	movw	r30, r24
    41c0:	60 81       	ld	r22, Z
    41c2:	71 81       	ldd	r23, Z+1	; 0x01
    41c4:	82 81       	ldd	r24, Z+2	; 0x02
    41c6:	93 81       	ldd	r25, Z+3	; 0x03
    41c8:	26 e6       	ldi	r18, 0x66	; 102
    41ca:	36 e6       	ldi	r19, 0x66	; 102
    41cc:	46 e6       	ldi	r20, 0x66	; 102
    41ce:	55 e4       	ldi	r21, 0x45	; 69
    41d0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	f8 01       	movw	r30, r16
    41da:	80 83       	st	Z, r24
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	a2 83       	std	Z+2, r26	; 0x02
    41e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41e2:	ce 01       	movw	r24, r28
    41e4:	85 5f       	subi	r24, 0xF5	; 245
    41e6:	9e 4f       	sbci	r25, 0xFE	; 254
    41e8:	11 e0       	ldi	r17, 0x01	; 1
    41ea:	fc 01       	movw	r30, r24
    41ec:	60 81       	ld	r22, Z
    41ee:	71 81       	ldd	r23, Z+1	; 0x01
    41f0:	82 81       	ldd	r24, Z+2	; 0x02
    41f2:	93 81       	ldd	r25, Z+3	; 0x03
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e8       	ldi	r20, 0x80	; 128
    41fa:	5f e3       	ldi	r21, 0x3F	; 63
    41fc:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    4200:	88 23       	and	r24, r24
    4202:	0c f0       	brlt	.+2      	; 0x4206 <__stack+0x2007>
    4204:	10 e0       	ldi	r17, 0x00	; 0
    4206:	11 23       	and	r17, r17
    4208:	49 f0       	breq	.+18     	; 0x421c <__stack+0x201d>
		__ticks = 1;
    420a:	ce 01       	movw	r24, r28
    420c:	81 5f       	subi	r24, 0xF1	; 241
    420e:	9e 4f       	sbci	r25, 0xFE	; 254
    4210:	21 e0       	ldi	r18, 0x01	; 1
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	fc 01       	movw	r30, r24
    4216:	31 83       	std	Z+1, r19	; 0x01
    4218:	20 83       	st	Z, r18
    421a:	74 c0       	rjmp	.+232    	; 0x4304 <__stack+0x2105>
	else if (__tmp > 65535)
    421c:	ce 01       	movw	r24, r28
    421e:	85 5f       	subi	r24, 0xF5	; 245
    4220:	9e 4f       	sbci	r25, 0xFE	; 254
    4222:	11 e0       	ldi	r17, 0x01	; 1
    4224:	fc 01       	movw	r30, r24
    4226:	60 81       	ld	r22, Z
    4228:	71 81       	ldd	r23, Z+1	; 0x01
    422a:	82 81       	ldd	r24, Z+2	; 0x02
    422c:	93 81       	ldd	r25, Z+3	; 0x03
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	3f ef       	ldi	r19, 0xFF	; 255
    4232:	4f e7       	ldi	r20, 0x7F	; 127
    4234:	57 e4       	ldi	r21, 0x47	; 71
    4236:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    423a:	18 16       	cp	r1, r24
    423c:	0c f0       	brlt	.+2      	; 0x4240 <__stack+0x2041>
    423e:	10 e0       	ldi	r17, 0x00	; 0
    4240:	11 23       	and	r17, r17
    4242:	09 f4       	brne	.+2      	; 0x4246 <__stack+0x2047>
    4244:	4d c0       	rjmp	.+154    	; 0x42e0 <__stack+0x20e1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4246:	ce 01       	movw	r24, r28
    4248:	89 5f       	subi	r24, 0xF9	; 249
    424a:	9e 4f       	sbci	r25, 0xFE	; 254
    424c:	fc 01       	movw	r30, r24
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e2       	ldi	r20, 0x20	; 32
    425c:	51 e4       	ldi	r21, 0x41	; 65
    425e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	8e 01       	movw	r16, r28
    4268:	01 5f       	subi	r16, 0xF1	; 241
    426a:	1e 4f       	sbci	r17, 0xFE	; 254
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	f8 01       	movw	r30, r16
    427a:	91 83       	std	Z+1, r25	; 0x01
    427c:	80 83       	st	Z, r24
    427e:	27 c0       	rjmp	.+78     	; 0x42ce <__stack+0x20cf>
    4280:	ce 01       	movw	r24, r28
    4282:	8f 5e       	subi	r24, 0xEF	; 239
    4284:	9e 4f       	sbci	r25, 0xFE	; 254
    4286:	20 e7       	ldi	r18, 0x70	; 112
    4288:	31 e0       	ldi	r19, 0x01	; 1
    428a:	fc 01       	movw	r30, r24
    428c:	31 83       	std	Z+1, r19	; 0x01
    428e:	20 83       	st	Z, r18
    4290:	ce 01       	movw	r24, r28
    4292:	8f 5e       	subi	r24, 0xEF	; 239
    4294:	9e 4f       	sbci	r25, 0xFE	; 254
    4296:	fc 01       	movw	r30, r24
    4298:	80 81       	ld	r24, Z
    429a:	91 81       	ldd	r25, Z+1	; 0x01
    429c:	8c 01       	movw	r16, r24
    429e:	c8 01       	movw	r24, r16
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	f1 f7       	brne	.-4      	; 0x42a0 <__stack+0x20a1>
    42a4:	8c 01       	movw	r16, r24
    42a6:	ce 01       	movw	r24, r28
    42a8:	8f 5e       	subi	r24, 0xEF	; 239
    42aa:	9e 4f       	sbci	r25, 0xFE	; 254
    42ac:	fc 01       	movw	r30, r24
    42ae:	11 83       	std	Z+1, r17	; 0x01
    42b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b2:	ce 01       	movw	r24, r28
    42b4:	81 5f       	subi	r24, 0xF1	; 241
    42b6:	9e 4f       	sbci	r25, 0xFE	; 254
    42b8:	9e 01       	movw	r18, r28
    42ba:	21 5f       	subi	r18, 0xF1	; 241
    42bc:	3e 4f       	sbci	r19, 0xFE	; 254
    42be:	f9 01       	movw	r30, r18
    42c0:	20 81       	ld	r18, Z
    42c2:	31 81       	ldd	r19, Z+1	; 0x01
    42c4:	21 50       	subi	r18, 0x01	; 1
    42c6:	30 40       	sbci	r19, 0x00	; 0
    42c8:	fc 01       	movw	r30, r24
    42ca:	31 83       	std	Z+1, r19	; 0x01
    42cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ce:	ce 01       	movw	r24, r28
    42d0:	81 5f       	subi	r24, 0xF1	; 241
    42d2:	9e 4f       	sbci	r25, 0xFE	; 254
    42d4:	fc 01       	movw	r30, r24
    42d6:	80 81       	ld	r24, Z
    42d8:	91 81       	ldd	r25, Z+1	; 0x01
    42da:	00 97       	sbiw	r24, 0x00	; 0
    42dc:	89 f6       	brne	.-94     	; 0x4280 <__stack+0x2081>
    42de:	2f c0       	rjmp	.+94     	; 0x433e <__stack+0x213f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e0:	8e 01       	movw	r16, r28
    42e2:	01 5f       	subi	r16, 0xF1	; 241
    42e4:	1e 4f       	sbci	r17, 0xFE	; 254
    42e6:	ce 01       	movw	r24, r28
    42e8:	85 5f       	subi	r24, 0xF5	; 245
    42ea:	9e 4f       	sbci	r25, 0xFE	; 254
    42ec:	fc 01       	movw	r30, r24
    42ee:	60 81       	ld	r22, Z
    42f0:	71 81       	ldd	r23, Z+1	; 0x01
    42f2:	82 81       	ldd	r24, Z+2	; 0x02
    42f4:	93 81       	ldd	r25, Z+3	; 0x03
    42f6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	f8 01       	movw	r30, r16
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	80 83       	st	Z, r24
    4304:	ce 01       	movw	r24, r28
    4306:	8d 5e       	subi	r24, 0xED	; 237
    4308:	9e 4f       	sbci	r25, 0xFE	; 254
    430a:	9e 01       	movw	r18, r28
    430c:	21 5f       	subi	r18, 0xF1	; 241
    430e:	3e 4f       	sbci	r19, 0xFE	; 254
    4310:	f9 01       	movw	r30, r18
    4312:	20 81       	ld	r18, Z
    4314:	31 81       	ldd	r19, Z+1	; 0x01
    4316:	fc 01       	movw	r30, r24
    4318:	31 83       	std	Z+1, r19	; 0x01
    431a:	20 83       	st	Z, r18
    431c:	ce 01       	movw	r24, r28
    431e:	8d 5e       	subi	r24, 0xED	; 237
    4320:	9e 4f       	sbci	r25, 0xFE	; 254
    4322:	fc 01       	movw	r30, r24
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	8c 01       	movw	r16, r24
    432a:	c8 01       	movw	r24, r16
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <__stack+0x212d>
    4330:	8c 01       	movw	r16, r24
    4332:	ce 01       	movw	r24, r28
    4334:	8d 5e       	subi	r24, 0xED	; 237
    4336:	9e 4f       	sbci	r25, 0xFE	; 254
    4338:	fc 01       	movw	r30, r24
    433a:	11 83       	std	Z+1, r17	; 0x01
    433c:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    433e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    4342:	7b c3       	rjmp	.+1782   	; 0x4a3a <__stack+0x283b>
				}
				else
				{
					if(compass==5)
    4344:	8b 81       	ldd	r24, Y+3	; 0x03
    4346:	9c 81       	ldd	r25, Y+4	; 0x04
    4348:	85 30       	cpi	r24, 0x05	; 5
    434a:	91 05       	cpc	r25, r1
    434c:	09 f0       	breq	.+2      	; 0x4350 <__stack+0x2151>
    434e:	b8 c1       	rjmp	.+880    	; 0x46c0 <__stack+0x24c1>
					{
						coor[0]=coor[0]+1;
    4350:	80 91 89 04 	lds	r24, 0x0489
    4354:	90 91 8a 04 	lds	r25, 0x048A
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	90 93 8a 04 	sts	0x048A, r25
    435e:	80 93 89 04 	sts	0x0489, r24
						compass=6;
    4362:	86 e0       	ldi	r24, 0x06	; 6
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	9c 83       	std	Y+4, r25	; 0x04
    4368:	8b 83       	std	Y+3, r24	; 0x03
    436a:	9e 01       	movw	r18, r28
    436c:	2b 5e       	subi	r18, 0xEB	; 235
    436e:	3e 4f       	sbci	r19, 0xFE	; 254
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	aa ef       	ldi	r26, 0xFA	; 250
    4376:	b3 e4       	ldi	r27, 0x43	; 67
    4378:	f9 01       	movw	r30, r18
    437a:	80 83       	st	Z, r24
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	a2 83       	std	Z+2, r26	; 0x02
    4380:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4382:	8e 01       	movw	r16, r28
    4384:	07 5e       	subi	r16, 0xE7	; 231
    4386:	1e 4f       	sbci	r17, 0xFE	; 254
    4388:	ce 01       	movw	r24, r28
    438a:	8b 5e       	subi	r24, 0xEB	; 235
    438c:	9e 4f       	sbci	r25, 0xFE	; 254
    438e:	fc 01       	movw	r30, r24
    4390:	60 81       	ld	r22, Z
    4392:	71 81       	ldd	r23, Z+1	; 0x01
    4394:	82 81       	ldd	r24, Z+2	; 0x02
    4396:	93 81       	ldd	r25, Z+3	; 0x03
    4398:	26 e6       	ldi	r18, 0x66	; 102
    439a:	36 e6       	ldi	r19, 0x66	; 102
    439c:	46 e6       	ldi	r20, 0x66	; 102
    439e:	55 e4       	ldi	r21, 0x45	; 69
    43a0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	f8 01       	movw	r30, r16
    43aa:	80 83       	st	Z, r24
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	a2 83       	std	Z+2, r26	; 0x02
    43b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43b2:	ce 01       	movw	r24, r28
    43b4:	87 5e       	subi	r24, 0xE7	; 231
    43b6:	9e 4f       	sbci	r25, 0xFE	; 254
    43b8:	11 e0       	ldi	r17, 0x01	; 1
    43ba:	fc 01       	movw	r30, r24
    43bc:	60 81       	ld	r22, Z
    43be:	71 81       	ldd	r23, Z+1	; 0x01
    43c0:	82 81       	ldd	r24, Z+2	; 0x02
    43c2:	93 81       	ldd	r25, Z+3	; 0x03
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	0c f0       	brlt	.+2      	; 0x43d6 <__stack+0x21d7>
    43d4:	10 e0       	ldi	r17, 0x00	; 0
    43d6:	11 23       	and	r17, r17
    43d8:	49 f0       	breq	.+18     	; 0x43ec <__stack+0x21ed>
		__ticks = 1;
    43da:	ce 01       	movw	r24, r28
    43dc:	83 5e       	subi	r24, 0xE3	; 227
    43de:	9e 4f       	sbci	r25, 0xFE	; 254
    43e0:	21 e0       	ldi	r18, 0x01	; 1
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	fc 01       	movw	r30, r24
    43e6:	31 83       	std	Z+1, r19	; 0x01
    43e8:	20 83       	st	Z, r18
    43ea:	74 c0       	rjmp	.+232    	; 0x44d4 <__stack+0x22d5>
	else if (__tmp > 65535)
    43ec:	ce 01       	movw	r24, r28
    43ee:	87 5e       	subi	r24, 0xE7	; 231
    43f0:	9e 4f       	sbci	r25, 0xFE	; 254
    43f2:	11 e0       	ldi	r17, 0x01	; 1
    43f4:	fc 01       	movw	r30, r24
    43f6:	60 81       	ld	r22, Z
    43f8:	71 81       	ldd	r23, Z+1	; 0x01
    43fa:	82 81       	ldd	r24, Z+2	; 0x02
    43fc:	93 81       	ldd	r25, Z+3	; 0x03
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	3f ef       	ldi	r19, 0xFF	; 255
    4402:	4f e7       	ldi	r20, 0x7F	; 127
    4404:	57 e4       	ldi	r21, 0x47	; 71
    4406:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    440a:	18 16       	cp	r1, r24
    440c:	0c f0       	brlt	.+2      	; 0x4410 <__stack+0x2211>
    440e:	10 e0       	ldi	r17, 0x00	; 0
    4410:	11 23       	and	r17, r17
    4412:	09 f4       	brne	.+2      	; 0x4416 <__stack+0x2217>
    4414:	4d c0       	rjmp	.+154    	; 0x44b0 <__stack+0x22b1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	ce 01       	movw	r24, r28
    4418:	8b 5e       	subi	r24, 0xEB	; 235
    441a:	9e 4f       	sbci	r25, 0xFE	; 254
    441c:	fc 01       	movw	r30, r24
    441e:	60 81       	ld	r22, Z
    4420:	71 81       	ldd	r23, Z+1	; 0x01
    4422:	82 81       	ldd	r24, Z+2	; 0x02
    4424:	93 81       	ldd	r25, Z+3	; 0x03
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	40 e2       	ldi	r20, 0x20	; 32
    442c:	51 e4       	ldi	r21, 0x41	; 65
    442e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	8e 01       	movw	r16, r28
    4438:	03 5e       	subi	r16, 0xE3	; 227
    443a:	1e 4f       	sbci	r17, 0xFE	; 254
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	f8 01       	movw	r30, r16
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	80 83       	st	Z, r24
    444e:	27 c0       	rjmp	.+78     	; 0x449e <__stack+0x229f>
    4450:	ce 01       	movw	r24, r28
    4452:	81 5e       	subi	r24, 0xE1	; 225
    4454:	9e 4f       	sbci	r25, 0xFE	; 254
    4456:	20 e7       	ldi	r18, 0x70	; 112
    4458:	31 e0       	ldi	r19, 0x01	; 1
    445a:	fc 01       	movw	r30, r24
    445c:	31 83       	std	Z+1, r19	; 0x01
    445e:	20 83       	st	Z, r18
    4460:	ce 01       	movw	r24, r28
    4462:	81 5e       	subi	r24, 0xE1	; 225
    4464:	9e 4f       	sbci	r25, 0xFE	; 254
    4466:	fc 01       	movw	r30, r24
    4468:	80 81       	ld	r24, Z
    446a:	91 81       	ldd	r25, Z+1	; 0x01
    446c:	8c 01       	movw	r16, r24
    446e:	c8 01       	movw	r24, r16
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	f1 f7       	brne	.-4      	; 0x4470 <__stack+0x2271>
    4474:	8c 01       	movw	r16, r24
    4476:	ce 01       	movw	r24, r28
    4478:	81 5e       	subi	r24, 0xE1	; 225
    447a:	9e 4f       	sbci	r25, 0xFE	; 254
    447c:	fc 01       	movw	r30, r24
    447e:	11 83       	std	Z+1, r17	; 0x01
    4480:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4482:	ce 01       	movw	r24, r28
    4484:	83 5e       	subi	r24, 0xE3	; 227
    4486:	9e 4f       	sbci	r25, 0xFE	; 254
    4488:	9e 01       	movw	r18, r28
    448a:	23 5e       	subi	r18, 0xE3	; 227
    448c:	3e 4f       	sbci	r19, 0xFE	; 254
    448e:	f9 01       	movw	r30, r18
    4490:	20 81       	ld	r18, Z
    4492:	31 81       	ldd	r19, Z+1	; 0x01
    4494:	21 50       	subi	r18, 0x01	; 1
    4496:	30 40       	sbci	r19, 0x00	; 0
    4498:	fc 01       	movw	r30, r24
    449a:	31 83       	std	Z+1, r19	; 0x01
    449c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    449e:	ce 01       	movw	r24, r28
    44a0:	83 5e       	subi	r24, 0xE3	; 227
    44a2:	9e 4f       	sbci	r25, 0xFE	; 254
    44a4:	fc 01       	movw	r30, r24
    44a6:	80 81       	ld	r24, Z
    44a8:	91 81       	ldd	r25, Z+1	; 0x01
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	89 f6       	brne	.-94     	; 0x4450 <__stack+0x2251>
    44ae:	2f c0       	rjmp	.+94     	; 0x450e <__stack+0x230f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b0:	8e 01       	movw	r16, r28
    44b2:	03 5e       	subi	r16, 0xE3	; 227
    44b4:	1e 4f       	sbci	r17, 0xFE	; 254
    44b6:	ce 01       	movw	r24, r28
    44b8:	87 5e       	subi	r24, 0xE7	; 231
    44ba:	9e 4f       	sbci	r25, 0xFE	; 254
    44bc:	fc 01       	movw	r30, r24
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	f8 01       	movw	r30, r16
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	80 83       	st	Z, r24
    44d4:	ce 01       	movw	r24, r28
    44d6:	8f 5d       	subi	r24, 0xDF	; 223
    44d8:	9e 4f       	sbci	r25, 0xFE	; 254
    44da:	9e 01       	movw	r18, r28
    44dc:	23 5e       	subi	r18, 0xE3	; 227
    44de:	3e 4f       	sbci	r19, 0xFE	; 254
    44e0:	f9 01       	movw	r30, r18
    44e2:	20 81       	ld	r18, Z
    44e4:	31 81       	ldd	r19, Z+1	; 0x01
    44e6:	fc 01       	movw	r30, r24
    44e8:	31 83       	std	Z+1, r19	; 0x01
    44ea:	20 83       	st	Z, r18
    44ec:	ce 01       	movw	r24, r28
    44ee:	8f 5d       	subi	r24, 0xDF	; 223
    44f0:	9e 4f       	sbci	r25, 0xFE	; 254
    44f2:	fc 01       	movw	r30, r24
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	8c 01       	movw	r16, r24
    44fa:	c8 01       	movw	r24, r16
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <__stack+0x22fd>
    4500:	8c 01       	movw	r16, r24
    4502:	ce 01       	movw	r24, r28
    4504:	8f 5d       	subi	r24, 0xDF	; 223
    4506:	9e 4f       	sbci	r25, 0xFE	; 254
    4508:	fc 01       	movw	r30, r24
    450a:	11 83       	std	Z+1, r17	; 0x01
    450c:	00 83       	st	Z, r16
						_delay_ms(500);
						left_degrees(85);
    450e:	85 e5       	ldi	r24, 0x55	; 85
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    4516:	9e 01       	movw	r18, r28
    4518:	2d 5d       	subi	r18, 0xDD	; 221
    451a:	3e 4f       	sbci	r19, 0xFE	; 254
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	a8 ec       	ldi	r26, 0xC8	; 200
    4522:	b2 e4       	ldi	r27, 0x42	; 66
    4524:	f9 01       	movw	r30, r18
    4526:	80 83       	st	Z, r24
    4528:	91 83       	std	Z+1, r25	; 0x01
    452a:	a2 83       	std	Z+2, r26	; 0x02
    452c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    452e:	8e 01       	movw	r16, r28
    4530:	09 5d       	subi	r16, 0xD9	; 217
    4532:	1e 4f       	sbci	r17, 0xFE	; 254
    4534:	ce 01       	movw	r24, r28
    4536:	8d 5d       	subi	r24, 0xDD	; 221
    4538:	9e 4f       	sbci	r25, 0xFE	; 254
    453a:	fc 01       	movw	r30, r24
    453c:	60 81       	ld	r22, Z
    453e:	71 81       	ldd	r23, Z+1	; 0x01
    4540:	82 81       	ldd	r24, Z+2	; 0x02
    4542:	93 81       	ldd	r25, Z+3	; 0x03
    4544:	26 e6       	ldi	r18, 0x66	; 102
    4546:	36 e6       	ldi	r19, 0x66	; 102
    4548:	46 e6       	ldi	r20, 0x66	; 102
    454a:	55 e4       	ldi	r21, 0x45	; 69
    454c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	f8 01       	movw	r30, r16
    4556:	80 83       	st	Z, r24
    4558:	91 83       	std	Z+1, r25	; 0x01
    455a:	a2 83       	std	Z+2, r26	; 0x02
    455c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    455e:	ce 01       	movw	r24, r28
    4560:	89 5d       	subi	r24, 0xD9	; 217
    4562:	9e 4f       	sbci	r25, 0xFE	; 254
    4564:	11 e0       	ldi	r17, 0x01	; 1
    4566:	fc 01       	movw	r30, r24
    4568:	60 81       	ld	r22, Z
    456a:	71 81       	ldd	r23, Z+1	; 0x01
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	93 81       	ldd	r25, Z+3	; 0x03
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	5f e3       	ldi	r21, 0x3F	; 63
    4578:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    457c:	88 23       	and	r24, r24
    457e:	0c f0       	brlt	.+2      	; 0x4582 <__stack+0x2383>
    4580:	10 e0       	ldi	r17, 0x00	; 0
    4582:	11 23       	and	r17, r17
    4584:	49 f0       	breq	.+18     	; 0x4598 <__stack+0x2399>
		__ticks = 1;
    4586:	ce 01       	movw	r24, r28
    4588:	85 5d       	subi	r24, 0xD5	; 213
    458a:	9e 4f       	sbci	r25, 0xFE	; 254
    458c:	21 e0       	ldi	r18, 0x01	; 1
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	fc 01       	movw	r30, r24
    4592:	31 83       	std	Z+1, r19	; 0x01
    4594:	20 83       	st	Z, r18
    4596:	74 c0       	rjmp	.+232    	; 0x4680 <__stack+0x2481>
	else if (__tmp > 65535)
    4598:	ce 01       	movw	r24, r28
    459a:	89 5d       	subi	r24, 0xD9	; 217
    459c:	9e 4f       	sbci	r25, 0xFE	; 254
    459e:	11 e0       	ldi	r17, 0x01	; 1
    45a0:	fc 01       	movw	r30, r24
    45a2:	60 81       	ld	r22, Z
    45a4:	71 81       	ldd	r23, Z+1	; 0x01
    45a6:	82 81       	ldd	r24, Z+2	; 0x02
    45a8:	93 81       	ldd	r25, Z+3	; 0x03
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	0c f0       	brlt	.+2      	; 0x45bc <__stack+0x23bd>
    45ba:	10 e0       	ldi	r17, 0x00	; 0
    45bc:	11 23       	and	r17, r17
    45be:	09 f4       	brne	.+2      	; 0x45c2 <__stack+0x23c3>
    45c0:	4d c0       	rjmp	.+154    	; 0x465c <__stack+0x245d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c2:	ce 01       	movw	r24, r28
    45c4:	8d 5d       	subi	r24, 0xDD	; 221
    45c6:	9e 4f       	sbci	r25, 0xFE	; 254
    45c8:	fc 01       	movw	r30, r24
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	40 e2       	ldi	r20, 0x20	; 32
    45d8:	51 e4       	ldi	r21, 0x41	; 65
    45da:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8e 01       	movw	r16, r28
    45e4:	05 5d       	subi	r16, 0xD5	; 213
    45e6:	1e 4f       	sbci	r17, 0xFE	; 254
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	f8 01       	movw	r30, r16
    45f6:	91 83       	std	Z+1, r25	; 0x01
    45f8:	80 83       	st	Z, r24
    45fa:	27 c0       	rjmp	.+78     	; 0x464a <__stack+0x244b>
    45fc:	ce 01       	movw	r24, r28
    45fe:	83 5d       	subi	r24, 0xD3	; 211
    4600:	9e 4f       	sbci	r25, 0xFE	; 254
    4602:	20 e7       	ldi	r18, 0x70	; 112
    4604:	31 e0       	ldi	r19, 0x01	; 1
    4606:	fc 01       	movw	r30, r24
    4608:	31 83       	std	Z+1, r19	; 0x01
    460a:	20 83       	st	Z, r18
    460c:	ce 01       	movw	r24, r28
    460e:	83 5d       	subi	r24, 0xD3	; 211
    4610:	9e 4f       	sbci	r25, 0xFE	; 254
    4612:	fc 01       	movw	r30, r24
    4614:	80 81       	ld	r24, Z
    4616:	91 81       	ldd	r25, Z+1	; 0x01
    4618:	8c 01       	movw	r16, r24
    461a:	c8 01       	movw	r24, r16
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	f1 f7       	brne	.-4      	; 0x461c <__stack+0x241d>
    4620:	8c 01       	movw	r16, r24
    4622:	ce 01       	movw	r24, r28
    4624:	83 5d       	subi	r24, 0xD3	; 211
    4626:	9e 4f       	sbci	r25, 0xFE	; 254
    4628:	fc 01       	movw	r30, r24
    462a:	11 83       	std	Z+1, r17	; 0x01
    462c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462e:	ce 01       	movw	r24, r28
    4630:	85 5d       	subi	r24, 0xD5	; 213
    4632:	9e 4f       	sbci	r25, 0xFE	; 254
    4634:	9e 01       	movw	r18, r28
    4636:	25 5d       	subi	r18, 0xD5	; 213
    4638:	3e 4f       	sbci	r19, 0xFE	; 254
    463a:	f9 01       	movw	r30, r18
    463c:	20 81       	ld	r18, Z
    463e:	31 81       	ldd	r19, Z+1	; 0x01
    4640:	21 50       	subi	r18, 0x01	; 1
    4642:	30 40       	sbci	r19, 0x00	; 0
    4644:	fc 01       	movw	r30, r24
    4646:	31 83       	std	Z+1, r19	; 0x01
    4648:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464a:	ce 01       	movw	r24, r28
    464c:	85 5d       	subi	r24, 0xD5	; 213
    464e:	9e 4f       	sbci	r25, 0xFE	; 254
    4650:	fc 01       	movw	r30, r24
    4652:	80 81       	ld	r24, Z
    4654:	91 81       	ldd	r25, Z+1	; 0x01
    4656:	00 97       	sbiw	r24, 0x00	; 0
    4658:	89 f6       	brne	.-94     	; 0x45fc <__stack+0x23fd>
    465a:	2f c0       	rjmp	.+94     	; 0x46ba <__stack+0x24bb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465c:	8e 01       	movw	r16, r28
    465e:	05 5d       	subi	r16, 0xD5	; 213
    4660:	1e 4f       	sbci	r17, 0xFE	; 254
    4662:	ce 01       	movw	r24, r28
    4664:	89 5d       	subi	r24, 0xD9	; 217
    4666:	9e 4f       	sbci	r25, 0xFE	; 254
    4668:	fc 01       	movw	r30, r24
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	f8 01       	movw	r30, r16
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	ce 01       	movw	r24, r28
    4682:	81 5d       	subi	r24, 0xD1	; 209
    4684:	9e 4f       	sbci	r25, 0xFE	; 254
    4686:	9e 01       	movw	r18, r28
    4688:	25 5d       	subi	r18, 0xD5	; 213
    468a:	3e 4f       	sbci	r19, 0xFE	; 254
    468c:	f9 01       	movw	r30, r18
    468e:	20 81       	ld	r18, Z
    4690:	31 81       	ldd	r19, Z+1	; 0x01
    4692:	fc 01       	movw	r30, r24
    4694:	31 83       	std	Z+1, r19	; 0x01
    4696:	20 83       	st	Z, r18
    4698:	ce 01       	movw	r24, r28
    469a:	81 5d       	subi	r24, 0xD1	; 209
    469c:	9e 4f       	sbci	r25, 0xFE	; 254
    469e:	fc 01       	movw	r30, r24
    46a0:	80 81       	ld	r24, Z
    46a2:	91 81       	ldd	r25, Z+1	; 0x01
    46a4:	8c 01       	movw	r16, r24
    46a6:	c8 01       	movw	r24, r16
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <__stack+0x24a9>
    46ac:	8c 01       	movw	r16, r24
    46ae:	ce 01       	movw	r24, r28
    46b0:	81 5d       	subi	r24, 0xD1	; 209
    46b2:	9e 4f       	sbci	r25, 0xFE	; 254
    46b4:	fc 01       	movw	r30, r24
    46b6:	11 83       	std	Z+1, r17	; 0x01
    46b8:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    46ba:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    46be:	bd c1       	rjmp	.+890    	; 0x4a3a <__stack+0x283b>
					}
					else
					{
							if(compass==7)
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	9c 81       	ldd	r25, Y+4	; 0x04
    46c4:	87 30       	cpi	r24, 0x07	; 7
    46c6:	91 05       	cpc	r25, r1
    46c8:	09 f0       	breq	.+2      	; 0x46cc <__stack+0x24cd>
    46ca:	b7 c1       	rjmp	.+878    	; 0x4a3a <__stack+0x283b>
							{
								coor[0]=coor[0]+1;
    46cc:	80 91 89 04 	lds	r24, 0x0489
    46d0:	90 91 8a 04 	lds	r25, 0x048A
    46d4:	01 96       	adiw	r24, 0x01	; 1
    46d6:	90 93 8a 04 	sts	0x048A, r25
    46da:	80 93 89 04 	sts	0x0489, r24
								compass=6;
    46de:	86 e0       	ldi	r24, 0x06	; 6
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	9c 83       	std	Y+4, r25	; 0x04
    46e4:	8b 83       	std	Y+3, r24	; 0x03
    46e6:	9e 01       	movw	r18, r28
    46e8:	2f 5c       	subi	r18, 0xCF	; 207
    46ea:	3e 4f       	sbci	r19, 0xFE	; 254
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	aa ef       	ldi	r26, 0xFA	; 250
    46f2:	b3 e4       	ldi	r27, 0x43	; 67
    46f4:	f9 01       	movw	r30, r18
    46f6:	80 83       	st	Z, r24
    46f8:	91 83       	std	Z+1, r25	; 0x01
    46fa:	a2 83       	std	Z+2, r26	; 0x02
    46fc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    46fe:	8e 01       	movw	r16, r28
    4700:	0b 5c       	subi	r16, 0xCB	; 203
    4702:	1e 4f       	sbci	r17, 0xFE	; 254
    4704:	ce 01       	movw	r24, r28
    4706:	8f 5c       	subi	r24, 0xCF	; 207
    4708:	9e 4f       	sbci	r25, 0xFE	; 254
    470a:	fc 01       	movw	r30, r24
    470c:	60 81       	ld	r22, Z
    470e:	71 81       	ldd	r23, Z+1	; 0x01
    4710:	82 81       	ldd	r24, Z+2	; 0x02
    4712:	93 81       	ldd	r25, Z+3	; 0x03
    4714:	26 e6       	ldi	r18, 0x66	; 102
    4716:	36 e6       	ldi	r19, 0x66	; 102
    4718:	46 e6       	ldi	r20, 0x66	; 102
    471a:	55 e4       	ldi	r21, 0x45	; 69
    471c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	f8 01       	movw	r30, r16
    4726:	80 83       	st	Z, r24
    4728:	91 83       	std	Z+1, r25	; 0x01
    472a:	a2 83       	std	Z+2, r26	; 0x02
    472c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    472e:	ce 01       	movw	r24, r28
    4730:	8b 5c       	subi	r24, 0xCB	; 203
    4732:	9e 4f       	sbci	r25, 0xFE	; 254
    4734:	11 e0       	ldi	r17, 0x01	; 1
    4736:	fc 01       	movw	r30, r24
    4738:	60 81       	ld	r22, Z
    473a:	71 81       	ldd	r23, Z+1	; 0x01
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	93 81       	ldd	r25, Z+3	; 0x03
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	40 e8       	ldi	r20, 0x80	; 128
    4746:	5f e3       	ldi	r21, 0x3F	; 63
    4748:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    474c:	88 23       	and	r24, r24
    474e:	0c f0       	brlt	.+2      	; 0x4752 <__stack+0x2553>
    4750:	10 e0       	ldi	r17, 0x00	; 0
    4752:	11 23       	and	r17, r17
    4754:	49 f0       	breq	.+18     	; 0x4768 <__stack+0x2569>
		__ticks = 1;
    4756:	ce 01       	movw	r24, r28
    4758:	87 5c       	subi	r24, 0xC7	; 199
    475a:	9e 4f       	sbci	r25, 0xFE	; 254
    475c:	21 e0       	ldi	r18, 0x01	; 1
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	fc 01       	movw	r30, r24
    4762:	31 83       	std	Z+1, r19	; 0x01
    4764:	20 83       	st	Z, r18
    4766:	74 c0       	rjmp	.+232    	; 0x4850 <__stack+0x2651>
	else if (__tmp > 65535)
    4768:	ce 01       	movw	r24, r28
    476a:	8b 5c       	subi	r24, 0xCB	; 203
    476c:	9e 4f       	sbci	r25, 0xFE	; 254
    476e:	11 e0       	ldi	r17, 0x01	; 1
    4770:	fc 01       	movw	r30, r24
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	3f ef       	ldi	r19, 0xFF	; 255
    477e:	4f e7       	ldi	r20, 0x7F	; 127
    4780:	57 e4       	ldi	r21, 0x47	; 71
    4782:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    4786:	18 16       	cp	r1, r24
    4788:	0c f0       	brlt	.+2      	; 0x478c <__stack+0x258d>
    478a:	10 e0       	ldi	r17, 0x00	; 0
    478c:	11 23       	and	r17, r17
    478e:	09 f4       	brne	.+2      	; 0x4792 <__stack+0x2593>
    4790:	4d c0       	rjmp	.+154    	; 0x482c <__stack+0x262d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4792:	ce 01       	movw	r24, r28
    4794:	8f 5c       	subi	r24, 0xCF	; 207
    4796:	9e 4f       	sbci	r25, 0xFE	; 254
    4798:	fc 01       	movw	r30, r24
    479a:	60 81       	ld	r22, Z
    479c:	71 81       	ldd	r23, Z+1	; 0x01
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	93 81       	ldd	r25, Z+3	; 0x03
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e2       	ldi	r20, 0x20	; 32
    47a8:	51 e4       	ldi	r21, 0x41	; 65
    47aa:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	8e 01       	movw	r16, r28
    47b4:	07 5c       	subi	r16, 0xC7	; 199
    47b6:	1e 4f       	sbci	r17, 0xFE	; 254
    47b8:	bc 01       	movw	r22, r24
    47ba:	cd 01       	movw	r24, r26
    47bc:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    47c0:	dc 01       	movw	r26, r24
    47c2:	cb 01       	movw	r24, r22
    47c4:	f8 01       	movw	r30, r16
    47c6:	91 83       	std	Z+1, r25	; 0x01
    47c8:	80 83       	st	Z, r24
    47ca:	27 c0       	rjmp	.+78     	; 0x481a <__stack+0x261b>
    47cc:	ce 01       	movw	r24, r28
    47ce:	85 5c       	subi	r24, 0xC5	; 197
    47d0:	9e 4f       	sbci	r25, 0xFE	; 254
    47d2:	20 e7       	ldi	r18, 0x70	; 112
    47d4:	31 e0       	ldi	r19, 0x01	; 1
    47d6:	fc 01       	movw	r30, r24
    47d8:	31 83       	std	Z+1, r19	; 0x01
    47da:	20 83       	st	Z, r18
    47dc:	ce 01       	movw	r24, r28
    47de:	85 5c       	subi	r24, 0xC5	; 197
    47e0:	9e 4f       	sbci	r25, 0xFE	; 254
    47e2:	fc 01       	movw	r30, r24
    47e4:	80 81       	ld	r24, Z
    47e6:	91 81       	ldd	r25, Z+1	; 0x01
    47e8:	8c 01       	movw	r16, r24
    47ea:	c8 01       	movw	r24, r16
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	f1 f7       	brne	.-4      	; 0x47ec <__stack+0x25ed>
    47f0:	8c 01       	movw	r16, r24
    47f2:	ce 01       	movw	r24, r28
    47f4:	85 5c       	subi	r24, 0xC5	; 197
    47f6:	9e 4f       	sbci	r25, 0xFE	; 254
    47f8:	fc 01       	movw	r30, r24
    47fa:	11 83       	std	Z+1, r17	; 0x01
    47fc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47fe:	ce 01       	movw	r24, r28
    4800:	87 5c       	subi	r24, 0xC7	; 199
    4802:	9e 4f       	sbci	r25, 0xFE	; 254
    4804:	9e 01       	movw	r18, r28
    4806:	27 5c       	subi	r18, 0xC7	; 199
    4808:	3e 4f       	sbci	r19, 0xFE	; 254
    480a:	f9 01       	movw	r30, r18
    480c:	20 81       	ld	r18, Z
    480e:	31 81       	ldd	r19, Z+1	; 0x01
    4810:	21 50       	subi	r18, 0x01	; 1
    4812:	30 40       	sbci	r19, 0x00	; 0
    4814:	fc 01       	movw	r30, r24
    4816:	31 83       	std	Z+1, r19	; 0x01
    4818:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481a:	ce 01       	movw	r24, r28
    481c:	87 5c       	subi	r24, 0xC7	; 199
    481e:	9e 4f       	sbci	r25, 0xFE	; 254
    4820:	fc 01       	movw	r30, r24
    4822:	80 81       	ld	r24, Z
    4824:	91 81       	ldd	r25, Z+1	; 0x01
    4826:	00 97       	sbiw	r24, 0x00	; 0
    4828:	89 f6       	brne	.-94     	; 0x47cc <__stack+0x25cd>
    482a:	2f c0       	rjmp	.+94     	; 0x488a <__stack+0x268b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482c:	8e 01       	movw	r16, r28
    482e:	07 5c       	subi	r16, 0xC7	; 199
    4830:	1e 4f       	sbci	r17, 0xFE	; 254
    4832:	ce 01       	movw	r24, r28
    4834:	8b 5c       	subi	r24, 0xCB	; 203
    4836:	9e 4f       	sbci	r25, 0xFE	; 254
    4838:	fc 01       	movw	r30, r24
    483a:	60 81       	ld	r22, Z
    483c:	71 81       	ldd	r23, Z+1	; 0x01
    483e:	82 81       	ldd	r24, Z+2	; 0x02
    4840:	93 81       	ldd	r25, Z+3	; 0x03
    4842:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	f8 01       	movw	r30, r16
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	80 83       	st	Z, r24
    4850:	ce 01       	movw	r24, r28
    4852:	83 5c       	subi	r24, 0xC3	; 195
    4854:	9e 4f       	sbci	r25, 0xFE	; 254
    4856:	9e 01       	movw	r18, r28
    4858:	27 5c       	subi	r18, 0xC7	; 199
    485a:	3e 4f       	sbci	r19, 0xFE	; 254
    485c:	f9 01       	movw	r30, r18
    485e:	20 81       	ld	r18, Z
    4860:	31 81       	ldd	r19, Z+1	; 0x01
    4862:	fc 01       	movw	r30, r24
    4864:	31 83       	std	Z+1, r19	; 0x01
    4866:	20 83       	st	Z, r18
    4868:	ce 01       	movw	r24, r28
    486a:	83 5c       	subi	r24, 0xC3	; 195
    486c:	9e 4f       	sbci	r25, 0xFE	; 254
    486e:	fc 01       	movw	r30, r24
    4870:	80 81       	ld	r24, Z
    4872:	91 81       	ldd	r25, Z+1	; 0x01
    4874:	8c 01       	movw	r16, r24
    4876:	c8 01       	movw	r24, r16
    4878:	01 97       	sbiw	r24, 0x01	; 1
    487a:	f1 f7       	brne	.-4      	; 0x4878 <__stack+0x2679>
    487c:	8c 01       	movw	r16, r24
    487e:	ce 01       	movw	r24, r28
    4880:	83 5c       	subi	r24, 0xC3	; 195
    4882:	9e 4f       	sbci	r25, 0xFE	; 254
    4884:	fc 01       	movw	r30, r24
    4886:	11 83       	std	Z+1, r17	; 0x01
    4888:	00 83       	st	Z, r16
								_delay_ms(500);
								right_degrees(180);
    488a:	84 eb       	ldi	r24, 0xB4	; 180
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    4892:	9e 01       	movw	r18, r28
    4894:	21 5c       	subi	r18, 0xC1	; 193
    4896:	3e 4f       	sbci	r19, 0xFE	; 254
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	a8 ec       	ldi	r26, 0xC8	; 200
    489e:	b2 e4       	ldi	r27, 0x42	; 66
    48a0:	f9 01       	movw	r30, r18
    48a2:	80 83       	st	Z, r24
    48a4:	91 83       	std	Z+1, r25	; 0x01
    48a6:	a2 83       	std	Z+2, r26	; 0x02
    48a8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    48aa:	8e 01       	movw	r16, r28
    48ac:	0d 5b       	subi	r16, 0xBD	; 189
    48ae:	1e 4f       	sbci	r17, 0xFE	; 254
    48b0:	ce 01       	movw	r24, r28
    48b2:	81 5c       	subi	r24, 0xC1	; 193
    48b4:	9e 4f       	sbci	r25, 0xFE	; 254
    48b6:	fc 01       	movw	r30, r24
    48b8:	60 81       	ld	r22, Z
    48ba:	71 81       	ldd	r23, Z+1	; 0x01
    48bc:	82 81       	ldd	r24, Z+2	; 0x02
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	26 e6       	ldi	r18, 0x66	; 102
    48c2:	36 e6       	ldi	r19, 0x66	; 102
    48c4:	46 e6       	ldi	r20, 0x66	; 102
    48c6:	55 e4       	ldi	r21, 0x45	; 69
    48c8:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	f8 01       	movw	r30, r16
    48d2:	80 83       	st	Z, r24
    48d4:	91 83       	std	Z+1, r25	; 0x01
    48d6:	a2 83       	std	Z+2, r26	; 0x02
    48d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48da:	ce 01       	movw	r24, r28
    48dc:	8d 5b       	subi	r24, 0xBD	; 189
    48de:	9e 4f       	sbci	r25, 0xFE	; 254
    48e0:	11 e0       	ldi	r17, 0x01	; 1
    48e2:	fc 01       	movw	r30, r24
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e8       	ldi	r20, 0x80	; 128
    48f2:	5f e3       	ldi	r21, 0x3F	; 63
    48f4:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    48f8:	88 23       	and	r24, r24
    48fa:	0c f0       	brlt	.+2      	; 0x48fe <__stack+0x26ff>
    48fc:	10 e0       	ldi	r17, 0x00	; 0
    48fe:	11 23       	and	r17, r17
    4900:	49 f0       	breq	.+18     	; 0x4914 <__stack+0x2715>
		__ticks = 1;
    4902:	ce 01       	movw	r24, r28
    4904:	89 5b       	subi	r24, 0xB9	; 185
    4906:	9e 4f       	sbci	r25, 0xFE	; 254
    4908:	21 e0       	ldi	r18, 0x01	; 1
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	fc 01       	movw	r30, r24
    490e:	31 83       	std	Z+1, r19	; 0x01
    4910:	20 83       	st	Z, r18
    4912:	74 c0       	rjmp	.+232    	; 0x49fc <__stack+0x27fd>
	else if (__tmp > 65535)
    4914:	ce 01       	movw	r24, r28
    4916:	8d 5b       	subi	r24, 0xBD	; 189
    4918:	9e 4f       	sbci	r25, 0xFE	; 254
    491a:	11 e0       	ldi	r17, 0x01	; 1
    491c:	fc 01       	movw	r30, r24
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	3f ef       	ldi	r19, 0xFF	; 255
    492a:	4f e7       	ldi	r20, 0x7F	; 127
    492c:	57 e4       	ldi	r21, 0x47	; 71
    492e:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    4932:	18 16       	cp	r1, r24
    4934:	0c f0       	brlt	.+2      	; 0x4938 <__stack+0x2739>
    4936:	10 e0       	ldi	r17, 0x00	; 0
    4938:	11 23       	and	r17, r17
    493a:	09 f4       	brne	.+2      	; 0x493e <__stack+0x273f>
    493c:	4d c0       	rjmp	.+154    	; 0x49d8 <__stack+0x27d9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493e:	ce 01       	movw	r24, r28
    4940:	81 5c       	subi	r24, 0xC1	; 193
    4942:	9e 4f       	sbci	r25, 0xFE	; 254
    4944:	fc 01       	movw	r30, r24
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e2       	ldi	r20, 0x20	; 32
    4954:	51 e4       	ldi	r21, 0x41	; 65
    4956:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	8e 01       	movw	r16, r28
    4960:	09 5b       	subi	r16, 0xB9	; 185
    4962:	1e 4f       	sbci	r17, 0xFE	; 254
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	f8 01       	movw	r30, r16
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
    4976:	27 c0       	rjmp	.+78     	; 0x49c6 <__stack+0x27c7>
    4978:	ce 01       	movw	r24, r28
    497a:	87 5b       	subi	r24, 0xB7	; 183
    497c:	9e 4f       	sbci	r25, 0xFE	; 254
    497e:	20 e7       	ldi	r18, 0x70	; 112
    4980:	31 e0       	ldi	r19, 0x01	; 1
    4982:	fc 01       	movw	r30, r24
    4984:	31 83       	std	Z+1, r19	; 0x01
    4986:	20 83       	st	Z, r18
    4988:	ce 01       	movw	r24, r28
    498a:	87 5b       	subi	r24, 0xB7	; 183
    498c:	9e 4f       	sbci	r25, 0xFE	; 254
    498e:	fc 01       	movw	r30, r24
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	8c 01       	movw	r16, r24
    4996:	c8 01       	movw	r24, r16
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <__stack+0x2799>
    499c:	8c 01       	movw	r16, r24
    499e:	ce 01       	movw	r24, r28
    49a0:	87 5b       	subi	r24, 0xB7	; 183
    49a2:	9e 4f       	sbci	r25, 0xFE	; 254
    49a4:	fc 01       	movw	r30, r24
    49a6:	11 83       	std	Z+1, r17	; 0x01
    49a8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49aa:	ce 01       	movw	r24, r28
    49ac:	89 5b       	subi	r24, 0xB9	; 185
    49ae:	9e 4f       	sbci	r25, 0xFE	; 254
    49b0:	9e 01       	movw	r18, r28
    49b2:	29 5b       	subi	r18, 0xB9	; 185
    49b4:	3e 4f       	sbci	r19, 0xFE	; 254
    49b6:	f9 01       	movw	r30, r18
    49b8:	20 81       	ld	r18, Z
    49ba:	31 81       	ldd	r19, Z+1	; 0x01
    49bc:	21 50       	subi	r18, 0x01	; 1
    49be:	30 40       	sbci	r19, 0x00	; 0
    49c0:	fc 01       	movw	r30, r24
    49c2:	31 83       	std	Z+1, r19	; 0x01
    49c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c6:	ce 01       	movw	r24, r28
    49c8:	89 5b       	subi	r24, 0xB9	; 185
    49ca:	9e 4f       	sbci	r25, 0xFE	; 254
    49cc:	fc 01       	movw	r30, r24
    49ce:	80 81       	ld	r24, Z
    49d0:	91 81       	ldd	r25, Z+1	; 0x01
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	89 f6       	brne	.-94     	; 0x4978 <__stack+0x2779>
    49d6:	2f c0       	rjmp	.+94     	; 0x4a36 <__stack+0x2837>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d8:	8e 01       	movw	r16, r28
    49da:	09 5b       	subi	r16, 0xB9	; 185
    49dc:	1e 4f       	sbci	r17, 0xFE	; 254
    49de:	ce 01       	movw	r24, r28
    49e0:	8d 5b       	subi	r24, 0xBD	; 189
    49e2:	9e 4f       	sbci	r25, 0xFE	; 254
    49e4:	fc 01       	movw	r30, r24
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	f8 01       	movw	r30, r16
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    49fc:	ce 01       	movw	r24, r28
    49fe:	85 5b       	subi	r24, 0xB5	; 181
    4a00:	9e 4f       	sbci	r25, 0xFE	; 254
    4a02:	9e 01       	movw	r18, r28
    4a04:	29 5b       	subi	r18, 0xB9	; 185
    4a06:	3e 4f       	sbci	r19, 0xFE	; 254
    4a08:	f9 01       	movw	r30, r18
    4a0a:	20 81       	ld	r18, Z
    4a0c:	31 81       	ldd	r19, Z+1	; 0x01
    4a0e:	fc 01       	movw	r30, r24
    4a10:	31 83       	std	Z+1, r19	; 0x01
    4a12:	20 83       	st	Z, r18
    4a14:	ce 01       	movw	r24, r28
    4a16:	85 5b       	subi	r24, 0xB5	; 181
    4a18:	9e 4f       	sbci	r25, 0xFE	; 254
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	80 81       	ld	r24, Z
    4a1e:	91 81       	ldd	r25, Z+1	; 0x01
    4a20:	8c 01       	movw	r16, r24
    4a22:	c8 01       	movw	r24, r16
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	f1 f7       	brne	.-4      	; 0x4a24 <__stack+0x2825>
    4a28:	8c 01       	movw	r16, r24
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	85 5b       	subi	r24, 0xB5	; 181
    4a2e:	9e 4f       	sbci	r25, 0xFE	; 254
    4a30:	fc 01       	movw	r30, r24
    4a32:	11 83       	std	Z+1, r17	; 0x01
    4a34:	00 83       	st	Z, r16
								_delay_ms(100);
								linefollwer();
    4a36:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					}
			
				}
			}
		}							
		if(final[0]<coor[0])
    4a3a:	ce 01       	movw	r24, r28
    4a3c:	81 56       	subi	r24, 0x61	; 97
    4a3e:	9b 4f       	sbci	r25, 0xFB	; 251
    4a40:	fc 01       	movw	r30, r24
    4a42:	20 81       	ld	r18, Z
    4a44:	31 81       	ldd	r19, Z+1	; 0x01
    4a46:	80 91 89 04 	lds	r24, 0x0489
    4a4a:	90 91 8a 04 	lds	r25, 0x048A
    4a4e:	28 17       	cp	r18, r24
    4a50:	39 07       	cpc	r19, r25
    4a52:	0c f0       	brlt	.+2      	; 0x4a56 <__stack+0x2857>
    4a54:	21 c6       	rjmp	.+3138   	; 0x5698 <__stack+0x3499>
		{
			if(compass==4)
    4a56:	8b 81       	ldd	r24, Y+3	; 0x03
    4a58:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5a:	84 30       	cpi	r24, 0x04	; 4
    4a5c:	91 05       	cpc	r25, r1
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <__stack+0x2863>
    4a60:	b8 c1       	rjmp	.+880    	; 0x4dd2 <__stack+0x2bd3>
			{
				coor[0]=coor[0]-1;
    4a62:	80 91 89 04 	lds	r24, 0x0489
    4a66:	90 91 8a 04 	lds	r25, 0x048A
    4a6a:	01 97       	sbiw	r24, 0x01	; 1
    4a6c:	90 93 8a 04 	sts	0x048A, r25
    4a70:	80 93 89 04 	sts	0x0489, r24
				compass=7;
    4a74:	87 e0       	ldi	r24, 0x07	; 7
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	9c 83       	std	Y+4, r25	; 0x04
    4a7a:	8b 83       	std	Y+3, r24	; 0x03
    4a7c:	9e 01       	movw	r18, r28
    4a7e:	23 5b       	subi	r18, 0xB3	; 179
    4a80:	3e 4f       	sbci	r19, 0xFE	; 254
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	aa ef       	ldi	r26, 0xFA	; 250
    4a88:	b3 e4       	ldi	r27, 0x43	; 67
    4a8a:	f9 01       	movw	r30, r18
    4a8c:	80 83       	st	Z, r24
    4a8e:	91 83       	std	Z+1, r25	; 0x01
    4a90:	a2 83       	std	Z+2, r26	; 0x02
    4a92:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4a94:	8e 01       	movw	r16, r28
    4a96:	0f 5a       	subi	r16, 0xAF	; 175
    4a98:	1e 4f       	sbci	r17, 0xFE	; 254
    4a9a:	ce 01       	movw	r24, r28
    4a9c:	83 5b       	subi	r24, 0xB3	; 179
    4a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    4aa0:	fc 01       	movw	r30, r24
    4aa2:	60 81       	ld	r22, Z
    4aa4:	71 81       	ldd	r23, Z+1	; 0x01
    4aa6:	82 81       	ldd	r24, Z+2	; 0x02
    4aa8:	93 81       	ldd	r25, Z+3	; 0x03
    4aaa:	26 e6       	ldi	r18, 0x66	; 102
    4aac:	36 e6       	ldi	r19, 0x66	; 102
    4aae:	46 e6       	ldi	r20, 0x66	; 102
    4ab0:	55 e4       	ldi	r21, 0x45	; 69
    4ab2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	f8 01       	movw	r30, r16
    4abc:	80 83       	st	Z, r24
    4abe:	91 83       	std	Z+1, r25	; 0x01
    4ac0:	a2 83       	std	Z+2, r26	; 0x02
    4ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ac4:	ce 01       	movw	r24, r28
    4ac6:	8f 5a       	subi	r24, 0xAF	; 175
    4ac8:	9e 4f       	sbci	r25, 0xFE	; 254
    4aca:	11 e0       	ldi	r17, 0x01	; 1
    4acc:	fc 01       	movw	r30, r24
    4ace:	60 81       	ld	r22, Z
    4ad0:	71 81       	ldd	r23, Z+1	; 0x01
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	93 81       	ldd	r25, Z+3	; 0x03
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e8       	ldi	r20, 0x80	; 128
    4adc:	5f e3       	ldi	r21, 0x3F	; 63
    4ade:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    4ae2:	88 23       	and	r24, r24
    4ae4:	0c f0       	brlt	.+2      	; 0x4ae8 <__stack+0x28e9>
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
    4ae8:	11 23       	and	r17, r17
    4aea:	49 f0       	breq	.+18     	; 0x4afe <__stack+0x28ff>
		__ticks = 1;
    4aec:	ce 01       	movw	r24, r28
    4aee:	8b 5a       	subi	r24, 0xAB	; 171
    4af0:	9e 4f       	sbci	r25, 0xFE	; 254
    4af2:	21 e0       	ldi	r18, 0x01	; 1
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	fc 01       	movw	r30, r24
    4af8:	31 83       	std	Z+1, r19	; 0x01
    4afa:	20 83       	st	Z, r18
    4afc:	74 c0       	rjmp	.+232    	; 0x4be6 <__stack+0x29e7>
	else if (__tmp > 65535)
    4afe:	ce 01       	movw	r24, r28
    4b00:	8f 5a       	subi	r24, 0xAF	; 175
    4b02:	9e 4f       	sbci	r25, 0xFE	; 254
    4b04:	11 e0       	ldi	r17, 0x01	; 1
    4b06:	fc 01       	movw	r30, r24
    4b08:	60 81       	ld	r22, Z
    4b0a:	71 81       	ldd	r23, Z+1	; 0x01
    4b0c:	82 81       	ldd	r24, Z+2	; 0x02
    4b0e:	93 81       	ldd	r25, Z+3	; 0x03
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	3f ef       	ldi	r19, 0xFF	; 255
    4b14:	4f e7       	ldi	r20, 0x7F	; 127
    4b16:	57 e4       	ldi	r21, 0x47	; 71
    4b18:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    4b1c:	18 16       	cp	r1, r24
    4b1e:	0c f0       	brlt	.+2      	; 0x4b22 <__stack+0x2923>
    4b20:	10 e0       	ldi	r17, 0x00	; 0
    4b22:	11 23       	and	r17, r17
    4b24:	09 f4       	brne	.+2      	; 0x4b28 <__stack+0x2929>
    4b26:	4d c0       	rjmp	.+154    	; 0x4bc2 <__stack+0x29c3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b28:	ce 01       	movw	r24, r28
    4b2a:	83 5b       	subi	r24, 0xB3	; 179
    4b2c:	9e 4f       	sbci	r25, 0xFE	; 254
    4b2e:	fc 01       	movw	r30, r24
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 e2       	ldi	r20, 0x20	; 32
    4b3e:	51 e4       	ldi	r21, 0x41	; 65
    4b40:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	8e 01       	movw	r16, r28
    4b4a:	0b 5a       	subi	r16, 0xAB	; 171
    4b4c:	1e 4f       	sbci	r17, 0xFE	; 254
    4b4e:	bc 01       	movw	r22, r24
    4b50:	cd 01       	movw	r24, r26
    4b52:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4b56:	dc 01       	movw	r26, r24
    4b58:	cb 01       	movw	r24, r22
    4b5a:	f8 01       	movw	r30, r16
    4b5c:	91 83       	std	Z+1, r25	; 0x01
    4b5e:	80 83       	st	Z, r24
    4b60:	27 c0       	rjmp	.+78     	; 0x4bb0 <__stack+0x29b1>
    4b62:	ce 01       	movw	r24, r28
    4b64:	89 5a       	subi	r24, 0xA9	; 169
    4b66:	9e 4f       	sbci	r25, 0xFE	; 254
    4b68:	20 e7       	ldi	r18, 0x70	; 112
    4b6a:	31 e0       	ldi	r19, 0x01	; 1
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	31 83       	std	Z+1, r19	; 0x01
    4b70:	20 83       	st	Z, r18
    4b72:	ce 01       	movw	r24, r28
    4b74:	89 5a       	subi	r24, 0xA9	; 169
    4b76:	9e 4f       	sbci	r25, 0xFE	; 254
    4b78:	fc 01       	movw	r30, r24
    4b7a:	80 81       	ld	r24, Z
    4b7c:	91 81       	ldd	r25, Z+1	; 0x01
    4b7e:	8c 01       	movw	r16, r24
    4b80:	c8 01       	movw	r24, r16
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	f1 f7       	brne	.-4      	; 0x4b82 <__stack+0x2983>
    4b86:	8c 01       	movw	r16, r24
    4b88:	ce 01       	movw	r24, r28
    4b8a:	89 5a       	subi	r24, 0xA9	; 169
    4b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    4b8e:	fc 01       	movw	r30, r24
    4b90:	11 83       	std	Z+1, r17	; 0x01
    4b92:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b94:	ce 01       	movw	r24, r28
    4b96:	8b 5a       	subi	r24, 0xAB	; 171
    4b98:	9e 4f       	sbci	r25, 0xFE	; 254
    4b9a:	9e 01       	movw	r18, r28
    4b9c:	2b 5a       	subi	r18, 0xAB	; 171
    4b9e:	3e 4f       	sbci	r19, 0xFE	; 254
    4ba0:	f9 01       	movw	r30, r18
    4ba2:	20 81       	ld	r18, Z
    4ba4:	31 81       	ldd	r19, Z+1	; 0x01
    4ba6:	21 50       	subi	r18, 0x01	; 1
    4ba8:	30 40       	sbci	r19, 0x00	; 0
    4baa:	fc 01       	movw	r30, r24
    4bac:	31 83       	std	Z+1, r19	; 0x01
    4bae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	8b 5a       	subi	r24, 0xAB	; 171
    4bb4:	9e 4f       	sbci	r25, 0xFE	; 254
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	80 81       	ld	r24, Z
    4bba:	91 81       	ldd	r25, Z+1	; 0x01
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	89 f6       	brne	.-94     	; 0x4b62 <__stack+0x2963>
    4bc0:	2f c0       	rjmp	.+94     	; 0x4c20 <__stack+0x2a21>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc2:	8e 01       	movw	r16, r28
    4bc4:	0b 5a       	subi	r16, 0xAB	; 171
    4bc6:	1e 4f       	sbci	r17, 0xFE	; 254
    4bc8:	ce 01       	movw	r24, r28
    4bca:	8f 5a       	subi	r24, 0xAF	; 175
    4bcc:	9e 4f       	sbci	r25, 0xFE	; 254
    4bce:	fc 01       	movw	r30, r24
    4bd0:	60 81       	ld	r22, Z
    4bd2:	71 81       	ldd	r23, Z+1	; 0x01
    4bd4:	82 81       	ldd	r24, Z+2	; 0x02
    4bd6:	93 81       	ldd	r25, Z+3	; 0x03
    4bd8:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	f8 01       	movw	r30, r16
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	80 83       	st	Z, r24
    4be6:	ce 01       	movw	r24, r28
    4be8:	87 5a       	subi	r24, 0xA7	; 167
    4bea:	9e 4f       	sbci	r25, 0xFE	; 254
    4bec:	9e 01       	movw	r18, r28
    4bee:	2b 5a       	subi	r18, 0xAB	; 171
    4bf0:	3e 4f       	sbci	r19, 0xFE	; 254
    4bf2:	f9 01       	movw	r30, r18
    4bf4:	20 81       	ld	r18, Z
    4bf6:	31 81       	ldd	r19, Z+1	; 0x01
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	31 83       	std	Z+1, r19	; 0x01
    4bfc:	20 83       	st	Z, r18
    4bfe:	ce 01       	movw	r24, r28
    4c00:	87 5a       	subi	r24, 0xA7	; 167
    4c02:	9e 4f       	sbci	r25, 0xFE	; 254
    4c04:	fc 01       	movw	r30, r24
    4c06:	80 81       	ld	r24, Z
    4c08:	91 81       	ldd	r25, Z+1	; 0x01
    4c0a:	8c 01       	movw	r16, r24
    4c0c:	c8 01       	movw	r24, r16
    4c0e:	01 97       	sbiw	r24, 0x01	; 1
    4c10:	f1 f7       	brne	.-4      	; 0x4c0e <__stack+0x2a0f>
    4c12:	8c 01       	movw	r16, r24
    4c14:	ce 01       	movw	r24, r28
    4c16:	87 5a       	subi	r24, 0xA7	; 167
    4c18:	9e 4f       	sbci	r25, 0xFE	; 254
    4c1a:	fc 01       	movw	r30, r24
    4c1c:	11 83       	std	Z+1, r17	; 0x01
    4c1e:	00 83       	st	Z, r16
				_delay_ms(500);
				left_degrees(85);
    4c20:	85 e5       	ldi	r24, 0x55	; 85
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    4c28:	9e 01       	movw	r18, r28
    4c2a:	25 5a       	subi	r18, 0xA5	; 165
    4c2c:	3e 4f       	sbci	r19, 0xFE	; 254
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a8 ec       	ldi	r26, 0xC8	; 200
    4c34:	b2 e4       	ldi	r27, 0x42	; 66
    4c36:	f9 01       	movw	r30, r18
    4c38:	80 83       	st	Z, r24
    4c3a:	91 83       	std	Z+1, r25	; 0x01
    4c3c:	a2 83       	std	Z+2, r26	; 0x02
    4c3e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c40:	8e 01       	movw	r16, r28
    4c42:	01 5a       	subi	r16, 0xA1	; 161
    4c44:	1e 4f       	sbci	r17, 0xFE	; 254
    4c46:	ce 01       	movw	r24, r28
    4c48:	85 5a       	subi	r24, 0xA5	; 165
    4c4a:	9e 4f       	sbci	r25, 0xFE	; 254
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	60 81       	ld	r22, Z
    4c50:	71 81       	ldd	r23, Z+1	; 0x01
    4c52:	82 81       	ldd	r24, Z+2	; 0x02
    4c54:	93 81       	ldd	r25, Z+3	; 0x03
    4c56:	26 e6       	ldi	r18, 0x66	; 102
    4c58:	36 e6       	ldi	r19, 0x66	; 102
    4c5a:	46 e6       	ldi	r20, 0x66	; 102
    4c5c:	55 e4       	ldi	r21, 0x45	; 69
    4c5e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	f8 01       	movw	r30, r16
    4c68:	80 83       	st	Z, r24
    4c6a:	91 83       	std	Z+1, r25	; 0x01
    4c6c:	a2 83       	std	Z+2, r26	; 0x02
    4c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c70:	ce 01       	movw	r24, r28
    4c72:	81 5a       	subi	r24, 0xA1	; 161
    4c74:	9e 4f       	sbci	r25, 0xFE	; 254
    4c76:	11 e0       	ldi	r17, 0x01	; 1
    4c78:	fc 01       	movw	r30, r24
    4c7a:	60 81       	ld	r22, Z
    4c7c:	71 81       	ldd	r23, Z+1	; 0x01
    4c7e:	82 81       	ldd	r24, Z+2	; 0x02
    4c80:	93 81       	ldd	r25, Z+3	; 0x03
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	40 e8       	ldi	r20, 0x80	; 128
    4c88:	5f e3       	ldi	r21, 0x3F	; 63
    4c8a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    4c8e:	88 23       	and	r24, r24
    4c90:	0c f0       	brlt	.+2      	; 0x4c94 <__stack+0x2a95>
    4c92:	10 e0       	ldi	r17, 0x00	; 0
    4c94:	11 23       	and	r17, r17
    4c96:	49 f0       	breq	.+18     	; 0x4caa <__stack+0x2aab>
		__ticks = 1;
    4c98:	ce 01       	movw	r24, r28
    4c9a:	8d 59       	subi	r24, 0x9D	; 157
    4c9c:	9e 4f       	sbci	r25, 0xFE	; 254
    4c9e:	21 e0       	ldi	r18, 0x01	; 1
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	31 83       	std	Z+1, r19	; 0x01
    4ca6:	20 83       	st	Z, r18
    4ca8:	74 c0       	rjmp	.+232    	; 0x4d92 <__stack+0x2b93>
	else if (__tmp > 65535)
    4caa:	ce 01       	movw	r24, r28
    4cac:	81 5a       	subi	r24, 0xA1	; 161
    4cae:	9e 4f       	sbci	r25, 0xFE	; 254
    4cb0:	11 e0       	ldi	r17, 0x01	; 1
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	60 81       	ld	r22, Z
    4cb6:	71 81       	ldd	r23, Z+1	; 0x01
    4cb8:	82 81       	ldd	r24, Z+2	; 0x02
    4cba:	93 81       	ldd	r25, Z+3	; 0x03
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	3f ef       	ldi	r19, 0xFF	; 255
    4cc0:	4f e7       	ldi	r20, 0x7F	; 127
    4cc2:	57 e4       	ldi	r21, 0x47	; 71
    4cc4:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    4cc8:	18 16       	cp	r1, r24
    4cca:	0c f0       	brlt	.+2      	; 0x4cce <__stack+0x2acf>
    4ccc:	10 e0       	ldi	r17, 0x00	; 0
    4cce:	11 23       	and	r17, r17
    4cd0:	09 f4       	brne	.+2      	; 0x4cd4 <__stack+0x2ad5>
    4cd2:	4d c0       	rjmp	.+154    	; 0x4d6e <__stack+0x2b6f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd4:	ce 01       	movw	r24, r28
    4cd6:	85 5a       	subi	r24, 0xA5	; 165
    4cd8:	9e 4f       	sbci	r25, 0xFE	; 254
    4cda:	fc 01       	movw	r30, r24
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e2       	ldi	r20, 0x20	; 32
    4cea:	51 e4       	ldi	r21, 0x41	; 65
    4cec:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8e 01       	movw	r16, r28
    4cf6:	0d 59       	subi	r16, 0x9D	; 157
    4cf8:	1e 4f       	sbci	r17, 0xFE	; 254
    4cfa:	bc 01       	movw	r22, r24
    4cfc:	cd 01       	movw	r24, r26
    4cfe:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	f8 01       	movw	r30, r16
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	27 c0       	rjmp	.+78     	; 0x4d5c <__stack+0x2b5d>
    4d0e:	ce 01       	movw	r24, r28
    4d10:	8b 59       	subi	r24, 0x9B	; 155
    4d12:	9e 4f       	sbci	r25, 0xFE	; 254
    4d14:	20 e7       	ldi	r18, 0x70	; 112
    4d16:	31 e0       	ldi	r19, 0x01	; 1
    4d18:	fc 01       	movw	r30, r24
    4d1a:	31 83       	std	Z+1, r19	; 0x01
    4d1c:	20 83       	st	Z, r18
    4d1e:	ce 01       	movw	r24, r28
    4d20:	8b 59       	subi	r24, 0x9B	; 155
    4d22:	9e 4f       	sbci	r25, 0xFE	; 254
    4d24:	fc 01       	movw	r30, r24
    4d26:	80 81       	ld	r24, Z
    4d28:	91 81       	ldd	r25, Z+1	; 0x01
    4d2a:	8c 01       	movw	r16, r24
    4d2c:	c8 01       	movw	r24, r16
    4d2e:	01 97       	sbiw	r24, 0x01	; 1
    4d30:	f1 f7       	brne	.-4      	; 0x4d2e <__stack+0x2b2f>
    4d32:	8c 01       	movw	r16, r24
    4d34:	ce 01       	movw	r24, r28
    4d36:	8b 59       	subi	r24, 0x9B	; 155
    4d38:	9e 4f       	sbci	r25, 0xFE	; 254
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	11 83       	std	Z+1, r17	; 0x01
    4d3e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d40:	ce 01       	movw	r24, r28
    4d42:	8d 59       	subi	r24, 0x9D	; 157
    4d44:	9e 4f       	sbci	r25, 0xFE	; 254
    4d46:	9e 01       	movw	r18, r28
    4d48:	2d 59       	subi	r18, 0x9D	; 157
    4d4a:	3e 4f       	sbci	r19, 0xFE	; 254
    4d4c:	f9 01       	movw	r30, r18
    4d4e:	20 81       	ld	r18, Z
    4d50:	31 81       	ldd	r19, Z+1	; 0x01
    4d52:	21 50       	subi	r18, 0x01	; 1
    4d54:	30 40       	sbci	r19, 0x00	; 0
    4d56:	fc 01       	movw	r30, r24
    4d58:	31 83       	std	Z+1, r19	; 0x01
    4d5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	8d 59       	subi	r24, 0x9D	; 157
    4d60:	9e 4f       	sbci	r25, 0xFE	; 254
    4d62:	fc 01       	movw	r30, r24
    4d64:	80 81       	ld	r24, Z
    4d66:	91 81       	ldd	r25, Z+1	; 0x01
    4d68:	00 97       	sbiw	r24, 0x00	; 0
    4d6a:	89 f6       	brne	.-94     	; 0x4d0e <__stack+0x2b0f>
    4d6c:	2f c0       	rjmp	.+94     	; 0x4dcc <__stack+0x2bcd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d6e:	8e 01       	movw	r16, r28
    4d70:	0d 59       	subi	r16, 0x9D	; 157
    4d72:	1e 4f       	sbci	r17, 0xFE	; 254
    4d74:	ce 01       	movw	r24, r28
    4d76:	81 5a       	subi	r24, 0xA1	; 161
    4d78:	9e 4f       	sbci	r25, 0xFE	; 254
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	60 81       	ld	r22, Z
    4d7e:	71 81       	ldd	r23, Z+1	; 0x01
    4d80:	82 81       	ldd	r24, Z+2	; 0x02
    4d82:	93 81       	ldd	r25, Z+3	; 0x03
    4d84:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4d88:	dc 01       	movw	r26, r24
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	f8 01       	movw	r30, r16
    4d8e:	91 83       	std	Z+1, r25	; 0x01
    4d90:	80 83       	st	Z, r24
    4d92:	ce 01       	movw	r24, r28
    4d94:	89 59       	subi	r24, 0x99	; 153
    4d96:	9e 4f       	sbci	r25, 0xFE	; 254
    4d98:	9e 01       	movw	r18, r28
    4d9a:	2d 59       	subi	r18, 0x9D	; 157
    4d9c:	3e 4f       	sbci	r19, 0xFE	; 254
    4d9e:	f9 01       	movw	r30, r18
    4da0:	20 81       	ld	r18, Z
    4da2:	31 81       	ldd	r19, Z+1	; 0x01
    4da4:	fc 01       	movw	r30, r24
    4da6:	31 83       	std	Z+1, r19	; 0x01
    4da8:	20 83       	st	Z, r18
    4daa:	ce 01       	movw	r24, r28
    4dac:	89 59       	subi	r24, 0x99	; 153
    4dae:	9e 4f       	sbci	r25, 0xFE	; 254
    4db0:	fc 01       	movw	r30, r24
    4db2:	80 81       	ld	r24, Z
    4db4:	91 81       	ldd	r25, Z+1	; 0x01
    4db6:	8c 01       	movw	r16, r24
    4db8:	c8 01       	movw	r24, r16
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	f1 f7       	brne	.-4      	; 0x4dba <__stack+0x2bbb>
    4dbe:	8c 01       	movw	r16, r24
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	89 59       	subi	r24, 0x99	; 153
    4dc4:	9e 4f       	sbci	r25, 0xFE	; 254
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	11 83       	std	Z+1, r17	; 0x01
    4dca:	00 83       	st	Z, r16
				_delay_ms(100);
				linefollwer();
    4dcc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    4dd0:	63 c4       	rjmp	.+2246   	; 0x5698 <__stack+0x3499>
			}
			else
			{
				if(compass==7)
    4dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd6:	87 30       	cpi	r24, 0x07	; 7
    4dd8:	91 05       	cpc	r25, r1
    4dda:	09 f0       	breq	.+2      	; 0x4dde <__stack+0x2bdf>
    4ddc:	e2 c0       	rjmp	.+452    	; 0x4fa2 <__stack+0x2da3>
				{
					coor[0]=coor[0]-1;
    4dde:	80 91 89 04 	lds	r24, 0x0489
    4de2:	90 91 8a 04 	lds	r25, 0x048A
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	90 93 8a 04 	sts	0x048A, r25
    4dec:	80 93 89 04 	sts	0x0489, r24
					compass=7;
    4df0:	87 e0       	ldi	r24, 0x07	; 7
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	9c 83       	std	Y+4, r25	; 0x04
    4df6:	8b 83       	std	Y+3, r24	; 0x03
    4df8:	9e 01       	movw	r18, r28
    4dfa:	27 59       	subi	r18, 0x97	; 151
    4dfc:	3e 4f       	sbci	r19, 0xFE	; 254
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	a8 ec       	ldi	r26, 0xC8	; 200
    4e04:	b2 e4       	ldi	r27, 0x42	; 66
    4e06:	f9 01       	movw	r30, r18
    4e08:	80 83       	st	Z, r24
    4e0a:	91 83       	std	Z+1, r25	; 0x01
    4e0c:	a2 83       	std	Z+2, r26	; 0x02
    4e0e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e10:	8e 01       	movw	r16, r28
    4e12:	03 59       	subi	r16, 0x93	; 147
    4e14:	1e 4f       	sbci	r17, 0xFE	; 254
    4e16:	ce 01       	movw	r24, r28
    4e18:	87 59       	subi	r24, 0x97	; 151
    4e1a:	9e 4f       	sbci	r25, 0xFE	; 254
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	60 81       	ld	r22, Z
    4e20:	71 81       	ldd	r23, Z+1	; 0x01
    4e22:	82 81       	ldd	r24, Z+2	; 0x02
    4e24:	93 81       	ldd	r25, Z+3	; 0x03
    4e26:	26 e6       	ldi	r18, 0x66	; 102
    4e28:	36 e6       	ldi	r19, 0x66	; 102
    4e2a:	46 e6       	ldi	r20, 0x66	; 102
    4e2c:	55 e4       	ldi	r21, 0x45	; 69
    4e2e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	f8 01       	movw	r30, r16
    4e38:	80 83       	st	Z, r24
    4e3a:	91 83       	std	Z+1, r25	; 0x01
    4e3c:	a2 83       	std	Z+2, r26	; 0x02
    4e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e40:	ce 01       	movw	r24, r28
    4e42:	83 59       	subi	r24, 0x93	; 147
    4e44:	9e 4f       	sbci	r25, 0xFE	; 254
    4e46:	11 e0       	ldi	r17, 0x01	; 1
    4e48:	fc 01       	movw	r30, r24
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e8       	ldi	r20, 0x80	; 128
    4e58:	5f e3       	ldi	r21, 0x3F	; 63
    4e5a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    4e5e:	88 23       	and	r24, r24
    4e60:	0c f0       	brlt	.+2      	; 0x4e64 <__stack+0x2c65>
    4e62:	10 e0       	ldi	r17, 0x00	; 0
    4e64:	11 23       	and	r17, r17
    4e66:	49 f0       	breq	.+18     	; 0x4e7a <__stack+0x2c7b>
		__ticks = 1;
    4e68:	ce 01       	movw	r24, r28
    4e6a:	8f 58       	subi	r24, 0x8F	; 143
    4e6c:	9e 4f       	sbci	r25, 0xFE	; 254
    4e6e:	21 e0       	ldi	r18, 0x01	; 1
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	fc 01       	movw	r30, r24
    4e74:	31 83       	std	Z+1, r19	; 0x01
    4e76:	20 83       	st	Z, r18
    4e78:	74 c0       	rjmp	.+232    	; 0x4f62 <__stack+0x2d63>
	else if (__tmp > 65535)
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	83 59       	subi	r24, 0x93	; 147
    4e7e:	9e 4f       	sbci	r25, 0xFE	; 254
    4e80:	11 e0       	ldi	r17, 0x01	; 1
    4e82:	fc 01       	movw	r30, r24
    4e84:	60 81       	ld	r22, Z
    4e86:	71 81       	ldd	r23, Z+1	; 0x01
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	3f ef       	ldi	r19, 0xFF	; 255
    4e90:	4f e7       	ldi	r20, 0x7F	; 127
    4e92:	57 e4       	ldi	r21, 0x47	; 71
    4e94:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    4e98:	18 16       	cp	r1, r24
    4e9a:	0c f0       	brlt	.+2      	; 0x4e9e <__stack+0x2c9f>
    4e9c:	10 e0       	ldi	r17, 0x00	; 0
    4e9e:	11 23       	and	r17, r17
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <__stack+0x2ca5>
    4ea2:	4d c0       	rjmp	.+154    	; 0x4f3e <__stack+0x2d3f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea4:	ce 01       	movw	r24, r28
    4ea6:	87 59       	subi	r24, 0x97	; 151
    4ea8:	9e 4f       	sbci	r25, 0xFE	; 254
    4eaa:	fc 01       	movw	r30, r24
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	40 e2       	ldi	r20, 0x20	; 32
    4eba:	51 e4       	ldi	r21, 0x41	; 65
    4ebc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	8e 01       	movw	r16, r28
    4ec6:	0f 58       	subi	r16, 0x8F	; 143
    4ec8:	1e 4f       	sbci	r17, 0xFE	; 254
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	f8 01       	movw	r30, r16
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	80 83       	st	Z, r24
    4edc:	27 c0       	rjmp	.+78     	; 0x4f2c <__stack+0x2d2d>
    4ede:	ce 01       	movw	r24, r28
    4ee0:	8d 58       	subi	r24, 0x8D	; 141
    4ee2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ee4:	20 e7       	ldi	r18, 0x70	; 112
    4ee6:	31 e0       	ldi	r19, 0x01	; 1
    4ee8:	fc 01       	movw	r30, r24
    4eea:	31 83       	std	Z+1, r19	; 0x01
    4eec:	20 83       	st	Z, r18
    4eee:	ce 01       	movw	r24, r28
    4ef0:	8d 58       	subi	r24, 0x8D	; 141
    4ef2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	80 81       	ld	r24, Z
    4ef8:	91 81       	ldd	r25, Z+1	; 0x01
    4efa:	8c 01       	movw	r16, r24
    4efc:	c8 01       	movw	r24, r16
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	f1 f7       	brne	.-4      	; 0x4efe <__stack+0x2cff>
    4f02:	8c 01       	movw	r16, r24
    4f04:	ce 01       	movw	r24, r28
    4f06:	8d 58       	subi	r24, 0x8D	; 141
    4f08:	9e 4f       	sbci	r25, 0xFE	; 254
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	11 83       	std	Z+1, r17	; 0x01
    4f0e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f10:	ce 01       	movw	r24, r28
    4f12:	8f 58       	subi	r24, 0x8F	; 143
    4f14:	9e 4f       	sbci	r25, 0xFE	; 254
    4f16:	9e 01       	movw	r18, r28
    4f18:	2f 58       	subi	r18, 0x8F	; 143
    4f1a:	3e 4f       	sbci	r19, 0xFE	; 254
    4f1c:	f9 01       	movw	r30, r18
    4f1e:	20 81       	ld	r18, Z
    4f20:	31 81       	ldd	r19, Z+1	; 0x01
    4f22:	21 50       	subi	r18, 0x01	; 1
    4f24:	30 40       	sbci	r19, 0x00	; 0
    4f26:	fc 01       	movw	r30, r24
    4f28:	31 83       	std	Z+1, r19	; 0x01
    4f2a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	8f 58       	subi	r24, 0x8F	; 143
    4f30:	9e 4f       	sbci	r25, 0xFE	; 254
    4f32:	fc 01       	movw	r30, r24
    4f34:	80 81       	ld	r24, Z
    4f36:	91 81       	ldd	r25, Z+1	; 0x01
    4f38:	00 97       	sbiw	r24, 0x00	; 0
    4f3a:	89 f6       	brne	.-94     	; 0x4ede <__stack+0x2cdf>
    4f3c:	2f c0       	rjmp	.+94     	; 0x4f9c <__stack+0x2d9d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f3e:	8e 01       	movw	r16, r28
    4f40:	0f 58       	subi	r16, 0x8F	; 143
    4f42:	1e 4f       	sbci	r17, 0xFE	; 254
    4f44:	ce 01       	movw	r24, r28
    4f46:	83 59       	subi	r24, 0x93	; 147
    4f48:	9e 4f       	sbci	r25, 0xFE	; 254
    4f4a:	fc 01       	movw	r30, r24
    4f4c:	60 81       	ld	r22, Z
    4f4e:	71 81       	ldd	r23, Z+1	; 0x01
    4f50:	82 81       	ldd	r24, Z+2	; 0x02
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	f8 01       	movw	r30, r16
    4f5e:	91 83       	std	Z+1, r25	; 0x01
    4f60:	80 83       	st	Z, r24
    4f62:	ce 01       	movw	r24, r28
    4f64:	8b 58       	subi	r24, 0x8B	; 139
    4f66:	9e 4f       	sbci	r25, 0xFE	; 254
    4f68:	9e 01       	movw	r18, r28
    4f6a:	2f 58       	subi	r18, 0x8F	; 143
    4f6c:	3e 4f       	sbci	r19, 0xFE	; 254
    4f6e:	f9 01       	movw	r30, r18
    4f70:	20 81       	ld	r18, Z
    4f72:	31 81       	ldd	r19, Z+1	; 0x01
    4f74:	fc 01       	movw	r30, r24
    4f76:	31 83       	std	Z+1, r19	; 0x01
    4f78:	20 83       	st	Z, r18
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	8b 58       	subi	r24, 0x8B	; 139
    4f7e:	9e 4f       	sbci	r25, 0xFE	; 254
    4f80:	fc 01       	movw	r30, r24
    4f82:	80 81       	ld	r24, Z
    4f84:	91 81       	ldd	r25, Z+1	; 0x01
    4f86:	8c 01       	movw	r16, r24
    4f88:	c8 01       	movw	r24, r16
    4f8a:	01 97       	sbiw	r24, 0x01	; 1
    4f8c:	f1 f7       	brne	.-4      	; 0x4f8a <__stack+0x2d8b>
    4f8e:	8c 01       	movw	r16, r24
    4f90:	ce 01       	movw	r24, r28
    4f92:	8b 58       	subi	r24, 0x8B	; 139
    4f94:	9e 4f       	sbci	r25, 0xFE	; 254
    4f96:	fc 01       	movw	r30, r24
    4f98:	11 83       	std	Z+1, r17	; 0x01
    4f9a:	00 83       	st	Z, r16
					_delay_ms(100);
					linefollwer();
    4f9c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    4fa0:	7b c3       	rjmp	.+1782   	; 0x5698 <__stack+0x3499>
				}
				else
				{
					if(compass==5)
    4fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa6:	85 30       	cpi	r24, 0x05	; 5
    4fa8:	91 05       	cpc	r25, r1
    4faa:	09 f0       	breq	.+2      	; 0x4fae <__stack+0x2daf>
    4fac:	b8 c1       	rjmp	.+880    	; 0x531e <__stack+0x311f>
					{
						coor[0]=coor[0]-1;
    4fae:	80 91 89 04 	lds	r24, 0x0489
    4fb2:	90 91 8a 04 	lds	r25, 0x048A
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	90 93 8a 04 	sts	0x048A, r25
    4fbc:	80 93 89 04 	sts	0x0489, r24
						compass=7;
    4fc0:	87 e0       	ldi	r24, 0x07	; 7
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	9c 83       	std	Y+4, r25	; 0x04
    4fc6:	8b 83       	std	Y+3, r24	; 0x03
    4fc8:	9e 01       	movw	r18, r28
    4fca:	29 58       	subi	r18, 0x89	; 137
    4fcc:	3e 4f       	sbci	r19, 0xFE	; 254
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	aa ef       	ldi	r26, 0xFA	; 250
    4fd4:	b3 e4       	ldi	r27, 0x43	; 67
    4fd6:	f9 01       	movw	r30, r18
    4fd8:	80 83       	st	Z, r24
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	a2 83       	std	Z+2, r26	; 0x02
    4fde:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4fe0:	8e 01       	movw	r16, r28
    4fe2:	05 58       	subi	r16, 0x85	; 133
    4fe4:	1e 4f       	sbci	r17, 0xFE	; 254
    4fe6:	ce 01       	movw	r24, r28
    4fe8:	89 58       	subi	r24, 0x89	; 137
    4fea:	9e 4f       	sbci	r25, 0xFE	; 254
    4fec:	fc 01       	movw	r30, r24
    4fee:	60 81       	ld	r22, Z
    4ff0:	71 81       	ldd	r23, Z+1	; 0x01
    4ff2:	82 81       	ldd	r24, Z+2	; 0x02
    4ff4:	93 81       	ldd	r25, Z+3	; 0x03
    4ff6:	26 e6       	ldi	r18, 0x66	; 102
    4ff8:	36 e6       	ldi	r19, 0x66	; 102
    4ffa:	46 e6       	ldi	r20, 0x66	; 102
    4ffc:	55 e4       	ldi	r21, 0x45	; 69
    4ffe:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	f8 01       	movw	r30, r16
    5008:	80 83       	st	Z, r24
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	a2 83       	std	Z+2, r26	; 0x02
    500e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5010:	ce 01       	movw	r24, r28
    5012:	85 58       	subi	r24, 0x85	; 133
    5014:	9e 4f       	sbci	r25, 0xFE	; 254
    5016:	11 e0       	ldi	r17, 0x01	; 1
    5018:	fc 01       	movw	r30, r24
    501a:	60 81       	ld	r22, Z
    501c:	71 81       	ldd	r23, Z+1	; 0x01
    501e:	82 81       	ldd	r24, Z+2	; 0x02
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e8       	ldi	r20, 0x80	; 128
    5028:	5f e3       	ldi	r21, 0x3F	; 63
    502a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    502e:	88 23       	and	r24, r24
    5030:	0c f0       	brlt	.+2      	; 0x5034 <__stack+0x2e35>
    5032:	10 e0       	ldi	r17, 0x00	; 0
    5034:	11 23       	and	r17, r17
    5036:	49 f0       	breq	.+18     	; 0x504a <__stack+0x2e4b>
		__ticks = 1;
    5038:	ce 01       	movw	r24, r28
    503a:	81 58       	subi	r24, 0x81	; 129
    503c:	9e 4f       	sbci	r25, 0xFE	; 254
    503e:	21 e0       	ldi	r18, 0x01	; 1
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	fc 01       	movw	r30, r24
    5044:	31 83       	std	Z+1, r19	; 0x01
    5046:	20 83       	st	Z, r18
    5048:	74 c0       	rjmp	.+232    	; 0x5132 <__stack+0x2f33>
	else if (__tmp > 65535)
    504a:	ce 01       	movw	r24, r28
    504c:	85 58       	subi	r24, 0x85	; 133
    504e:	9e 4f       	sbci	r25, 0xFE	; 254
    5050:	11 e0       	ldi	r17, 0x01	; 1
    5052:	fc 01       	movw	r30, r24
    5054:	60 81       	ld	r22, Z
    5056:	71 81       	ldd	r23, Z+1	; 0x01
    5058:	82 81       	ldd	r24, Z+2	; 0x02
    505a:	93 81       	ldd	r25, Z+3	; 0x03
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	3f ef       	ldi	r19, 0xFF	; 255
    5060:	4f e7       	ldi	r20, 0x7F	; 127
    5062:	57 e4       	ldi	r21, 0x47	; 71
    5064:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5068:	18 16       	cp	r1, r24
    506a:	0c f0       	brlt	.+2      	; 0x506e <__stack+0x2e6f>
    506c:	10 e0       	ldi	r17, 0x00	; 0
    506e:	11 23       	and	r17, r17
    5070:	09 f4       	brne	.+2      	; 0x5074 <__stack+0x2e75>
    5072:	4d c0       	rjmp	.+154    	; 0x510e <__stack+0x2f0f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5074:	ce 01       	movw	r24, r28
    5076:	89 58       	subi	r24, 0x89	; 137
    5078:	9e 4f       	sbci	r25, 0xFE	; 254
    507a:	fc 01       	movw	r30, r24
    507c:	60 81       	ld	r22, Z
    507e:	71 81       	ldd	r23, Z+1	; 0x01
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	93 81       	ldd	r25, Z+3	; 0x03
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	40 e2       	ldi	r20, 0x20	; 32
    508a:	51 e4       	ldi	r21, 0x41	; 65
    508c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	8e 01       	movw	r16, r28
    5096:	01 58       	subi	r16, 0x81	; 129
    5098:	1e 4f       	sbci	r17, 0xFE	; 254
    509a:	bc 01       	movw	r22, r24
    509c:	cd 01       	movw	r24, r26
    509e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	f8 01       	movw	r30, r16
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	80 83       	st	Z, r24
    50ac:	27 c0       	rjmp	.+78     	; 0x50fc <__stack+0x2efd>
    50ae:	ce 01       	movw	r24, r28
    50b0:	8f 57       	subi	r24, 0x7F	; 127
    50b2:	9e 4f       	sbci	r25, 0xFE	; 254
    50b4:	20 e7       	ldi	r18, 0x70	; 112
    50b6:	31 e0       	ldi	r19, 0x01	; 1
    50b8:	fc 01       	movw	r30, r24
    50ba:	31 83       	std	Z+1, r19	; 0x01
    50bc:	20 83       	st	Z, r18
    50be:	ce 01       	movw	r24, r28
    50c0:	8f 57       	subi	r24, 0x7F	; 127
    50c2:	9e 4f       	sbci	r25, 0xFE	; 254
    50c4:	fc 01       	movw	r30, r24
    50c6:	80 81       	ld	r24, Z
    50c8:	91 81       	ldd	r25, Z+1	; 0x01
    50ca:	8c 01       	movw	r16, r24
    50cc:	c8 01       	movw	r24, r16
    50ce:	01 97       	sbiw	r24, 0x01	; 1
    50d0:	f1 f7       	brne	.-4      	; 0x50ce <__stack+0x2ecf>
    50d2:	8c 01       	movw	r16, r24
    50d4:	ce 01       	movw	r24, r28
    50d6:	8f 57       	subi	r24, 0x7F	; 127
    50d8:	9e 4f       	sbci	r25, 0xFE	; 254
    50da:	fc 01       	movw	r30, r24
    50dc:	11 83       	std	Z+1, r17	; 0x01
    50de:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e0:	ce 01       	movw	r24, r28
    50e2:	81 58       	subi	r24, 0x81	; 129
    50e4:	9e 4f       	sbci	r25, 0xFE	; 254
    50e6:	9e 01       	movw	r18, r28
    50e8:	21 58       	subi	r18, 0x81	; 129
    50ea:	3e 4f       	sbci	r19, 0xFE	; 254
    50ec:	f9 01       	movw	r30, r18
    50ee:	20 81       	ld	r18, Z
    50f0:	31 81       	ldd	r19, Z+1	; 0x01
    50f2:	21 50       	subi	r18, 0x01	; 1
    50f4:	30 40       	sbci	r19, 0x00	; 0
    50f6:	fc 01       	movw	r30, r24
    50f8:	31 83       	std	Z+1, r19	; 0x01
    50fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50fc:	ce 01       	movw	r24, r28
    50fe:	81 58       	subi	r24, 0x81	; 129
    5100:	9e 4f       	sbci	r25, 0xFE	; 254
    5102:	fc 01       	movw	r30, r24
    5104:	80 81       	ld	r24, Z
    5106:	91 81       	ldd	r25, Z+1	; 0x01
    5108:	00 97       	sbiw	r24, 0x00	; 0
    510a:	89 f6       	brne	.-94     	; 0x50ae <__stack+0x2eaf>
    510c:	2f c0       	rjmp	.+94     	; 0x516c <__stack+0x2f6d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    510e:	8e 01       	movw	r16, r28
    5110:	01 58       	subi	r16, 0x81	; 129
    5112:	1e 4f       	sbci	r17, 0xFE	; 254
    5114:	ce 01       	movw	r24, r28
    5116:	85 58       	subi	r24, 0x85	; 133
    5118:	9e 4f       	sbci	r25, 0xFE	; 254
    511a:	fc 01       	movw	r30, r24
    511c:	60 81       	ld	r22, Z
    511e:	71 81       	ldd	r23, Z+1	; 0x01
    5120:	82 81       	ldd	r24, Z+2	; 0x02
    5122:	93 81       	ldd	r25, Z+3	; 0x03
    5124:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	f8 01       	movw	r30, r16
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	80 83       	st	Z, r24
    5132:	ce 01       	movw	r24, r28
    5134:	8d 57       	subi	r24, 0x7D	; 125
    5136:	9e 4f       	sbci	r25, 0xFE	; 254
    5138:	9e 01       	movw	r18, r28
    513a:	21 58       	subi	r18, 0x81	; 129
    513c:	3e 4f       	sbci	r19, 0xFE	; 254
    513e:	f9 01       	movw	r30, r18
    5140:	20 81       	ld	r18, Z
    5142:	31 81       	ldd	r19, Z+1	; 0x01
    5144:	fc 01       	movw	r30, r24
    5146:	31 83       	std	Z+1, r19	; 0x01
    5148:	20 83       	st	Z, r18
    514a:	ce 01       	movw	r24, r28
    514c:	8d 57       	subi	r24, 0x7D	; 125
    514e:	9e 4f       	sbci	r25, 0xFE	; 254
    5150:	fc 01       	movw	r30, r24
    5152:	80 81       	ld	r24, Z
    5154:	91 81       	ldd	r25, Z+1	; 0x01
    5156:	8c 01       	movw	r16, r24
    5158:	c8 01       	movw	r24, r16
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	f1 f7       	brne	.-4      	; 0x515a <__stack+0x2f5b>
    515e:	8c 01       	movw	r16, r24
    5160:	ce 01       	movw	r24, r28
    5162:	8d 57       	subi	r24, 0x7D	; 125
    5164:	9e 4f       	sbci	r25, 0xFE	; 254
    5166:	fc 01       	movw	r30, r24
    5168:	11 83       	std	Z+1, r17	; 0x01
    516a:	00 83       	st	Z, r16
						_delay_ms(500);
						right_degrees(85);
    516c:	85 e5       	ldi	r24, 0x55	; 85
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    5174:	9e 01       	movw	r18, r28
    5176:	2b 57       	subi	r18, 0x7B	; 123
    5178:	3e 4f       	sbci	r19, 0xFE	; 254
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	a8 ec       	ldi	r26, 0xC8	; 200
    5180:	b2 e4       	ldi	r27, 0x42	; 66
    5182:	f9 01       	movw	r30, r18
    5184:	80 83       	st	Z, r24
    5186:	91 83       	std	Z+1, r25	; 0x01
    5188:	a2 83       	std	Z+2, r26	; 0x02
    518a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    518c:	8e 01       	movw	r16, r28
    518e:	07 57       	subi	r16, 0x77	; 119
    5190:	1e 4f       	sbci	r17, 0xFE	; 254
    5192:	ce 01       	movw	r24, r28
    5194:	8b 57       	subi	r24, 0x7B	; 123
    5196:	9e 4f       	sbci	r25, 0xFE	; 254
    5198:	fc 01       	movw	r30, r24
    519a:	60 81       	ld	r22, Z
    519c:	71 81       	ldd	r23, Z+1	; 0x01
    519e:	82 81       	ldd	r24, Z+2	; 0x02
    51a0:	93 81       	ldd	r25, Z+3	; 0x03
    51a2:	26 e6       	ldi	r18, 0x66	; 102
    51a4:	36 e6       	ldi	r19, 0x66	; 102
    51a6:	46 e6       	ldi	r20, 0x66	; 102
    51a8:	55 e4       	ldi	r21, 0x45	; 69
    51aa:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	f8 01       	movw	r30, r16
    51b4:	80 83       	st	Z, r24
    51b6:	91 83       	std	Z+1, r25	; 0x01
    51b8:	a2 83       	std	Z+2, r26	; 0x02
    51ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51bc:	ce 01       	movw	r24, r28
    51be:	87 57       	subi	r24, 0x77	; 119
    51c0:	9e 4f       	sbci	r25, 0xFE	; 254
    51c2:	11 e0       	ldi	r17, 0x01	; 1
    51c4:	fc 01       	movw	r30, r24
    51c6:	60 81       	ld	r22, Z
    51c8:	71 81       	ldd	r23, Z+1	; 0x01
    51ca:	82 81       	ldd	r24, Z+2	; 0x02
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	40 e8       	ldi	r20, 0x80	; 128
    51d4:	5f e3       	ldi	r21, 0x3F	; 63
    51d6:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    51da:	88 23       	and	r24, r24
    51dc:	0c f0       	brlt	.+2      	; 0x51e0 <__stack+0x2fe1>
    51de:	10 e0       	ldi	r17, 0x00	; 0
    51e0:	11 23       	and	r17, r17
    51e2:	49 f0       	breq	.+18     	; 0x51f6 <__stack+0x2ff7>
		__ticks = 1;
    51e4:	ce 01       	movw	r24, r28
    51e6:	83 57       	subi	r24, 0x73	; 115
    51e8:	9e 4f       	sbci	r25, 0xFE	; 254
    51ea:	21 e0       	ldi	r18, 0x01	; 1
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	fc 01       	movw	r30, r24
    51f0:	31 83       	std	Z+1, r19	; 0x01
    51f2:	20 83       	st	Z, r18
    51f4:	74 c0       	rjmp	.+232    	; 0x52de <__stack+0x30df>
	else if (__tmp > 65535)
    51f6:	ce 01       	movw	r24, r28
    51f8:	87 57       	subi	r24, 0x77	; 119
    51fa:	9e 4f       	sbci	r25, 0xFE	; 254
    51fc:	11 e0       	ldi	r17, 0x01	; 1
    51fe:	fc 01       	movw	r30, r24
    5200:	60 81       	ld	r22, Z
    5202:	71 81       	ldd	r23, Z+1	; 0x01
    5204:	82 81       	ldd	r24, Z+2	; 0x02
    5206:	93 81       	ldd	r25, Z+3	; 0x03
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	3f ef       	ldi	r19, 0xFF	; 255
    520c:	4f e7       	ldi	r20, 0x7F	; 127
    520e:	57 e4       	ldi	r21, 0x47	; 71
    5210:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5214:	18 16       	cp	r1, r24
    5216:	0c f0       	brlt	.+2      	; 0x521a <__stack+0x301b>
    5218:	10 e0       	ldi	r17, 0x00	; 0
    521a:	11 23       	and	r17, r17
    521c:	09 f4       	brne	.+2      	; 0x5220 <__stack+0x3021>
    521e:	4d c0       	rjmp	.+154    	; 0x52ba <__stack+0x30bb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5220:	ce 01       	movw	r24, r28
    5222:	8b 57       	subi	r24, 0x7B	; 123
    5224:	9e 4f       	sbci	r25, 0xFE	; 254
    5226:	fc 01       	movw	r30, r24
    5228:	60 81       	ld	r22, Z
    522a:	71 81       	ldd	r23, Z+1	; 0x01
    522c:	82 81       	ldd	r24, Z+2	; 0x02
    522e:	93 81       	ldd	r25, Z+3	; 0x03
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	40 e2       	ldi	r20, 0x20	; 32
    5236:	51 e4       	ldi	r21, 0x41	; 65
    5238:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	8e 01       	movw	r16, r28
    5242:	03 57       	subi	r16, 0x73	; 115
    5244:	1e 4f       	sbci	r17, 0xFE	; 254
    5246:	bc 01       	movw	r22, r24
    5248:	cd 01       	movw	r24, r26
    524a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    524e:	dc 01       	movw	r26, r24
    5250:	cb 01       	movw	r24, r22
    5252:	f8 01       	movw	r30, r16
    5254:	91 83       	std	Z+1, r25	; 0x01
    5256:	80 83       	st	Z, r24
    5258:	27 c0       	rjmp	.+78     	; 0x52a8 <__stack+0x30a9>
    525a:	ce 01       	movw	r24, r28
    525c:	81 57       	subi	r24, 0x71	; 113
    525e:	9e 4f       	sbci	r25, 0xFE	; 254
    5260:	20 e7       	ldi	r18, 0x70	; 112
    5262:	31 e0       	ldi	r19, 0x01	; 1
    5264:	fc 01       	movw	r30, r24
    5266:	31 83       	std	Z+1, r19	; 0x01
    5268:	20 83       	st	Z, r18
    526a:	ce 01       	movw	r24, r28
    526c:	81 57       	subi	r24, 0x71	; 113
    526e:	9e 4f       	sbci	r25, 0xFE	; 254
    5270:	fc 01       	movw	r30, r24
    5272:	80 81       	ld	r24, Z
    5274:	91 81       	ldd	r25, Z+1	; 0x01
    5276:	8c 01       	movw	r16, r24
    5278:	c8 01       	movw	r24, r16
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	f1 f7       	brne	.-4      	; 0x527a <__stack+0x307b>
    527e:	8c 01       	movw	r16, r24
    5280:	ce 01       	movw	r24, r28
    5282:	81 57       	subi	r24, 0x71	; 113
    5284:	9e 4f       	sbci	r25, 0xFE	; 254
    5286:	fc 01       	movw	r30, r24
    5288:	11 83       	std	Z+1, r17	; 0x01
    528a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    528c:	ce 01       	movw	r24, r28
    528e:	83 57       	subi	r24, 0x73	; 115
    5290:	9e 4f       	sbci	r25, 0xFE	; 254
    5292:	9e 01       	movw	r18, r28
    5294:	23 57       	subi	r18, 0x73	; 115
    5296:	3e 4f       	sbci	r19, 0xFE	; 254
    5298:	f9 01       	movw	r30, r18
    529a:	20 81       	ld	r18, Z
    529c:	31 81       	ldd	r19, Z+1	; 0x01
    529e:	21 50       	subi	r18, 0x01	; 1
    52a0:	30 40       	sbci	r19, 0x00	; 0
    52a2:	fc 01       	movw	r30, r24
    52a4:	31 83       	std	Z+1, r19	; 0x01
    52a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52a8:	ce 01       	movw	r24, r28
    52aa:	83 57       	subi	r24, 0x73	; 115
    52ac:	9e 4f       	sbci	r25, 0xFE	; 254
    52ae:	fc 01       	movw	r30, r24
    52b0:	80 81       	ld	r24, Z
    52b2:	91 81       	ldd	r25, Z+1	; 0x01
    52b4:	00 97       	sbiw	r24, 0x00	; 0
    52b6:	89 f6       	brne	.-94     	; 0x525a <__stack+0x305b>
    52b8:	2f c0       	rjmp	.+94     	; 0x5318 <__stack+0x3119>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ba:	8e 01       	movw	r16, r28
    52bc:	03 57       	subi	r16, 0x73	; 115
    52be:	1e 4f       	sbci	r17, 0xFE	; 254
    52c0:	ce 01       	movw	r24, r28
    52c2:	87 57       	subi	r24, 0x77	; 119
    52c4:	9e 4f       	sbci	r25, 0xFE	; 254
    52c6:	fc 01       	movw	r30, r24
    52c8:	60 81       	ld	r22, Z
    52ca:	71 81       	ldd	r23, Z+1	; 0x01
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    52d4:	dc 01       	movw	r26, r24
    52d6:	cb 01       	movw	r24, r22
    52d8:	f8 01       	movw	r30, r16
    52da:	91 83       	std	Z+1, r25	; 0x01
    52dc:	80 83       	st	Z, r24
    52de:	ce 01       	movw	r24, r28
    52e0:	8f 56       	subi	r24, 0x6F	; 111
    52e2:	9e 4f       	sbci	r25, 0xFE	; 254
    52e4:	9e 01       	movw	r18, r28
    52e6:	23 57       	subi	r18, 0x73	; 115
    52e8:	3e 4f       	sbci	r19, 0xFE	; 254
    52ea:	f9 01       	movw	r30, r18
    52ec:	20 81       	ld	r18, Z
    52ee:	31 81       	ldd	r19, Z+1	; 0x01
    52f0:	fc 01       	movw	r30, r24
    52f2:	31 83       	std	Z+1, r19	; 0x01
    52f4:	20 83       	st	Z, r18
    52f6:	ce 01       	movw	r24, r28
    52f8:	8f 56       	subi	r24, 0x6F	; 111
    52fa:	9e 4f       	sbci	r25, 0xFE	; 254
    52fc:	fc 01       	movw	r30, r24
    52fe:	80 81       	ld	r24, Z
    5300:	91 81       	ldd	r25, Z+1	; 0x01
    5302:	8c 01       	movw	r16, r24
    5304:	c8 01       	movw	r24, r16
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	f1 f7       	brne	.-4      	; 0x5306 <__stack+0x3107>
    530a:	8c 01       	movw	r16, r24
    530c:	ce 01       	movw	r24, r28
    530e:	8f 56       	subi	r24, 0x6F	; 111
    5310:	9e 4f       	sbci	r25, 0xFE	; 254
    5312:	fc 01       	movw	r30, r24
    5314:	11 83       	std	Z+1, r17	; 0x01
    5316:	00 83       	st	Z, r16
						_delay_ms(100);
						linefollwer();
    5318:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
    531c:	bd c1       	rjmp	.+890    	; 0x5698 <__stack+0x3499>
					}
					else
					{
							if(compass==6)
    531e:	8b 81       	ldd	r24, Y+3	; 0x03
    5320:	9c 81       	ldd	r25, Y+4	; 0x04
    5322:	86 30       	cpi	r24, 0x06	; 6
    5324:	91 05       	cpc	r25, r1
    5326:	09 f0       	breq	.+2      	; 0x532a <__stack+0x312b>
    5328:	b7 c1       	rjmp	.+878    	; 0x5698 <__stack+0x3499>
							{
								coor[0]=coor[0]-1;
    532a:	80 91 89 04 	lds	r24, 0x0489
    532e:	90 91 8a 04 	lds	r25, 0x048A
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	90 93 8a 04 	sts	0x048A, r25
    5338:	80 93 89 04 	sts	0x0489, r24
								compass=7;
    533c:	87 e0       	ldi	r24, 0x07	; 7
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	9c 83       	std	Y+4, r25	; 0x04
    5342:	8b 83       	std	Y+3, r24	; 0x03
    5344:	9e 01       	movw	r18, r28
    5346:	2d 56       	subi	r18, 0x6D	; 109
    5348:	3e 4f       	sbci	r19, 0xFE	; 254
    534a:	80 e0       	ldi	r24, 0x00	; 0
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	aa ef       	ldi	r26, 0xFA	; 250
    5350:	b3 e4       	ldi	r27, 0x43	; 67
    5352:	f9 01       	movw	r30, r18
    5354:	80 83       	st	Z, r24
    5356:	91 83       	std	Z+1, r25	; 0x01
    5358:	a2 83       	std	Z+2, r26	; 0x02
    535a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    535c:	8e 01       	movw	r16, r28
    535e:	09 56       	subi	r16, 0x69	; 105
    5360:	1e 4f       	sbci	r17, 0xFE	; 254
    5362:	ce 01       	movw	r24, r28
    5364:	8d 56       	subi	r24, 0x6D	; 109
    5366:	9e 4f       	sbci	r25, 0xFE	; 254
    5368:	fc 01       	movw	r30, r24
    536a:	60 81       	ld	r22, Z
    536c:	71 81       	ldd	r23, Z+1	; 0x01
    536e:	82 81       	ldd	r24, Z+2	; 0x02
    5370:	93 81       	ldd	r25, Z+3	; 0x03
    5372:	26 e6       	ldi	r18, 0x66	; 102
    5374:	36 e6       	ldi	r19, 0x66	; 102
    5376:	46 e6       	ldi	r20, 0x66	; 102
    5378:	55 e4       	ldi	r21, 0x45	; 69
    537a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	f8 01       	movw	r30, r16
    5384:	80 83       	st	Z, r24
    5386:	91 83       	std	Z+1, r25	; 0x01
    5388:	a2 83       	std	Z+2, r26	; 0x02
    538a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    538c:	ce 01       	movw	r24, r28
    538e:	89 56       	subi	r24, 0x69	; 105
    5390:	9e 4f       	sbci	r25, 0xFE	; 254
    5392:	11 e0       	ldi	r17, 0x01	; 1
    5394:	fc 01       	movw	r30, r24
    5396:	60 81       	ld	r22, Z
    5398:	71 81       	ldd	r23, Z+1	; 0x01
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	93 81       	ldd	r25, Z+3	; 0x03
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	40 e8       	ldi	r20, 0x80	; 128
    53a4:	5f e3       	ldi	r21, 0x3F	; 63
    53a6:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    53aa:	88 23       	and	r24, r24
    53ac:	0c f0       	brlt	.+2      	; 0x53b0 <__stack+0x31b1>
    53ae:	10 e0       	ldi	r17, 0x00	; 0
    53b0:	11 23       	and	r17, r17
    53b2:	49 f0       	breq	.+18     	; 0x53c6 <__stack+0x31c7>
		__ticks = 1;
    53b4:	ce 01       	movw	r24, r28
    53b6:	85 56       	subi	r24, 0x65	; 101
    53b8:	9e 4f       	sbci	r25, 0xFE	; 254
    53ba:	21 e0       	ldi	r18, 0x01	; 1
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	fc 01       	movw	r30, r24
    53c0:	31 83       	std	Z+1, r19	; 0x01
    53c2:	20 83       	st	Z, r18
    53c4:	74 c0       	rjmp	.+232    	; 0x54ae <__stack+0x32af>
	else if (__tmp > 65535)
    53c6:	ce 01       	movw	r24, r28
    53c8:	89 56       	subi	r24, 0x69	; 105
    53ca:	9e 4f       	sbci	r25, 0xFE	; 254
    53cc:	11 e0       	ldi	r17, 0x01	; 1
    53ce:	fc 01       	movw	r30, r24
    53d0:	60 81       	ld	r22, Z
    53d2:	71 81       	ldd	r23, Z+1	; 0x01
    53d4:	82 81       	ldd	r24, Z+2	; 0x02
    53d6:	93 81       	ldd	r25, Z+3	; 0x03
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	3f ef       	ldi	r19, 0xFF	; 255
    53dc:	4f e7       	ldi	r20, 0x7F	; 127
    53de:	57 e4       	ldi	r21, 0x47	; 71
    53e0:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    53e4:	18 16       	cp	r1, r24
    53e6:	0c f0       	brlt	.+2      	; 0x53ea <__stack+0x31eb>
    53e8:	10 e0       	ldi	r17, 0x00	; 0
    53ea:	11 23       	and	r17, r17
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <__stack+0x31f1>
    53ee:	4d c0       	rjmp	.+154    	; 0x548a <__stack+0x328b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f0:	ce 01       	movw	r24, r28
    53f2:	8d 56       	subi	r24, 0x6D	; 109
    53f4:	9e 4f       	sbci	r25, 0xFE	; 254
    53f6:	fc 01       	movw	r30, r24
    53f8:	60 81       	ld	r22, Z
    53fa:	71 81       	ldd	r23, Z+1	; 0x01
    53fc:	82 81       	ldd	r24, Z+2	; 0x02
    53fe:	93 81       	ldd	r25, Z+3	; 0x03
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	40 e2       	ldi	r20, 0x20	; 32
    5406:	51 e4       	ldi	r21, 0x41	; 65
    5408:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	8e 01       	movw	r16, r28
    5412:	05 56       	subi	r16, 0x65	; 101
    5414:	1e 4f       	sbci	r17, 0xFE	; 254
    5416:	bc 01       	movw	r22, r24
    5418:	cd 01       	movw	r24, r26
    541a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	f8 01       	movw	r30, r16
    5424:	91 83       	std	Z+1, r25	; 0x01
    5426:	80 83       	st	Z, r24
    5428:	27 c0       	rjmp	.+78     	; 0x5478 <__stack+0x3279>
    542a:	ce 01       	movw	r24, r28
    542c:	83 56       	subi	r24, 0x63	; 99
    542e:	9e 4f       	sbci	r25, 0xFE	; 254
    5430:	20 e7       	ldi	r18, 0x70	; 112
    5432:	31 e0       	ldi	r19, 0x01	; 1
    5434:	fc 01       	movw	r30, r24
    5436:	31 83       	std	Z+1, r19	; 0x01
    5438:	20 83       	st	Z, r18
    543a:	ce 01       	movw	r24, r28
    543c:	83 56       	subi	r24, 0x63	; 99
    543e:	9e 4f       	sbci	r25, 0xFE	; 254
    5440:	fc 01       	movw	r30, r24
    5442:	80 81       	ld	r24, Z
    5444:	91 81       	ldd	r25, Z+1	; 0x01
    5446:	8c 01       	movw	r16, r24
    5448:	c8 01       	movw	r24, r16
    544a:	01 97       	sbiw	r24, 0x01	; 1
    544c:	f1 f7       	brne	.-4      	; 0x544a <__stack+0x324b>
    544e:	8c 01       	movw	r16, r24
    5450:	ce 01       	movw	r24, r28
    5452:	83 56       	subi	r24, 0x63	; 99
    5454:	9e 4f       	sbci	r25, 0xFE	; 254
    5456:	fc 01       	movw	r30, r24
    5458:	11 83       	std	Z+1, r17	; 0x01
    545a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    545c:	ce 01       	movw	r24, r28
    545e:	85 56       	subi	r24, 0x65	; 101
    5460:	9e 4f       	sbci	r25, 0xFE	; 254
    5462:	9e 01       	movw	r18, r28
    5464:	25 56       	subi	r18, 0x65	; 101
    5466:	3e 4f       	sbci	r19, 0xFE	; 254
    5468:	f9 01       	movw	r30, r18
    546a:	20 81       	ld	r18, Z
    546c:	31 81       	ldd	r19, Z+1	; 0x01
    546e:	21 50       	subi	r18, 0x01	; 1
    5470:	30 40       	sbci	r19, 0x00	; 0
    5472:	fc 01       	movw	r30, r24
    5474:	31 83       	std	Z+1, r19	; 0x01
    5476:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5478:	ce 01       	movw	r24, r28
    547a:	85 56       	subi	r24, 0x65	; 101
    547c:	9e 4f       	sbci	r25, 0xFE	; 254
    547e:	fc 01       	movw	r30, r24
    5480:	80 81       	ld	r24, Z
    5482:	91 81       	ldd	r25, Z+1	; 0x01
    5484:	00 97       	sbiw	r24, 0x00	; 0
    5486:	89 f6       	brne	.-94     	; 0x542a <__stack+0x322b>
    5488:	2f c0       	rjmp	.+94     	; 0x54e8 <__stack+0x32e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    548a:	8e 01       	movw	r16, r28
    548c:	05 56       	subi	r16, 0x65	; 101
    548e:	1e 4f       	sbci	r17, 0xFE	; 254
    5490:	ce 01       	movw	r24, r28
    5492:	89 56       	subi	r24, 0x69	; 105
    5494:	9e 4f       	sbci	r25, 0xFE	; 254
    5496:	fc 01       	movw	r30, r24
    5498:	60 81       	ld	r22, Z
    549a:	71 81       	ldd	r23, Z+1	; 0x01
    549c:	82 81       	ldd	r24, Z+2	; 0x02
    549e:	93 81       	ldd	r25, Z+3	; 0x03
    54a0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    54a4:	dc 01       	movw	r26, r24
    54a6:	cb 01       	movw	r24, r22
    54a8:	f8 01       	movw	r30, r16
    54aa:	91 83       	std	Z+1, r25	; 0x01
    54ac:	80 83       	st	Z, r24
    54ae:	ce 01       	movw	r24, r28
    54b0:	81 56       	subi	r24, 0x61	; 97
    54b2:	9e 4f       	sbci	r25, 0xFE	; 254
    54b4:	9e 01       	movw	r18, r28
    54b6:	25 56       	subi	r18, 0x65	; 101
    54b8:	3e 4f       	sbci	r19, 0xFE	; 254
    54ba:	f9 01       	movw	r30, r18
    54bc:	20 81       	ld	r18, Z
    54be:	31 81       	ldd	r19, Z+1	; 0x01
    54c0:	fc 01       	movw	r30, r24
    54c2:	31 83       	std	Z+1, r19	; 0x01
    54c4:	20 83       	st	Z, r18
    54c6:	ce 01       	movw	r24, r28
    54c8:	81 56       	subi	r24, 0x61	; 97
    54ca:	9e 4f       	sbci	r25, 0xFE	; 254
    54cc:	fc 01       	movw	r30, r24
    54ce:	80 81       	ld	r24, Z
    54d0:	91 81       	ldd	r25, Z+1	; 0x01
    54d2:	8c 01       	movw	r16, r24
    54d4:	c8 01       	movw	r24, r16
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	f1 f7       	brne	.-4      	; 0x54d6 <__stack+0x32d7>
    54da:	8c 01       	movw	r16, r24
    54dc:	ce 01       	movw	r24, r28
    54de:	81 56       	subi	r24, 0x61	; 97
    54e0:	9e 4f       	sbci	r25, 0xFE	; 254
    54e2:	fc 01       	movw	r30, r24
    54e4:	11 83       	std	Z+1, r17	; 0x01
    54e6:	00 83       	st	Z, r16
								_delay_ms(500);
								right_degrees(180);
    54e8:	84 eb       	ldi	r24, 0xB4	; 180
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    54f0:	9e 01       	movw	r18, r28
    54f2:	2f 55       	subi	r18, 0x5F	; 95
    54f4:	3e 4f       	sbci	r19, 0xFE	; 254
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	a8 ec       	ldi	r26, 0xC8	; 200
    54fc:	b2 e4       	ldi	r27, 0x42	; 66
    54fe:	f9 01       	movw	r30, r18
    5500:	80 83       	st	Z, r24
    5502:	91 83       	std	Z+1, r25	; 0x01
    5504:	a2 83       	std	Z+2, r26	; 0x02
    5506:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5508:	8e 01       	movw	r16, r28
    550a:	0b 55       	subi	r16, 0x5B	; 91
    550c:	1e 4f       	sbci	r17, 0xFE	; 254
    550e:	ce 01       	movw	r24, r28
    5510:	8f 55       	subi	r24, 0x5F	; 95
    5512:	9e 4f       	sbci	r25, 0xFE	; 254
    5514:	fc 01       	movw	r30, r24
    5516:	60 81       	ld	r22, Z
    5518:	71 81       	ldd	r23, Z+1	; 0x01
    551a:	82 81       	ldd	r24, Z+2	; 0x02
    551c:	93 81       	ldd	r25, Z+3	; 0x03
    551e:	26 e6       	ldi	r18, 0x66	; 102
    5520:	36 e6       	ldi	r19, 0x66	; 102
    5522:	46 e6       	ldi	r20, 0x66	; 102
    5524:	55 e4       	ldi	r21, 0x45	; 69
    5526:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    552a:	dc 01       	movw	r26, r24
    552c:	cb 01       	movw	r24, r22
    552e:	f8 01       	movw	r30, r16
    5530:	80 83       	st	Z, r24
    5532:	91 83       	std	Z+1, r25	; 0x01
    5534:	a2 83       	std	Z+2, r26	; 0x02
    5536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5538:	ce 01       	movw	r24, r28
    553a:	8b 55       	subi	r24, 0x5B	; 91
    553c:	9e 4f       	sbci	r25, 0xFE	; 254
    553e:	11 e0       	ldi	r17, 0x01	; 1
    5540:	fc 01       	movw	r30, r24
    5542:	60 81       	ld	r22, Z
    5544:	71 81       	ldd	r23, Z+1	; 0x01
    5546:	82 81       	ldd	r24, Z+2	; 0x02
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	40 e8       	ldi	r20, 0x80	; 128
    5550:	5f e3       	ldi	r21, 0x3F	; 63
    5552:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    5556:	88 23       	and	r24, r24
    5558:	0c f0       	brlt	.+2      	; 0x555c <__stack+0x335d>
    555a:	10 e0       	ldi	r17, 0x00	; 0
    555c:	11 23       	and	r17, r17
    555e:	49 f0       	breq	.+18     	; 0x5572 <__stack+0x3373>
		__ticks = 1;
    5560:	ce 01       	movw	r24, r28
    5562:	87 55       	subi	r24, 0x57	; 87
    5564:	9e 4f       	sbci	r25, 0xFE	; 254
    5566:	21 e0       	ldi	r18, 0x01	; 1
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	fc 01       	movw	r30, r24
    556c:	31 83       	std	Z+1, r19	; 0x01
    556e:	20 83       	st	Z, r18
    5570:	74 c0       	rjmp	.+232    	; 0x565a <__stack+0x345b>
	else if (__tmp > 65535)
    5572:	ce 01       	movw	r24, r28
    5574:	8b 55       	subi	r24, 0x5B	; 91
    5576:	9e 4f       	sbci	r25, 0xFE	; 254
    5578:	11 e0       	ldi	r17, 0x01	; 1
    557a:	fc 01       	movw	r30, r24
    557c:	60 81       	ld	r22, Z
    557e:	71 81       	ldd	r23, Z+1	; 0x01
    5580:	82 81       	ldd	r24, Z+2	; 0x02
    5582:	93 81       	ldd	r25, Z+3	; 0x03
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	3f ef       	ldi	r19, 0xFF	; 255
    5588:	4f e7       	ldi	r20, 0x7F	; 127
    558a:	57 e4       	ldi	r21, 0x47	; 71
    558c:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5590:	18 16       	cp	r1, r24
    5592:	0c f0       	brlt	.+2      	; 0x5596 <__stack+0x3397>
    5594:	10 e0       	ldi	r17, 0x00	; 0
    5596:	11 23       	and	r17, r17
    5598:	09 f4       	brne	.+2      	; 0x559c <__stack+0x339d>
    559a:	4d c0       	rjmp	.+154    	; 0x5636 <__stack+0x3437>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    559c:	ce 01       	movw	r24, r28
    559e:	8f 55       	subi	r24, 0x5F	; 95
    55a0:	9e 4f       	sbci	r25, 0xFE	; 254
    55a2:	fc 01       	movw	r30, r24
    55a4:	60 81       	ld	r22, Z
    55a6:	71 81       	ldd	r23, Z+1	; 0x01
    55a8:	82 81       	ldd	r24, Z+2	; 0x02
    55aa:	93 81       	ldd	r25, Z+3	; 0x03
    55ac:	20 e0       	ldi	r18, 0x00	; 0
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	40 e2       	ldi	r20, 0x20	; 32
    55b2:	51 e4       	ldi	r21, 0x41	; 65
    55b4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    55b8:	dc 01       	movw	r26, r24
    55ba:	cb 01       	movw	r24, r22
    55bc:	8e 01       	movw	r16, r28
    55be:	07 55       	subi	r16, 0x57	; 87
    55c0:	1e 4f       	sbci	r17, 0xFE	; 254
    55c2:	bc 01       	movw	r22, r24
    55c4:	cd 01       	movw	r24, r26
    55c6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	f8 01       	movw	r30, r16
    55d0:	91 83       	std	Z+1, r25	; 0x01
    55d2:	80 83       	st	Z, r24
    55d4:	27 c0       	rjmp	.+78     	; 0x5624 <__stack+0x3425>
    55d6:	ce 01       	movw	r24, r28
    55d8:	85 55       	subi	r24, 0x55	; 85
    55da:	9e 4f       	sbci	r25, 0xFE	; 254
    55dc:	20 e7       	ldi	r18, 0x70	; 112
    55de:	31 e0       	ldi	r19, 0x01	; 1
    55e0:	fc 01       	movw	r30, r24
    55e2:	31 83       	std	Z+1, r19	; 0x01
    55e4:	20 83       	st	Z, r18
    55e6:	ce 01       	movw	r24, r28
    55e8:	85 55       	subi	r24, 0x55	; 85
    55ea:	9e 4f       	sbci	r25, 0xFE	; 254
    55ec:	fc 01       	movw	r30, r24
    55ee:	80 81       	ld	r24, Z
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	8c 01       	movw	r16, r24
    55f4:	c8 01       	movw	r24, r16
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <__stack+0x33f7>
    55fa:	8c 01       	movw	r16, r24
    55fc:	ce 01       	movw	r24, r28
    55fe:	85 55       	subi	r24, 0x55	; 85
    5600:	9e 4f       	sbci	r25, 0xFE	; 254
    5602:	fc 01       	movw	r30, r24
    5604:	11 83       	std	Z+1, r17	; 0x01
    5606:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5608:	ce 01       	movw	r24, r28
    560a:	87 55       	subi	r24, 0x57	; 87
    560c:	9e 4f       	sbci	r25, 0xFE	; 254
    560e:	9e 01       	movw	r18, r28
    5610:	27 55       	subi	r18, 0x57	; 87
    5612:	3e 4f       	sbci	r19, 0xFE	; 254
    5614:	f9 01       	movw	r30, r18
    5616:	20 81       	ld	r18, Z
    5618:	31 81       	ldd	r19, Z+1	; 0x01
    561a:	21 50       	subi	r18, 0x01	; 1
    561c:	30 40       	sbci	r19, 0x00	; 0
    561e:	fc 01       	movw	r30, r24
    5620:	31 83       	std	Z+1, r19	; 0x01
    5622:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5624:	ce 01       	movw	r24, r28
    5626:	87 55       	subi	r24, 0x57	; 87
    5628:	9e 4f       	sbci	r25, 0xFE	; 254
    562a:	fc 01       	movw	r30, r24
    562c:	80 81       	ld	r24, Z
    562e:	91 81       	ldd	r25, Z+1	; 0x01
    5630:	00 97       	sbiw	r24, 0x00	; 0
    5632:	89 f6       	brne	.-94     	; 0x55d6 <__stack+0x33d7>
    5634:	2f c0       	rjmp	.+94     	; 0x5694 <__stack+0x3495>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5636:	8e 01       	movw	r16, r28
    5638:	07 55       	subi	r16, 0x57	; 87
    563a:	1e 4f       	sbci	r17, 0xFE	; 254
    563c:	ce 01       	movw	r24, r28
    563e:	8b 55       	subi	r24, 0x5B	; 91
    5640:	9e 4f       	sbci	r25, 0xFE	; 254
    5642:	fc 01       	movw	r30, r24
    5644:	60 81       	ld	r22, Z
    5646:	71 81       	ldd	r23, Z+1	; 0x01
    5648:	82 81       	ldd	r24, Z+2	; 0x02
    564a:	93 81       	ldd	r25, Z+3	; 0x03
    564c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5650:	dc 01       	movw	r26, r24
    5652:	cb 01       	movw	r24, r22
    5654:	f8 01       	movw	r30, r16
    5656:	91 83       	std	Z+1, r25	; 0x01
    5658:	80 83       	st	Z, r24
    565a:	ce 01       	movw	r24, r28
    565c:	83 55       	subi	r24, 0x53	; 83
    565e:	9e 4f       	sbci	r25, 0xFE	; 254
    5660:	9e 01       	movw	r18, r28
    5662:	27 55       	subi	r18, 0x57	; 87
    5664:	3e 4f       	sbci	r19, 0xFE	; 254
    5666:	f9 01       	movw	r30, r18
    5668:	20 81       	ld	r18, Z
    566a:	31 81       	ldd	r19, Z+1	; 0x01
    566c:	fc 01       	movw	r30, r24
    566e:	31 83       	std	Z+1, r19	; 0x01
    5670:	20 83       	st	Z, r18
    5672:	ce 01       	movw	r24, r28
    5674:	83 55       	subi	r24, 0x53	; 83
    5676:	9e 4f       	sbci	r25, 0xFE	; 254
    5678:	fc 01       	movw	r30, r24
    567a:	80 81       	ld	r24, Z
    567c:	91 81       	ldd	r25, Z+1	; 0x01
    567e:	8c 01       	movw	r16, r24
    5680:	c8 01       	movw	r24, r16
    5682:	01 97       	sbiw	r24, 0x01	; 1
    5684:	f1 f7       	brne	.-4      	; 0x5682 <__stack+0x3483>
    5686:	8c 01       	movw	r16, r24
    5688:	ce 01       	movw	r24, r28
    568a:	83 55       	subi	r24, 0x53	; 83
    568c:	9e 4f       	sbci	r25, 0xFE	; 254
    568e:	fc 01       	movw	r30, r24
    5690:	11 83       	std	Z+1, r17	; 0x01
    5692:	00 83       	st	Z, r16
								_delay_ms(100);
								linefollwer();
    5694:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					}
				}
			}									
			
		}
		if(final[0]==coor[0] && final[1]==coor[1])
    5698:	ce 01       	movw	r24, r28
    569a:	81 56       	subi	r24, 0x61	; 97
    569c:	9b 4f       	sbci	r25, 0xFB	; 251
    569e:	fc 01       	movw	r30, r24
    56a0:	20 81       	ld	r18, Z
    56a2:	31 81       	ldd	r19, Z+1	; 0x01
    56a4:	80 91 89 04 	lds	r24, 0x0489
    56a8:	90 91 8a 04 	lds	r25, 0x048A
    56ac:	28 17       	cp	r18, r24
    56ae:	39 07       	cpc	r19, r25
    56b0:	11 f0       	breq	.+4      	; 0x56b6 <__stack+0x34b7>
    56b2:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__stack+0x43d>
    56b6:	ce 01       	movw	r24, r28
    56b8:	81 56       	subi	r24, 0x61	; 97
    56ba:	9b 4f       	sbci	r25, 0xFB	; 251
    56bc:	fc 01       	movw	r30, r24
    56be:	22 81       	ldd	r18, Z+2	; 0x02
    56c0:	33 81       	ldd	r19, Z+3	; 0x03
    56c2:	80 91 8b 04 	lds	r24, 0x048B
    56c6:	90 91 8c 04 	lds	r25, 0x048C
    56ca:	28 17       	cp	r18, r24
    56cc:	39 07       	cpc	r19, r25
    56ce:	11 f0       	breq	.+4      	; 0x56d4 <__stack+0x34d5>
    56d0:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__stack+0x43d>
		{
			buzzer_on();
    56d4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <buzzer_on>
    56d8:	9e 01       	movw	r18, r28
    56da:	21 55       	subi	r18, 0x51	; 81
    56dc:	3e 4f       	sbci	r19, 0xFE	; 254
    56de:	80 e0       	ldi	r24, 0x00	; 0
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	a8 ec       	ldi	r26, 0xC8	; 200
    56e4:	b2 e4       	ldi	r27, 0x42	; 66
    56e6:	f9 01       	movw	r30, r18
    56e8:	80 83       	st	Z, r24
    56ea:	91 83       	std	Z+1, r25	; 0x01
    56ec:	a2 83       	std	Z+2, r26	; 0x02
    56ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    56f0:	8e 01       	movw	r16, r28
    56f2:	0d 54       	subi	r16, 0x4D	; 77
    56f4:	1e 4f       	sbci	r17, 0xFE	; 254
    56f6:	ce 01       	movw	r24, r28
    56f8:	81 55       	subi	r24, 0x51	; 81
    56fa:	9e 4f       	sbci	r25, 0xFE	; 254
    56fc:	fc 01       	movw	r30, r24
    56fe:	60 81       	ld	r22, Z
    5700:	71 81       	ldd	r23, Z+1	; 0x01
    5702:	82 81       	ldd	r24, Z+2	; 0x02
    5704:	93 81       	ldd	r25, Z+3	; 0x03
    5706:	26 e6       	ldi	r18, 0x66	; 102
    5708:	36 e6       	ldi	r19, 0x66	; 102
    570a:	46 e6       	ldi	r20, 0x66	; 102
    570c:	55 e4       	ldi	r21, 0x45	; 69
    570e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	f8 01       	movw	r30, r16
    5718:	80 83       	st	Z, r24
    571a:	91 83       	std	Z+1, r25	; 0x01
    571c:	a2 83       	std	Z+2, r26	; 0x02
    571e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5720:	ce 01       	movw	r24, r28
    5722:	8d 54       	subi	r24, 0x4D	; 77
    5724:	9e 4f       	sbci	r25, 0xFE	; 254
    5726:	11 e0       	ldi	r17, 0x01	; 1
    5728:	fc 01       	movw	r30, r24
    572a:	60 81       	ld	r22, Z
    572c:	71 81       	ldd	r23, Z+1	; 0x01
    572e:	82 81       	ldd	r24, Z+2	; 0x02
    5730:	93 81       	ldd	r25, Z+3	; 0x03
    5732:	20 e0       	ldi	r18, 0x00	; 0
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	40 e8       	ldi	r20, 0x80	; 128
    5738:	5f e3       	ldi	r21, 0x3F	; 63
    573a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    573e:	88 23       	and	r24, r24
    5740:	0c f0       	brlt	.+2      	; 0x5744 <__stack+0x3545>
    5742:	10 e0       	ldi	r17, 0x00	; 0
    5744:	11 23       	and	r17, r17
    5746:	49 f0       	breq	.+18     	; 0x575a <__stack+0x355b>
		__ticks = 1;
    5748:	ce 01       	movw	r24, r28
    574a:	89 54       	subi	r24, 0x49	; 73
    574c:	9e 4f       	sbci	r25, 0xFE	; 254
    574e:	21 e0       	ldi	r18, 0x01	; 1
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	fc 01       	movw	r30, r24
    5754:	31 83       	std	Z+1, r19	; 0x01
    5756:	20 83       	st	Z, r18
    5758:	74 c0       	rjmp	.+232    	; 0x5842 <__stack+0x3643>
	else if (__tmp > 65535)
    575a:	ce 01       	movw	r24, r28
    575c:	8d 54       	subi	r24, 0x4D	; 77
    575e:	9e 4f       	sbci	r25, 0xFE	; 254
    5760:	11 e0       	ldi	r17, 0x01	; 1
    5762:	fc 01       	movw	r30, r24
    5764:	60 81       	ld	r22, Z
    5766:	71 81       	ldd	r23, Z+1	; 0x01
    5768:	82 81       	ldd	r24, Z+2	; 0x02
    576a:	93 81       	ldd	r25, Z+3	; 0x03
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	3f ef       	ldi	r19, 0xFF	; 255
    5770:	4f e7       	ldi	r20, 0x7F	; 127
    5772:	57 e4       	ldi	r21, 0x47	; 71
    5774:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5778:	18 16       	cp	r1, r24
    577a:	0c f0       	brlt	.+2      	; 0x577e <__stack+0x357f>
    577c:	10 e0       	ldi	r17, 0x00	; 0
    577e:	11 23       	and	r17, r17
    5780:	09 f4       	brne	.+2      	; 0x5784 <__stack+0x3585>
    5782:	4d c0       	rjmp	.+154    	; 0x581e <__stack+0x361f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5784:	ce 01       	movw	r24, r28
    5786:	81 55       	subi	r24, 0x51	; 81
    5788:	9e 4f       	sbci	r25, 0xFE	; 254
    578a:	fc 01       	movw	r30, r24
    578c:	60 81       	ld	r22, Z
    578e:	71 81       	ldd	r23, Z+1	; 0x01
    5790:	82 81       	ldd	r24, Z+2	; 0x02
    5792:	93 81       	ldd	r25, Z+3	; 0x03
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	40 e2       	ldi	r20, 0x20	; 32
    579a:	51 e4       	ldi	r21, 0x41	; 65
    579c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    57a0:	dc 01       	movw	r26, r24
    57a2:	cb 01       	movw	r24, r22
    57a4:	8e 01       	movw	r16, r28
    57a6:	09 54       	subi	r16, 0x49	; 73
    57a8:	1e 4f       	sbci	r17, 0xFE	; 254
    57aa:	bc 01       	movw	r22, r24
    57ac:	cd 01       	movw	r24, r26
    57ae:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	f8 01       	movw	r30, r16
    57b8:	91 83       	std	Z+1, r25	; 0x01
    57ba:	80 83       	st	Z, r24
    57bc:	27 c0       	rjmp	.+78     	; 0x580c <__stack+0x360d>
    57be:	ce 01       	movw	r24, r28
    57c0:	87 54       	subi	r24, 0x47	; 71
    57c2:	9e 4f       	sbci	r25, 0xFE	; 254
    57c4:	20 e7       	ldi	r18, 0x70	; 112
    57c6:	31 e0       	ldi	r19, 0x01	; 1
    57c8:	fc 01       	movw	r30, r24
    57ca:	31 83       	std	Z+1, r19	; 0x01
    57cc:	20 83       	st	Z, r18
    57ce:	ce 01       	movw	r24, r28
    57d0:	87 54       	subi	r24, 0x47	; 71
    57d2:	9e 4f       	sbci	r25, 0xFE	; 254
    57d4:	fc 01       	movw	r30, r24
    57d6:	80 81       	ld	r24, Z
    57d8:	91 81       	ldd	r25, Z+1	; 0x01
    57da:	8c 01       	movw	r16, r24
    57dc:	c8 01       	movw	r24, r16
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <__stack+0x35df>
    57e2:	8c 01       	movw	r16, r24
    57e4:	ce 01       	movw	r24, r28
    57e6:	87 54       	subi	r24, 0x47	; 71
    57e8:	9e 4f       	sbci	r25, 0xFE	; 254
    57ea:	fc 01       	movw	r30, r24
    57ec:	11 83       	std	Z+1, r17	; 0x01
    57ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57f0:	ce 01       	movw	r24, r28
    57f2:	89 54       	subi	r24, 0x49	; 73
    57f4:	9e 4f       	sbci	r25, 0xFE	; 254
    57f6:	9e 01       	movw	r18, r28
    57f8:	29 54       	subi	r18, 0x49	; 73
    57fa:	3e 4f       	sbci	r19, 0xFE	; 254
    57fc:	f9 01       	movw	r30, r18
    57fe:	20 81       	ld	r18, Z
    5800:	31 81       	ldd	r19, Z+1	; 0x01
    5802:	21 50       	subi	r18, 0x01	; 1
    5804:	30 40       	sbci	r19, 0x00	; 0
    5806:	fc 01       	movw	r30, r24
    5808:	31 83       	std	Z+1, r19	; 0x01
    580a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    580c:	ce 01       	movw	r24, r28
    580e:	89 54       	subi	r24, 0x49	; 73
    5810:	9e 4f       	sbci	r25, 0xFE	; 254
    5812:	fc 01       	movw	r30, r24
    5814:	80 81       	ld	r24, Z
    5816:	91 81       	ldd	r25, Z+1	; 0x01
    5818:	00 97       	sbiw	r24, 0x00	; 0
    581a:	89 f6       	brne	.-94     	; 0x57be <__stack+0x35bf>
    581c:	2f c0       	rjmp	.+94     	; 0x587c <__stack+0x367d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    581e:	8e 01       	movw	r16, r28
    5820:	09 54       	subi	r16, 0x49	; 73
    5822:	1e 4f       	sbci	r17, 0xFE	; 254
    5824:	ce 01       	movw	r24, r28
    5826:	8d 54       	subi	r24, 0x4D	; 77
    5828:	9e 4f       	sbci	r25, 0xFE	; 254
    582a:	fc 01       	movw	r30, r24
    582c:	60 81       	ld	r22, Z
    582e:	71 81       	ldd	r23, Z+1	; 0x01
    5830:	82 81       	ldd	r24, Z+2	; 0x02
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5838:	dc 01       	movw	r26, r24
    583a:	cb 01       	movw	r24, r22
    583c:	f8 01       	movw	r30, r16
    583e:	91 83       	std	Z+1, r25	; 0x01
    5840:	80 83       	st	Z, r24
    5842:	ce 01       	movw	r24, r28
    5844:	85 54       	subi	r24, 0x45	; 69
    5846:	9e 4f       	sbci	r25, 0xFE	; 254
    5848:	9e 01       	movw	r18, r28
    584a:	29 54       	subi	r18, 0x49	; 73
    584c:	3e 4f       	sbci	r19, 0xFE	; 254
    584e:	f9 01       	movw	r30, r18
    5850:	20 81       	ld	r18, Z
    5852:	31 81       	ldd	r19, Z+1	; 0x01
    5854:	fc 01       	movw	r30, r24
    5856:	31 83       	std	Z+1, r19	; 0x01
    5858:	20 83       	st	Z, r18
    585a:	ce 01       	movw	r24, r28
    585c:	85 54       	subi	r24, 0x45	; 69
    585e:	9e 4f       	sbci	r25, 0xFE	; 254
    5860:	fc 01       	movw	r30, r24
    5862:	80 81       	ld	r24, Z
    5864:	91 81       	ldd	r25, Z+1	; 0x01
    5866:	8c 01       	movw	r16, r24
    5868:	c8 01       	movw	r24, r16
    586a:	01 97       	sbiw	r24, 0x01	; 1
    586c:	f1 f7       	brne	.-4      	; 0x586a <__stack+0x366b>
    586e:	8c 01       	movw	r16, r24
    5870:	ce 01       	movw	r24, r28
    5872:	85 54       	subi	r24, 0x45	; 69
    5874:	9e 4f       	sbci	r25, 0xFE	; 254
    5876:	fc 01       	movw	r30, r24
    5878:	11 83       	std	Z+1, r17	; 0x01
    587a:	00 83       	st	Z, r16
			_delay_ms(100);		//delay
			buzzer_off();
    587c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <buzzer_off>
    5880:	9e 01       	movw	r18, r28
    5882:	23 54       	subi	r18, 0x43	; 67
    5884:	3e 4f       	sbci	r19, 0xFE	; 254
    5886:	80 e0       	ldi	r24, 0x00	; 0
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	a8 ec       	ldi	r26, 0xC8	; 200
    588c:	b2 e4       	ldi	r27, 0x42	; 66
    588e:	f9 01       	movw	r30, r18
    5890:	80 83       	st	Z, r24
    5892:	91 83       	std	Z+1, r25	; 0x01
    5894:	a2 83       	std	Z+2, r26	; 0x02
    5896:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5898:	8e 01       	movw	r16, r28
    589a:	0f 53       	subi	r16, 0x3F	; 63
    589c:	1e 4f       	sbci	r17, 0xFE	; 254
    589e:	ce 01       	movw	r24, r28
    58a0:	83 54       	subi	r24, 0x43	; 67
    58a2:	9e 4f       	sbci	r25, 0xFE	; 254
    58a4:	fc 01       	movw	r30, r24
    58a6:	60 81       	ld	r22, Z
    58a8:	71 81       	ldd	r23, Z+1	; 0x01
    58aa:	82 81       	ldd	r24, Z+2	; 0x02
    58ac:	93 81       	ldd	r25, Z+3	; 0x03
    58ae:	26 e6       	ldi	r18, 0x66	; 102
    58b0:	36 e6       	ldi	r19, 0x66	; 102
    58b2:	46 e6       	ldi	r20, 0x66	; 102
    58b4:	55 e4       	ldi	r21, 0x45	; 69
    58b6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	f8 01       	movw	r30, r16
    58c0:	80 83       	st	Z, r24
    58c2:	91 83       	std	Z+1, r25	; 0x01
    58c4:	a2 83       	std	Z+2, r26	; 0x02
    58c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58c8:	ce 01       	movw	r24, r28
    58ca:	8f 53       	subi	r24, 0x3F	; 63
    58cc:	9e 4f       	sbci	r25, 0xFE	; 254
    58ce:	11 e0       	ldi	r17, 0x01	; 1
    58d0:	fc 01       	movw	r30, r24
    58d2:	60 81       	ld	r22, Z
    58d4:	71 81       	ldd	r23, Z+1	; 0x01
    58d6:	82 81       	ldd	r24, Z+2	; 0x02
    58d8:	93 81       	ldd	r25, Z+3	; 0x03
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	40 e8       	ldi	r20, 0x80	; 128
    58e0:	5f e3       	ldi	r21, 0x3F	; 63
    58e2:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    58e6:	88 23       	and	r24, r24
    58e8:	0c f0       	brlt	.+2      	; 0x58ec <__stack+0x36ed>
    58ea:	10 e0       	ldi	r17, 0x00	; 0
    58ec:	11 23       	and	r17, r17
    58ee:	49 f0       	breq	.+18     	; 0x5902 <__stack+0x3703>
		__ticks = 1;
    58f0:	ce 01       	movw	r24, r28
    58f2:	8b 53       	subi	r24, 0x3B	; 59
    58f4:	9e 4f       	sbci	r25, 0xFE	; 254
    58f6:	21 e0       	ldi	r18, 0x01	; 1
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	fc 01       	movw	r30, r24
    58fc:	31 83       	std	Z+1, r19	; 0x01
    58fe:	20 83       	st	Z, r18
    5900:	74 c0       	rjmp	.+232    	; 0x59ea <__stack+0x37eb>
	else if (__tmp > 65535)
    5902:	ce 01       	movw	r24, r28
    5904:	8f 53       	subi	r24, 0x3F	; 63
    5906:	9e 4f       	sbci	r25, 0xFE	; 254
    5908:	11 e0       	ldi	r17, 0x01	; 1
    590a:	fc 01       	movw	r30, r24
    590c:	60 81       	ld	r22, Z
    590e:	71 81       	ldd	r23, Z+1	; 0x01
    5910:	82 81       	ldd	r24, Z+2	; 0x02
    5912:	93 81       	ldd	r25, Z+3	; 0x03
    5914:	20 e0       	ldi	r18, 0x00	; 0
    5916:	3f ef       	ldi	r19, 0xFF	; 255
    5918:	4f e7       	ldi	r20, 0x7F	; 127
    591a:	57 e4       	ldi	r21, 0x47	; 71
    591c:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5920:	18 16       	cp	r1, r24
    5922:	0c f0       	brlt	.+2      	; 0x5926 <__stack+0x3727>
    5924:	10 e0       	ldi	r17, 0x00	; 0
    5926:	11 23       	and	r17, r17
    5928:	09 f4       	brne	.+2      	; 0x592c <__stack+0x372d>
    592a:	4d c0       	rjmp	.+154    	; 0x59c6 <__stack+0x37c7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    592c:	ce 01       	movw	r24, r28
    592e:	83 54       	subi	r24, 0x43	; 67
    5930:	9e 4f       	sbci	r25, 0xFE	; 254
    5932:	fc 01       	movw	r30, r24
    5934:	60 81       	ld	r22, Z
    5936:	71 81       	ldd	r23, Z+1	; 0x01
    5938:	82 81       	ldd	r24, Z+2	; 0x02
    593a:	93 81       	ldd	r25, Z+3	; 0x03
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	30 e0       	ldi	r19, 0x00	; 0
    5940:	40 e2       	ldi	r20, 0x20	; 32
    5942:	51 e4       	ldi	r21, 0x41	; 65
    5944:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	8e 01       	movw	r16, r28
    594e:	0b 53       	subi	r16, 0x3B	; 59
    5950:	1e 4f       	sbci	r17, 0xFE	; 254
    5952:	bc 01       	movw	r22, r24
    5954:	cd 01       	movw	r24, r26
    5956:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	f8 01       	movw	r30, r16
    5960:	91 83       	std	Z+1, r25	; 0x01
    5962:	80 83       	st	Z, r24
    5964:	27 c0       	rjmp	.+78     	; 0x59b4 <__stack+0x37b5>
    5966:	ce 01       	movw	r24, r28
    5968:	89 53       	subi	r24, 0x39	; 57
    596a:	9e 4f       	sbci	r25, 0xFE	; 254
    596c:	20 e7       	ldi	r18, 0x70	; 112
    596e:	31 e0       	ldi	r19, 0x01	; 1
    5970:	fc 01       	movw	r30, r24
    5972:	31 83       	std	Z+1, r19	; 0x01
    5974:	20 83       	st	Z, r18
    5976:	ce 01       	movw	r24, r28
    5978:	89 53       	subi	r24, 0x39	; 57
    597a:	9e 4f       	sbci	r25, 0xFE	; 254
    597c:	fc 01       	movw	r30, r24
    597e:	80 81       	ld	r24, Z
    5980:	91 81       	ldd	r25, Z+1	; 0x01
    5982:	8c 01       	movw	r16, r24
    5984:	c8 01       	movw	r24, r16
    5986:	01 97       	sbiw	r24, 0x01	; 1
    5988:	f1 f7       	brne	.-4      	; 0x5986 <__stack+0x3787>
    598a:	8c 01       	movw	r16, r24
    598c:	ce 01       	movw	r24, r28
    598e:	89 53       	subi	r24, 0x39	; 57
    5990:	9e 4f       	sbci	r25, 0xFE	; 254
    5992:	fc 01       	movw	r30, r24
    5994:	11 83       	std	Z+1, r17	; 0x01
    5996:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5998:	ce 01       	movw	r24, r28
    599a:	8b 53       	subi	r24, 0x3B	; 59
    599c:	9e 4f       	sbci	r25, 0xFE	; 254
    599e:	9e 01       	movw	r18, r28
    59a0:	2b 53       	subi	r18, 0x3B	; 59
    59a2:	3e 4f       	sbci	r19, 0xFE	; 254
    59a4:	f9 01       	movw	r30, r18
    59a6:	20 81       	ld	r18, Z
    59a8:	31 81       	ldd	r19, Z+1	; 0x01
    59aa:	21 50       	subi	r18, 0x01	; 1
    59ac:	30 40       	sbci	r19, 0x00	; 0
    59ae:	fc 01       	movw	r30, r24
    59b0:	31 83       	std	Z+1, r19	; 0x01
    59b2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b4:	ce 01       	movw	r24, r28
    59b6:	8b 53       	subi	r24, 0x3B	; 59
    59b8:	9e 4f       	sbci	r25, 0xFE	; 254
    59ba:	fc 01       	movw	r30, r24
    59bc:	80 81       	ld	r24, Z
    59be:	91 81       	ldd	r25, Z+1	; 0x01
    59c0:	00 97       	sbiw	r24, 0x00	; 0
    59c2:	89 f6       	brne	.-94     	; 0x5966 <__stack+0x3767>
    59c4:	30 c0       	rjmp	.+96     	; 0x5a26 <__stack+0x3827>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c6:	8e 01       	movw	r16, r28
    59c8:	0b 53       	subi	r16, 0x3B	; 59
    59ca:	1e 4f       	sbci	r17, 0xFE	; 254
    59cc:	ce 01       	movw	r24, r28
    59ce:	8f 53       	subi	r24, 0x3F	; 63
    59d0:	9e 4f       	sbci	r25, 0xFE	; 254
    59d2:	fc 01       	movw	r30, r24
    59d4:	60 81       	ld	r22, Z
    59d6:	71 81       	ldd	r23, Z+1	; 0x01
    59d8:	82 81       	ldd	r24, Z+2	; 0x02
    59da:	93 81       	ldd	r25, Z+3	; 0x03
    59dc:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    59e0:	dc 01       	movw	r26, r24
    59e2:	cb 01       	movw	r24, r22
    59e4:	f8 01       	movw	r30, r16
    59e6:	91 83       	std	Z+1, r25	; 0x01
    59e8:	80 83       	st	Z, r24
    59ea:	ce 01       	movw	r24, r28
    59ec:	87 53       	subi	r24, 0x37	; 55
    59ee:	9e 4f       	sbci	r25, 0xFE	; 254
    59f0:	9e 01       	movw	r18, r28
    59f2:	2b 53       	subi	r18, 0x3B	; 59
    59f4:	3e 4f       	sbci	r19, 0xFE	; 254
    59f6:	f9 01       	movw	r30, r18
    59f8:	20 81       	ld	r18, Z
    59fa:	31 81       	ldd	r19, Z+1	; 0x01
    59fc:	fc 01       	movw	r30, r24
    59fe:	31 83       	std	Z+1, r19	; 0x01
    5a00:	20 83       	st	Z, r18
    5a02:	ce 01       	movw	r24, r28
    5a04:	87 53       	subi	r24, 0x37	; 55
    5a06:	9e 4f       	sbci	r25, 0xFE	; 254
    5a08:	fc 01       	movw	r30, r24
    5a0a:	80 81       	ld	r24, Z
    5a0c:	91 81       	ldd	r25, Z+1	; 0x01
    5a0e:	8c 01       	movw	r16, r24
    5a10:	c8 01       	movw	r24, r16
    5a12:	01 97       	sbiw	r24, 0x01	; 1
    5a14:	f1 f7       	brne	.-4      	; 0x5a12 <__stack+0x3813>
    5a16:	8c 01       	movw	r16, r24
    5a18:	ce 01       	movw	r24, r28
    5a1a:	87 53       	subi	r24, 0x37	; 55
    5a1c:	9e 4f       	sbci	r25, 0xFE	; 254
    5a1e:	fc 01       	movw	r30, r24
    5a20:	11 83       	std	Z+1, r17	; 0x01
    5a22:	00 83       	st	Z, r16
			_delay_ms(100);    //delay
			break;
    5a24:	00 c0       	rjmp	.+0      	; 0x5a26 <__stack+0x3827>
    5a26:	00 00       	nop
		}
	}
	
	if(coor[0]==0 && coor[1]==0 && flag1%2!=0)    ////////////////////////////////////////////////////////////////////////////////////
    5a28:	80 91 89 04 	lds	r24, 0x0489
    5a2c:	90 91 8a 04 	lds	r25, 0x048A
    5a30:	00 97       	sbiw	r24, 0x00	; 0
    5a32:	09 f0       	breq	.+2      	; 0x5a36 <__stack+0x3837>
    5a34:	eb c2       	rjmp	.+1494   	; 0x600c <__stack+0x3e0d>
    5a36:	80 91 8b 04 	lds	r24, 0x048B
    5a3a:	90 91 8c 04 	lds	r25, 0x048C
    5a3e:	00 97       	sbiw	r24, 0x00	; 0
    5a40:	09 f0       	breq	.+2      	; 0x5a44 <__stack+0x3845>
    5a42:	e4 c2       	rjmp	.+1480   	; 0x600c <__stack+0x3e0d>
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
    5a48:	81 70       	andi	r24, 0x01	; 1
    5a4a:	90 70       	andi	r25, 0x00	; 0
    5a4c:	88 23       	and	r24, r24
    5a4e:	09 f4       	brne	.+2      	; 0x5a52 <__stack+0x3853>
    5a50:	dd c2       	rjmp	.+1466   	; 0x600c <__stack+0x3e0d>
	{
		if(compass==6)
    5a52:	8b 81       	ldd	r24, Y+3	; 0x03
    5a54:	9c 81       	ldd	r25, Y+4	; 0x04
    5a56:	86 30       	cpi	r24, 0x06	; 6
    5a58:	91 05       	cpc	r25, r1
    5a5a:	09 f0       	breq	.+2      	; 0x5a5e <__stack+0x385f>
    5a5c:	e5 c0       	rjmp	.+458    	; 0x5c28 <__stack+0x3a29>
		{
			right_degrees(85);
    5a5e:	85 e5       	ldi	r24, 0x55	; 85
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    5a66:	9e 01       	movw	r18, r28
    5a68:	25 53       	subi	r18, 0x35	; 53
    5a6a:	3e 4f       	sbci	r19, 0xFE	; 254
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	a8 ec       	ldi	r26, 0xC8	; 200
    5a72:	b2 e4       	ldi	r27, 0x42	; 66
    5a74:	f9 01       	movw	r30, r18
    5a76:	80 83       	st	Z, r24
    5a78:	91 83       	std	Z+1, r25	; 0x01
    5a7a:	a2 83       	std	Z+2, r26	; 0x02
    5a7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5a7e:	8e 01       	movw	r16, r28
    5a80:	01 53       	subi	r16, 0x31	; 49
    5a82:	1e 4f       	sbci	r17, 0xFE	; 254
    5a84:	ce 01       	movw	r24, r28
    5a86:	85 53       	subi	r24, 0x35	; 53
    5a88:	9e 4f       	sbci	r25, 0xFE	; 254
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	60 81       	ld	r22, Z
    5a8e:	71 81       	ldd	r23, Z+1	; 0x01
    5a90:	82 81       	ldd	r24, Z+2	; 0x02
    5a92:	93 81       	ldd	r25, Z+3	; 0x03
    5a94:	26 e6       	ldi	r18, 0x66	; 102
    5a96:	36 e6       	ldi	r19, 0x66	; 102
    5a98:	46 e6       	ldi	r20, 0x66	; 102
    5a9a:	55 e4       	ldi	r21, 0x45	; 69
    5a9c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5aa0:	dc 01       	movw	r26, r24
    5aa2:	cb 01       	movw	r24, r22
    5aa4:	f8 01       	movw	r30, r16
    5aa6:	80 83       	st	Z, r24
    5aa8:	91 83       	std	Z+1, r25	; 0x01
    5aaa:	a2 83       	std	Z+2, r26	; 0x02
    5aac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5aae:	ce 01       	movw	r24, r28
    5ab0:	81 53       	subi	r24, 0x31	; 49
    5ab2:	9e 4f       	sbci	r25, 0xFE	; 254
    5ab4:	11 e0       	ldi	r17, 0x01	; 1
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	60 81       	ld	r22, Z
    5aba:	71 81       	ldd	r23, Z+1	; 0x01
    5abc:	82 81       	ldd	r24, Z+2	; 0x02
    5abe:	93 81       	ldd	r25, Z+3	; 0x03
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	40 e8       	ldi	r20, 0x80	; 128
    5ac6:	5f e3       	ldi	r21, 0x3F	; 63
    5ac8:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    5acc:	88 23       	and	r24, r24
    5ace:	0c f0       	brlt	.+2      	; 0x5ad2 <__stack+0x38d3>
    5ad0:	10 e0       	ldi	r17, 0x00	; 0
    5ad2:	11 23       	and	r17, r17
    5ad4:	49 f0       	breq	.+18     	; 0x5ae8 <__stack+0x38e9>
		__ticks = 1;
    5ad6:	ce 01       	movw	r24, r28
    5ad8:	8d 52       	subi	r24, 0x2D	; 45
    5ada:	9e 4f       	sbci	r25, 0xFE	; 254
    5adc:	21 e0       	ldi	r18, 0x01	; 1
    5ade:	30 e0       	ldi	r19, 0x00	; 0
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	31 83       	std	Z+1, r19	; 0x01
    5ae4:	20 83       	st	Z, r18
    5ae6:	74 c0       	rjmp	.+232    	; 0x5bd0 <__stack+0x39d1>
	else if (__tmp > 65535)
    5ae8:	ce 01       	movw	r24, r28
    5aea:	81 53       	subi	r24, 0x31	; 49
    5aec:	9e 4f       	sbci	r25, 0xFE	; 254
    5aee:	11 e0       	ldi	r17, 0x01	; 1
    5af0:	fc 01       	movw	r30, r24
    5af2:	60 81       	ld	r22, Z
    5af4:	71 81       	ldd	r23, Z+1	; 0x01
    5af6:	82 81       	ldd	r24, Z+2	; 0x02
    5af8:	93 81       	ldd	r25, Z+3	; 0x03
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	3f ef       	ldi	r19, 0xFF	; 255
    5afe:	4f e7       	ldi	r20, 0x7F	; 127
    5b00:	57 e4       	ldi	r21, 0x47	; 71
    5b02:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5b06:	18 16       	cp	r1, r24
    5b08:	0c f0       	brlt	.+2      	; 0x5b0c <__stack+0x390d>
    5b0a:	10 e0       	ldi	r17, 0x00	; 0
    5b0c:	11 23       	and	r17, r17
    5b0e:	09 f4       	brne	.+2      	; 0x5b12 <__stack+0x3913>
    5b10:	4d c0       	rjmp	.+154    	; 0x5bac <__stack+0x39ad>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b12:	ce 01       	movw	r24, r28
    5b14:	85 53       	subi	r24, 0x35	; 53
    5b16:	9e 4f       	sbci	r25, 0xFE	; 254
    5b18:	fc 01       	movw	r30, r24
    5b1a:	60 81       	ld	r22, Z
    5b1c:	71 81       	ldd	r23, Z+1	; 0x01
    5b1e:	82 81       	ldd	r24, Z+2	; 0x02
    5b20:	93 81       	ldd	r25, Z+3	; 0x03
    5b22:	20 e0       	ldi	r18, 0x00	; 0
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	40 e2       	ldi	r20, 0x20	; 32
    5b28:	51 e4       	ldi	r21, 0x41	; 65
    5b2a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5b2e:	dc 01       	movw	r26, r24
    5b30:	cb 01       	movw	r24, r22
    5b32:	8e 01       	movw	r16, r28
    5b34:	0d 52       	subi	r16, 0x2D	; 45
    5b36:	1e 4f       	sbci	r17, 0xFE	; 254
    5b38:	bc 01       	movw	r22, r24
    5b3a:	cd 01       	movw	r24, r26
    5b3c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	f8 01       	movw	r30, r16
    5b46:	91 83       	std	Z+1, r25	; 0x01
    5b48:	80 83       	st	Z, r24
    5b4a:	27 c0       	rjmp	.+78     	; 0x5b9a <__stack+0x399b>
    5b4c:	ce 01       	movw	r24, r28
    5b4e:	8b 52       	subi	r24, 0x2B	; 43
    5b50:	9e 4f       	sbci	r25, 0xFE	; 254
    5b52:	20 e7       	ldi	r18, 0x70	; 112
    5b54:	31 e0       	ldi	r19, 0x01	; 1
    5b56:	fc 01       	movw	r30, r24
    5b58:	31 83       	std	Z+1, r19	; 0x01
    5b5a:	20 83       	st	Z, r18
    5b5c:	ce 01       	movw	r24, r28
    5b5e:	8b 52       	subi	r24, 0x2B	; 43
    5b60:	9e 4f       	sbci	r25, 0xFE	; 254
    5b62:	fc 01       	movw	r30, r24
    5b64:	80 81       	ld	r24, Z
    5b66:	91 81       	ldd	r25, Z+1	; 0x01
    5b68:	8c 01       	movw	r16, r24
    5b6a:	c8 01       	movw	r24, r16
    5b6c:	01 97       	sbiw	r24, 0x01	; 1
    5b6e:	f1 f7       	brne	.-4      	; 0x5b6c <__stack+0x396d>
    5b70:	8c 01       	movw	r16, r24
    5b72:	ce 01       	movw	r24, r28
    5b74:	8b 52       	subi	r24, 0x2B	; 43
    5b76:	9e 4f       	sbci	r25, 0xFE	; 254
    5b78:	fc 01       	movw	r30, r24
    5b7a:	11 83       	std	Z+1, r17	; 0x01
    5b7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b7e:	ce 01       	movw	r24, r28
    5b80:	8d 52       	subi	r24, 0x2D	; 45
    5b82:	9e 4f       	sbci	r25, 0xFE	; 254
    5b84:	9e 01       	movw	r18, r28
    5b86:	2d 52       	subi	r18, 0x2D	; 45
    5b88:	3e 4f       	sbci	r19, 0xFE	; 254
    5b8a:	f9 01       	movw	r30, r18
    5b8c:	20 81       	ld	r18, Z
    5b8e:	31 81       	ldd	r19, Z+1	; 0x01
    5b90:	21 50       	subi	r18, 0x01	; 1
    5b92:	30 40       	sbci	r19, 0x00	; 0
    5b94:	fc 01       	movw	r30, r24
    5b96:	31 83       	std	Z+1, r19	; 0x01
    5b98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b9a:	ce 01       	movw	r24, r28
    5b9c:	8d 52       	subi	r24, 0x2D	; 45
    5b9e:	9e 4f       	sbci	r25, 0xFE	; 254
    5ba0:	fc 01       	movw	r30, r24
    5ba2:	80 81       	ld	r24, Z
    5ba4:	91 81       	ldd	r25, Z+1	; 0x01
    5ba6:	00 97       	sbiw	r24, 0x00	; 0
    5ba8:	89 f6       	brne	.-94     	; 0x5b4c <__stack+0x394d>
    5baa:	2f c0       	rjmp	.+94     	; 0x5c0a <__stack+0x3a0b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bac:	8e 01       	movw	r16, r28
    5bae:	0d 52       	subi	r16, 0x2D	; 45
    5bb0:	1e 4f       	sbci	r17, 0xFE	; 254
    5bb2:	ce 01       	movw	r24, r28
    5bb4:	81 53       	subi	r24, 0x31	; 49
    5bb6:	9e 4f       	sbci	r25, 0xFE	; 254
    5bb8:	fc 01       	movw	r30, r24
    5bba:	60 81       	ld	r22, Z
    5bbc:	71 81       	ldd	r23, Z+1	; 0x01
    5bbe:	82 81       	ldd	r24, Z+2	; 0x02
    5bc0:	93 81       	ldd	r25, Z+3	; 0x03
    5bc2:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	cb 01       	movw	r24, r22
    5bca:	f8 01       	movw	r30, r16
    5bcc:	91 83       	std	Z+1, r25	; 0x01
    5bce:	80 83       	st	Z, r24
    5bd0:	ce 01       	movw	r24, r28
    5bd2:	89 52       	subi	r24, 0x29	; 41
    5bd4:	9e 4f       	sbci	r25, 0xFE	; 254
    5bd6:	9e 01       	movw	r18, r28
    5bd8:	2d 52       	subi	r18, 0x2D	; 45
    5bda:	3e 4f       	sbci	r19, 0xFE	; 254
    5bdc:	f9 01       	movw	r30, r18
    5bde:	20 81       	ld	r18, Z
    5be0:	31 81       	ldd	r19, Z+1	; 0x01
    5be2:	fc 01       	movw	r30, r24
    5be4:	31 83       	std	Z+1, r19	; 0x01
    5be6:	20 83       	st	Z, r18
    5be8:	ce 01       	movw	r24, r28
    5bea:	89 52       	subi	r24, 0x29	; 41
    5bec:	9e 4f       	sbci	r25, 0xFE	; 254
    5bee:	fc 01       	movw	r30, r24
    5bf0:	80 81       	ld	r24, Z
    5bf2:	91 81       	ldd	r25, Z+1	; 0x01
    5bf4:	8c 01       	movw	r16, r24
    5bf6:	c8 01       	movw	r24, r16
    5bf8:	01 97       	sbiw	r24, 0x01	; 1
    5bfa:	f1 f7       	brne	.-4      	; 0x5bf8 <__stack+0x39f9>
    5bfc:	8c 01       	movw	r16, r24
    5bfe:	ce 01       	movw	r24, r28
    5c00:	89 52       	subi	r24, 0x29	; 41
    5c02:	9e 4f       	sbci	r25, 0xFE	; 254
    5c04:	fc 01       	movw	r30, r24
    5c06:	11 83       	std	Z+1, r17	; 0x01
    5c08:	00 83       	st	Z, r16
			_delay_ms(100);
			coor[0]=0;
    5c0a:	10 92 8a 04 	sts	0x048A, r1
    5c0e:	10 92 89 04 	sts	0x0489, r1
			coor[1]=0;
    5c12:	10 92 8c 04 	sts	0x048C, r1
    5c16:	10 92 8b 04 	sts	0x048B, r1
			linefollwer();
    5c1a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
			compass=4;
    5c1e:	84 e0       	ldi	r24, 0x04	; 4
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	9c 83       	std	Y+4, r25	; 0x04
    5c24:	8b 83       	std	Y+3, r24	; 0x03
    5c26:	d1 c1       	rjmp	.+930    	; 0x5fca <__stack+0x3dcb>
		}
		else
		{
			if(compass==7)
    5c28:	8b 81       	ldd	r24, Y+3	; 0x03
    5c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c2c:	87 30       	cpi	r24, 0x07	; 7
    5c2e:	91 05       	cpc	r25, r1
    5c30:	09 f0       	breq	.+2      	; 0x5c34 <__stack+0x3a35>
    5c32:	e5 c0       	rjmp	.+458    	; 0x5dfe <__stack+0x3bff>
			{
				left_degrees(85);
    5c34:	85 e5       	ldi	r24, 0x55	; 85
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    5c3c:	9e 01       	movw	r18, r28
    5c3e:	27 52       	subi	r18, 0x27	; 39
    5c40:	3e 4f       	sbci	r19, 0xFE	; 254
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	a8 ec       	ldi	r26, 0xC8	; 200
    5c48:	b2 e4       	ldi	r27, 0x42	; 66
    5c4a:	f9 01       	movw	r30, r18
    5c4c:	80 83       	st	Z, r24
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	a2 83       	std	Z+2, r26	; 0x02
    5c52:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5c54:	8e 01       	movw	r16, r28
    5c56:	03 52       	subi	r16, 0x23	; 35
    5c58:	1e 4f       	sbci	r17, 0xFE	; 254
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	87 52       	subi	r24, 0x27	; 39
    5c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    5c60:	fc 01       	movw	r30, r24
    5c62:	60 81       	ld	r22, Z
    5c64:	71 81       	ldd	r23, Z+1	; 0x01
    5c66:	82 81       	ldd	r24, Z+2	; 0x02
    5c68:	93 81       	ldd	r25, Z+3	; 0x03
    5c6a:	26 e6       	ldi	r18, 0x66	; 102
    5c6c:	36 e6       	ldi	r19, 0x66	; 102
    5c6e:	46 e6       	ldi	r20, 0x66	; 102
    5c70:	55 e4       	ldi	r21, 0x45	; 69
    5c72:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5c76:	dc 01       	movw	r26, r24
    5c78:	cb 01       	movw	r24, r22
    5c7a:	f8 01       	movw	r30, r16
    5c7c:	80 83       	st	Z, r24
    5c7e:	91 83       	std	Z+1, r25	; 0x01
    5c80:	a2 83       	std	Z+2, r26	; 0x02
    5c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c84:	ce 01       	movw	r24, r28
    5c86:	83 52       	subi	r24, 0x23	; 35
    5c88:	9e 4f       	sbci	r25, 0xFE	; 254
    5c8a:	11 e0       	ldi	r17, 0x01	; 1
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	60 81       	ld	r22, Z
    5c90:	71 81       	ldd	r23, Z+1	; 0x01
    5c92:	82 81       	ldd	r24, Z+2	; 0x02
    5c94:	93 81       	ldd	r25, Z+3	; 0x03
    5c96:	20 e0       	ldi	r18, 0x00	; 0
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	40 e8       	ldi	r20, 0x80	; 128
    5c9c:	5f e3       	ldi	r21, 0x3F	; 63
    5c9e:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    5ca2:	88 23       	and	r24, r24
    5ca4:	0c f0       	brlt	.+2      	; 0x5ca8 <__stack+0x3aa9>
    5ca6:	10 e0       	ldi	r17, 0x00	; 0
    5ca8:	11 23       	and	r17, r17
    5caa:	49 f0       	breq	.+18     	; 0x5cbe <__stack+0x3abf>
		__ticks = 1;
    5cac:	ce 01       	movw	r24, r28
    5cae:	8f 51       	subi	r24, 0x1F	; 31
    5cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    5cb2:	21 e0       	ldi	r18, 0x01	; 1
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	fc 01       	movw	r30, r24
    5cb8:	31 83       	std	Z+1, r19	; 0x01
    5cba:	20 83       	st	Z, r18
    5cbc:	74 c0       	rjmp	.+232    	; 0x5da6 <__stack+0x3ba7>
	else if (__tmp > 65535)
    5cbe:	ce 01       	movw	r24, r28
    5cc0:	83 52       	subi	r24, 0x23	; 35
    5cc2:	9e 4f       	sbci	r25, 0xFE	; 254
    5cc4:	11 e0       	ldi	r17, 0x01	; 1
    5cc6:	fc 01       	movw	r30, r24
    5cc8:	60 81       	ld	r22, Z
    5cca:	71 81       	ldd	r23, Z+1	; 0x01
    5ccc:	82 81       	ldd	r24, Z+2	; 0x02
    5cce:	93 81       	ldd	r25, Z+3	; 0x03
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	3f ef       	ldi	r19, 0xFF	; 255
    5cd4:	4f e7       	ldi	r20, 0x7F	; 127
    5cd6:	57 e4       	ldi	r21, 0x47	; 71
    5cd8:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5cdc:	18 16       	cp	r1, r24
    5cde:	0c f0       	brlt	.+2      	; 0x5ce2 <__stack+0x3ae3>
    5ce0:	10 e0       	ldi	r17, 0x00	; 0
    5ce2:	11 23       	and	r17, r17
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <__stack+0x3ae9>
    5ce6:	4d c0       	rjmp	.+154    	; 0x5d82 <__stack+0x3b83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ce8:	ce 01       	movw	r24, r28
    5cea:	87 52       	subi	r24, 0x27	; 39
    5cec:	9e 4f       	sbci	r25, 0xFE	; 254
    5cee:	fc 01       	movw	r30, r24
    5cf0:	60 81       	ld	r22, Z
    5cf2:	71 81       	ldd	r23, Z+1	; 0x01
    5cf4:	82 81       	ldd	r24, Z+2	; 0x02
    5cf6:	93 81       	ldd	r25, Z+3	; 0x03
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e2       	ldi	r20, 0x20	; 32
    5cfe:	51 e4       	ldi	r21, 0x41	; 65
    5d00:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5d04:	dc 01       	movw	r26, r24
    5d06:	cb 01       	movw	r24, r22
    5d08:	8e 01       	movw	r16, r28
    5d0a:	0f 51       	subi	r16, 0x1F	; 31
    5d0c:	1e 4f       	sbci	r17, 0xFE	; 254
    5d0e:	bc 01       	movw	r22, r24
    5d10:	cd 01       	movw	r24, r26
    5d12:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	f8 01       	movw	r30, r16
    5d1c:	91 83       	std	Z+1, r25	; 0x01
    5d1e:	80 83       	st	Z, r24
    5d20:	27 c0       	rjmp	.+78     	; 0x5d70 <__stack+0x3b71>
    5d22:	ce 01       	movw	r24, r28
    5d24:	8d 51       	subi	r24, 0x1D	; 29
    5d26:	9e 4f       	sbci	r25, 0xFE	; 254
    5d28:	20 e7       	ldi	r18, 0x70	; 112
    5d2a:	31 e0       	ldi	r19, 0x01	; 1
    5d2c:	fc 01       	movw	r30, r24
    5d2e:	31 83       	std	Z+1, r19	; 0x01
    5d30:	20 83       	st	Z, r18
    5d32:	ce 01       	movw	r24, r28
    5d34:	8d 51       	subi	r24, 0x1D	; 29
    5d36:	9e 4f       	sbci	r25, 0xFE	; 254
    5d38:	fc 01       	movw	r30, r24
    5d3a:	80 81       	ld	r24, Z
    5d3c:	91 81       	ldd	r25, Z+1	; 0x01
    5d3e:	8c 01       	movw	r16, r24
    5d40:	c8 01       	movw	r24, r16
    5d42:	01 97       	sbiw	r24, 0x01	; 1
    5d44:	f1 f7       	brne	.-4      	; 0x5d42 <__stack+0x3b43>
    5d46:	8c 01       	movw	r16, r24
    5d48:	ce 01       	movw	r24, r28
    5d4a:	8d 51       	subi	r24, 0x1D	; 29
    5d4c:	9e 4f       	sbci	r25, 0xFE	; 254
    5d4e:	fc 01       	movw	r30, r24
    5d50:	11 83       	std	Z+1, r17	; 0x01
    5d52:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d54:	ce 01       	movw	r24, r28
    5d56:	8f 51       	subi	r24, 0x1F	; 31
    5d58:	9e 4f       	sbci	r25, 0xFE	; 254
    5d5a:	9e 01       	movw	r18, r28
    5d5c:	2f 51       	subi	r18, 0x1F	; 31
    5d5e:	3e 4f       	sbci	r19, 0xFE	; 254
    5d60:	f9 01       	movw	r30, r18
    5d62:	20 81       	ld	r18, Z
    5d64:	31 81       	ldd	r19, Z+1	; 0x01
    5d66:	21 50       	subi	r18, 0x01	; 1
    5d68:	30 40       	sbci	r19, 0x00	; 0
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	31 83       	std	Z+1, r19	; 0x01
    5d6e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d70:	ce 01       	movw	r24, r28
    5d72:	8f 51       	subi	r24, 0x1F	; 31
    5d74:	9e 4f       	sbci	r25, 0xFE	; 254
    5d76:	fc 01       	movw	r30, r24
    5d78:	80 81       	ld	r24, Z
    5d7a:	91 81       	ldd	r25, Z+1	; 0x01
    5d7c:	00 97       	sbiw	r24, 0x00	; 0
    5d7e:	89 f6       	brne	.-94     	; 0x5d22 <__stack+0x3b23>
    5d80:	2f c0       	rjmp	.+94     	; 0x5de0 <__stack+0x3be1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d82:	8e 01       	movw	r16, r28
    5d84:	0f 51       	subi	r16, 0x1F	; 31
    5d86:	1e 4f       	sbci	r17, 0xFE	; 254
    5d88:	ce 01       	movw	r24, r28
    5d8a:	83 52       	subi	r24, 0x23	; 35
    5d8c:	9e 4f       	sbci	r25, 0xFE	; 254
    5d8e:	fc 01       	movw	r30, r24
    5d90:	60 81       	ld	r22, Z
    5d92:	71 81       	ldd	r23, Z+1	; 0x01
    5d94:	82 81       	ldd	r24, Z+2	; 0x02
    5d96:	93 81       	ldd	r25, Z+3	; 0x03
    5d98:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5d9c:	dc 01       	movw	r26, r24
    5d9e:	cb 01       	movw	r24, r22
    5da0:	f8 01       	movw	r30, r16
    5da2:	91 83       	std	Z+1, r25	; 0x01
    5da4:	80 83       	st	Z, r24
    5da6:	ce 01       	movw	r24, r28
    5da8:	8b 51       	subi	r24, 0x1B	; 27
    5daa:	9e 4f       	sbci	r25, 0xFE	; 254
    5dac:	9e 01       	movw	r18, r28
    5dae:	2f 51       	subi	r18, 0x1F	; 31
    5db0:	3e 4f       	sbci	r19, 0xFE	; 254
    5db2:	f9 01       	movw	r30, r18
    5db4:	20 81       	ld	r18, Z
    5db6:	31 81       	ldd	r19, Z+1	; 0x01
    5db8:	fc 01       	movw	r30, r24
    5dba:	31 83       	std	Z+1, r19	; 0x01
    5dbc:	20 83       	st	Z, r18
    5dbe:	ce 01       	movw	r24, r28
    5dc0:	8b 51       	subi	r24, 0x1B	; 27
    5dc2:	9e 4f       	sbci	r25, 0xFE	; 254
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	80 81       	ld	r24, Z
    5dc8:	91 81       	ldd	r25, Z+1	; 0x01
    5dca:	8c 01       	movw	r16, r24
    5dcc:	c8 01       	movw	r24, r16
    5dce:	01 97       	sbiw	r24, 0x01	; 1
    5dd0:	f1 f7       	brne	.-4      	; 0x5dce <__stack+0x3bcf>
    5dd2:	8c 01       	movw	r16, r24
    5dd4:	ce 01       	movw	r24, r28
    5dd6:	8b 51       	subi	r24, 0x1B	; 27
    5dd8:	9e 4f       	sbci	r25, 0xFE	; 254
    5dda:	fc 01       	movw	r30, r24
    5ddc:	11 83       	std	Z+1, r17	; 0x01
    5dde:	00 83       	st	Z, r16
				_delay_ms(100);
				coor[0]=0;
    5de0:	10 92 8a 04 	sts	0x048A, r1
    5de4:	10 92 89 04 	sts	0x0489, r1
				coor[1]=0;
    5de8:	10 92 8c 04 	sts	0x048C, r1
    5dec:	10 92 8b 04 	sts	0x048B, r1
				linefollwer();
    5df0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
				compass=4;
    5df4:	84 e0       	ldi	r24, 0x04	; 4
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	9c 83       	std	Y+4, r25	; 0x04
    5dfa:	8b 83       	std	Y+3, r24	; 0x03
    5dfc:	e6 c0       	rjmp	.+460    	; 0x5fca <__stack+0x3dcb>
				
			}
			else
			{
				if(compass==5)
    5dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    5e00:	9c 81       	ldd	r25, Y+4	; 0x04
    5e02:	85 30       	cpi	r24, 0x05	; 5
    5e04:	91 05       	cpc	r25, r1
    5e06:	09 f0       	breq	.+2      	; 0x5e0a <__stack+0x3c0b>
    5e08:	e0 c0       	rjmp	.+448    	; 0x5fca <__stack+0x3dcb>
    5e0a:	9e 01       	movw	r18, r28
    5e0c:	29 51       	subi	r18, 0x19	; 25
    5e0e:	3e 4f       	sbci	r19, 0xFE	; 254
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	a8 ec       	ldi	r26, 0xC8	; 200
    5e16:	b2 e4       	ldi	r27, 0x42	; 66
    5e18:	f9 01       	movw	r30, r18
    5e1a:	80 83       	st	Z, r24
    5e1c:	91 83       	std	Z+1, r25	; 0x01
    5e1e:	a2 83       	std	Z+2, r26	; 0x02
    5e20:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e22:	8e 01       	movw	r16, r28
    5e24:	05 51       	subi	r16, 0x15	; 21
    5e26:	1e 4f       	sbci	r17, 0xFE	; 254
    5e28:	ce 01       	movw	r24, r28
    5e2a:	89 51       	subi	r24, 0x19	; 25
    5e2c:	9e 4f       	sbci	r25, 0xFE	; 254
    5e2e:	fc 01       	movw	r30, r24
    5e30:	60 81       	ld	r22, Z
    5e32:	71 81       	ldd	r23, Z+1	; 0x01
    5e34:	82 81       	ldd	r24, Z+2	; 0x02
    5e36:	93 81       	ldd	r25, Z+3	; 0x03
    5e38:	26 e6       	ldi	r18, 0x66	; 102
    5e3a:	36 e6       	ldi	r19, 0x66	; 102
    5e3c:	46 e6       	ldi	r20, 0x66	; 102
    5e3e:	55 e4       	ldi	r21, 0x45	; 69
    5e40:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	f8 01       	movw	r30, r16
    5e4a:	80 83       	st	Z, r24
    5e4c:	91 83       	std	Z+1, r25	; 0x01
    5e4e:	a2 83       	std	Z+2, r26	; 0x02
    5e50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e52:	ce 01       	movw	r24, r28
    5e54:	85 51       	subi	r24, 0x15	; 21
    5e56:	9e 4f       	sbci	r25, 0xFE	; 254
    5e58:	11 e0       	ldi	r17, 0x01	; 1
    5e5a:	fc 01       	movw	r30, r24
    5e5c:	60 81       	ld	r22, Z
    5e5e:	71 81       	ldd	r23, Z+1	; 0x01
    5e60:	82 81       	ldd	r24, Z+2	; 0x02
    5e62:	93 81       	ldd	r25, Z+3	; 0x03
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	40 e8       	ldi	r20, 0x80	; 128
    5e6a:	5f e3       	ldi	r21, 0x3F	; 63
    5e6c:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    5e70:	88 23       	and	r24, r24
    5e72:	0c f0       	brlt	.+2      	; 0x5e76 <__stack+0x3c77>
    5e74:	10 e0       	ldi	r17, 0x00	; 0
    5e76:	11 23       	and	r17, r17
    5e78:	49 f0       	breq	.+18     	; 0x5e8c <__stack+0x3c8d>
		__ticks = 1;
    5e7a:	ce 01       	movw	r24, r28
    5e7c:	81 51       	subi	r24, 0x11	; 17
    5e7e:	9e 4f       	sbci	r25, 0xFE	; 254
    5e80:	21 e0       	ldi	r18, 0x01	; 1
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	fc 01       	movw	r30, r24
    5e86:	31 83       	std	Z+1, r19	; 0x01
    5e88:	20 83       	st	Z, r18
    5e8a:	74 c0       	rjmp	.+232    	; 0x5f74 <__stack+0x3d75>
	else if (__tmp > 65535)
    5e8c:	ce 01       	movw	r24, r28
    5e8e:	85 51       	subi	r24, 0x15	; 21
    5e90:	9e 4f       	sbci	r25, 0xFE	; 254
    5e92:	11 e0       	ldi	r17, 0x01	; 1
    5e94:	fc 01       	movw	r30, r24
    5e96:	60 81       	ld	r22, Z
    5e98:	71 81       	ldd	r23, Z+1	; 0x01
    5e9a:	82 81       	ldd	r24, Z+2	; 0x02
    5e9c:	93 81       	ldd	r25, Z+3	; 0x03
    5e9e:	20 e0       	ldi	r18, 0x00	; 0
    5ea0:	3f ef       	ldi	r19, 0xFF	; 255
    5ea2:	4f e7       	ldi	r20, 0x7F	; 127
    5ea4:	57 e4       	ldi	r21, 0x47	; 71
    5ea6:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    5eaa:	18 16       	cp	r1, r24
    5eac:	0c f0       	brlt	.+2      	; 0x5eb0 <__stack+0x3cb1>
    5eae:	10 e0       	ldi	r17, 0x00	; 0
    5eb0:	11 23       	and	r17, r17
    5eb2:	09 f4       	brne	.+2      	; 0x5eb6 <__stack+0x3cb7>
    5eb4:	4d c0       	rjmp	.+154    	; 0x5f50 <__stack+0x3d51>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eb6:	ce 01       	movw	r24, r28
    5eb8:	89 51       	subi	r24, 0x19	; 25
    5eba:	9e 4f       	sbci	r25, 0xFE	; 254
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	60 81       	ld	r22, Z
    5ec0:	71 81       	ldd	r23, Z+1	; 0x01
    5ec2:	82 81       	ldd	r24, Z+2	; 0x02
    5ec4:	93 81       	ldd	r25, Z+3	; 0x03
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	40 e2       	ldi	r20, 0x20	; 32
    5ecc:	51 e4       	ldi	r21, 0x41	; 65
    5ece:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	8e 01       	movw	r16, r28
    5ed8:	01 51       	subi	r16, 0x11	; 17
    5eda:	1e 4f       	sbci	r17, 0xFE	; 254
    5edc:	bc 01       	movw	r22, r24
    5ede:	cd 01       	movw	r24, r26
    5ee0:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	cb 01       	movw	r24, r22
    5ee8:	f8 01       	movw	r30, r16
    5eea:	91 83       	std	Z+1, r25	; 0x01
    5eec:	80 83       	st	Z, r24
    5eee:	27 c0       	rjmp	.+78     	; 0x5f3e <__stack+0x3d3f>
    5ef0:	ce 01       	movw	r24, r28
    5ef2:	8f 50       	subi	r24, 0x0F	; 15
    5ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    5ef6:	20 e7       	ldi	r18, 0x70	; 112
    5ef8:	31 e0       	ldi	r19, 0x01	; 1
    5efa:	fc 01       	movw	r30, r24
    5efc:	31 83       	std	Z+1, r19	; 0x01
    5efe:	20 83       	st	Z, r18
    5f00:	ce 01       	movw	r24, r28
    5f02:	8f 50       	subi	r24, 0x0F	; 15
    5f04:	9e 4f       	sbci	r25, 0xFE	; 254
    5f06:	fc 01       	movw	r30, r24
    5f08:	80 81       	ld	r24, Z
    5f0a:	91 81       	ldd	r25, Z+1	; 0x01
    5f0c:	8c 01       	movw	r16, r24
    5f0e:	c8 01       	movw	r24, r16
    5f10:	01 97       	sbiw	r24, 0x01	; 1
    5f12:	f1 f7       	brne	.-4      	; 0x5f10 <__stack+0x3d11>
    5f14:	8c 01       	movw	r16, r24
    5f16:	ce 01       	movw	r24, r28
    5f18:	8f 50       	subi	r24, 0x0F	; 15
    5f1a:	9e 4f       	sbci	r25, 0xFE	; 254
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	11 83       	std	Z+1, r17	; 0x01
    5f20:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f22:	ce 01       	movw	r24, r28
    5f24:	81 51       	subi	r24, 0x11	; 17
    5f26:	9e 4f       	sbci	r25, 0xFE	; 254
    5f28:	9e 01       	movw	r18, r28
    5f2a:	21 51       	subi	r18, 0x11	; 17
    5f2c:	3e 4f       	sbci	r19, 0xFE	; 254
    5f2e:	f9 01       	movw	r30, r18
    5f30:	20 81       	ld	r18, Z
    5f32:	31 81       	ldd	r19, Z+1	; 0x01
    5f34:	21 50       	subi	r18, 0x01	; 1
    5f36:	30 40       	sbci	r19, 0x00	; 0
    5f38:	fc 01       	movw	r30, r24
    5f3a:	31 83       	std	Z+1, r19	; 0x01
    5f3c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f3e:	ce 01       	movw	r24, r28
    5f40:	81 51       	subi	r24, 0x11	; 17
    5f42:	9e 4f       	sbci	r25, 0xFE	; 254
    5f44:	fc 01       	movw	r30, r24
    5f46:	80 81       	ld	r24, Z
    5f48:	91 81       	ldd	r25, Z+1	; 0x01
    5f4a:	00 97       	sbiw	r24, 0x00	; 0
    5f4c:	89 f6       	brne	.-94     	; 0x5ef0 <__stack+0x3cf1>
    5f4e:	2f c0       	rjmp	.+94     	; 0x5fae <__stack+0x3daf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f50:	8e 01       	movw	r16, r28
    5f52:	01 51       	subi	r16, 0x11	; 17
    5f54:	1e 4f       	sbci	r17, 0xFE	; 254
    5f56:	ce 01       	movw	r24, r28
    5f58:	85 51       	subi	r24, 0x15	; 21
    5f5a:	9e 4f       	sbci	r25, 0xFE	; 254
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	60 81       	ld	r22, Z
    5f60:	71 81       	ldd	r23, Z+1	; 0x01
    5f62:	82 81       	ldd	r24, Z+2	; 0x02
    5f64:	93 81       	ldd	r25, Z+3	; 0x03
    5f66:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	cb 01       	movw	r24, r22
    5f6e:	f8 01       	movw	r30, r16
    5f70:	91 83       	std	Z+1, r25	; 0x01
    5f72:	80 83       	st	Z, r24
    5f74:	ce 01       	movw	r24, r28
    5f76:	8d 50       	subi	r24, 0x0D	; 13
    5f78:	9e 4f       	sbci	r25, 0xFE	; 254
    5f7a:	9e 01       	movw	r18, r28
    5f7c:	21 51       	subi	r18, 0x11	; 17
    5f7e:	3e 4f       	sbci	r19, 0xFE	; 254
    5f80:	f9 01       	movw	r30, r18
    5f82:	20 81       	ld	r18, Z
    5f84:	31 81       	ldd	r19, Z+1	; 0x01
    5f86:	fc 01       	movw	r30, r24
    5f88:	31 83       	std	Z+1, r19	; 0x01
    5f8a:	20 83       	st	Z, r18
    5f8c:	ce 01       	movw	r24, r28
    5f8e:	8d 50       	subi	r24, 0x0D	; 13
    5f90:	9e 4f       	sbci	r25, 0xFE	; 254
    5f92:	fc 01       	movw	r30, r24
    5f94:	80 81       	ld	r24, Z
    5f96:	91 81       	ldd	r25, Z+1	; 0x01
    5f98:	8c 01       	movw	r16, r24
    5f9a:	c8 01       	movw	r24, r16
    5f9c:	01 97       	sbiw	r24, 0x01	; 1
    5f9e:	f1 f7       	brne	.-4      	; 0x5f9c <__stack+0x3d9d>
    5fa0:	8c 01       	movw	r16, r24
    5fa2:	ce 01       	movw	r24, r28
    5fa4:	8d 50       	subi	r24, 0x0D	; 13
    5fa6:	9e 4f       	sbci	r25, 0xFE	; 254
    5fa8:	fc 01       	movw	r30, r24
    5faa:	11 83       	std	Z+1, r17	; 0x01
    5fac:	00 83       	st	Z, r16
				{
					_delay_ms(100);
					coor[0]=0;
    5fae:	10 92 8a 04 	sts	0x048A, r1
    5fb2:	10 92 89 04 	sts	0x0489, r1
					coor[1]=0;
    5fb6:	10 92 8c 04 	sts	0x048C, r1
    5fba:	10 92 8b 04 	sts	0x048B, r1
					linefollwer();
    5fbe:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					compass=4;
    5fc2:	84 e0       	ldi	r24, 0x04	; 4
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	9c 83       	std	Y+4, r25	; 0x04
    5fc8:	8b 83       	std	Y+3, r24	; 0x03
					
				}
			}
		}
		flag1=flag1+1;
    5fca:	89 81       	ldd	r24, Y+1	; 0x01
    5fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5fce:	01 96       	adiw	r24, 0x01	; 1
    5fd0:	9a 83       	std	Y+2, r25	; 0x02
    5fd2:	89 83       	std	Y+1, r24	; 0x01
		
		recur=recur+1;
    5fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    5fd6:	98 85       	ldd	r25, Y+8	; 0x08
    5fd8:	01 96       	adiw	r24, 0x01	; 1
    5fda:	98 87       	std	Y+8, r25	; 0x08
    5fdc:	8f 83       	std	Y+7, r24	; 0x07
		boxnumber=D2[recur1][0];
    5fde:	9e 01       	movw	r18, r28
    5fe0:	2b 57       	subi	r18, 0x7B	; 123
    5fe2:	3b 4f       	sbci	r19, 0xFB	; 251
    5fe4:	89 85       	ldd	r24, Y+9	; 0x09
    5fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fe8:	88 0f       	add	r24, r24
    5fea:	99 1f       	adc	r25, r25
    5fec:	88 0f       	add	r24, r24
    5fee:	99 1f       	adc	r25, r25
    5ff0:	82 0f       	add	r24, r18
    5ff2:	93 1f       	adc	r25, r19
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	80 81       	ld	r24, Z
    5ff8:	91 81       	ldd	r25, Z+1	; 0x01
    5ffa:	9e 83       	std	Y+6, r25	; 0x06
    5ffc:	8d 83       	std	Y+5, r24	; 0x05
		recur1=recur1+1;
    5ffe:	89 85       	ldd	r24, Y+9	; 0x09
    6000:	9a 85       	ldd	r25, Y+10	; 0x0a
    6002:	01 96       	adiw	r24, 0x01	; 1
    6004:	9a 87       	std	Y+10, r25	; 0x0a
    6006:	89 87       	std	Y+9, r24	; 0x09
		goto point1;
    6008:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <main+0x14a>
	}
	else
	{
		if(coor[0]==0 && coor[1]==0 && flag1%2==0)
    600c:	80 91 89 04 	lds	r24, 0x0489
    6010:	90 91 8a 04 	lds	r25, 0x048A
    6014:	00 97       	sbiw	r24, 0x00	; 0
    6016:	09 f0       	breq	.+2      	; 0x601a <__stack+0x3e1b>
    6018:	fe c2       	rjmp	.+1532   	; 0x6616 <__stack+0x4417>
    601a:	80 91 8b 04 	lds	r24, 0x048B
    601e:	90 91 8c 04 	lds	r25, 0x048C
    6022:	00 97       	sbiw	r24, 0x00	; 0
    6024:	09 f0       	breq	.+2      	; 0x6028 <__stack+0x3e29>
    6026:	f7 c2       	rjmp	.+1518   	; 0x6616 <__stack+0x4417>
    6028:	89 81       	ldd	r24, Y+1	; 0x01
    602a:	9a 81       	ldd	r25, Y+2	; 0x02
    602c:	81 70       	andi	r24, 0x01	; 1
    602e:	90 70       	andi	r25, 0x00	; 0
    6030:	00 97       	sbiw	r24, 0x00	; 0
    6032:	09 f0       	breq	.+2      	; 0x6036 <__stack+0x3e37>
    6034:	f0 c2       	rjmp	.+1504   	; 0x6616 <__stack+0x4417>
		{
			if(compass==6)
    6036:	8b 81       	ldd	r24, Y+3	; 0x03
    6038:	9c 81       	ldd	r25, Y+4	; 0x04
    603a:	86 30       	cpi	r24, 0x06	; 6
    603c:	91 05       	cpc	r25, r1
    603e:	09 f0       	breq	.+2      	; 0x6042 <__stack+0x3e43>
    6040:	e5 c0       	rjmp	.+458    	; 0x620c <__stack+0x400d>
			{
				right_degrees(85);
    6042:	85 e5       	ldi	r24, 0x55	; 85
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <right_degrees>
    604a:	9e 01       	movw	r18, r28
    604c:	2b 50       	subi	r18, 0x0B	; 11
    604e:	3e 4f       	sbci	r19, 0xFE	; 254
    6050:	80 e0       	ldi	r24, 0x00	; 0
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	a8 ec       	ldi	r26, 0xC8	; 200
    6056:	b2 e4       	ldi	r27, 0x42	; 66
    6058:	f9 01       	movw	r30, r18
    605a:	80 83       	st	Z, r24
    605c:	91 83       	std	Z+1, r25	; 0x01
    605e:	a2 83       	std	Z+2, r26	; 0x02
    6060:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6062:	8e 01       	movw	r16, r28
    6064:	07 50       	subi	r16, 0x07	; 7
    6066:	1e 4f       	sbci	r17, 0xFE	; 254
    6068:	ce 01       	movw	r24, r28
    606a:	8b 50       	subi	r24, 0x0B	; 11
    606c:	9e 4f       	sbci	r25, 0xFE	; 254
    606e:	fc 01       	movw	r30, r24
    6070:	60 81       	ld	r22, Z
    6072:	71 81       	ldd	r23, Z+1	; 0x01
    6074:	82 81       	ldd	r24, Z+2	; 0x02
    6076:	93 81       	ldd	r25, Z+3	; 0x03
    6078:	26 e6       	ldi	r18, 0x66	; 102
    607a:	36 e6       	ldi	r19, 0x66	; 102
    607c:	46 e6       	ldi	r20, 0x66	; 102
    607e:	55 e4       	ldi	r21, 0x45	; 69
    6080:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	f8 01       	movw	r30, r16
    608a:	80 83       	st	Z, r24
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	a2 83       	std	Z+2, r26	; 0x02
    6090:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6092:	ce 01       	movw	r24, r28
    6094:	87 50       	subi	r24, 0x07	; 7
    6096:	9e 4f       	sbci	r25, 0xFE	; 254
    6098:	11 e0       	ldi	r17, 0x01	; 1
    609a:	fc 01       	movw	r30, r24
    609c:	60 81       	ld	r22, Z
    609e:	71 81       	ldd	r23, Z+1	; 0x01
    60a0:	82 81       	ldd	r24, Z+2	; 0x02
    60a2:	93 81       	ldd	r25, Z+3	; 0x03
    60a4:	20 e0       	ldi	r18, 0x00	; 0
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	40 e8       	ldi	r20, 0x80	; 128
    60aa:	5f e3       	ldi	r21, 0x3F	; 63
    60ac:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    60b0:	88 23       	and	r24, r24
    60b2:	0c f0       	brlt	.+2      	; 0x60b6 <__stack+0x3eb7>
    60b4:	10 e0       	ldi	r17, 0x00	; 0
    60b6:	11 23       	and	r17, r17
    60b8:	49 f0       	breq	.+18     	; 0x60cc <__stack+0x3ecd>
		__ticks = 1;
    60ba:	ce 01       	movw	r24, r28
    60bc:	83 50       	subi	r24, 0x03	; 3
    60be:	9e 4f       	sbci	r25, 0xFE	; 254
    60c0:	21 e0       	ldi	r18, 0x01	; 1
    60c2:	30 e0       	ldi	r19, 0x00	; 0
    60c4:	fc 01       	movw	r30, r24
    60c6:	31 83       	std	Z+1, r19	; 0x01
    60c8:	20 83       	st	Z, r18
    60ca:	74 c0       	rjmp	.+232    	; 0x61b4 <__stack+0x3fb5>
	else if (__tmp > 65535)
    60cc:	ce 01       	movw	r24, r28
    60ce:	87 50       	subi	r24, 0x07	; 7
    60d0:	9e 4f       	sbci	r25, 0xFE	; 254
    60d2:	11 e0       	ldi	r17, 0x01	; 1
    60d4:	fc 01       	movw	r30, r24
    60d6:	60 81       	ld	r22, Z
    60d8:	71 81       	ldd	r23, Z+1	; 0x01
    60da:	82 81       	ldd	r24, Z+2	; 0x02
    60dc:	93 81       	ldd	r25, Z+3	; 0x03
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	3f ef       	ldi	r19, 0xFF	; 255
    60e2:	4f e7       	ldi	r20, 0x7F	; 127
    60e4:	57 e4       	ldi	r21, 0x47	; 71
    60e6:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    60ea:	18 16       	cp	r1, r24
    60ec:	0c f0       	brlt	.+2      	; 0x60f0 <__stack+0x3ef1>
    60ee:	10 e0       	ldi	r17, 0x00	; 0
    60f0:	11 23       	and	r17, r17
    60f2:	09 f4       	brne	.+2      	; 0x60f6 <__stack+0x3ef7>
    60f4:	4d c0       	rjmp	.+154    	; 0x6190 <__stack+0x3f91>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60f6:	ce 01       	movw	r24, r28
    60f8:	8b 50       	subi	r24, 0x0B	; 11
    60fa:	9e 4f       	sbci	r25, 0xFE	; 254
    60fc:	fc 01       	movw	r30, r24
    60fe:	60 81       	ld	r22, Z
    6100:	71 81       	ldd	r23, Z+1	; 0x01
    6102:	82 81       	ldd	r24, Z+2	; 0x02
    6104:	93 81       	ldd	r25, Z+3	; 0x03
    6106:	20 e0       	ldi	r18, 0x00	; 0
    6108:	30 e0       	ldi	r19, 0x00	; 0
    610a:	40 e2       	ldi	r20, 0x20	; 32
    610c:	51 e4       	ldi	r21, 0x41	; 65
    610e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	8e 01       	movw	r16, r28
    6118:	03 50       	subi	r16, 0x03	; 3
    611a:	1e 4f       	sbci	r17, 0xFE	; 254
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    6124:	dc 01       	movw	r26, r24
    6126:	cb 01       	movw	r24, r22
    6128:	f8 01       	movw	r30, r16
    612a:	91 83       	std	Z+1, r25	; 0x01
    612c:	80 83       	st	Z, r24
    612e:	27 c0       	rjmp	.+78     	; 0x617e <__stack+0x3f7f>
    6130:	ce 01       	movw	r24, r28
    6132:	81 50       	subi	r24, 0x01	; 1
    6134:	9e 4f       	sbci	r25, 0xFE	; 254
    6136:	20 e7       	ldi	r18, 0x70	; 112
    6138:	31 e0       	ldi	r19, 0x01	; 1
    613a:	fc 01       	movw	r30, r24
    613c:	31 83       	std	Z+1, r19	; 0x01
    613e:	20 83       	st	Z, r18
    6140:	ce 01       	movw	r24, r28
    6142:	81 50       	subi	r24, 0x01	; 1
    6144:	9e 4f       	sbci	r25, 0xFE	; 254
    6146:	fc 01       	movw	r30, r24
    6148:	80 81       	ld	r24, Z
    614a:	91 81       	ldd	r25, Z+1	; 0x01
    614c:	8c 01       	movw	r16, r24
    614e:	c8 01       	movw	r24, r16
    6150:	01 97       	sbiw	r24, 0x01	; 1
    6152:	f1 f7       	brne	.-4      	; 0x6150 <__stack+0x3f51>
    6154:	8c 01       	movw	r16, r24
    6156:	ce 01       	movw	r24, r28
    6158:	81 50       	subi	r24, 0x01	; 1
    615a:	9e 4f       	sbci	r25, 0xFE	; 254
    615c:	fc 01       	movw	r30, r24
    615e:	11 83       	std	Z+1, r17	; 0x01
    6160:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6162:	ce 01       	movw	r24, r28
    6164:	83 50       	subi	r24, 0x03	; 3
    6166:	9e 4f       	sbci	r25, 0xFE	; 254
    6168:	9e 01       	movw	r18, r28
    616a:	23 50       	subi	r18, 0x03	; 3
    616c:	3e 4f       	sbci	r19, 0xFE	; 254
    616e:	f9 01       	movw	r30, r18
    6170:	20 81       	ld	r18, Z
    6172:	31 81       	ldd	r19, Z+1	; 0x01
    6174:	21 50       	subi	r18, 0x01	; 1
    6176:	30 40       	sbci	r19, 0x00	; 0
    6178:	fc 01       	movw	r30, r24
    617a:	31 83       	std	Z+1, r19	; 0x01
    617c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    617e:	ce 01       	movw	r24, r28
    6180:	83 50       	subi	r24, 0x03	; 3
    6182:	9e 4f       	sbci	r25, 0xFE	; 254
    6184:	fc 01       	movw	r30, r24
    6186:	80 81       	ld	r24, Z
    6188:	91 81       	ldd	r25, Z+1	; 0x01
    618a:	00 97       	sbiw	r24, 0x00	; 0
    618c:	89 f6       	brne	.-94     	; 0x6130 <__stack+0x3f31>
    618e:	2f c0       	rjmp	.+94     	; 0x61ee <__stack+0x3fef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6190:	8e 01       	movw	r16, r28
    6192:	03 50       	subi	r16, 0x03	; 3
    6194:	1e 4f       	sbci	r17, 0xFE	; 254
    6196:	ce 01       	movw	r24, r28
    6198:	87 50       	subi	r24, 0x07	; 7
    619a:	9e 4f       	sbci	r25, 0xFE	; 254
    619c:	fc 01       	movw	r30, r24
    619e:	60 81       	ld	r22, Z
    61a0:	71 81       	ldd	r23, Z+1	; 0x01
    61a2:	82 81       	ldd	r24, Z+2	; 0x02
    61a4:	93 81       	ldd	r25, Z+3	; 0x03
    61a6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	f8 01       	movw	r30, r16
    61b0:	91 83       	std	Z+1, r25	; 0x01
    61b2:	80 83       	st	Z, r24
    61b4:	ce 01       	movw	r24, r28
    61b6:	8f 5f       	subi	r24, 0xFF	; 255
    61b8:	9d 4f       	sbci	r25, 0xFD	; 253
    61ba:	9e 01       	movw	r18, r28
    61bc:	23 50       	subi	r18, 0x03	; 3
    61be:	3e 4f       	sbci	r19, 0xFE	; 254
    61c0:	f9 01       	movw	r30, r18
    61c2:	20 81       	ld	r18, Z
    61c4:	31 81       	ldd	r19, Z+1	; 0x01
    61c6:	fc 01       	movw	r30, r24
    61c8:	31 83       	std	Z+1, r19	; 0x01
    61ca:	20 83       	st	Z, r18
    61cc:	ce 01       	movw	r24, r28
    61ce:	8f 5f       	subi	r24, 0xFF	; 255
    61d0:	9d 4f       	sbci	r25, 0xFD	; 253
    61d2:	fc 01       	movw	r30, r24
    61d4:	80 81       	ld	r24, Z
    61d6:	91 81       	ldd	r25, Z+1	; 0x01
    61d8:	8c 01       	movw	r16, r24
    61da:	c8 01       	movw	r24, r16
    61dc:	01 97       	sbiw	r24, 0x01	; 1
    61de:	f1 f7       	brne	.-4      	; 0x61dc <__stack+0x3fdd>
    61e0:	8c 01       	movw	r16, r24
    61e2:	ce 01       	movw	r24, r28
    61e4:	8f 5f       	subi	r24, 0xFF	; 255
    61e6:	9d 4f       	sbci	r25, 0xFD	; 253
    61e8:	fc 01       	movw	r30, r24
    61ea:	11 83       	std	Z+1, r17	; 0x01
    61ec:	00 83       	st	Z, r16
				_delay_ms(100);
				coor[0]=0;
    61ee:	10 92 8a 04 	sts	0x048A, r1
    61f2:	10 92 89 04 	sts	0x0489, r1
				coor[1]=0;
    61f6:	10 92 8c 04 	sts	0x048C, r1
    61fa:	10 92 8b 04 	sts	0x048B, r1
				linefollwer();
    61fe:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
				compass=4;
    6202:	84 e0       	ldi	r24, 0x04	; 4
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	9c 83       	std	Y+4, r25	; 0x04
    6208:	8b 83       	std	Y+3, r24	; 0x03
    620a:	da c1       	rjmp	.+948    	; 0x65c0 <__stack+0x43c1>
			}
			else
			{
				if(compass==7)
    620c:	8b 81       	ldd	r24, Y+3	; 0x03
    620e:	9c 81       	ldd	r25, Y+4	; 0x04
    6210:	87 30       	cpi	r24, 0x07	; 7
    6212:	91 05       	cpc	r25, r1
    6214:	09 f0       	breq	.+2      	; 0x6218 <__stack+0x4019>
    6216:	e5 c0       	rjmp	.+458    	; 0x63e2 <__stack+0x41e3>
				{
					left_degrees(85);
    6218:	85 e5       	ldi	r24, 0x55	; 85
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <left_degrees>
    6220:	9e 01       	movw	r18, r28
    6222:	2d 5f       	subi	r18, 0xFD	; 253
    6224:	3d 4f       	sbci	r19, 0xFD	; 253
    6226:	80 e0       	ldi	r24, 0x00	; 0
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	a8 ec       	ldi	r26, 0xC8	; 200
    622c:	b2 e4       	ldi	r27, 0x42	; 66
    622e:	f9 01       	movw	r30, r18
    6230:	80 83       	st	Z, r24
    6232:	91 83       	std	Z+1, r25	; 0x01
    6234:	a2 83       	std	Z+2, r26	; 0x02
    6236:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6238:	8e 01       	movw	r16, r28
    623a:	09 5f       	subi	r16, 0xF9	; 249
    623c:	1d 4f       	sbci	r17, 0xFD	; 253
    623e:	ce 01       	movw	r24, r28
    6240:	8d 5f       	subi	r24, 0xFD	; 253
    6242:	9d 4f       	sbci	r25, 0xFD	; 253
    6244:	fc 01       	movw	r30, r24
    6246:	60 81       	ld	r22, Z
    6248:	71 81       	ldd	r23, Z+1	; 0x01
    624a:	82 81       	ldd	r24, Z+2	; 0x02
    624c:	93 81       	ldd	r25, Z+3	; 0x03
    624e:	26 e6       	ldi	r18, 0x66	; 102
    6250:	36 e6       	ldi	r19, 0x66	; 102
    6252:	46 e6       	ldi	r20, 0x66	; 102
    6254:	55 e4       	ldi	r21, 0x45	; 69
    6256:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	f8 01       	movw	r30, r16
    6260:	80 83       	st	Z, r24
    6262:	91 83       	std	Z+1, r25	; 0x01
    6264:	a2 83       	std	Z+2, r26	; 0x02
    6266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6268:	ce 01       	movw	r24, r28
    626a:	89 5f       	subi	r24, 0xF9	; 249
    626c:	9d 4f       	sbci	r25, 0xFD	; 253
    626e:	11 e0       	ldi	r17, 0x01	; 1
    6270:	fc 01       	movw	r30, r24
    6272:	60 81       	ld	r22, Z
    6274:	71 81       	ldd	r23, Z+1	; 0x01
    6276:	82 81       	ldd	r24, Z+2	; 0x02
    6278:	93 81       	ldd	r25, Z+3	; 0x03
    627a:	20 e0       	ldi	r18, 0x00	; 0
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	40 e8       	ldi	r20, 0x80	; 128
    6280:	5f e3       	ldi	r21, 0x3F	; 63
    6282:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    6286:	88 23       	and	r24, r24
    6288:	0c f0       	brlt	.+2      	; 0x628c <__stack+0x408d>
    628a:	10 e0       	ldi	r17, 0x00	; 0
    628c:	11 23       	and	r17, r17
    628e:	49 f0       	breq	.+18     	; 0x62a2 <__stack+0x40a3>
		__ticks = 1;
    6290:	ce 01       	movw	r24, r28
    6292:	85 5f       	subi	r24, 0xF5	; 245
    6294:	9d 4f       	sbci	r25, 0xFD	; 253
    6296:	21 e0       	ldi	r18, 0x01	; 1
    6298:	30 e0       	ldi	r19, 0x00	; 0
    629a:	fc 01       	movw	r30, r24
    629c:	31 83       	std	Z+1, r19	; 0x01
    629e:	20 83       	st	Z, r18
    62a0:	74 c0       	rjmp	.+232    	; 0x638a <__stack+0x418b>
	else if (__tmp > 65535)
    62a2:	ce 01       	movw	r24, r28
    62a4:	89 5f       	subi	r24, 0xF9	; 249
    62a6:	9d 4f       	sbci	r25, 0xFD	; 253
    62a8:	11 e0       	ldi	r17, 0x01	; 1
    62aa:	fc 01       	movw	r30, r24
    62ac:	60 81       	ld	r22, Z
    62ae:	71 81       	ldd	r23, Z+1	; 0x01
    62b0:	82 81       	ldd	r24, Z+2	; 0x02
    62b2:	93 81       	ldd	r25, Z+3	; 0x03
    62b4:	20 e0       	ldi	r18, 0x00	; 0
    62b6:	3f ef       	ldi	r19, 0xFF	; 255
    62b8:	4f e7       	ldi	r20, 0x7F	; 127
    62ba:	57 e4       	ldi	r21, 0x47	; 71
    62bc:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    62c0:	18 16       	cp	r1, r24
    62c2:	0c f0       	brlt	.+2      	; 0x62c6 <__stack+0x40c7>
    62c4:	10 e0       	ldi	r17, 0x00	; 0
    62c6:	11 23       	and	r17, r17
    62c8:	09 f4       	brne	.+2      	; 0x62cc <__stack+0x40cd>
    62ca:	4d c0       	rjmp	.+154    	; 0x6366 <__stack+0x4167>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62cc:	ce 01       	movw	r24, r28
    62ce:	8d 5f       	subi	r24, 0xFD	; 253
    62d0:	9d 4f       	sbci	r25, 0xFD	; 253
    62d2:	fc 01       	movw	r30, r24
    62d4:	60 81       	ld	r22, Z
    62d6:	71 81       	ldd	r23, Z+1	; 0x01
    62d8:	82 81       	ldd	r24, Z+2	; 0x02
    62da:	93 81       	ldd	r25, Z+3	; 0x03
    62dc:	20 e0       	ldi	r18, 0x00	; 0
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	40 e2       	ldi	r20, 0x20	; 32
    62e2:	51 e4       	ldi	r21, 0x41	; 65
    62e4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    62e8:	dc 01       	movw	r26, r24
    62ea:	cb 01       	movw	r24, r22
    62ec:	8e 01       	movw	r16, r28
    62ee:	05 5f       	subi	r16, 0xF5	; 245
    62f0:	1d 4f       	sbci	r17, 0xFD	; 253
    62f2:	bc 01       	movw	r22, r24
    62f4:	cd 01       	movw	r24, r26
    62f6:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    62fa:	dc 01       	movw	r26, r24
    62fc:	cb 01       	movw	r24, r22
    62fe:	f8 01       	movw	r30, r16
    6300:	91 83       	std	Z+1, r25	; 0x01
    6302:	80 83       	st	Z, r24
    6304:	27 c0       	rjmp	.+78     	; 0x6354 <__stack+0x4155>
    6306:	ce 01       	movw	r24, r28
    6308:	83 5f       	subi	r24, 0xF3	; 243
    630a:	9d 4f       	sbci	r25, 0xFD	; 253
    630c:	20 e7       	ldi	r18, 0x70	; 112
    630e:	31 e0       	ldi	r19, 0x01	; 1
    6310:	fc 01       	movw	r30, r24
    6312:	31 83       	std	Z+1, r19	; 0x01
    6314:	20 83       	st	Z, r18
    6316:	ce 01       	movw	r24, r28
    6318:	83 5f       	subi	r24, 0xF3	; 243
    631a:	9d 4f       	sbci	r25, 0xFD	; 253
    631c:	fc 01       	movw	r30, r24
    631e:	80 81       	ld	r24, Z
    6320:	91 81       	ldd	r25, Z+1	; 0x01
    6322:	8c 01       	movw	r16, r24
    6324:	c8 01       	movw	r24, r16
    6326:	01 97       	sbiw	r24, 0x01	; 1
    6328:	f1 f7       	brne	.-4      	; 0x6326 <__stack+0x4127>
    632a:	8c 01       	movw	r16, r24
    632c:	ce 01       	movw	r24, r28
    632e:	83 5f       	subi	r24, 0xF3	; 243
    6330:	9d 4f       	sbci	r25, 0xFD	; 253
    6332:	fc 01       	movw	r30, r24
    6334:	11 83       	std	Z+1, r17	; 0x01
    6336:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6338:	ce 01       	movw	r24, r28
    633a:	85 5f       	subi	r24, 0xF5	; 245
    633c:	9d 4f       	sbci	r25, 0xFD	; 253
    633e:	9e 01       	movw	r18, r28
    6340:	25 5f       	subi	r18, 0xF5	; 245
    6342:	3d 4f       	sbci	r19, 0xFD	; 253
    6344:	f9 01       	movw	r30, r18
    6346:	20 81       	ld	r18, Z
    6348:	31 81       	ldd	r19, Z+1	; 0x01
    634a:	21 50       	subi	r18, 0x01	; 1
    634c:	30 40       	sbci	r19, 0x00	; 0
    634e:	fc 01       	movw	r30, r24
    6350:	31 83       	std	Z+1, r19	; 0x01
    6352:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6354:	ce 01       	movw	r24, r28
    6356:	85 5f       	subi	r24, 0xF5	; 245
    6358:	9d 4f       	sbci	r25, 0xFD	; 253
    635a:	fc 01       	movw	r30, r24
    635c:	80 81       	ld	r24, Z
    635e:	91 81       	ldd	r25, Z+1	; 0x01
    6360:	00 97       	sbiw	r24, 0x00	; 0
    6362:	89 f6       	brne	.-94     	; 0x6306 <__stack+0x4107>
    6364:	2f c0       	rjmp	.+94     	; 0x63c4 <__stack+0x41c5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6366:	8e 01       	movw	r16, r28
    6368:	05 5f       	subi	r16, 0xF5	; 245
    636a:	1d 4f       	sbci	r17, 0xFD	; 253
    636c:	ce 01       	movw	r24, r28
    636e:	89 5f       	subi	r24, 0xF9	; 249
    6370:	9d 4f       	sbci	r25, 0xFD	; 253
    6372:	fc 01       	movw	r30, r24
    6374:	60 81       	ld	r22, Z
    6376:	71 81       	ldd	r23, Z+1	; 0x01
    6378:	82 81       	ldd	r24, Z+2	; 0x02
    637a:	93 81       	ldd	r25, Z+3	; 0x03
    637c:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    6380:	dc 01       	movw	r26, r24
    6382:	cb 01       	movw	r24, r22
    6384:	f8 01       	movw	r30, r16
    6386:	91 83       	std	Z+1, r25	; 0x01
    6388:	80 83       	st	Z, r24
    638a:	ce 01       	movw	r24, r28
    638c:	81 5f       	subi	r24, 0xF1	; 241
    638e:	9d 4f       	sbci	r25, 0xFD	; 253
    6390:	9e 01       	movw	r18, r28
    6392:	25 5f       	subi	r18, 0xF5	; 245
    6394:	3d 4f       	sbci	r19, 0xFD	; 253
    6396:	f9 01       	movw	r30, r18
    6398:	20 81       	ld	r18, Z
    639a:	31 81       	ldd	r19, Z+1	; 0x01
    639c:	fc 01       	movw	r30, r24
    639e:	31 83       	std	Z+1, r19	; 0x01
    63a0:	20 83       	st	Z, r18
    63a2:	ce 01       	movw	r24, r28
    63a4:	81 5f       	subi	r24, 0xF1	; 241
    63a6:	9d 4f       	sbci	r25, 0xFD	; 253
    63a8:	fc 01       	movw	r30, r24
    63aa:	80 81       	ld	r24, Z
    63ac:	91 81       	ldd	r25, Z+1	; 0x01
    63ae:	8c 01       	movw	r16, r24
    63b0:	c8 01       	movw	r24, r16
    63b2:	01 97       	sbiw	r24, 0x01	; 1
    63b4:	f1 f7       	brne	.-4      	; 0x63b2 <__stack+0x41b3>
    63b6:	8c 01       	movw	r16, r24
    63b8:	ce 01       	movw	r24, r28
    63ba:	81 5f       	subi	r24, 0xF1	; 241
    63bc:	9d 4f       	sbci	r25, 0xFD	; 253
    63be:	fc 01       	movw	r30, r24
    63c0:	11 83       	std	Z+1, r17	; 0x01
    63c2:	00 83       	st	Z, r16
					_delay_ms(100);
					coor[0]=0;
    63c4:	10 92 8a 04 	sts	0x048A, r1
    63c8:	10 92 89 04 	sts	0x0489, r1
					coor[1]=0;
    63cc:	10 92 8c 04 	sts	0x048C, r1
    63d0:	10 92 8b 04 	sts	0x048B, r1
					linefollwer();
    63d4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
					compass=4;
    63d8:	84 e0       	ldi	r24, 0x04	; 4
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	9c 83       	std	Y+4, r25	; 0x04
    63de:	8b 83       	std	Y+3, r24	; 0x03
    63e0:	ef c0       	rjmp	.+478    	; 0x65c0 <__stack+0x43c1>
					
				}
				else
				{
					if(compass==5)
    63e2:	8b 81       	ldd	r24, Y+3	; 0x03
    63e4:	9c 81       	ldd	r25, Y+4	; 0x04
    63e6:	85 30       	cpi	r24, 0x05	; 5
    63e8:	91 05       	cpc	r25, r1
    63ea:	09 f0       	breq	.+2      	; 0x63ee <__stack+0x41ef>
    63ec:	e1 c0       	rjmp	.+450    	; 0x65b0 <__stack+0x43b1>
    63ee:	9e 01       	movw	r18, r28
    63f0:	2f 5e       	subi	r18, 0xEF	; 239
    63f2:	3d 4f       	sbci	r19, 0xFD	; 253
    63f4:	80 e0       	ldi	r24, 0x00	; 0
    63f6:	90 e0       	ldi	r25, 0x00	; 0
    63f8:	a8 ec       	ldi	r26, 0xC8	; 200
    63fa:	b2 e4       	ldi	r27, 0x42	; 66
    63fc:	f9 01       	movw	r30, r18
    63fe:	80 83       	st	Z, r24
    6400:	91 83       	std	Z+1, r25	; 0x01
    6402:	a2 83       	std	Z+2, r26	; 0x02
    6404:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6406:	8e 01       	movw	r16, r28
    6408:	0b 5e       	subi	r16, 0xEB	; 235
    640a:	1d 4f       	sbci	r17, 0xFD	; 253
    640c:	ce 01       	movw	r24, r28
    640e:	8f 5e       	subi	r24, 0xEF	; 239
    6410:	9d 4f       	sbci	r25, 0xFD	; 253
    6412:	fc 01       	movw	r30, r24
    6414:	60 81       	ld	r22, Z
    6416:	71 81       	ldd	r23, Z+1	; 0x01
    6418:	82 81       	ldd	r24, Z+2	; 0x02
    641a:	93 81       	ldd	r25, Z+3	; 0x03
    641c:	26 e6       	ldi	r18, 0x66	; 102
    641e:	36 e6       	ldi	r19, 0x66	; 102
    6420:	46 e6       	ldi	r20, 0x66	; 102
    6422:	55 e4       	ldi	r21, 0x45	; 69
    6424:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    6428:	dc 01       	movw	r26, r24
    642a:	cb 01       	movw	r24, r22
    642c:	f8 01       	movw	r30, r16
    642e:	80 83       	st	Z, r24
    6430:	91 83       	std	Z+1, r25	; 0x01
    6432:	a2 83       	std	Z+2, r26	; 0x02
    6434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6436:	ce 01       	movw	r24, r28
    6438:	8b 5e       	subi	r24, 0xEB	; 235
    643a:	9d 4f       	sbci	r25, 0xFD	; 253
    643c:	11 e0       	ldi	r17, 0x01	; 1
    643e:	fc 01       	movw	r30, r24
    6440:	60 81       	ld	r22, Z
    6442:	71 81       	ldd	r23, Z+1	; 0x01
    6444:	82 81       	ldd	r24, Z+2	; 0x02
    6446:	93 81       	ldd	r25, Z+3	; 0x03
    6448:	20 e0       	ldi	r18, 0x00	; 0
    644a:	30 e0       	ldi	r19, 0x00	; 0
    644c:	40 e8       	ldi	r20, 0x80	; 128
    644e:	5f e3       	ldi	r21, 0x3F	; 63
    6450:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    6454:	88 23       	and	r24, r24
    6456:	0c f0       	brlt	.+2      	; 0x645a <__stack+0x425b>
    6458:	10 e0       	ldi	r17, 0x00	; 0
    645a:	11 23       	and	r17, r17
    645c:	49 f0       	breq	.+18     	; 0x6470 <__stack+0x4271>
		__ticks = 1;
    645e:	ce 01       	movw	r24, r28
    6460:	87 5e       	subi	r24, 0xE7	; 231
    6462:	9d 4f       	sbci	r25, 0xFD	; 253
    6464:	21 e0       	ldi	r18, 0x01	; 1
    6466:	30 e0       	ldi	r19, 0x00	; 0
    6468:	fc 01       	movw	r30, r24
    646a:	31 83       	std	Z+1, r19	; 0x01
    646c:	20 83       	st	Z, r18
    646e:	74 c0       	rjmp	.+232    	; 0x6558 <__stack+0x4359>
	else if (__tmp > 65535)
    6470:	ce 01       	movw	r24, r28
    6472:	8b 5e       	subi	r24, 0xEB	; 235
    6474:	9d 4f       	sbci	r25, 0xFD	; 253
    6476:	11 e0       	ldi	r17, 0x01	; 1
    6478:	fc 01       	movw	r30, r24
    647a:	60 81       	ld	r22, Z
    647c:	71 81       	ldd	r23, Z+1	; 0x01
    647e:	82 81       	ldd	r24, Z+2	; 0x02
    6480:	93 81       	ldd	r25, Z+3	; 0x03
    6482:	20 e0       	ldi	r18, 0x00	; 0
    6484:	3f ef       	ldi	r19, 0xFF	; 255
    6486:	4f e7       	ldi	r20, 0x7F	; 127
    6488:	57 e4       	ldi	r21, 0x47	; 71
    648a:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    648e:	18 16       	cp	r1, r24
    6490:	0c f0       	brlt	.+2      	; 0x6494 <__stack+0x4295>
    6492:	10 e0       	ldi	r17, 0x00	; 0
    6494:	11 23       	and	r17, r17
    6496:	09 f4       	brne	.+2      	; 0x649a <__stack+0x429b>
    6498:	4d c0       	rjmp	.+154    	; 0x6534 <__stack+0x4335>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    649a:	ce 01       	movw	r24, r28
    649c:	8f 5e       	subi	r24, 0xEF	; 239
    649e:	9d 4f       	sbci	r25, 0xFD	; 253
    64a0:	fc 01       	movw	r30, r24
    64a2:	60 81       	ld	r22, Z
    64a4:	71 81       	ldd	r23, Z+1	; 0x01
    64a6:	82 81       	ldd	r24, Z+2	; 0x02
    64a8:	93 81       	ldd	r25, Z+3	; 0x03
    64aa:	20 e0       	ldi	r18, 0x00	; 0
    64ac:	30 e0       	ldi	r19, 0x00	; 0
    64ae:	40 e2       	ldi	r20, 0x20	; 32
    64b0:	51 e4       	ldi	r21, 0x41	; 65
    64b2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    64b6:	dc 01       	movw	r26, r24
    64b8:	cb 01       	movw	r24, r22
    64ba:	8e 01       	movw	r16, r28
    64bc:	07 5e       	subi	r16, 0xE7	; 231
    64be:	1d 4f       	sbci	r17, 0xFD	; 253
    64c0:	bc 01       	movw	r22, r24
    64c2:	cd 01       	movw	r24, r26
    64c4:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    64c8:	dc 01       	movw	r26, r24
    64ca:	cb 01       	movw	r24, r22
    64cc:	f8 01       	movw	r30, r16
    64ce:	91 83       	std	Z+1, r25	; 0x01
    64d0:	80 83       	st	Z, r24
    64d2:	27 c0       	rjmp	.+78     	; 0x6522 <__stack+0x4323>
    64d4:	ce 01       	movw	r24, r28
    64d6:	85 5e       	subi	r24, 0xE5	; 229
    64d8:	9d 4f       	sbci	r25, 0xFD	; 253
    64da:	20 e7       	ldi	r18, 0x70	; 112
    64dc:	31 e0       	ldi	r19, 0x01	; 1
    64de:	fc 01       	movw	r30, r24
    64e0:	31 83       	std	Z+1, r19	; 0x01
    64e2:	20 83       	st	Z, r18
    64e4:	ce 01       	movw	r24, r28
    64e6:	85 5e       	subi	r24, 0xE5	; 229
    64e8:	9d 4f       	sbci	r25, 0xFD	; 253
    64ea:	fc 01       	movw	r30, r24
    64ec:	80 81       	ld	r24, Z
    64ee:	91 81       	ldd	r25, Z+1	; 0x01
    64f0:	8c 01       	movw	r16, r24
    64f2:	c8 01       	movw	r24, r16
    64f4:	01 97       	sbiw	r24, 0x01	; 1
    64f6:	f1 f7       	brne	.-4      	; 0x64f4 <__stack+0x42f5>
    64f8:	8c 01       	movw	r16, r24
    64fa:	ce 01       	movw	r24, r28
    64fc:	85 5e       	subi	r24, 0xE5	; 229
    64fe:	9d 4f       	sbci	r25, 0xFD	; 253
    6500:	fc 01       	movw	r30, r24
    6502:	11 83       	std	Z+1, r17	; 0x01
    6504:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6506:	ce 01       	movw	r24, r28
    6508:	87 5e       	subi	r24, 0xE7	; 231
    650a:	9d 4f       	sbci	r25, 0xFD	; 253
    650c:	9e 01       	movw	r18, r28
    650e:	27 5e       	subi	r18, 0xE7	; 231
    6510:	3d 4f       	sbci	r19, 0xFD	; 253
    6512:	f9 01       	movw	r30, r18
    6514:	20 81       	ld	r18, Z
    6516:	31 81       	ldd	r19, Z+1	; 0x01
    6518:	21 50       	subi	r18, 0x01	; 1
    651a:	30 40       	sbci	r19, 0x00	; 0
    651c:	fc 01       	movw	r30, r24
    651e:	31 83       	std	Z+1, r19	; 0x01
    6520:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6522:	ce 01       	movw	r24, r28
    6524:	87 5e       	subi	r24, 0xE7	; 231
    6526:	9d 4f       	sbci	r25, 0xFD	; 253
    6528:	fc 01       	movw	r30, r24
    652a:	80 81       	ld	r24, Z
    652c:	91 81       	ldd	r25, Z+1	; 0x01
    652e:	00 97       	sbiw	r24, 0x00	; 0
    6530:	89 f6       	brne	.-94     	; 0x64d4 <__stack+0x42d5>
    6532:	2f c0       	rjmp	.+94     	; 0x6592 <__stack+0x4393>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6534:	8e 01       	movw	r16, r28
    6536:	07 5e       	subi	r16, 0xE7	; 231
    6538:	1d 4f       	sbci	r17, 0xFD	; 253
    653a:	ce 01       	movw	r24, r28
    653c:	8b 5e       	subi	r24, 0xEB	; 235
    653e:	9d 4f       	sbci	r25, 0xFD	; 253
    6540:	fc 01       	movw	r30, r24
    6542:	60 81       	ld	r22, Z
    6544:	71 81       	ldd	r23, Z+1	; 0x01
    6546:	82 81       	ldd	r24, Z+2	; 0x02
    6548:	93 81       	ldd	r25, Z+3	; 0x03
    654a:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    654e:	dc 01       	movw	r26, r24
    6550:	cb 01       	movw	r24, r22
    6552:	f8 01       	movw	r30, r16
    6554:	91 83       	std	Z+1, r25	; 0x01
    6556:	80 83       	st	Z, r24
    6558:	ce 01       	movw	r24, r28
    655a:	83 5e       	subi	r24, 0xE3	; 227
    655c:	9d 4f       	sbci	r25, 0xFD	; 253
    655e:	9e 01       	movw	r18, r28
    6560:	27 5e       	subi	r18, 0xE7	; 231
    6562:	3d 4f       	sbci	r19, 0xFD	; 253
    6564:	f9 01       	movw	r30, r18
    6566:	20 81       	ld	r18, Z
    6568:	31 81       	ldd	r19, Z+1	; 0x01
    656a:	fc 01       	movw	r30, r24
    656c:	31 83       	std	Z+1, r19	; 0x01
    656e:	20 83       	st	Z, r18
    6570:	ce 01       	movw	r24, r28
    6572:	83 5e       	subi	r24, 0xE3	; 227
    6574:	9d 4f       	sbci	r25, 0xFD	; 253
    6576:	fc 01       	movw	r30, r24
    6578:	80 81       	ld	r24, Z
    657a:	91 81       	ldd	r25, Z+1	; 0x01
    657c:	8c 01       	movw	r16, r24
    657e:	c8 01       	movw	r24, r16
    6580:	01 97       	sbiw	r24, 0x01	; 1
    6582:	f1 f7       	brne	.-4      	; 0x6580 <__stack+0x4381>
    6584:	8c 01       	movw	r16, r24
    6586:	ce 01       	movw	r24, r28
    6588:	83 5e       	subi	r24, 0xE3	; 227
    658a:	9d 4f       	sbci	r25, 0xFD	; 253
    658c:	fc 01       	movw	r30, r24
    658e:	11 83       	std	Z+1, r17	; 0x01
    6590:	00 83       	st	Z, r16
					{
						_delay_ms(100);
						coor[0]=0;
    6592:	10 92 8a 04 	sts	0x048A, r1
    6596:	10 92 89 04 	sts	0x0489, r1
						coor[1]=0;
    659a:	10 92 8c 04 	sts	0x048C, r1
    659e:	10 92 8b 04 	sts	0x048B, r1
						linefollwer();
    65a2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <linefollwer>
						compass=4;
    65a6:	84 e0       	ldi	r24, 0x04	; 4
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	9c 83       	std	Y+4, r25	; 0x04
    65ac:	8b 83       	std	Y+3, r24	; 0x03
    65ae:	08 c0       	rjmp	.+16     	; 0x65c0 <__stack+0x43c1>
						
					}
					else
					{
							if(recur1==2)
    65b0:	89 85       	ldd	r24, Y+9	; 0x09
    65b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    65b4:	82 30       	cpi	r24, 0x02	; 2
    65b6:	91 05       	cpc	r25, r1
    65b8:	19 f4       	brne	.+6      	; 0x65c0 <__stack+0x43c1>
							{
								stop();
    65ba:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <stop>
								goto point2;
    65be:	61 c1       	rjmp	.+706    	; 0x6882 <__stack+0x4683>
								
							}
					}
				}
			}				
			flag1=flag1+1;
    65c0:	89 81       	ldd	r24, Y+1	; 0x01
    65c2:	9a 81       	ldd	r25, Y+2	; 0x02
    65c4:	01 96       	adiw	r24, 0x01	; 1
    65c6:	9a 83       	std	Y+2, r25	; 0x02
    65c8:	89 83       	std	Y+1, r24	; 0x01
			if(summ1[recur+1]<10)
    65ca:	8f 81       	ldd	r24, Y+7	; 0x07
    65cc:	98 85       	ldd	r25, Y+8	; 0x08
    65ce:	01 96       	adiw	r24, 0x01	; 1
    65d0:	9e 01       	movw	r18, r28
    65d2:	23 57       	subi	r18, 0x73	; 115
    65d4:	3b 4f       	sbci	r19, 0xFB	; 251
    65d6:	88 0f       	add	r24, r24
    65d8:	99 1f       	adc	r25, r25
    65da:	82 0f       	add	r24, r18
    65dc:	93 1f       	adc	r25, r19
    65de:	fc 01       	movw	r30, r24
    65e0:	80 81       	ld	r24, Z
    65e2:	91 81       	ldd	r25, Z+1	; 0x01
    65e4:	8a 30       	cpi	r24, 0x0A	; 10
    65e6:	91 05       	cpc	r25, r1
    65e8:	0c f0       	brlt	.+2      	; 0x65ec <__stack+0x43ed>
    65ea:	4b c1       	rjmp	.+662    	; 0x6882 <__stack+0x4683>
			{
			   recur=recur+1;
    65ec:	8f 81       	ldd	r24, Y+7	; 0x07
    65ee:	98 85       	ldd	r25, Y+8	; 0x08
    65f0:	01 96       	adiw	r24, 0x01	; 1
    65f2:	98 87       	std	Y+8, r25	; 0x08
    65f4:	8f 83       	std	Y+7, r24	; 0x07
			   help=summ1[recur];
    65f6:	9e 01       	movw	r18, r28
    65f8:	23 57       	subi	r18, 0x73	; 115
    65fa:	3b 4f       	sbci	r19, 0xFB	; 251
    65fc:	8f 81       	ldd	r24, Y+7	; 0x07
    65fe:	98 85       	ldd	r25, Y+8	; 0x08
    6600:	88 0f       	add	r24, r24
    6602:	99 1f       	adc	r25, r25
    6604:	82 0f       	add	r24, r18
    6606:	93 1f       	adc	r25, r19
    6608:	fc 01       	movw	r30, r24
    660a:	80 81       	ld	r24, Z
    660c:	91 81       	ldd	r25, Z+1	; 0x01
    660e:	9c 87       	std	Y+12, r25	; 0x0c
    6610:	8b 87       	std	Y+11, r24	; 0x0b
			   goto point1;	
    6612:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <main+0x14a>
			}
		}
		else
		{
			if(flag1%2==0)
    6616:	89 81       	ldd	r24, Y+1	; 0x01
    6618:	9a 81       	ldd	r25, Y+2	; 0x02
    661a:	81 70       	andi	r24, 0x01	; 1
    661c:	90 70       	andi	r25, 0x00	; 0
    661e:	00 97       	sbiw	r24, 0x00	; 0
    6620:	09 f0       	breq	.+2      	; 0x6624 <__stack+0x4425>
    6622:	ed c0       	rjmp	.+474    	; 0x67fe <__stack+0x45ff>
			{
				if(recur1==2)
    6624:	89 85       	ldd	r24, Y+9	; 0x09
    6626:	9a 85       	ldd	r25, Y+10	; 0x0a
    6628:	82 30       	cpi	r24, 0x02	; 2
    662a:	91 05       	cpc	r25, r1
    662c:	09 f0       	breq	.+2      	; 0x6630 <__stack+0x4431>
    662e:	d9 c0       	rjmp	.+434    	; 0x67e2 <__stack+0x45e3>
				{
					stop();
    6630:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <stop>
					buzzer_on();
    6634:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <buzzer_on>
    6638:	9e 01       	movw	r18, r28
    663a:	21 5e       	subi	r18, 0xE1	; 225
    663c:	3d 4f       	sbci	r19, 0xFD	; 253
    663e:	80 e0       	ldi	r24, 0x00	; 0
    6640:	90 e4       	ldi	r25, 0x40	; 64
    6642:	ac e9       	ldi	r26, 0x9C	; 156
    6644:	b5 e4       	ldi	r27, 0x45	; 69
    6646:	f9 01       	movw	r30, r18
    6648:	80 83       	st	Z, r24
    664a:	91 83       	std	Z+1, r25	; 0x01
    664c:	a2 83       	std	Z+2, r26	; 0x02
    664e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6650:	8e 01       	movw	r16, r28
    6652:	0d 5d       	subi	r16, 0xDD	; 221
    6654:	1d 4f       	sbci	r17, 0xFD	; 253
    6656:	ce 01       	movw	r24, r28
    6658:	81 5e       	subi	r24, 0xE1	; 225
    665a:	9d 4f       	sbci	r25, 0xFD	; 253
    665c:	fc 01       	movw	r30, r24
    665e:	60 81       	ld	r22, Z
    6660:	71 81       	ldd	r23, Z+1	; 0x01
    6662:	82 81       	ldd	r24, Z+2	; 0x02
    6664:	93 81       	ldd	r25, Z+3	; 0x03
    6666:	26 e6       	ldi	r18, 0x66	; 102
    6668:	36 e6       	ldi	r19, 0x66	; 102
    666a:	46 e6       	ldi	r20, 0x66	; 102
    666c:	55 e4       	ldi	r21, 0x45	; 69
    666e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    6672:	dc 01       	movw	r26, r24
    6674:	cb 01       	movw	r24, r22
    6676:	f8 01       	movw	r30, r16
    6678:	80 83       	st	Z, r24
    667a:	91 83       	std	Z+1, r25	; 0x01
    667c:	a2 83       	std	Z+2, r26	; 0x02
    667e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6680:	ce 01       	movw	r24, r28
    6682:	8d 5d       	subi	r24, 0xDD	; 221
    6684:	9d 4f       	sbci	r25, 0xFD	; 253
    6686:	11 e0       	ldi	r17, 0x01	; 1
    6688:	fc 01       	movw	r30, r24
    668a:	60 81       	ld	r22, Z
    668c:	71 81       	ldd	r23, Z+1	; 0x01
    668e:	82 81       	ldd	r24, Z+2	; 0x02
    6690:	93 81       	ldd	r25, Z+3	; 0x03
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	40 e8       	ldi	r20, 0x80	; 128
    6698:	5f e3       	ldi	r21, 0x3F	; 63
    669a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <__cmpsf2>
    669e:	88 23       	and	r24, r24
    66a0:	0c f0       	brlt	.+2      	; 0x66a4 <__stack+0x44a5>
    66a2:	10 e0       	ldi	r17, 0x00	; 0
    66a4:	11 23       	and	r17, r17
    66a6:	49 f0       	breq	.+18     	; 0x66ba <__stack+0x44bb>
		__ticks = 1;
    66a8:	ce 01       	movw	r24, r28
    66aa:	89 5d       	subi	r24, 0xD9	; 217
    66ac:	9d 4f       	sbci	r25, 0xFD	; 253
    66ae:	21 e0       	ldi	r18, 0x01	; 1
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	fc 01       	movw	r30, r24
    66b4:	31 83       	std	Z+1, r19	; 0x01
    66b6:	20 83       	st	Z, r18
    66b8:	74 c0       	rjmp	.+232    	; 0x67a2 <__stack+0x45a3>
	else if (__tmp > 65535)
    66ba:	ce 01       	movw	r24, r28
    66bc:	8d 5d       	subi	r24, 0xDD	; 221
    66be:	9d 4f       	sbci	r25, 0xFD	; 253
    66c0:	11 e0       	ldi	r17, 0x01	; 1
    66c2:	fc 01       	movw	r30, r24
    66c4:	60 81       	ld	r22, Z
    66c6:	71 81       	ldd	r23, Z+1	; 0x01
    66c8:	82 81       	ldd	r24, Z+2	; 0x02
    66ca:	93 81       	ldd	r25, Z+3	; 0x03
    66cc:	20 e0       	ldi	r18, 0x00	; 0
    66ce:	3f ef       	ldi	r19, 0xFF	; 255
    66d0:	4f e7       	ldi	r20, 0x7F	; 127
    66d2:	57 e4       	ldi	r21, 0x47	; 71
    66d4:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__gesf2>
    66d8:	18 16       	cp	r1, r24
    66da:	0c f0       	brlt	.+2      	; 0x66de <__stack+0x44df>
    66dc:	10 e0       	ldi	r17, 0x00	; 0
    66de:	11 23       	and	r17, r17
    66e0:	09 f4       	brne	.+2      	; 0x66e4 <__stack+0x44e5>
    66e2:	4d c0       	rjmp	.+154    	; 0x677e <__stack+0x457f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66e4:	ce 01       	movw	r24, r28
    66e6:	81 5e       	subi	r24, 0xE1	; 225
    66e8:	9d 4f       	sbci	r25, 0xFD	; 253
    66ea:	fc 01       	movw	r30, r24
    66ec:	60 81       	ld	r22, Z
    66ee:	71 81       	ldd	r23, Z+1	; 0x01
    66f0:	82 81       	ldd	r24, Z+2	; 0x02
    66f2:	93 81       	ldd	r25, Z+3	; 0x03
    66f4:	20 e0       	ldi	r18, 0x00	; 0
    66f6:	30 e0       	ldi	r19, 0x00	; 0
    66f8:	40 e2       	ldi	r20, 0x20	; 32
    66fa:	51 e4       	ldi	r21, 0x41	; 65
    66fc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <__mulsf3>
    6700:	dc 01       	movw	r26, r24
    6702:	cb 01       	movw	r24, r22
    6704:	8e 01       	movw	r16, r28
    6706:	09 5d       	subi	r16, 0xD9	; 217
    6708:	1d 4f       	sbci	r17, 0xFD	; 253
    670a:	bc 01       	movw	r22, r24
    670c:	cd 01       	movw	r24, r26
    670e:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    6712:	dc 01       	movw	r26, r24
    6714:	cb 01       	movw	r24, r22
    6716:	f8 01       	movw	r30, r16
    6718:	91 83       	std	Z+1, r25	; 0x01
    671a:	80 83       	st	Z, r24
    671c:	27 c0       	rjmp	.+78     	; 0x676c <__stack+0x456d>
    671e:	ce 01       	movw	r24, r28
    6720:	87 5d       	subi	r24, 0xD7	; 215
    6722:	9d 4f       	sbci	r25, 0xFD	; 253
    6724:	20 e7       	ldi	r18, 0x70	; 112
    6726:	31 e0       	ldi	r19, 0x01	; 1
    6728:	fc 01       	movw	r30, r24
    672a:	31 83       	std	Z+1, r19	; 0x01
    672c:	20 83       	st	Z, r18
    672e:	ce 01       	movw	r24, r28
    6730:	87 5d       	subi	r24, 0xD7	; 215
    6732:	9d 4f       	sbci	r25, 0xFD	; 253
    6734:	fc 01       	movw	r30, r24
    6736:	80 81       	ld	r24, Z
    6738:	91 81       	ldd	r25, Z+1	; 0x01
    673a:	8c 01       	movw	r16, r24
    673c:	c8 01       	movw	r24, r16
    673e:	01 97       	sbiw	r24, 0x01	; 1
    6740:	f1 f7       	brne	.-4      	; 0x673e <__stack+0x453f>
    6742:	8c 01       	movw	r16, r24
    6744:	ce 01       	movw	r24, r28
    6746:	87 5d       	subi	r24, 0xD7	; 215
    6748:	9d 4f       	sbci	r25, 0xFD	; 253
    674a:	fc 01       	movw	r30, r24
    674c:	11 83       	std	Z+1, r17	; 0x01
    674e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6750:	ce 01       	movw	r24, r28
    6752:	89 5d       	subi	r24, 0xD9	; 217
    6754:	9d 4f       	sbci	r25, 0xFD	; 253
    6756:	9e 01       	movw	r18, r28
    6758:	29 5d       	subi	r18, 0xD9	; 217
    675a:	3d 4f       	sbci	r19, 0xFD	; 253
    675c:	f9 01       	movw	r30, r18
    675e:	20 81       	ld	r18, Z
    6760:	31 81       	ldd	r19, Z+1	; 0x01
    6762:	21 50       	subi	r18, 0x01	; 1
    6764:	30 40       	sbci	r19, 0x00	; 0
    6766:	fc 01       	movw	r30, r24
    6768:	31 83       	std	Z+1, r19	; 0x01
    676a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    676c:	ce 01       	movw	r24, r28
    676e:	89 5d       	subi	r24, 0xD9	; 217
    6770:	9d 4f       	sbci	r25, 0xFD	; 253
    6772:	fc 01       	movw	r30, r24
    6774:	80 81       	ld	r24, Z
    6776:	91 81       	ldd	r25, Z+1	; 0x01
    6778:	00 97       	sbiw	r24, 0x00	; 0
    677a:	89 f6       	brne	.-94     	; 0x671e <__stack+0x451f>
    677c:	2f c0       	rjmp	.+94     	; 0x67dc <__stack+0x45dd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    677e:	8e 01       	movw	r16, r28
    6780:	09 5d       	subi	r16, 0xD9	; 217
    6782:	1d 4f       	sbci	r17, 0xFD	; 253
    6784:	ce 01       	movw	r24, r28
    6786:	8d 5d       	subi	r24, 0xDD	; 221
    6788:	9d 4f       	sbci	r25, 0xFD	; 253
    678a:	fc 01       	movw	r30, r24
    678c:	60 81       	ld	r22, Z
    678e:	71 81       	ldd	r23, Z+1	; 0x01
    6790:	82 81       	ldd	r24, Z+2	; 0x02
    6792:	93 81       	ldd	r25, Z+3	; 0x03
    6794:	0e 94 bd 34 	call	0x697a	; 0x697a <__fixunssfsi>
    6798:	dc 01       	movw	r26, r24
    679a:	cb 01       	movw	r24, r22
    679c:	f8 01       	movw	r30, r16
    679e:	91 83       	std	Z+1, r25	; 0x01
    67a0:	80 83       	st	Z, r24
    67a2:	ce 01       	movw	r24, r28
    67a4:	85 5d       	subi	r24, 0xD5	; 213
    67a6:	9d 4f       	sbci	r25, 0xFD	; 253
    67a8:	9e 01       	movw	r18, r28
    67aa:	29 5d       	subi	r18, 0xD9	; 217
    67ac:	3d 4f       	sbci	r19, 0xFD	; 253
    67ae:	f9 01       	movw	r30, r18
    67b0:	20 81       	ld	r18, Z
    67b2:	31 81       	ldd	r19, Z+1	; 0x01
    67b4:	fc 01       	movw	r30, r24
    67b6:	31 83       	std	Z+1, r19	; 0x01
    67b8:	20 83       	st	Z, r18
    67ba:	ce 01       	movw	r24, r28
    67bc:	85 5d       	subi	r24, 0xD5	; 213
    67be:	9d 4f       	sbci	r25, 0xFD	; 253
    67c0:	fc 01       	movw	r30, r24
    67c2:	80 81       	ld	r24, Z
    67c4:	91 81       	ldd	r25, Z+1	; 0x01
    67c6:	8c 01       	movw	r16, r24
    67c8:	c8 01       	movw	r24, r16
    67ca:	01 97       	sbiw	r24, 0x01	; 1
    67cc:	f1 f7       	brne	.-4      	; 0x67ca <__stack+0x45cb>
    67ce:	8c 01       	movw	r16, r24
    67d0:	ce 01       	movw	r24, r28
    67d2:	85 5d       	subi	r24, 0xD5	; 213
    67d4:	9d 4f       	sbci	r25, 0xFD	; 253
    67d6:	fc 01       	movw	r30, r24
    67d8:	11 83       	std	Z+1, r17	; 0x01
    67da:	00 83       	st	Z, r16
					_delay_ms(5000);
					buzzer_off();
    67dc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <buzzer_off>
    67e0:	50 c0       	rjmp	.+160    	; 0x6882 <__stack+0x4683>
				}
				else
				{
					final[0]=0;
    67e2:	ce 01       	movw	r24, r28
    67e4:	81 56       	subi	r24, 0x61	; 97
    67e6:	9b 4f       	sbci	r25, 0xFB	; 251
    67e8:	fc 01       	movw	r30, r24
    67ea:	11 82       	std	Z+1, r1	; 0x01
    67ec:	10 82       	st	Z, r1
					final[1]=0;
    67ee:	ce 01       	movw	r24, r28
    67f0:	81 56       	subi	r24, 0x61	; 97
    67f2:	9b 4f       	sbci	r25, 0xFB	; 251
    67f4:	fc 01       	movw	r30, r24
    67f6:	13 82       	std	Z+3, r1	; 0x03
    67f8:	12 82       	std	Z+2, r1	; 0x02
					goto point;
    67fa:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__stack+0x43f>
				}					
			}
			else
			{
				if(flag1%2!=0)
    67fe:	89 81       	ldd	r24, Y+1	; 0x01
    6800:	9a 81       	ldd	r25, Y+2	; 0x02
    6802:	81 70       	andi	r24, 0x01	; 1
    6804:	90 70       	andi	r25, 0x00	; 0
    6806:	88 23       	and	r24, r24
    6808:	e1 f1       	breq	.+120    	; 0x6882 <__stack+0x4683>
				{
					lcd_print(2,1,help,1);
    680a:	2b 85       	ldd	r18, Y+11	; 0x0b
    680c:	3c 85       	ldd	r19, Y+12	; 0x0c
    680e:	82 e0       	ldi	r24, 0x02	; 2
    6810:	61 e0       	ldi	r22, 0x01	; 1
    6812:	a9 01       	movw	r20, r18
    6814:	21 e0       	ldi	r18, 0x01	; 1
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	0e 94 b6 0a 	call	0x156c	; 0x156c <lcd_print>
					if(summ1[recur+1]<10)
    681c:	8f 81       	ldd	r24, Y+7	; 0x07
    681e:	98 85       	ldd	r25, Y+8	; 0x08
    6820:	01 96       	adiw	r24, 0x01	; 1
    6822:	9e 01       	movw	r18, r28
    6824:	23 57       	subi	r18, 0x73	; 115
    6826:	3b 4f       	sbci	r19, 0xFB	; 251
    6828:	88 0f       	add	r24, r24
    682a:	99 1f       	adc	r25, r25
    682c:	82 0f       	add	r24, r18
    682e:	93 1f       	adc	r25, r19
    6830:	fc 01       	movw	r30, r24
    6832:	80 81       	ld	r24, Z
    6834:	91 81       	ldd	r25, Z+1	; 0x01
    6836:	8a 30       	cpi	r24, 0x0A	; 10
    6838:	91 05       	cpc	r25, r1
    683a:	ac f4       	brge	.+42     	; 0x6866 <__stack+0x4667>
					{
						recur=recur+1;
    683c:	8f 81       	ldd	r24, Y+7	; 0x07
    683e:	98 85       	ldd	r25, Y+8	; 0x08
    6840:	01 96       	adiw	r24, 0x01	; 1
    6842:	98 87       	std	Y+8, r25	; 0x08
    6844:	8f 83       	std	Y+7, r24	; 0x07
						help=summ1[recur];
    6846:	9e 01       	movw	r18, r28
    6848:	23 57       	subi	r18, 0x73	; 115
    684a:	3b 4f       	sbci	r19, 0xFB	; 251
    684c:	8f 81       	ldd	r24, Y+7	; 0x07
    684e:	98 85       	ldd	r25, Y+8	; 0x08
    6850:	88 0f       	add	r24, r24
    6852:	99 1f       	adc	r25, r25
    6854:	82 0f       	add	r24, r18
    6856:	93 1f       	adc	r25, r19
    6858:	fc 01       	movw	r30, r24
    685a:	80 81       	ld	r24, Z
    685c:	91 81       	ldd	r25, Z+1	; 0x01
    685e:	9c 87       	std	Y+12, r25	; 0x0c
    6860:	8b 87       	std	Y+11, r24	; 0x0b
						goto point1;
    6862:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <main+0x14a>
					}
					else
					{
						final[0]=0;
    6866:	ce 01       	movw	r24, r28
    6868:	81 56       	subi	r24, 0x61	; 97
    686a:	9b 4f       	sbci	r25, 0xFB	; 251
    686c:	fc 01       	movw	r30, r24
    686e:	11 82       	std	Z+1, r1	; 0x01
    6870:	10 82       	st	Z, r1
						final[1]=0;
    6872:	ce 01       	movw	r24, r28
    6874:	81 56       	subi	r24, 0x61	; 97
    6876:	9b 4f       	sbci	r25, 0xFB	; 251
    6878:	fc 01       	movw	r30, r24
    687a:	13 82       	std	Z+3, r1	; 0x03
    687c:	12 82       	std	Z+2, r1	; 0x02
						goto point;
    687e:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__stack+0x43f>
					
				}
			}
		}
	}	
	point2: buzzer_on();			
    6882:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <buzzer_on>
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	90 e0       	ldi	r25, 0x00	; 0

}
    688a:	ce 54       	subi	r28, 0x4E	; 78
    688c:	db 4f       	sbci	r29, 0xFB	; 251
    688e:	0f b6       	in	r0, 0x3f	; 63
    6890:	f8 94       	cli
    6892:	de bf       	out	0x3e, r29	; 62
    6894:	0f be       	out	0x3f, r0	; 63
    6896:	cd bf       	out	0x3d, r28	; 61
    6898:	df 91       	pop	r29
    689a:	cf 91       	pop	r28
    689c:	1f 91       	pop	r17
    689e:	0f 91       	pop	r16
    68a0:	08 95       	ret

000068a2 <__cmpsf2>:
    68a2:	d4 d0       	rcall	.+424    	; 0x6a4c <__fp_cmp>
    68a4:	08 f4       	brcc	.+2      	; 0x68a8 <__cmpsf2+0x6>
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	08 95       	ret

000068aa <__divsf3>:
    68aa:	0c d0       	rcall	.+24     	; 0x68c4 <__divsf3x>
    68ac:	0a c1       	rjmp	.+532    	; 0x6ac2 <__fp_round>
    68ae:	02 d1       	rcall	.+516    	; 0x6ab4 <__fp_pscB>
    68b0:	40 f0       	brcs	.+16     	; 0x68c2 <__divsf3+0x18>
    68b2:	f9 d0       	rcall	.+498    	; 0x6aa6 <__fp_pscA>
    68b4:	30 f0       	brcs	.+12     	; 0x68c2 <__divsf3+0x18>
    68b6:	21 f4       	brne	.+8      	; 0x68c0 <__divsf3+0x16>
    68b8:	5f 3f       	cpi	r21, 0xFF	; 255
    68ba:	19 f0       	breq	.+6      	; 0x68c2 <__divsf3+0x18>
    68bc:	eb c0       	rjmp	.+470    	; 0x6a94 <__fp_inf>
    68be:	51 11       	cpse	r21, r1
    68c0:	34 c1       	rjmp	.+616    	; 0x6b2a <__fp_szero>
    68c2:	ee c0       	rjmp	.+476    	; 0x6aa0 <__fp_nan>

000068c4 <__divsf3x>:
    68c4:	0f d1       	rcall	.+542    	; 0x6ae4 <__fp_split3>
    68c6:	98 f3       	brcs	.-26     	; 0x68ae <__divsf3+0x4>

000068c8 <__divsf3_pse>:
    68c8:	99 23       	and	r25, r25
    68ca:	c9 f3       	breq	.-14     	; 0x68be <__divsf3+0x14>
    68cc:	55 23       	and	r21, r21
    68ce:	b1 f3       	breq	.-20     	; 0x68bc <__divsf3+0x12>
    68d0:	95 1b       	sub	r25, r21
    68d2:	55 0b       	sbc	r21, r21
    68d4:	bb 27       	eor	r27, r27
    68d6:	aa 27       	eor	r26, r26
    68d8:	62 17       	cp	r22, r18
    68da:	73 07       	cpc	r23, r19
    68dc:	84 07       	cpc	r24, r20
    68de:	38 f0       	brcs	.+14     	; 0x68ee <__divsf3_pse+0x26>
    68e0:	9f 5f       	subi	r25, 0xFF	; 255
    68e2:	5f 4f       	sbci	r21, 0xFF	; 255
    68e4:	22 0f       	add	r18, r18
    68e6:	33 1f       	adc	r19, r19
    68e8:	44 1f       	adc	r20, r20
    68ea:	aa 1f       	adc	r26, r26
    68ec:	a9 f3       	breq	.-22     	; 0x68d8 <__divsf3_pse+0x10>
    68ee:	33 d0       	rcall	.+102    	; 0x6956 <__divsf3_pse+0x8e>
    68f0:	0e 2e       	mov	r0, r30
    68f2:	3a f0       	brmi	.+14     	; 0x6902 <__divsf3_pse+0x3a>
    68f4:	e0 e8       	ldi	r30, 0x80	; 128
    68f6:	30 d0       	rcall	.+96     	; 0x6958 <__divsf3_pse+0x90>
    68f8:	91 50       	subi	r25, 0x01	; 1
    68fa:	50 40       	sbci	r21, 0x00	; 0
    68fc:	e6 95       	lsr	r30
    68fe:	00 1c       	adc	r0, r0
    6900:	ca f7       	brpl	.-14     	; 0x68f4 <__divsf3_pse+0x2c>
    6902:	29 d0       	rcall	.+82     	; 0x6956 <__divsf3_pse+0x8e>
    6904:	fe 2f       	mov	r31, r30
    6906:	27 d0       	rcall	.+78     	; 0x6956 <__divsf3_pse+0x8e>
    6908:	66 0f       	add	r22, r22
    690a:	77 1f       	adc	r23, r23
    690c:	88 1f       	adc	r24, r24
    690e:	bb 1f       	adc	r27, r27
    6910:	26 17       	cp	r18, r22
    6912:	37 07       	cpc	r19, r23
    6914:	48 07       	cpc	r20, r24
    6916:	ab 07       	cpc	r26, r27
    6918:	b0 e8       	ldi	r27, 0x80	; 128
    691a:	09 f0       	breq	.+2      	; 0x691e <__divsf3_pse+0x56>
    691c:	bb 0b       	sbc	r27, r27
    691e:	80 2d       	mov	r24, r0
    6920:	bf 01       	movw	r22, r30
    6922:	ff 27       	eor	r31, r31
    6924:	93 58       	subi	r25, 0x83	; 131
    6926:	5f 4f       	sbci	r21, 0xFF	; 255
    6928:	2a f0       	brmi	.+10     	; 0x6934 <__divsf3_pse+0x6c>
    692a:	9e 3f       	cpi	r25, 0xFE	; 254
    692c:	51 05       	cpc	r21, r1
    692e:	68 f0       	brcs	.+26     	; 0x694a <__divsf3_pse+0x82>
    6930:	b1 c0       	rjmp	.+354    	; 0x6a94 <__fp_inf>
    6932:	fb c0       	rjmp	.+502    	; 0x6b2a <__fp_szero>
    6934:	5f 3f       	cpi	r21, 0xFF	; 255
    6936:	ec f3       	brlt	.-6      	; 0x6932 <__divsf3_pse+0x6a>
    6938:	98 3e       	cpi	r25, 0xE8	; 232
    693a:	dc f3       	brlt	.-10     	; 0x6932 <__divsf3_pse+0x6a>
    693c:	86 95       	lsr	r24
    693e:	77 95       	ror	r23
    6940:	67 95       	ror	r22
    6942:	b7 95       	ror	r27
    6944:	f7 95       	ror	r31
    6946:	9f 5f       	subi	r25, 0xFF	; 255
    6948:	c9 f7       	brne	.-14     	; 0x693c <__divsf3_pse+0x74>
    694a:	88 0f       	add	r24, r24
    694c:	91 1d       	adc	r25, r1
    694e:	96 95       	lsr	r25
    6950:	87 95       	ror	r24
    6952:	97 f9       	bld	r25, 7
    6954:	08 95       	ret
    6956:	e1 e0       	ldi	r30, 0x01	; 1
    6958:	66 0f       	add	r22, r22
    695a:	77 1f       	adc	r23, r23
    695c:	88 1f       	adc	r24, r24
    695e:	bb 1f       	adc	r27, r27
    6960:	62 17       	cp	r22, r18
    6962:	73 07       	cpc	r23, r19
    6964:	84 07       	cpc	r24, r20
    6966:	ba 07       	cpc	r27, r26
    6968:	20 f0       	brcs	.+8      	; 0x6972 <__divsf3_pse+0xaa>
    696a:	62 1b       	sub	r22, r18
    696c:	73 0b       	sbc	r23, r19
    696e:	84 0b       	sbc	r24, r20
    6970:	ba 0b       	sbc	r27, r26
    6972:	ee 1f       	adc	r30, r30
    6974:	88 f7       	brcc	.-30     	; 0x6958 <__divsf3_pse+0x90>
    6976:	e0 95       	com	r30
    6978:	08 95       	ret

0000697a <__fixunssfsi>:
    697a:	bc d0       	rcall	.+376    	; 0x6af4 <__fp_splitA>
    697c:	88 f0       	brcs	.+34     	; 0x69a0 <__fixunssfsi+0x26>
    697e:	9f 57       	subi	r25, 0x7F	; 127
    6980:	90 f0       	brcs	.+36     	; 0x69a6 <__fixunssfsi+0x2c>
    6982:	b9 2f       	mov	r27, r25
    6984:	99 27       	eor	r25, r25
    6986:	b7 51       	subi	r27, 0x17	; 23
    6988:	a0 f0       	brcs	.+40     	; 0x69b2 <__fixunssfsi+0x38>
    698a:	d1 f0       	breq	.+52     	; 0x69c0 <__fixunssfsi+0x46>
    698c:	66 0f       	add	r22, r22
    698e:	77 1f       	adc	r23, r23
    6990:	88 1f       	adc	r24, r24
    6992:	99 1f       	adc	r25, r25
    6994:	1a f0       	brmi	.+6      	; 0x699c <__fixunssfsi+0x22>
    6996:	ba 95       	dec	r27
    6998:	c9 f7       	brne	.-14     	; 0x698c <__fixunssfsi+0x12>
    699a:	12 c0       	rjmp	.+36     	; 0x69c0 <__fixunssfsi+0x46>
    699c:	b1 30       	cpi	r27, 0x01	; 1
    699e:	81 f0       	breq	.+32     	; 0x69c0 <__fixunssfsi+0x46>
    69a0:	c3 d0       	rcall	.+390    	; 0x6b28 <__fp_zero>
    69a2:	b1 e0       	ldi	r27, 0x01	; 1
    69a4:	08 95       	ret
    69a6:	c0 c0       	rjmp	.+384    	; 0x6b28 <__fp_zero>
    69a8:	67 2f       	mov	r22, r23
    69aa:	78 2f       	mov	r23, r24
    69ac:	88 27       	eor	r24, r24
    69ae:	b8 5f       	subi	r27, 0xF8	; 248
    69b0:	39 f0       	breq	.+14     	; 0x69c0 <__fixunssfsi+0x46>
    69b2:	b9 3f       	cpi	r27, 0xF9	; 249
    69b4:	cc f3       	brlt	.-14     	; 0x69a8 <__fixunssfsi+0x2e>
    69b6:	86 95       	lsr	r24
    69b8:	77 95       	ror	r23
    69ba:	67 95       	ror	r22
    69bc:	b3 95       	inc	r27
    69be:	d9 f7       	brne	.-10     	; 0x69b6 <__fixunssfsi+0x3c>
    69c0:	3e f4       	brtc	.+14     	; 0x69d0 <__fixunssfsi+0x56>
    69c2:	90 95       	com	r25
    69c4:	80 95       	com	r24
    69c6:	70 95       	com	r23
    69c8:	61 95       	neg	r22
    69ca:	7f 4f       	sbci	r23, 0xFF	; 255
    69cc:	8f 4f       	sbci	r24, 0xFF	; 255
    69ce:	9f 4f       	sbci	r25, 0xFF	; 255
    69d0:	08 95       	ret

000069d2 <__floatunsisf>:
    69d2:	e8 94       	clt
    69d4:	09 c0       	rjmp	.+18     	; 0x69e8 <__floatsisf+0x12>

000069d6 <__floatsisf>:
    69d6:	97 fb       	bst	r25, 7
    69d8:	3e f4       	brtc	.+14     	; 0x69e8 <__floatsisf+0x12>
    69da:	90 95       	com	r25
    69dc:	80 95       	com	r24
    69de:	70 95       	com	r23
    69e0:	61 95       	neg	r22
    69e2:	7f 4f       	sbci	r23, 0xFF	; 255
    69e4:	8f 4f       	sbci	r24, 0xFF	; 255
    69e6:	9f 4f       	sbci	r25, 0xFF	; 255
    69e8:	99 23       	and	r25, r25
    69ea:	a9 f0       	breq	.+42     	; 0x6a16 <__floatsisf+0x40>
    69ec:	f9 2f       	mov	r31, r25
    69ee:	96 e9       	ldi	r25, 0x96	; 150
    69f0:	bb 27       	eor	r27, r27
    69f2:	93 95       	inc	r25
    69f4:	f6 95       	lsr	r31
    69f6:	87 95       	ror	r24
    69f8:	77 95       	ror	r23
    69fa:	67 95       	ror	r22
    69fc:	b7 95       	ror	r27
    69fe:	f1 11       	cpse	r31, r1
    6a00:	f8 cf       	rjmp	.-16     	; 0x69f2 <__floatsisf+0x1c>
    6a02:	fa f4       	brpl	.+62     	; 0x6a42 <__floatsisf+0x6c>
    6a04:	bb 0f       	add	r27, r27
    6a06:	11 f4       	brne	.+4      	; 0x6a0c <__floatsisf+0x36>
    6a08:	60 ff       	sbrs	r22, 0
    6a0a:	1b c0       	rjmp	.+54     	; 0x6a42 <__floatsisf+0x6c>
    6a0c:	6f 5f       	subi	r22, 0xFF	; 255
    6a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a10:	8f 4f       	sbci	r24, 0xFF	; 255
    6a12:	9f 4f       	sbci	r25, 0xFF	; 255
    6a14:	16 c0       	rjmp	.+44     	; 0x6a42 <__floatsisf+0x6c>
    6a16:	88 23       	and	r24, r24
    6a18:	11 f0       	breq	.+4      	; 0x6a1e <__floatsisf+0x48>
    6a1a:	96 e9       	ldi	r25, 0x96	; 150
    6a1c:	11 c0       	rjmp	.+34     	; 0x6a40 <__floatsisf+0x6a>
    6a1e:	77 23       	and	r23, r23
    6a20:	21 f0       	breq	.+8      	; 0x6a2a <__floatsisf+0x54>
    6a22:	9e e8       	ldi	r25, 0x8E	; 142
    6a24:	87 2f       	mov	r24, r23
    6a26:	76 2f       	mov	r23, r22
    6a28:	05 c0       	rjmp	.+10     	; 0x6a34 <__floatsisf+0x5e>
    6a2a:	66 23       	and	r22, r22
    6a2c:	71 f0       	breq	.+28     	; 0x6a4a <__floatsisf+0x74>
    6a2e:	96 e8       	ldi	r25, 0x86	; 134
    6a30:	86 2f       	mov	r24, r22
    6a32:	70 e0       	ldi	r23, 0x00	; 0
    6a34:	60 e0       	ldi	r22, 0x00	; 0
    6a36:	2a f0       	brmi	.+10     	; 0x6a42 <__floatsisf+0x6c>
    6a38:	9a 95       	dec	r25
    6a3a:	66 0f       	add	r22, r22
    6a3c:	77 1f       	adc	r23, r23
    6a3e:	88 1f       	adc	r24, r24
    6a40:	da f7       	brpl	.-10     	; 0x6a38 <__floatsisf+0x62>
    6a42:	88 0f       	add	r24, r24
    6a44:	96 95       	lsr	r25
    6a46:	87 95       	ror	r24
    6a48:	97 f9       	bld	r25, 7
    6a4a:	08 95       	ret

00006a4c <__fp_cmp>:
    6a4c:	99 0f       	add	r25, r25
    6a4e:	00 08       	sbc	r0, r0
    6a50:	55 0f       	add	r21, r21
    6a52:	aa 0b       	sbc	r26, r26
    6a54:	e0 e8       	ldi	r30, 0x80	; 128
    6a56:	fe ef       	ldi	r31, 0xFE	; 254
    6a58:	16 16       	cp	r1, r22
    6a5a:	17 06       	cpc	r1, r23
    6a5c:	e8 07       	cpc	r30, r24
    6a5e:	f9 07       	cpc	r31, r25
    6a60:	c0 f0       	brcs	.+48     	; 0x6a92 <__fp_cmp+0x46>
    6a62:	12 16       	cp	r1, r18
    6a64:	13 06       	cpc	r1, r19
    6a66:	e4 07       	cpc	r30, r20
    6a68:	f5 07       	cpc	r31, r21
    6a6a:	98 f0       	brcs	.+38     	; 0x6a92 <__fp_cmp+0x46>
    6a6c:	62 1b       	sub	r22, r18
    6a6e:	73 0b       	sbc	r23, r19
    6a70:	84 0b       	sbc	r24, r20
    6a72:	95 0b       	sbc	r25, r21
    6a74:	39 f4       	brne	.+14     	; 0x6a84 <__fp_cmp+0x38>
    6a76:	0a 26       	eor	r0, r26
    6a78:	61 f0       	breq	.+24     	; 0x6a92 <__fp_cmp+0x46>
    6a7a:	23 2b       	or	r18, r19
    6a7c:	24 2b       	or	r18, r20
    6a7e:	25 2b       	or	r18, r21
    6a80:	21 f4       	brne	.+8      	; 0x6a8a <__fp_cmp+0x3e>
    6a82:	08 95       	ret
    6a84:	0a 26       	eor	r0, r26
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <__fp_cmp+0x3e>
    6a88:	a1 40       	sbci	r26, 0x01	; 1
    6a8a:	a6 95       	lsr	r26
    6a8c:	8f ef       	ldi	r24, 0xFF	; 255
    6a8e:	81 1d       	adc	r24, r1
    6a90:	81 1d       	adc	r24, r1
    6a92:	08 95       	ret

00006a94 <__fp_inf>:
    6a94:	97 f9       	bld	r25, 7
    6a96:	9f 67       	ori	r25, 0x7F	; 127
    6a98:	80 e8       	ldi	r24, 0x80	; 128
    6a9a:	70 e0       	ldi	r23, 0x00	; 0
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
    6a9e:	08 95       	ret

00006aa0 <__fp_nan>:
    6aa0:	9f ef       	ldi	r25, 0xFF	; 255
    6aa2:	80 ec       	ldi	r24, 0xC0	; 192
    6aa4:	08 95       	ret

00006aa6 <__fp_pscA>:
    6aa6:	00 24       	eor	r0, r0
    6aa8:	0a 94       	dec	r0
    6aaa:	16 16       	cp	r1, r22
    6aac:	17 06       	cpc	r1, r23
    6aae:	18 06       	cpc	r1, r24
    6ab0:	09 06       	cpc	r0, r25
    6ab2:	08 95       	ret

00006ab4 <__fp_pscB>:
    6ab4:	00 24       	eor	r0, r0
    6ab6:	0a 94       	dec	r0
    6ab8:	12 16       	cp	r1, r18
    6aba:	13 06       	cpc	r1, r19
    6abc:	14 06       	cpc	r1, r20
    6abe:	05 06       	cpc	r0, r21
    6ac0:	08 95       	ret

00006ac2 <__fp_round>:
    6ac2:	09 2e       	mov	r0, r25
    6ac4:	03 94       	inc	r0
    6ac6:	00 0c       	add	r0, r0
    6ac8:	11 f4       	brne	.+4      	; 0x6ace <__fp_round+0xc>
    6aca:	88 23       	and	r24, r24
    6acc:	52 f0       	brmi	.+20     	; 0x6ae2 <__fp_round+0x20>
    6ace:	bb 0f       	add	r27, r27
    6ad0:	40 f4       	brcc	.+16     	; 0x6ae2 <__fp_round+0x20>
    6ad2:	bf 2b       	or	r27, r31
    6ad4:	11 f4       	brne	.+4      	; 0x6ada <__fp_round+0x18>
    6ad6:	60 ff       	sbrs	r22, 0
    6ad8:	04 c0       	rjmp	.+8      	; 0x6ae2 <__fp_round+0x20>
    6ada:	6f 5f       	subi	r22, 0xFF	; 255
    6adc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ade:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae2:	08 95       	ret

00006ae4 <__fp_split3>:
    6ae4:	57 fd       	sbrc	r21, 7
    6ae6:	90 58       	subi	r25, 0x80	; 128
    6ae8:	44 0f       	add	r20, r20
    6aea:	55 1f       	adc	r21, r21
    6aec:	59 f0       	breq	.+22     	; 0x6b04 <__fp_splitA+0x10>
    6aee:	5f 3f       	cpi	r21, 0xFF	; 255
    6af0:	71 f0       	breq	.+28     	; 0x6b0e <__fp_splitA+0x1a>
    6af2:	47 95       	ror	r20

00006af4 <__fp_splitA>:
    6af4:	88 0f       	add	r24, r24
    6af6:	97 fb       	bst	r25, 7
    6af8:	99 1f       	adc	r25, r25
    6afa:	61 f0       	breq	.+24     	; 0x6b14 <__fp_splitA+0x20>
    6afc:	9f 3f       	cpi	r25, 0xFF	; 255
    6afe:	79 f0       	breq	.+30     	; 0x6b1e <__fp_splitA+0x2a>
    6b00:	87 95       	ror	r24
    6b02:	08 95       	ret
    6b04:	12 16       	cp	r1, r18
    6b06:	13 06       	cpc	r1, r19
    6b08:	14 06       	cpc	r1, r20
    6b0a:	55 1f       	adc	r21, r21
    6b0c:	f2 cf       	rjmp	.-28     	; 0x6af2 <__fp_split3+0xe>
    6b0e:	46 95       	lsr	r20
    6b10:	f1 df       	rcall	.-30     	; 0x6af4 <__fp_splitA>
    6b12:	08 c0       	rjmp	.+16     	; 0x6b24 <__fp_splitA+0x30>
    6b14:	16 16       	cp	r1, r22
    6b16:	17 06       	cpc	r1, r23
    6b18:	18 06       	cpc	r1, r24
    6b1a:	99 1f       	adc	r25, r25
    6b1c:	f1 cf       	rjmp	.-30     	; 0x6b00 <__fp_splitA+0xc>
    6b1e:	86 95       	lsr	r24
    6b20:	71 05       	cpc	r23, r1
    6b22:	61 05       	cpc	r22, r1
    6b24:	08 94       	sec
    6b26:	08 95       	ret

00006b28 <__fp_zero>:
    6b28:	e8 94       	clt

00006b2a <__fp_szero>:
    6b2a:	bb 27       	eor	r27, r27
    6b2c:	66 27       	eor	r22, r22
    6b2e:	77 27       	eor	r23, r23
    6b30:	cb 01       	movw	r24, r22
    6b32:	97 f9       	bld	r25, 7
    6b34:	08 95       	ret

00006b36 <__gesf2>:
    6b36:	8a df       	rcall	.-236    	; 0x6a4c <__fp_cmp>
    6b38:	08 f4       	brcc	.+2      	; 0x6b3c <__gesf2+0x6>
    6b3a:	8f ef       	ldi	r24, 0xFF	; 255
    6b3c:	08 95       	ret

00006b3e <__mulsf3>:
    6b3e:	0b d0       	rcall	.+22     	; 0x6b56 <__mulsf3x>
    6b40:	c0 cf       	rjmp	.-128    	; 0x6ac2 <__fp_round>
    6b42:	b1 df       	rcall	.-158    	; 0x6aa6 <__fp_pscA>
    6b44:	28 f0       	brcs	.+10     	; 0x6b50 <__mulsf3+0x12>
    6b46:	b6 df       	rcall	.-148    	; 0x6ab4 <__fp_pscB>
    6b48:	18 f0       	brcs	.+6      	; 0x6b50 <__mulsf3+0x12>
    6b4a:	95 23       	and	r25, r21
    6b4c:	09 f0       	breq	.+2      	; 0x6b50 <__mulsf3+0x12>
    6b4e:	a2 cf       	rjmp	.-188    	; 0x6a94 <__fp_inf>
    6b50:	a7 cf       	rjmp	.-178    	; 0x6aa0 <__fp_nan>
    6b52:	11 24       	eor	r1, r1
    6b54:	ea cf       	rjmp	.-44     	; 0x6b2a <__fp_szero>

00006b56 <__mulsf3x>:
    6b56:	c6 df       	rcall	.-116    	; 0x6ae4 <__fp_split3>
    6b58:	a0 f3       	brcs	.-24     	; 0x6b42 <__mulsf3+0x4>

00006b5a <__mulsf3_pse>:
    6b5a:	95 9f       	mul	r25, r21
    6b5c:	d1 f3       	breq	.-12     	; 0x6b52 <__mulsf3+0x14>
    6b5e:	95 0f       	add	r25, r21
    6b60:	50 e0       	ldi	r21, 0x00	; 0
    6b62:	55 1f       	adc	r21, r21
    6b64:	62 9f       	mul	r22, r18
    6b66:	f0 01       	movw	r30, r0
    6b68:	72 9f       	mul	r23, r18
    6b6a:	bb 27       	eor	r27, r27
    6b6c:	f0 0d       	add	r31, r0
    6b6e:	b1 1d       	adc	r27, r1
    6b70:	63 9f       	mul	r22, r19
    6b72:	aa 27       	eor	r26, r26
    6b74:	f0 0d       	add	r31, r0
    6b76:	b1 1d       	adc	r27, r1
    6b78:	aa 1f       	adc	r26, r26
    6b7a:	64 9f       	mul	r22, r20
    6b7c:	66 27       	eor	r22, r22
    6b7e:	b0 0d       	add	r27, r0
    6b80:	a1 1d       	adc	r26, r1
    6b82:	66 1f       	adc	r22, r22
    6b84:	82 9f       	mul	r24, r18
    6b86:	22 27       	eor	r18, r18
    6b88:	b0 0d       	add	r27, r0
    6b8a:	a1 1d       	adc	r26, r1
    6b8c:	62 1f       	adc	r22, r18
    6b8e:	73 9f       	mul	r23, r19
    6b90:	b0 0d       	add	r27, r0
    6b92:	a1 1d       	adc	r26, r1
    6b94:	62 1f       	adc	r22, r18
    6b96:	83 9f       	mul	r24, r19
    6b98:	a0 0d       	add	r26, r0
    6b9a:	61 1d       	adc	r22, r1
    6b9c:	22 1f       	adc	r18, r18
    6b9e:	74 9f       	mul	r23, r20
    6ba0:	33 27       	eor	r19, r19
    6ba2:	a0 0d       	add	r26, r0
    6ba4:	61 1d       	adc	r22, r1
    6ba6:	23 1f       	adc	r18, r19
    6ba8:	84 9f       	mul	r24, r20
    6baa:	60 0d       	add	r22, r0
    6bac:	21 1d       	adc	r18, r1
    6bae:	82 2f       	mov	r24, r18
    6bb0:	76 2f       	mov	r23, r22
    6bb2:	6a 2f       	mov	r22, r26
    6bb4:	11 24       	eor	r1, r1
    6bb6:	9f 57       	subi	r25, 0x7F	; 127
    6bb8:	50 40       	sbci	r21, 0x00	; 0
    6bba:	8a f0       	brmi	.+34     	; 0x6bde <__mulsf3_pse+0x84>
    6bbc:	e1 f0       	breq	.+56     	; 0x6bf6 <__mulsf3_pse+0x9c>
    6bbe:	88 23       	and	r24, r24
    6bc0:	4a f0       	brmi	.+18     	; 0x6bd4 <__mulsf3_pse+0x7a>
    6bc2:	ee 0f       	add	r30, r30
    6bc4:	ff 1f       	adc	r31, r31
    6bc6:	bb 1f       	adc	r27, r27
    6bc8:	66 1f       	adc	r22, r22
    6bca:	77 1f       	adc	r23, r23
    6bcc:	88 1f       	adc	r24, r24
    6bce:	91 50       	subi	r25, 0x01	; 1
    6bd0:	50 40       	sbci	r21, 0x00	; 0
    6bd2:	a9 f7       	brne	.-22     	; 0x6bbe <__mulsf3_pse+0x64>
    6bd4:	9e 3f       	cpi	r25, 0xFE	; 254
    6bd6:	51 05       	cpc	r21, r1
    6bd8:	70 f0       	brcs	.+28     	; 0x6bf6 <__mulsf3_pse+0x9c>
    6bda:	5c cf       	rjmp	.-328    	; 0x6a94 <__fp_inf>
    6bdc:	a6 cf       	rjmp	.-180    	; 0x6b2a <__fp_szero>
    6bde:	5f 3f       	cpi	r21, 0xFF	; 255
    6be0:	ec f3       	brlt	.-6      	; 0x6bdc <__mulsf3_pse+0x82>
    6be2:	98 3e       	cpi	r25, 0xE8	; 232
    6be4:	dc f3       	brlt	.-10     	; 0x6bdc <__mulsf3_pse+0x82>
    6be6:	86 95       	lsr	r24
    6be8:	77 95       	ror	r23
    6bea:	67 95       	ror	r22
    6bec:	b7 95       	ror	r27
    6bee:	f7 95       	ror	r31
    6bf0:	e7 95       	ror	r30
    6bf2:	9f 5f       	subi	r25, 0xFF	; 255
    6bf4:	c1 f7       	brne	.-16     	; 0x6be6 <__mulsf3_pse+0x8c>
    6bf6:	fe 2b       	or	r31, r30
    6bf8:	88 0f       	add	r24, r24
    6bfa:	91 1d       	adc	r25, r1
    6bfc:	96 95       	lsr	r25
    6bfe:	87 95       	ror	r24
    6c00:	97 f9       	bld	r25, 7
    6c02:	08 95       	ret

00006c04 <__udivmodhi4>:
    6c04:	aa 1b       	sub	r26, r26
    6c06:	bb 1b       	sub	r27, r27
    6c08:	51 e1       	ldi	r21, 0x11	; 17
    6c0a:	07 c0       	rjmp	.+14     	; 0x6c1a <__udivmodhi4_ep>

00006c0c <__udivmodhi4_loop>:
    6c0c:	aa 1f       	adc	r26, r26
    6c0e:	bb 1f       	adc	r27, r27
    6c10:	a6 17       	cp	r26, r22
    6c12:	b7 07       	cpc	r27, r23
    6c14:	10 f0       	brcs	.+4      	; 0x6c1a <__udivmodhi4_ep>
    6c16:	a6 1b       	sub	r26, r22
    6c18:	b7 0b       	sbc	r27, r23

00006c1a <__udivmodhi4_ep>:
    6c1a:	88 1f       	adc	r24, r24
    6c1c:	99 1f       	adc	r25, r25
    6c1e:	5a 95       	dec	r21
    6c20:	a9 f7       	brne	.-22     	; 0x6c0c <__udivmodhi4_loop>
    6c22:	80 95       	com	r24
    6c24:	90 95       	com	r25
    6c26:	bc 01       	movw	r22, r24
    6c28:	cd 01       	movw	r24, r26
    6c2a:	08 95       	ret

00006c2c <_exit>:
    6c2c:	f8 94       	cli

00006c2e <__stop_program>:
    6c2e:	ff cf       	rjmp	.-2      	; 0x6c2e <__stop_program>
